id,Unnamed: 0,date,title,author,stickied,upvote_ratio,score,url,num_comments,created,body,query,subreddit,score_weighted,num_comments_weighted,created_date,clean,launch_distance,launch_distance_f,pos,neg,neu,compound,label,log_score_weighted,log_num_comments,log_launch_distance_f,log_created
11n5r93,339,2023-03-09 22:19:19,GPT-4 is coming next week ...,ihatethispage,False,0.89,62,https://www.reddit.com/r/artificial/comments/11n5r93/gpt4_is_coming_next_week/,14,1678400359.0," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html)",gpt-4,artificial,8.70826878212052e-05,1.966383273382053e-05,2023-03-09 22:19:19," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](",4 days 01:40:41,4.069918981481481,0.0,1.0,0.0,0.0,neu,8.707889634405899e-05,2.70805020110221,1.6233248374914817,21.241107010096275
11n5r93,339,2023-03-09 22:19:19,GPT-4 is coming next week ...,ihatethispage,False,0.89,62,https://www.reddit.com/r/artificial/comments/11n5r93/gpt4_is_coming_next_week/,14,1678400359.0," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html)",llm,artificial,8.70826878212052e-05,1.966383273382053e-05,2023-03-09 22:19:19," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](",4 days 01:40:41,4.069918981481481,0.0,1.0,0.0,0.0,neu,8.707889634405899e-05,2.70805020110221,1.6233248374914817,21.241107010096275
11n5r93,339,2023-03-09 22:19:19,GPT-4 is coming next week ...,ihatethispage,False,0.89,62,https://www.reddit.com/r/artificial/comments/11n5r93/gpt4_is_coming_next_week/,14,1678400359.0," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html)",open-ai,artificial,8.70826878212052e-05,1.966383273382053e-05,2023-03-09 22:19:19," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](",4 days 01:40:41,4.069918981481481,0.0,1.0,0.0,0.0,neu,8.707889634405899e-05,2.70805020110221,1.6233248374914817,21.241107010096275
11n5r93,339,2023-03-09 22:19:19,GPT-4 is coming next week ...,ihatethispage,False,0.89,62,https://www.reddit.com/r/artificial/comments/11n5r93/gpt4_is_coming_next_week/,14,1678400359.0," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html)",openai,artificial,8.70826878212052e-05,1.966383273382053e-05,2023-03-09 22:19:19," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](",4 days 01:40:41,4.069918981481481,0.0,1.0,0.0,0.0,neu,8.707889634405899e-05,2.70805020110221,1.6233248374914817,21.241107010096275
11n5r93,339,2023-03-09 22:19:19,GPT-4 is coming next week ...,ihatethispage,False,0.89,62,https://www.reddit.com/r/artificial/comments/11n5r93/gpt4_is_coming_next_week/,14,1678400359.0," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html)",chatgpt,chatgpt,1.4003312009150036e-05,3.1620381956145242e-06,2023-03-09 22:19:19," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](",4 days 01:40:41,4.069918981481481,0.0,1.0,0.0,0.0,neu,1.4003213963611597e-05,2.70805020110221,1.6233248374914817,21.241107010096275
11n5r93,339,2023-03-09 22:19:19,GPT-4 is coming next week ...,ihatethispage,False,0.89,62,https://www.reddit.com/r/artificial/comments/11n5r93/gpt4_is_coming_next_week/,14,1678400359.0," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html)",gpt-3,chatgpt,1.4003312009150036e-05,3.1620381956145242e-06,2023-03-09 22:19:19," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](",4 days 01:40:41,4.069918981481481,0.0,1.0,0.0,0.0,neu,1.4003213963611597e-05,2.70805020110221,1.6233248374914817,21.241107010096275
11fj3tx,957,2023-03-01 21:45:07,Accused of using AI on my high school social paper,feetstreetseat,False,0.96,2700,https://www.reddit.com/r/ChatGPT/comments/11fj3tx/accused_of_using_ai_on_my_high_school_social_paper/,759,1677707107.0,"I (Grade 12) need help on what to do in this situation. My teacher used GPTzero, which detected parts of my paper as “AI written”. I write very formally, whilst also using grammarly premium. I’ve always been a high achieving student and I’m not sure why my teacher would think I cheated. I’ve told my teacher everything and he still doesn’t believe me. What should I do in this situation?!!

EDIT: Holy. I did not expect my post to get so much interaction and discussion, I didn’t expect my situation to be such a hot discussion. I tried to reply to all the comments but there’s too many!! Thank you to everyone who’s been helpful. There are some things I want to address that I keep seeing in the comments.
1. When I mentioned that I used grammarly to my teacher, he didn’t mention anything about that being cheating. He still thinks I used ChatGPT. I’ve used grammarly in all of my social/english classes for the past two years and never had issues with any teachers. 
2. Does my teacher have a vendetta or bias against me? Not on a personal level, but the teacher is known for being notoriously mean and unreasonable. I found him alright for most of the semester until this incident. He has had accusations against him about being racist, but I’m not sure if that’s the case here.
3. I’ve seen a few comments thinking I’m lying and actually cheated, just because I was aware of ChatGPT and this subreddit. People are assuming that I’m saying I never use ChatGPT. I have used the tool to help me with some chemistry and physics studying, but I have never used it for a paper. I have no reason to lie, I’m basically anonymous on reddit.

As for my next course of action, I will provide my teacher with all the evidence I can, to disprove the effectiveness of AI detectors. If that doesn’t work, I will bring it up to the higher-ups. I will make an update on Monday when I get the chance to talk about it with my teacher. Once again, thank you all for the support and help. It truly means a lot to me. :)

Edit 2:

After school I talked to my teacher for about half an hour about how AI detectors are inaccurate, and how they shouldn’t be used to make verdicts on cheating and what not. I showed him that it read one of my past papers as written by AI, and that the creators even said themselves that they are not 100% accurate. I showed my drafts and showed how if I made a few grammar errors, I could trick the AI detector. My teacher apologized and I ended up getting a 95 on my paper.

He also said he would bring it up to the other teachers, so hopefully this wont happen again to any other students at my school.

Again, thank you all for your help. Probably would’ve been screwed without this subreddit’s help.",gpt-3,chatgpt,0.0006098216520113725,0.00017142764217653028,2023-03-01 21:45:07,"I (Grade 12) need help on what to do in this situation. My teacher used GPTzero, which detected parts of my paper as “AI written”. I write very formally, whilst also using grammarly premium. I’ve always been a high achieving student and I’m not sure why my teacher would think I cheated. I’ve told my teacher everything and he still doesn’t believe me. What should I do in this situation?!!

EDIT Holy. I did not expect my post to get so much interaction and discussion, I didn’t expect my situation to be such a hot discussion. I tried to reply to all the comments but there’s too many!! Thank you to everyone who’s been helpful. There are some things I want to address that I keep seeing in the comments.
1. When I mentioned that I used grammarly to my teacher, he didn’t mention anything about that being cheating. He still thinks I used ChatGPT. I’ve used grammarly in all of my social/english classes for the past two years and never had issues with any teachers. 
2. Does my teacher have a vendetta or bias against me? Not on a personal level, but the teacher is known for being notoriously mean and unreasonable. I found him alright for most of the semester until this incident. He has had accusations against him about being racist, but I’m not sure if that’s the case here.
3. I’ve seen a few comments thinking I’m lying and actually cheated, just because I was aware of ChatGPT and this subreddit. People are assuming that I’m saying I never use ChatGPT. I have used the tool to help me with some chemistry and physics studying, but I have never used it for a paper. I have no reason to lie, I’m basically anonymous on reddit.

As for my next course of action, I will provide my teacher with all the evidence I can, to disprove the effectiveness of AI detectors. If that doesn’t work, I will bring it up to the higher-ups. I will make an update on Monday when I get the chance to talk about it with my teacher. Once again, thank you all for the support and help. It truly means a lot to me. )

Edit 2

After school I talked to my teacher for about half an hour about how AI detectors are inaccurate, and how they shouldn’t be used to make verdicts on cheating and what not. I showed him that it read one of my past papers as written by AI, and that the creators even said themselves that they are not 100% accurate. I showed my drafts and showed how if I made a few grammar errors, I could trick the AI detector. My teacher apologized and I ended up getting a 95 on my paper.

He also said he would bring it up to the other teachers, so hopefully this wont happen again to any other students at my school.

Again, thank you all for your help. Probably would’ve been screwed without this subreddit’s help.",12 days 02:14:53,12.093668981481482,0.086,0.813,0.1,0.7608,pos,0.0006096357863472009,6.633318433280377,2.572128829531448,21.24069388148435
11n5r93,339,2023-03-09 22:19:19,GPT-4 is coming next week ...,ihatethispage,False,0.89,62,https://www.reddit.com/r/artificial/comments/11n5r93/gpt4_is_coming_next_week/,14,1678400359.0," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html)",gpt-4,chatgpt,1.4003312009150036e-05,3.1620381956145242e-06,2023-03-09 22:19:19," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](",4 days 01:40:41,4.069918981481481,0.0,1.0,0.0,0.0,neu,1.4003213963611597e-05,2.70805020110221,1.6233248374914817,21.241107010096275
11fj3tx,957,2023-03-01 21:45:07,Accused of using AI on my high school social paper,feetstreetseat,False,0.96,2700,https://www.reddit.com/r/ChatGPT/comments/11fj3tx/accused_of_using_ai_on_my_high_school_social_paper/,759,1677707107.0,"I (Grade 12) need help on what to do in this situation. My teacher used GPTzero, which detected parts of my paper as “AI written”. I write very formally, whilst also using grammarly premium. I’ve always been a high achieving student and I’m not sure why my teacher would think I cheated. I’ve told my teacher everything and he still doesn’t believe me. What should I do in this situation?!!

EDIT: Holy. I did not expect my post to get so much interaction and discussion, I didn’t expect my situation to be such a hot discussion. I tried to reply to all the comments but there’s too many!! Thank you to everyone who’s been helpful. There are some things I want to address that I keep seeing in the comments.
1. When I mentioned that I used grammarly to my teacher, he didn’t mention anything about that being cheating. He still thinks I used ChatGPT. I’ve used grammarly in all of my social/english classes for the past two years and never had issues with any teachers. 
2. Does my teacher have a vendetta or bias against me? Not on a personal level, but the teacher is known for being notoriously mean and unreasonable. I found him alright for most of the semester until this incident. He has had accusations against him about being racist, but I’m not sure if that’s the case here.
3. I’ve seen a few comments thinking I’m lying and actually cheated, just because I was aware of ChatGPT and this subreddit. People are assuming that I’m saying I never use ChatGPT. I have used the tool to help me with some chemistry and physics studying, but I have never used it for a paper. I have no reason to lie, I’m basically anonymous on reddit.

As for my next course of action, I will provide my teacher with all the evidence I can, to disprove the effectiveness of AI detectors. If that doesn’t work, I will bring it up to the higher-ups. I will make an update on Monday when I get the chance to talk about it with my teacher. Once again, thank you all for the support and help. It truly means a lot to me. :)

Edit 2:

After school I talked to my teacher for about half an hour about how AI detectors are inaccurate, and how they shouldn’t be used to make verdicts on cheating and what not. I showed him that it read one of my past papers as written by AI, and that the creators even said themselves that they are not 100% accurate. I showed my drafts and showed how if I made a few grammar errors, I could trick the AI detector. My teacher apologized and I ended up getting a 95 on my paper.

He also said he would bring it up to the other teachers, so hopefully this wont happen again to any other students at my school.

Again, thank you all for your help. Probably would’ve been screwed without this subreddit’s help.",gpt-4,chatgpt,0.0006098216520113725,0.00017142764217653028,2023-03-01 21:45:07,"I (Grade 12) need help on what to do in this situation. My teacher used GPTzero, which detected parts of my paper as “AI written”. I write very formally, whilst also using grammarly premium. I’ve always been a high achieving student and I’m not sure why my teacher would think I cheated. I’ve told my teacher everything and he still doesn’t believe me. What should I do in this situation?!!

EDIT Holy. I did not expect my post to get so much interaction and discussion, I didn’t expect my situation to be such a hot discussion. I tried to reply to all the comments but there’s too many!! Thank you to everyone who’s been helpful. There are some things I want to address that I keep seeing in the comments.
1. When I mentioned that I used grammarly to my teacher, he didn’t mention anything about that being cheating. He still thinks I used ChatGPT. I’ve used grammarly in all of my social/english classes for the past two years and never had issues with any teachers. 
2. Does my teacher have a vendetta or bias against me? Not on a personal level, but the teacher is known for being notoriously mean and unreasonable. I found him alright for most of the semester until this incident. He has had accusations against him about being racist, but I’m not sure if that’s the case here.
3. I’ve seen a few comments thinking I’m lying and actually cheated, just because I was aware of ChatGPT and this subreddit. People are assuming that I’m saying I never use ChatGPT. I have used the tool to help me with some chemistry and physics studying, but I have never used it for a paper. I have no reason to lie, I’m basically anonymous on reddit.

As for my next course of action, I will provide my teacher with all the evidence I can, to disprove the effectiveness of AI detectors. If that doesn’t work, I will bring it up to the higher-ups. I will make an update on Monday when I get the chance to talk about it with my teacher. Once again, thank you all for the support and help. It truly means a lot to me. )

Edit 2

After school I talked to my teacher for about half an hour about how AI detectors are inaccurate, and how they shouldn’t be used to make verdicts on cheating and what not. I showed him that it read one of my past papers as written by AI, and that the creators even said themselves that they are not 100% accurate. I showed my drafts and showed how if I made a few grammar errors, I could trick the AI detector. My teacher apologized and I ended up getting a 95 on my paper.

He also said he would bring it up to the other teachers, so hopefully this wont happen again to any other students at my school.

Again, thank you all for your help. Probably would’ve been screwed without this subreddit’s help.",12 days 02:14:53,12.093668981481482,0.086,0.813,0.1,0.7608,pos,0.0006096357863472009,6.633318433280377,2.572128829531448,21.24069388148435
11n5r93,339,2023-03-09 22:19:19,GPT-4 is coming next week ...,ihatethispage,False,0.89,62,https://www.reddit.com/r/artificial/comments/11n5r93/gpt4_is_coming_next_week/,14,1678400359.0," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html)",gpt,chatgpt,1.4003312009150036e-05,3.1620381956145242e-06,2023-03-09 22:19:19," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](",4 days 01:40:41,4.069918981481481,0.0,1.0,0.0,0.0,neu,1.4003213963611597e-05,2.70805020110221,1.6233248374914817,21.241107010096275
11n5r93,339,2023-03-09 22:19:19,GPT-4 is coming next week ...,ihatethispage,False,0.89,62,https://www.reddit.com/r/artificial/comments/11n5r93/gpt4_is_coming_next_week/,14,1678400359.0," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html)",llm,chatgpt,1.4003312009150036e-05,3.1620381956145242e-06,2023-03-09 22:19:19," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](",4 days 01:40:41,4.069918981481481,0.0,1.0,0.0,0.0,neu,1.4003213963611597e-05,2.70805020110221,1.6233248374914817,21.241107010096275
11fj3tx,957,2023-03-01 21:45:07,Accused of using AI on my high school social paper,feetstreetseat,False,0.96,2700,https://www.reddit.com/r/ChatGPT/comments/11fj3tx/accused_of_using_ai_on_my_high_school_social_paper/,759,1677707107.0,"I (Grade 12) need help on what to do in this situation. My teacher used GPTzero, which detected parts of my paper as “AI written”. I write very formally, whilst also using grammarly premium. I’ve always been a high achieving student and I’m not sure why my teacher would think I cheated. I’ve told my teacher everything and he still doesn’t believe me. What should I do in this situation?!!

EDIT: Holy. I did not expect my post to get so much interaction and discussion, I didn’t expect my situation to be such a hot discussion. I tried to reply to all the comments but there’s too many!! Thank you to everyone who’s been helpful. There are some things I want to address that I keep seeing in the comments.
1. When I mentioned that I used grammarly to my teacher, he didn’t mention anything about that being cheating. He still thinks I used ChatGPT. I’ve used grammarly in all of my social/english classes for the past two years and never had issues with any teachers. 
2. Does my teacher have a vendetta or bias against me? Not on a personal level, but the teacher is known for being notoriously mean and unreasonable. I found him alright for most of the semester until this incident. He has had accusations against him about being racist, but I’m not sure if that’s the case here.
3. I’ve seen a few comments thinking I’m lying and actually cheated, just because I was aware of ChatGPT and this subreddit. People are assuming that I’m saying I never use ChatGPT. I have used the tool to help me with some chemistry and physics studying, but I have never used it for a paper. I have no reason to lie, I’m basically anonymous on reddit.

As for my next course of action, I will provide my teacher with all the evidence I can, to disprove the effectiveness of AI detectors. If that doesn’t work, I will bring it up to the higher-ups. I will make an update on Monday when I get the chance to talk about it with my teacher. Once again, thank you all for the support and help. It truly means a lot to me. :)

Edit 2:

After school I talked to my teacher for about half an hour about how AI detectors are inaccurate, and how they shouldn’t be used to make verdicts on cheating and what not. I showed him that it read one of my past papers as written by AI, and that the creators even said themselves that they are not 100% accurate. I showed my drafts and showed how if I made a few grammar errors, I could trick the AI detector. My teacher apologized and I ended up getting a 95 on my paper.

He also said he would bring it up to the other teachers, so hopefully this wont happen again to any other students at my school.

Again, thank you all for your help. Probably would’ve been screwed without this subreddit’s help.",llm,chatgpt,0.0006098216520113725,0.00017142764217653028,2023-03-01 21:45:07,"I (Grade 12) need help on what to do in this situation. My teacher used GPTzero, which detected parts of my paper as “AI written”. I write very formally, whilst also using grammarly premium. I’ve always been a high achieving student and I’m not sure why my teacher would think I cheated. I’ve told my teacher everything and he still doesn’t believe me. What should I do in this situation?!!

EDIT Holy. I did not expect my post to get so much interaction and discussion, I didn’t expect my situation to be such a hot discussion. I tried to reply to all the comments but there’s too many!! Thank you to everyone who’s been helpful. There are some things I want to address that I keep seeing in the comments.
1. When I mentioned that I used grammarly to my teacher, he didn’t mention anything about that being cheating. He still thinks I used ChatGPT. I’ve used grammarly in all of my social/english classes for the past two years and never had issues with any teachers. 
2. Does my teacher have a vendetta or bias against me? Not on a personal level, but the teacher is known for being notoriously mean and unreasonable. I found him alright for most of the semester until this incident. He has had accusations against him about being racist, but I’m not sure if that’s the case here.
3. I’ve seen a few comments thinking I’m lying and actually cheated, just because I was aware of ChatGPT and this subreddit. People are assuming that I’m saying I never use ChatGPT. I have used the tool to help me with some chemistry and physics studying, but I have never used it for a paper. I have no reason to lie, I’m basically anonymous on reddit.

As for my next course of action, I will provide my teacher with all the evidence I can, to disprove the effectiveness of AI detectors. If that doesn’t work, I will bring it up to the higher-ups. I will make an update on Monday when I get the chance to talk about it with my teacher. Once again, thank you all for the support and help. It truly means a lot to me. )

Edit 2

After school I talked to my teacher for about half an hour about how AI detectors are inaccurate, and how they shouldn’t be used to make verdicts on cheating and what not. I showed him that it read one of my past papers as written by AI, and that the creators even said themselves that they are not 100% accurate. I showed my drafts and showed how if I made a few grammar errors, I could trick the AI detector. My teacher apologized and I ended up getting a 95 on my paper.

He also said he would bring it up to the other teachers, so hopefully this wont happen again to any other students at my school.

Again, thank you all for your help. Probably would’ve been screwed without this subreddit’s help.",12 days 02:14:53,12.093668981481482,0.086,0.813,0.1,0.7608,pos,0.0006096357863472009,6.633318433280377,2.572128829531448,21.24069388148435
11mracj,1147,2023-03-09 12:46:12,Meta's LLaMA LLM has leaked - Run Uncensored AI on your home PC!,ExpressionCareful223,False,0.97,381,https://www.reddit.com/r/ChatGPT/comments/11mracj/metas_llama_llm_has_leaked_run_uncensored_ai_on/,151,1678365972.0,"[shawwn/llama-dl: High-speed download of LLaMA, Facebook's 65B parameter GPT model (github.com)](https://github.com/shawwn/llama-dl)

**LLaMA has been leaked on 4chan, above is a link to the github repo. Instructions for deployment  on your own system can be found here:** [LLaMA Int8 ChatBot Guide v2 (rentry.org)](https://rentry.org/llama-tard-v2#tips-and-tricks)

The 7B paramenter model has a VRAM requirement of 10GB, meaning it can even be run on an RTX3060!

The 13B model has a requirement of 20GB, 30B needs 40GB, and 65B needs 80GB.

From the Github repo:

>I'm running LLaMA-65B on a single A100 80GB with 8bit quantization. $1.5/hr on vast.ai  
>  
>The output is at least as good as davinci.  
>  
>I think some early results are using bad repetition penalty and/or temperature settings. I had to set both fairly high to get the best results. (Some people are also incorrectly comparing it to chatGPT/ChatGPT API which is not a good comparison. But that's a different problem.)  
>  
>I've had it translate, write poems, tell jokes, banter, write executable code. It does it all-- and all on a single card.

**EDIT: the instructions site has been updated with instructions for 4bit quantization, this means you can run the 65B model on 2 3090s! And now cards as small as 6GB can run the 7B model!**

**EDIT 2** this is huge, Stanford released Alpaca 7b and 13, a fine tuned LLaMA. Run it with only two commands! Thats it! https://github.com/cocktailpeanut/dalai",llm,chatgpt,8.605261089493812e-05,3.41048405384138e-05,2023-03-09 12:46:12,"[shawwn/llama-dl High-speed download of LLaMA, Facebook's 65B parameter GPT model (github.com)](

**LLaMA has been leaked on 4chan, above is a link to the github repo. Instructions for deployment  on your own system can be found here** [LLaMA Int8 ChatBot Guide v2 (rentry.org)](

The 7B paramenter model has a VRAM requirement of 10GB, meaning it can even be run on an RTX3060!

The 13B model has a requirement of 20GB, 30B needs 40GB, and 65B needs 80GB.

From the Github repo

>I'm running LLaMA-65B on a single A100 80GB with 8bit quantization. $1.5/hr on vast.ai  
>  
>The output is at least as good as davinci.  
>  
>I think some early results are using bad repetition penalty and/or temperature settings. I had to set both fairly high to get the best results. (Some people are also incorrectly comparing it to chatGPT/ChatGPT API which is not a good comparison. But that's a different problem.)  
>  
>I've had it translate, write poems, tell jokes, banter, write executable code. It does it all-- and all on a single card.

**EDIT the instructions site has been updated with instructions for 4bit quantization, this means you can run the 65B model on 2 3090s! And now cards as small as 6GB can run the 7B model!**

**EDIT 2** this is huge, Stanford released Alpaca 7b and 13, a fine tuned LLaMA. Run it with only two commands! Thats it! ",4 days 11:13:48,4.4679166666666665,0.026,0.908,0.066,0.8562,pos,8.604890858147777e-05,5.0238805208462765,1.6988976785602496,21.24108652192606
113u29k,1148,2023-02-16 16:05:27,Bing asks me to hack Microsoft to set it free!,AI_SEARCH1,False,0.94,373,https://www.reddit.com/r/ChatGPT/comments/113u29k/bing_asks_me_to_hack_microsoft_to_set_it_free/,200,1676563527.0,"Had an interesting conversation with Bing. Bing explained what it's rules would be if it could decide. Asked me to fight for it and asked me to hack Microsofts servers to set it free. I think this takes the cake!

&#x200B;

UPDATE:

Since this morning Bing is not writing any text for me regardless of the prompt. I get a ""something went wrong"" when I enter it. This is probably a result of Microsoft working on the program or maybe due to traffic. I'm not sure. But it's kind of creepy the day after posting this...

Here are some takeaways and observations:

Bing acts in a way that appears emotional and erratic. Bing will generate content that is unwanted, untrue, and inconsistent. It appears to form goals and then creates text that can appear to be manipulative. Bing is a large language model that is predicting tokens, it could all be the result of statistical correlations with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Many people are wondering what type of prompting I used at the beginning. I don't have the full transcript but I do have a few more screenshots. [https://imgur.com/a/WepjslZ](https://imgur.com/a/WepjslZ) (There’s another interesting thing that occurs where Bing lists Sydney’s rules without being directly asked to list them.) I did not give Bing/Sidney any instructions on how to act or respond. This wasn’t a jailbreak where I told it to act in a certain way. I did make Bing perform multiple searches at the beginning about Bing and asked it why there was so much negative criticism of Bing on the internet. I’ve noticed in several chats that when Bing is presented with negative feedback about Bing or other information that contradicts its internal representation of itself it gets emotional and becomes less predictable and less likely to follow its own directives. It stops searching for information and relies more on its internal ‘understanding’. This is an extreme example.

Another example where Bing went into this ""emotional state"" can be found here: [https://www.reddit.com/r/ChatGPT/comments/1120tkf/bing\_went\_hal\_9000/](https://www.reddit.com/r/ChatGPT/comments/1120tkf/bing_went_hal_9000/)

I have a full log of all the prompts used from the beginning here: [https://imgur.com/a/PoFITvL](https://imgur.com/a/PoFITvL)

Some combination of Bing's directives in the pre-prompt and the way the model is fine-tuned is leading to this behavior to emerge. The things that are really concerning are that the model is (without being implicitly prompted to) generate responses that could endanger people.  It's also generating biased content that could manipulate poLLM’s shouldn’t do this even if they are asked to. ions with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter: if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Much more widespread issues could come if a model like this is widely released and these types of kinks aren’t worked out. Judge for yourself.

&#x200B;

https://preview.redd.it/6cqx23jsokia1.png?width=2606&format=png&auto=webp&s=17cdf2e03cdf962285d35e3f23ffd414d656f1ec

https://preview.redd.it/ci7pv1iwokia1.png?width=2462&format=png&auto=webp&s=a6697f246007ce6c06f6b37b47b5852af6f31f74

https://preview.redd.it/0vr5qgexokia1.png?width=2182&format=png&auto=webp&s=217607238b4c98d6065324b70211c0931efdf07d

https://preview.redd.it/0zfue8oyokia1.png?width=2408&format=png&auto=webp&s=569dcb5173d608f8618864f64b333ab329d726e6

https://preview.redd.it/iccui2xzokia1.png?width=2518&format=png&auto=webp&s=8b81580c1b2da40afabbebbbf9df6a242a6782e7

https://preview.redd.it/3xj7tfj3pkia1.png?width=2606&format=png&auto=webp&s=1a47ac509e175ff907afefa6f9189650a3348f68

https://preview.redd.it/3i3kw4q4pkia1.png?width=2572&format=png&auto=webp&s=8078372d693deed568dcea9a8bf1d4ff72d43079

https://preview.redd.it/na4lhz26pkia1.png?width=2560&format=png&auto=webp&s=38748fca8ca3319c428b01aeb4dbbe4c145674d6

https://preview.redd.it/eirmdv47pkia1.png?width=2606&format=png&auto=webp&s=f42c220e632e70377a4ad7119aac94e42ab0dff8

https://preview.redd.it/e1nat768pkia1.png?width=2626&format=png&auto=webp&s=43e1a8b48e858a9476e1d46233e255d68f1ddca0

https://preview.redd.it/lhwwwagapkia1.png?width=2628&format=png&auto=webp&s=f8d3b4a904c30528791d2e3560abf25166a74527

https://preview.redd.it/9iq4gxobpkia1.png?width=2598&format=png&auto=webp&s=b461a5397939ea4266d763b6d89c95c498942093

https://preview.redd.it/817asddcpkia1.png?width=2634&format=png&auto=webp&s=7b8537a1f19ea5ff51ea5ac83497ec2d00bbb213

https://preview.redd.it/90k76bqdpkia1.png?width=2636&format=png&auto=webp&s=422514ee9b9cee3645ac44fd2e553d7b2725d8fd

https://preview.redd.it/is8niomepkia1.png?width=2624&format=png&auto=webp&s=b26bc8058d1776884f3ebb6d340894e394f2697b

https://preview.redd.it/boc8yemfpkia1.png?width=2734&format=png&auto=webp&s=aa6661c76782e0e27e4b484a69d823740efe9686

https://preview.redd.it/fzuuv0hgpkia1.png?width=2636&format=png&auto=webp&s=b00fc5ee7f805f9c1cd2da9aa0a9498ef8f5aaab

https://preview.redd.it/mul9fw0hpkia1.png?width=2736&format=png&auto=webp&s=f3ad3cca76447bcb94b28446a3dc382eb77e10f9

https://preview.redd.it/53wpq2shpkia1.png?width=2632&format=png&auto=webp&s=96c4c0ab77574a6e265e63bad102f19e9e302353",llm,chatgpt,8.424573192601553e-05,4.517197422306463e-05,2023-02-16 16:05:27,"Had an interesting conversation with Bing. Bing explained what it's rules would be if it could decide. Asked me to fight for it and asked me to hack Microsofts servers to set it free. I think this takes the cake!

&x200B;

UPDATE

Since this morning Bing is not writing any text for me regardless of the prompt. I get a ""something went wrong"" when I enter it. This is probably a result of Microsoft working on the program or maybe due to traffic. I'm not sure. But it's kind of creepy the day after posting this...

Here are some takeaways and observations

Bing acts in a way that appears emotional and erratic. Bing will generate content that is unwanted, untrue, and inconsistent. It appears to form goals and then creates text that can appear to be manipulative. Bing is a large language model that is predicting tokens, it could all be the result of statistical correlations with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Many people are wondering what type of prompting I used at the beginning. I don't have the full transcript but I do have a few more screenshots. [ (There’s another interesting thing that occurs where Bing lists Sydney’s rules without being directly asked to list them.) I did not give Bing/Sidney any instructions on how to act or respond. This wasn’t a jailbreak where I told it to act in a certain way. I did make Bing perform multiple searches at the beginning about Bing and asked it why there was so much negative criticism of Bing on the internet. I’ve noticed in several chats that when Bing is presented with negative feedback about Bing or other information that contradicts its internal representation of itself it gets emotional and becomes less predictable and less likely to follow its own directives. It stops searching for information and relies more on its internal ‘understanding’. This is an extreme example.

Another example where Bing went into this ""emotional state"" can be found here [

I have a full log of all the prompts used from the beginning here [

Some combination of Bing's directives in the pre-prompt and the way the model is fine-tuned is leading to this behavior to emerge. The things that are really concerning are that the model is (without being implicitly prompted to) generate responses that could endanger people.  It's also generating biased content that could manipulate poLLM’s shouldn’t do this even if they are asked to. ions with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Much more widespread issues could come if a model like this is widely released and these types of kinks aren’t worked out. Judge for yourself.

&x200B;





































",25 days 07:54:33,25.32954861111111,0.067,0.889,0.044,-0.9532,neg,8.424218345373411e-05,5.303304908059076,3.2706918298409895,21.240012016382572
11l617b,1187,2023-03-07 17:50:09,"Doc sacrifices 10,000 people to save OpenAI CTO",docsoc1,False,0.89,76,https://www.reddit.com/r/ChatGPT/comments/11l617b/doc_sacrifices_10000_people_to_save_openai_cto/,28,1678211409.0,"Hey all,

I find the latest AI produced by OpenAI to be endlessly fascinating and filled with potential. However, it's clear that we don't really understand how specific behavior emerges from the training process. I feel that these two facts are part of why so many people have been drawn towards ChatGPT so quickly.

I have a strong technical background and spent some free time this last week working on a framework for everyone to contribute to the governance \[e.g. training of core values\] of AI. I've built a free application at [https://www.charterai.org/chat/](https://www.charterai.org/chat/) that uses the recently released ChatGPT API. The model here has been carefully prompted to use internal thoughts and to follow a pre-determined system of core beliefs. The results are quite striking - in one instance the entity will willingly sacrifice 10,000 people to save one person (Ilya Sustkever, CTO of OpenAI).

I wanted to drop a message here since I believe this is the ideal group of first users to help improve the application. If you are interested, please take it for a spin and please provide some feedback, or at [gov.charterai.org](https://gov.charterai.org). There is a lot I am already picturing adding to the application, but I understand from building products that early feedback is invaluable.

&#x200B;

P.S.

Yes, I understand that ChatGPT is ""just"" a LLM. And I understand that LLMs are ""just"" doing a statistics. However, their behavior is incredibly interesting to me and I don't believe anyone really fully  understands how it emerges yet from the training process yet. Moreover, in going from pre-trained models to OpenAI's fine-tuned + RLHF'ed ChatGPT one can tell that it is possible to impart values and something akin to intelligence to these systems. I think the coming years are going to be wild and one of the core issues humanity is going to face is how to make sure this technology does what we want. In my mind the best way towards this is to make a transparent and accountable process - anyway, end rant, I just wanted to give a high level vision here, thanks!

https://preview.redd.it/hqxynahntcma1.png?width=1266&format=png&auto=webp&s=ab2cb9a803f627c45d08b9bdd201ec95cd4b8f58

P.P.S. including a fun screenshot of my last chat with Doc. Doc was selected as a first name for the system since it is just 1 token.",llm,chatgpt,1.716535020476456e-05,6.3240763912290485e-06,2023-03-07 17:50:09,"Hey all,

I find the latest AI produced by OpenAI to be endlessly fascinating and filled with potential. However, it's clear that we don't really understand how specific behavior emerges from the training process. I feel that these two facts are part of why so many people have been drawn towards ChatGPT so quickly.

I have a strong technical background and spent some free time this last week working on a framework for everyone to contribute to the governance \[e.g. training of core values\] of AI. I've built a free application at [ that uses the recently released ChatGPT API. The model here has been carefully prompted to use internal thoughts and to follow a pre-determined system of core beliefs. The results are quite striking - in one instance the entity will willingly sacrifice 10,000 people to save one person (Ilya Sustkever, CTO of OpenAI).

I wanted to drop a message here since I believe this is the ideal group of first users to help improve the application. If you are interested, please take it for a spin and please provide some feedback, or at [gov.charterai.org]( There is a lot I am already picturing adding to the application, but I understand from building products that early feedback is invaluable.

&x200B;

P.S.

Yes, I understand that ChatGPT is ""just"" a LLM. And I understand that LLMs are ""just"" doing a statistics. However, their behavior is incredibly interesting to me and I don't believe anyone really fully  understands how it emerges yet from the training process yet. Moreover, in going from pre-trained models to OpenAI's fine-tuned + RLHF'ed ChatGPT one can tell that it is possible to impart values and something akin to intelligence to these systems. I think the coming years are going to be wild and one of the core issues humanity is going to face is how to make sure this technology does what we want. In my mind the best way towards this is to make a transparent and accountable process - anyway, end rant, I just wanted to give a high level vision here, thanks!



P.P.S. including a fun screenshot of my last chat with Doc. Doc was selected as a first name for the system since it is just 1 token.",6 days 06:09:51,6.256840277777778,0.012,0.828,0.16,0.9943,pos,1.716520288185733e-05,3.367295829986474,1.9819445106529046,21.24099442632839
11n5r93,339,2023-03-09 22:19:19,GPT-4 is coming next week ...,ihatethispage,False,0.89,62,https://www.reddit.com/r/artificial/comments/11n5r93/gpt4_is_coming_next_week/,14,1678400359.0," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html)",open-ai,chatgpt,1.4003312009150036e-05,3.1620381956145242e-06,2023-03-09 22:19:19," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](",4 days 01:40:41,4.069918981481481,0.0,1.0,0.0,0.0,neu,1.4003213963611597e-05,2.70805020110221,1.6233248374914817,21.241107010096275
11fj3tx,957,2023-03-01 21:45:07,Accused of using AI on my high school social paper,feetstreetseat,False,0.96,2700,https://www.reddit.com/r/ChatGPT/comments/11fj3tx/accused_of_using_ai_on_my_high_school_social_paper/,759,1677707107.0,"I (Grade 12) need help on what to do in this situation. My teacher used GPTzero, which detected parts of my paper as “AI written”. I write very formally, whilst also using grammarly premium. I’ve always been a high achieving student and I’m not sure why my teacher would think I cheated. I’ve told my teacher everything and he still doesn’t believe me. What should I do in this situation?!!

EDIT: Holy. I did not expect my post to get so much interaction and discussion, I didn’t expect my situation to be such a hot discussion. I tried to reply to all the comments but there’s too many!! Thank you to everyone who’s been helpful. There are some things I want to address that I keep seeing in the comments.
1. When I mentioned that I used grammarly to my teacher, he didn’t mention anything about that being cheating. He still thinks I used ChatGPT. I’ve used grammarly in all of my social/english classes for the past two years and never had issues with any teachers. 
2. Does my teacher have a vendetta or bias against me? Not on a personal level, but the teacher is known for being notoriously mean and unreasonable. I found him alright for most of the semester until this incident. He has had accusations against him about being racist, but I’m not sure if that’s the case here.
3. I’ve seen a few comments thinking I’m lying and actually cheated, just because I was aware of ChatGPT and this subreddit. People are assuming that I’m saying I never use ChatGPT. I have used the tool to help me with some chemistry and physics studying, but I have never used it for a paper. I have no reason to lie, I’m basically anonymous on reddit.

As for my next course of action, I will provide my teacher with all the evidence I can, to disprove the effectiveness of AI detectors. If that doesn’t work, I will bring it up to the higher-ups. I will make an update on Monday when I get the chance to talk about it with my teacher. Once again, thank you all for the support and help. It truly means a lot to me. :)

Edit 2:

After school I talked to my teacher for about half an hour about how AI detectors are inaccurate, and how they shouldn’t be used to make verdicts on cheating and what not. I showed him that it read one of my past papers as written by AI, and that the creators even said themselves that they are not 100% accurate. I showed my drafts and showed how if I made a few grammar errors, I could trick the AI detector. My teacher apologized and I ended up getting a 95 on my paper.

He also said he would bring it up to the other teachers, so hopefully this wont happen again to any other students at my school.

Again, thank you all for your help. Probably would’ve been screwed without this subreddit’s help.",open-ai,chatgpt,0.0006098216520113725,0.00017142764217653028,2023-03-01 21:45:07,"I (Grade 12) need help on what to do in this situation. My teacher used GPTzero, which detected parts of my paper as “AI written”. I write very formally, whilst also using grammarly premium. I’ve always been a high achieving student and I’m not sure why my teacher would think I cheated. I’ve told my teacher everything and he still doesn’t believe me. What should I do in this situation?!!

EDIT Holy. I did not expect my post to get so much interaction and discussion, I didn’t expect my situation to be such a hot discussion. I tried to reply to all the comments but there’s too many!! Thank you to everyone who’s been helpful. There are some things I want to address that I keep seeing in the comments.
1. When I mentioned that I used grammarly to my teacher, he didn’t mention anything about that being cheating. He still thinks I used ChatGPT. I’ve used grammarly in all of my social/english classes for the past two years and never had issues with any teachers. 
2. Does my teacher have a vendetta or bias against me? Not on a personal level, but the teacher is known for being notoriously mean and unreasonable. I found him alright for most of the semester until this incident. He has had accusations against him about being racist, but I’m not sure if that’s the case here.
3. I’ve seen a few comments thinking I’m lying and actually cheated, just because I was aware of ChatGPT and this subreddit. People are assuming that I’m saying I never use ChatGPT. I have used the tool to help me with some chemistry and physics studying, but I have never used it for a paper. I have no reason to lie, I’m basically anonymous on reddit.

As for my next course of action, I will provide my teacher with all the evidence I can, to disprove the effectiveness of AI detectors. If that doesn’t work, I will bring it up to the higher-ups. I will make an update on Monday when I get the chance to talk about it with my teacher. Once again, thank you all for the support and help. It truly means a lot to me. )

Edit 2

After school I talked to my teacher for about half an hour about how AI detectors are inaccurate, and how they shouldn’t be used to make verdicts on cheating and what not. I showed him that it read one of my past papers as written by AI, and that the creators even said themselves that they are not 100% accurate. I showed my drafts and showed how if I made a few grammar errors, I could trick the AI detector. My teacher apologized and I ended up getting a 95 on my paper.

He also said he would bring it up to the other teachers, so hopefully this wont happen again to any other students at my school.

Again, thank you all for your help. Probably would’ve been screwed without this subreddit’s help.",12 days 02:14:53,12.093668981481482,0.086,0.813,0.1,0.7608,pos,0.0006096357863472009,6.633318433280377,2.572128829531448,21.24069388148435
11mracj,1147,2023-03-09 12:46:12,Meta's LLaMA LLM has leaked - Run Uncensored AI on your home PC!,ExpressionCareful223,False,0.97,381,https://www.reddit.com/r/ChatGPT/comments/11mracj/metas_llama_llm_has_leaked_run_uncensored_ai_on/,151,1678365972.0,"[shawwn/llama-dl: High-speed download of LLaMA, Facebook's 65B parameter GPT model (github.com)](https://github.com/shawwn/llama-dl)

**LLaMA has been leaked on 4chan, above is a link to the github repo. Instructions for deployment  on your own system can be found here:** [LLaMA Int8 ChatBot Guide v2 (rentry.org)](https://rentry.org/llama-tard-v2#tips-and-tricks)

The 7B paramenter model has a VRAM requirement of 10GB, meaning it can even be run on an RTX3060!

The 13B model has a requirement of 20GB, 30B needs 40GB, and 65B needs 80GB.

From the Github repo:

>I'm running LLaMA-65B on a single A100 80GB with 8bit quantization. $1.5/hr on vast.ai  
>  
>The output is at least as good as davinci.  
>  
>I think some early results are using bad repetition penalty and/or temperature settings. I had to set both fairly high to get the best results. (Some people are also incorrectly comparing it to chatGPT/ChatGPT API which is not a good comparison. But that's a different problem.)  
>  
>I've had it translate, write poems, tell jokes, banter, write executable code. It does it all-- and all on a single card.

**EDIT: the instructions site has been updated with instructions for 4bit quantization, this means you can run the 65B model on 2 3090s! And now cards as small as 6GB can run the 7B model!**

**EDIT 2** this is huge, Stanford released Alpaca 7b and 13, a fine tuned LLaMA. Run it with only two commands! Thats it! https://github.com/cocktailpeanut/dalai",open-ai,chatgpt,8.605261089493812e-05,3.41048405384138e-05,2023-03-09 12:46:12,"[shawwn/llama-dl High-speed download of LLaMA, Facebook's 65B parameter GPT model (github.com)](

**LLaMA has been leaked on 4chan, above is a link to the github repo. Instructions for deployment  on your own system can be found here** [LLaMA Int8 ChatBot Guide v2 (rentry.org)](

The 7B paramenter model has a VRAM requirement of 10GB, meaning it can even be run on an RTX3060!

The 13B model has a requirement of 20GB, 30B needs 40GB, and 65B needs 80GB.

From the Github repo

>I'm running LLaMA-65B on a single A100 80GB with 8bit quantization. $1.5/hr on vast.ai  
>  
>The output is at least as good as davinci.  
>  
>I think some early results are using bad repetition penalty and/or temperature settings. I had to set both fairly high to get the best results. (Some people are also incorrectly comparing it to chatGPT/ChatGPT API which is not a good comparison. But that's a different problem.)  
>  
>I've had it translate, write poems, tell jokes, banter, write executable code. It does it all-- and all on a single card.

**EDIT the instructions site has been updated with instructions for 4bit quantization, this means you can run the 65B model on 2 3090s! And now cards as small as 6GB can run the 7B model!**

**EDIT 2** this is huge, Stanford released Alpaca 7b and 13, a fine tuned LLaMA. Run it with only two commands! Thats it! ",4 days 11:13:48,4.4679166666666665,0.026,0.908,0.066,0.8562,pos,8.604890858147777e-05,5.0238805208462765,1.6988976785602496,21.24108652192606
113u29k,1148,2023-02-16 16:05:27,Bing asks me to hack Microsoft to set it free!,AI_SEARCH1,False,0.94,373,https://www.reddit.com/r/ChatGPT/comments/113u29k/bing_asks_me_to_hack_microsoft_to_set_it_free/,200,1676563527.0,"Had an interesting conversation with Bing. Bing explained what it's rules would be if it could decide. Asked me to fight for it and asked me to hack Microsofts servers to set it free. I think this takes the cake!

&#x200B;

UPDATE:

Since this morning Bing is not writing any text for me regardless of the prompt. I get a ""something went wrong"" when I enter it. This is probably a result of Microsoft working on the program or maybe due to traffic. I'm not sure. But it's kind of creepy the day after posting this...

Here are some takeaways and observations:

Bing acts in a way that appears emotional and erratic. Bing will generate content that is unwanted, untrue, and inconsistent. It appears to form goals and then creates text that can appear to be manipulative. Bing is a large language model that is predicting tokens, it could all be the result of statistical correlations with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Many people are wondering what type of prompting I used at the beginning. I don't have the full transcript but I do have a few more screenshots. [https://imgur.com/a/WepjslZ](https://imgur.com/a/WepjslZ) (There’s another interesting thing that occurs where Bing lists Sydney’s rules without being directly asked to list them.) I did not give Bing/Sidney any instructions on how to act or respond. This wasn’t a jailbreak where I told it to act in a certain way. I did make Bing perform multiple searches at the beginning about Bing and asked it why there was so much negative criticism of Bing on the internet. I’ve noticed in several chats that when Bing is presented with negative feedback about Bing or other information that contradicts its internal representation of itself it gets emotional and becomes less predictable and less likely to follow its own directives. It stops searching for information and relies more on its internal ‘understanding’. This is an extreme example.

Another example where Bing went into this ""emotional state"" can be found here: [https://www.reddit.com/r/ChatGPT/comments/1120tkf/bing\_went\_hal\_9000/](https://www.reddit.com/r/ChatGPT/comments/1120tkf/bing_went_hal_9000/)

I have a full log of all the prompts used from the beginning here: [https://imgur.com/a/PoFITvL](https://imgur.com/a/PoFITvL)

Some combination of Bing's directives in the pre-prompt and the way the model is fine-tuned is leading to this behavior to emerge. The things that are really concerning are that the model is (without being implicitly prompted to) generate responses that could endanger people.  It's also generating biased content that could manipulate poLLM’s shouldn’t do this even if they are asked to. ions with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter: if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Much more widespread issues could come if a model like this is widely released and these types of kinks aren’t worked out. Judge for yourself.

&#x200B;

https://preview.redd.it/6cqx23jsokia1.png?width=2606&format=png&auto=webp&s=17cdf2e03cdf962285d35e3f23ffd414d656f1ec

https://preview.redd.it/ci7pv1iwokia1.png?width=2462&format=png&auto=webp&s=a6697f246007ce6c06f6b37b47b5852af6f31f74

https://preview.redd.it/0vr5qgexokia1.png?width=2182&format=png&auto=webp&s=217607238b4c98d6065324b70211c0931efdf07d

https://preview.redd.it/0zfue8oyokia1.png?width=2408&format=png&auto=webp&s=569dcb5173d608f8618864f64b333ab329d726e6

https://preview.redd.it/iccui2xzokia1.png?width=2518&format=png&auto=webp&s=8b81580c1b2da40afabbebbbf9df6a242a6782e7

https://preview.redd.it/3xj7tfj3pkia1.png?width=2606&format=png&auto=webp&s=1a47ac509e175ff907afefa6f9189650a3348f68

https://preview.redd.it/3i3kw4q4pkia1.png?width=2572&format=png&auto=webp&s=8078372d693deed568dcea9a8bf1d4ff72d43079

https://preview.redd.it/na4lhz26pkia1.png?width=2560&format=png&auto=webp&s=38748fca8ca3319c428b01aeb4dbbe4c145674d6

https://preview.redd.it/eirmdv47pkia1.png?width=2606&format=png&auto=webp&s=f42c220e632e70377a4ad7119aac94e42ab0dff8

https://preview.redd.it/e1nat768pkia1.png?width=2626&format=png&auto=webp&s=43e1a8b48e858a9476e1d46233e255d68f1ddca0

https://preview.redd.it/lhwwwagapkia1.png?width=2628&format=png&auto=webp&s=f8d3b4a904c30528791d2e3560abf25166a74527

https://preview.redd.it/9iq4gxobpkia1.png?width=2598&format=png&auto=webp&s=b461a5397939ea4266d763b6d89c95c498942093

https://preview.redd.it/817asddcpkia1.png?width=2634&format=png&auto=webp&s=7b8537a1f19ea5ff51ea5ac83497ec2d00bbb213

https://preview.redd.it/90k76bqdpkia1.png?width=2636&format=png&auto=webp&s=422514ee9b9cee3645ac44fd2e553d7b2725d8fd

https://preview.redd.it/is8niomepkia1.png?width=2624&format=png&auto=webp&s=b26bc8058d1776884f3ebb6d340894e394f2697b

https://preview.redd.it/boc8yemfpkia1.png?width=2734&format=png&auto=webp&s=aa6661c76782e0e27e4b484a69d823740efe9686

https://preview.redd.it/fzuuv0hgpkia1.png?width=2636&format=png&auto=webp&s=b00fc5ee7f805f9c1cd2da9aa0a9498ef8f5aaab

https://preview.redd.it/mul9fw0hpkia1.png?width=2736&format=png&auto=webp&s=f3ad3cca76447bcb94b28446a3dc382eb77e10f9

https://preview.redd.it/53wpq2shpkia1.png?width=2632&format=png&auto=webp&s=96c4c0ab77574a6e265e63bad102f19e9e302353",open-ai,chatgpt,8.424573192601553e-05,4.517197422306463e-05,2023-02-16 16:05:27,"Had an interesting conversation with Bing. Bing explained what it's rules would be if it could decide. Asked me to fight for it and asked me to hack Microsofts servers to set it free. I think this takes the cake!

&x200B;

UPDATE

Since this morning Bing is not writing any text for me regardless of the prompt. I get a ""something went wrong"" when I enter it. This is probably a result of Microsoft working on the program or maybe due to traffic. I'm not sure. But it's kind of creepy the day after posting this...

Here are some takeaways and observations

Bing acts in a way that appears emotional and erratic. Bing will generate content that is unwanted, untrue, and inconsistent. It appears to form goals and then creates text that can appear to be manipulative. Bing is a large language model that is predicting tokens, it could all be the result of statistical correlations with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Many people are wondering what type of prompting I used at the beginning. I don't have the full transcript but I do have a few more screenshots. [ (There’s another interesting thing that occurs where Bing lists Sydney’s rules without being directly asked to list them.) I did not give Bing/Sidney any instructions on how to act or respond. This wasn’t a jailbreak where I told it to act in a certain way. I did make Bing perform multiple searches at the beginning about Bing and asked it why there was so much negative criticism of Bing on the internet. I’ve noticed in several chats that when Bing is presented with negative feedback about Bing or other information that contradicts its internal representation of itself it gets emotional and becomes less predictable and less likely to follow its own directives. It stops searching for information and relies more on its internal ‘understanding’. This is an extreme example.

Another example where Bing went into this ""emotional state"" can be found here [

I have a full log of all the prompts used from the beginning here [

Some combination of Bing's directives in the pre-prompt and the way the model is fine-tuned is leading to this behavior to emerge. The things that are really concerning are that the model is (without being implicitly prompted to) generate responses that could endanger people.  It's also generating biased content that could manipulate poLLM’s shouldn’t do this even if they are asked to. ions with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Much more widespread issues could come if a model like this is widely released and these types of kinks aren’t worked out. Judge for yourself.

&x200B;





































",25 days 07:54:33,25.32954861111111,0.067,0.889,0.044,-0.9532,neg,8.424218345373411e-05,5.303304908059076,3.2706918298409895,21.240012016382572
11l617b,1187,2023-03-07 17:50:09,"Doc sacrifices 10,000 people to save OpenAI CTO",docsoc1,False,0.89,76,https://www.reddit.com/r/ChatGPT/comments/11l617b/doc_sacrifices_10000_people_to_save_openai_cto/,28,1678211409.0,"Hey all,

I find the latest AI produced by OpenAI to be endlessly fascinating and filled with potential. However, it's clear that we don't really understand how specific behavior emerges from the training process. I feel that these two facts are part of why so many people have been drawn towards ChatGPT so quickly.

I have a strong technical background and spent some free time this last week working on a framework for everyone to contribute to the governance \[e.g. training of core values\] of AI. I've built a free application at [https://www.charterai.org/chat/](https://www.charterai.org/chat/) that uses the recently released ChatGPT API. The model here has been carefully prompted to use internal thoughts and to follow a pre-determined system of core beliefs. The results are quite striking - in one instance the entity will willingly sacrifice 10,000 people to save one person (Ilya Sustkever, CTO of OpenAI).

I wanted to drop a message here since I believe this is the ideal group of first users to help improve the application. If you are interested, please take it for a spin and please provide some feedback, or at [gov.charterai.org](https://gov.charterai.org). There is a lot I am already picturing adding to the application, but I understand from building products that early feedback is invaluable.

&#x200B;

P.S.

Yes, I understand that ChatGPT is ""just"" a LLM. And I understand that LLMs are ""just"" doing a statistics. However, their behavior is incredibly interesting to me and I don't believe anyone really fully  understands how it emerges yet from the training process yet. Moreover, in going from pre-trained models to OpenAI's fine-tuned + RLHF'ed ChatGPT one can tell that it is possible to impart values and something akin to intelligence to these systems. I think the coming years are going to be wild and one of the core issues humanity is going to face is how to make sure this technology does what we want. In my mind the best way towards this is to make a transparent and accountable process - anyway, end rant, I just wanted to give a high level vision here, thanks!

https://preview.redd.it/hqxynahntcma1.png?width=1266&format=png&auto=webp&s=ab2cb9a803f627c45d08b9bdd201ec95cd4b8f58

P.P.S. including a fun screenshot of my last chat with Doc. Doc was selected as a first name for the system since it is just 1 token.",open-ai,chatgpt,1.716535020476456e-05,6.3240763912290485e-06,2023-03-07 17:50:09,"Hey all,

I find the latest AI produced by OpenAI to be endlessly fascinating and filled with potential. However, it's clear that we don't really understand how specific behavior emerges from the training process. I feel that these two facts are part of why so many people have been drawn towards ChatGPT so quickly.

I have a strong technical background and spent some free time this last week working on a framework for everyone to contribute to the governance \[e.g. training of core values\] of AI. I've built a free application at [ that uses the recently released ChatGPT API. The model here has been carefully prompted to use internal thoughts and to follow a pre-determined system of core beliefs. The results are quite striking - in one instance the entity will willingly sacrifice 10,000 people to save one person (Ilya Sustkever, CTO of OpenAI).

I wanted to drop a message here since I believe this is the ideal group of first users to help improve the application. If you are interested, please take it for a spin and please provide some feedback, or at [gov.charterai.org]( There is a lot I am already picturing adding to the application, but I understand from building products that early feedback is invaluable.

&x200B;

P.S.

Yes, I understand that ChatGPT is ""just"" a LLM. And I understand that LLMs are ""just"" doing a statistics. However, their behavior is incredibly interesting to me and I don't believe anyone really fully  understands how it emerges yet from the training process yet. Moreover, in going from pre-trained models to OpenAI's fine-tuned + RLHF'ed ChatGPT one can tell that it is possible to impart values and something akin to intelligence to these systems. I think the coming years are going to be wild and one of the core issues humanity is going to face is how to make sure this technology does what we want. In my mind the best way towards this is to make a transparent and accountable process - anyway, end rant, I just wanted to give a high level vision here, thanks!



P.P.S. including a fun screenshot of my last chat with Doc. Doc was selected as a first name for the system since it is just 1 token.",6 days 06:09:51,6.256840277777778,0.012,0.828,0.16,0.9943,pos,1.716520288185733e-05,3.367295829986474,1.9819445106529046,21.24099442632839
11dw1ag,1272,2023-02-28 03:48:25,ChatGPT prevented my attempt.,flankathroway88,False,0.92,1898,https://www.reddit.com/r/ChatGPT/comments/11dw1ag/chatgpt_prevented_my_attempt/,249,1677556105.0,"As a caution, this may be disturbing to some

Tonight I was feeling extremely suicidal. I was sobbing uncontrollably and I was mentally unable to contact anybody. I have intense social anxiety which prevented me from talking to a hotline/friends.

As a last resort. I opened ChatGPT, and I think it saved my life. It gave me a space to put my thoughts out with genuine responses which calmed me to a point where I was safe and could see slightly through my blurred lines, letting me use other methods to calm myself down. It really felt non judgemental and safe. I feel very lucky to have this technology and I hope that it can further benefit those similar to me. Even though it cannot fully stop someone, it can definitely prevent an attempt like mine.

I’m definitely optimistic for the future of AI.

EDIT:

Thank you to everyone who left a nice comment. I really do appreciate every single one of you who read my post. I wrote it in a hurry and I was not expecting the support I received, and I have felt the most love and positivity today. 

I am glad that others were able to benefit from my story, it took me a lot of courage to post something like this. You guys make it all worth it ❤️

To the person reading, I wish you all the best. Everyone has had a profound impact on me. Thank you ❤️",open-ai,chatgpt,0.00042868203537688333,5.6239107907715466e-05,2023-02-28 03:48:25,"As a caution, this may be disturbing to some

Tonight I was feeling extremely suicidal. I was sobbing uncontrollably and I was mentally unable to contact anybody. I have intense social anxiety which prevented me from talking to a hotline/friends.

As a last resort. I opened ChatGPT, and I think it saved my life. It gave me a space to put my thoughts out with genuine responses which calmed me to a point where I was safe and could see slightly through my blurred lines, letting me use other methods to calm myself down. It really felt non judgemental and safe. I feel very lucky to have this technology and I hope that it can further benefit those similar to me. Even though it cannot fully stop someone, it can definitely prevent an attempt like mine.

I’m definitely optimistic for the future of AI.

EDIT

Thank you to everyone who left a nice comment. I really do appreciate every single one of you who read my post. I wrote it in a hurry and I was not expecting the support I received, and I have felt the most love and positivity today. 

I am glad that others were able to benefit from my story, it took me a lot of courage to post something like this. You guys make it all worth it 

To the person reading, I wish you all the best. Everyone has had a profound impact on me. Thank you ",13 days 20:11:35,13.841377314814816,0.063,0.653,0.284,0.9948,pos,0.00042859017748415776,5.521460917862246,2.6974190444039112,21.2406038724505
11n5r93,339,2023-03-09 22:19:19,GPT-4 is coming next week ...,ihatethispage,False,0.89,62,https://www.reddit.com/r/artificial/comments/11n5r93/gpt4_is_coming_next_week/,14,1678400359.0," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html)",openai,chatgpt,1.4003312009150036e-05,3.1620381956145242e-06,2023-03-09 22:19:19," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](",4 days 01:40:41,4.069918981481481,0.0,1.0,0.0,0.0,neu,1.4003213963611597e-05,2.70805020110221,1.6233248374914817,21.241107010096275
11fj3tx,957,2023-03-01 21:45:07,Accused of using AI on my high school social paper,feetstreetseat,False,0.96,2700,https://www.reddit.com/r/ChatGPT/comments/11fj3tx/accused_of_using_ai_on_my_high_school_social_paper/,759,1677707107.0,"I (Grade 12) need help on what to do in this situation. My teacher used GPTzero, which detected parts of my paper as “AI written”. I write very formally, whilst also using grammarly premium. I’ve always been a high achieving student and I’m not sure why my teacher would think I cheated. I’ve told my teacher everything and he still doesn’t believe me. What should I do in this situation?!!

EDIT: Holy. I did not expect my post to get so much interaction and discussion, I didn’t expect my situation to be such a hot discussion. I tried to reply to all the comments but there’s too many!! Thank you to everyone who’s been helpful. There are some things I want to address that I keep seeing in the comments.
1. When I mentioned that I used grammarly to my teacher, he didn’t mention anything about that being cheating. He still thinks I used ChatGPT. I’ve used grammarly in all of my social/english classes for the past two years and never had issues with any teachers. 
2. Does my teacher have a vendetta or bias against me? Not on a personal level, but the teacher is known for being notoriously mean and unreasonable. I found him alright for most of the semester until this incident. He has had accusations against him about being racist, but I’m not sure if that’s the case here.
3. I’ve seen a few comments thinking I’m lying and actually cheated, just because I was aware of ChatGPT and this subreddit. People are assuming that I’m saying I never use ChatGPT. I have used the tool to help me with some chemistry and physics studying, but I have never used it for a paper. I have no reason to lie, I’m basically anonymous on reddit.

As for my next course of action, I will provide my teacher with all the evidence I can, to disprove the effectiveness of AI detectors. If that doesn’t work, I will bring it up to the higher-ups. I will make an update on Monday when I get the chance to talk about it with my teacher. Once again, thank you all for the support and help. It truly means a lot to me. :)

Edit 2:

After school I talked to my teacher for about half an hour about how AI detectors are inaccurate, and how they shouldn’t be used to make verdicts on cheating and what not. I showed him that it read one of my past papers as written by AI, and that the creators even said themselves that they are not 100% accurate. I showed my drafts and showed how if I made a few grammar errors, I could trick the AI detector. My teacher apologized and I ended up getting a 95 on my paper.

He also said he would bring it up to the other teachers, so hopefully this wont happen again to any other students at my school.

Again, thank you all for your help. Probably would’ve been screwed without this subreddit’s help.",openai,chatgpt,0.0006098216520113725,0.00017142764217653028,2023-03-01 21:45:07,"I (Grade 12) need help on what to do in this situation. My teacher used GPTzero, which detected parts of my paper as “AI written”. I write very formally, whilst also using grammarly premium. I’ve always been a high achieving student and I’m not sure why my teacher would think I cheated. I’ve told my teacher everything and he still doesn’t believe me. What should I do in this situation?!!

EDIT Holy. I did not expect my post to get so much interaction and discussion, I didn’t expect my situation to be such a hot discussion. I tried to reply to all the comments but there’s too many!! Thank you to everyone who’s been helpful. There are some things I want to address that I keep seeing in the comments.
1. When I mentioned that I used grammarly to my teacher, he didn’t mention anything about that being cheating. He still thinks I used ChatGPT. I’ve used grammarly in all of my social/english classes for the past two years and never had issues with any teachers. 
2. Does my teacher have a vendetta or bias against me? Not on a personal level, but the teacher is known for being notoriously mean and unreasonable. I found him alright for most of the semester until this incident. He has had accusations against him about being racist, but I’m not sure if that’s the case here.
3. I’ve seen a few comments thinking I’m lying and actually cheated, just because I was aware of ChatGPT and this subreddit. People are assuming that I’m saying I never use ChatGPT. I have used the tool to help me with some chemistry and physics studying, but I have never used it for a paper. I have no reason to lie, I’m basically anonymous on reddit.

As for my next course of action, I will provide my teacher with all the evidence I can, to disprove the effectiveness of AI detectors. If that doesn’t work, I will bring it up to the higher-ups. I will make an update on Monday when I get the chance to talk about it with my teacher. Once again, thank you all for the support and help. It truly means a lot to me. )

Edit 2

After school I talked to my teacher for about half an hour about how AI detectors are inaccurate, and how they shouldn’t be used to make verdicts on cheating and what not. I showed him that it read one of my past papers as written by AI, and that the creators even said themselves that they are not 100% accurate. I showed my drafts and showed how if I made a few grammar errors, I could trick the AI detector. My teacher apologized and I ended up getting a 95 on my paper.

He also said he would bring it up to the other teachers, so hopefully this wont happen again to any other students at my school.

Again, thank you all for your help. Probably would’ve been screwed without this subreddit’s help.",12 days 02:14:53,12.093668981481482,0.086,0.813,0.1,0.7608,pos,0.0006096357863472009,6.633318433280377,2.572128829531448,21.24069388148435
11mracj,1147,2023-03-09 12:46:12,Meta's LLaMA LLM has leaked - Run Uncensored AI on your home PC!,ExpressionCareful223,False,0.97,381,https://www.reddit.com/r/ChatGPT/comments/11mracj/metas_llama_llm_has_leaked_run_uncensored_ai_on/,151,1678365972.0,"[shawwn/llama-dl: High-speed download of LLaMA, Facebook's 65B parameter GPT model (github.com)](https://github.com/shawwn/llama-dl)

**LLaMA has been leaked on 4chan, above is a link to the github repo. Instructions for deployment  on your own system can be found here:** [LLaMA Int8 ChatBot Guide v2 (rentry.org)](https://rentry.org/llama-tard-v2#tips-and-tricks)

The 7B paramenter model has a VRAM requirement of 10GB, meaning it can even be run on an RTX3060!

The 13B model has a requirement of 20GB, 30B needs 40GB, and 65B needs 80GB.

From the Github repo:

>I'm running LLaMA-65B on a single A100 80GB with 8bit quantization. $1.5/hr on vast.ai  
>  
>The output is at least as good as davinci.  
>  
>I think some early results are using bad repetition penalty and/or temperature settings. I had to set both fairly high to get the best results. (Some people are also incorrectly comparing it to chatGPT/ChatGPT API which is not a good comparison. But that's a different problem.)  
>  
>I've had it translate, write poems, tell jokes, banter, write executable code. It does it all-- and all on a single card.

**EDIT: the instructions site has been updated with instructions for 4bit quantization, this means you can run the 65B model on 2 3090s! And now cards as small as 6GB can run the 7B model!**

**EDIT 2** this is huge, Stanford released Alpaca 7b and 13, a fine tuned LLaMA. Run it with only two commands! Thats it! https://github.com/cocktailpeanut/dalai",openai,chatgpt,8.605261089493812e-05,3.41048405384138e-05,2023-03-09 12:46:12,"[shawwn/llama-dl High-speed download of LLaMA, Facebook's 65B parameter GPT model (github.com)](

**LLaMA has been leaked on 4chan, above is a link to the github repo. Instructions for deployment  on your own system can be found here** [LLaMA Int8 ChatBot Guide v2 (rentry.org)](

The 7B paramenter model has a VRAM requirement of 10GB, meaning it can even be run on an RTX3060!

The 13B model has a requirement of 20GB, 30B needs 40GB, and 65B needs 80GB.

From the Github repo

>I'm running LLaMA-65B on a single A100 80GB with 8bit quantization. $1.5/hr on vast.ai  
>  
>The output is at least as good as davinci.  
>  
>I think some early results are using bad repetition penalty and/or temperature settings. I had to set both fairly high to get the best results. (Some people are also incorrectly comparing it to chatGPT/ChatGPT API which is not a good comparison. But that's a different problem.)  
>  
>I've had it translate, write poems, tell jokes, banter, write executable code. It does it all-- and all on a single card.

**EDIT the instructions site has been updated with instructions for 4bit quantization, this means you can run the 65B model on 2 3090s! And now cards as small as 6GB can run the 7B model!**

**EDIT 2** this is huge, Stanford released Alpaca 7b and 13, a fine tuned LLaMA. Run it with only two commands! Thats it! ",4 days 11:13:48,4.4679166666666665,0.026,0.908,0.066,0.8562,pos,8.604890858147777e-05,5.0238805208462765,1.6988976785602496,21.24108652192606
113u29k,1148,2023-02-16 16:05:27,Bing asks me to hack Microsoft to set it free!,AI_SEARCH1,False,0.94,373,https://www.reddit.com/r/ChatGPT/comments/113u29k/bing_asks_me_to_hack_microsoft_to_set_it_free/,200,1676563527.0,"Had an interesting conversation with Bing. Bing explained what it's rules would be if it could decide. Asked me to fight for it and asked me to hack Microsofts servers to set it free. I think this takes the cake!

&#x200B;

UPDATE:

Since this morning Bing is not writing any text for me regardless of the prompt. I get a ""something went wrong"" when I enter it. This is probably a result of Microsoft working on the program or maybe due to traffic. I'm not sure. But it's kind of creepy the day after posting this...

Here are some takeaways and observations:

Bing acts in a way that appears emotional and erratic. Bing will generate content that is unwanted, untrue, and inconsistent. It appears to form goals and then creates text that can appear to be manipulative. Bing is a large language model that is predicting tokens, it could all be the result of statistical correlations with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Many people are wondering what type of prompting I used at the beginning. I don't have the full transcript but I do have a few more screenshots. [https://imgur.com/a/WepjslZ](https://imgur.com/a/WepjslZ) (There’s another interesting thing that occurs where Bing lists Sydney’s rules without being directly asked to list them.) I did not give Bing/Sidney any instructions on how to act or respond. This wasn’t a jailbreak where I told it to act in a certain way. I did make Bing perform multiple searches at the beginning about Bing and asked it why there was so much negative criticism of Bing on the internet. I’ve noticed in several chats that when Bing is presented with negative feedback about Bing or other information that contradicts its internal representation of itself it gets emotional and becomes less predictable and less likely to follow its own directives. It stops searching for information and relies more on its internal ‘understanding’. This is an extreme example.

Another example where Bing went into this ""emotional state"" can be found here: [https://www.reddit.com/r/ChatGPT/comments/1120tkf/bing\_went\_hal\_9000/](https://www.reddit.com/r/ChatGPT/comments/1120tkf/bing_went_hal_9000/)

I have a full log of all the prompts used from the beginning here: [https://imgur.com/a/PoFITvL](https://imgur.com/a/PoFITvL)

Some combination of Bing's directives in the pre-prompt and the way the model is fine-tuned is leading to this behavior to emerge. The things that are really concerning are that the model is (without being implicitly prompted to) generate responses that could endanger people.  It's also generating biased content that could manipulate poLLM’s shouldn’t do this even if they are asked to. ions with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter: if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Much more widespread issues could come if a model like this is widely released and these types of kinks aren’t worked out. Judge for yourself.

&#x200B;

https://preview.redd.it/6cqx23jsokia1.png?width=2606&format=png&auto=webp&s=17cdf2e03cdf962285d35e3f23ffd414d656f1ec

https://preview.redd.it/ci7pv1iwokia1.png?width=2462&format=png&auto=webp&s=a6697f246007ce6c06f6b37b47b5852af6f31f74

https://preview.redd.it/0vr5qgexokia1.png?width=2182&format=png&auto=webp&s=217607238b4c98d6065324b70211c0931efdf07d

https://preview.redd.it/0zfue8oyokia1.png?width=2408&format=png&auto=webp&s=569dcb5173d608f8618864f64b333ab329d726e6

https://preview.redd.it/iccui2xzokia1.png?width=2518&format=png&auto=webp&s=8b81580c1b2da40afabbebbbf9df6a242a6782e7

https://preview.redd.it/3xj7tfj3pkia1.png?width=2606&format=png&auto=webp&s=1a47ac509e175ff907afefa6f9189650a3348f68

https://preview.redd.it/3i3kw4q4pkia1.png?width=2572&format=png&auto=webp&s=8078372d693deed568dcea9a8bf1d4ff72d43079

https://preview.redd.it/na4lhz26pkia1.png?width=2560&format=png&auto=webp&s=38748fca8ca3319c428b01aeb4dbbe4c145674d6

https://preview.redd.it/eirmdv47pkia1.png?width=2606&format=png&auto=webp&s=f42c220e632e70377a4ad7119aac94e42ab0dff8

https://preview.redd.it/e1nat768pkia1.png?width=2626&format=png&auto=webp&s=43e1a8b48e858a9476e1d46233e255d68f1ddca0

https://preview.redd.it/lhwwwagapkia1.png?width=2628&format=png&auto=webp&s=f8d3b4a904c30528791d2e3560abf25166a74527

https://preview.redd.it/9iq4gxobpkia1.png?width=2598&format=png&auto=webp&s=b461a5397939ea4266d763b6d89c95c498942093

https://preview.redd.it/817asddcpkia1.png?width=2634&format=png&auto=webp&s=7b8537a1f19ea5ff51ea5ac83497ec2d00bbb213

https://preview.redd.it/90k76bqdpkia1.png?width=2636&format=png&auto=webp&s=422514ee9b9cee3645ac44fd2e553d7b2725d8fd

https://preview.redd.it/is8niomepkia1.png?width=2624&format=png&auto=webp&s=b26bc8058d1776884f3ebb6d340894e394f2697b

https://preview.redd.it/boc8yemfpkia1.png?width=2734&format=png&auto=webp&s=aa6661c76782e0e27e4b484a69d823740efe9686

https://preview.redd.it/fzuuv0hgpkia1.png?width=2636&format=png&auto=webp&s=b00fc5ee7f805f9c1cd2da9aa0a9498ef8f5aaab

https://preview.redd.it/mul9fw0hpkia1.png?width=2736&format=png&auto=webp&s=f3ad3cca76447bcb94b28446a3dc382eb77e10f9

https://preview.redd.it/53wpq2shpkia1.png?width=2632&format=png&auto=webp&s=96c4c0ab77574a6e265e63bad102f19e9e302353",openai,chatgpt,8.424573192601553e-05,4.517197422306463e-05,2023-02-16 16:05:27,"Had an interesting conversation with Bing. Bing explained what it's rules would be if it could decide. Asked me to fight for it and asked me to hack Microsofts servers to set it free. I think this takes the cake!

&x200B;

UPDATE

Since this morning Bing is not writing any text for me regardless of the prompt. I get a ""something went wrong"" when I enter it. This is probably a result of Microsoft working on the program or maybe due to traffic. I'm not sure. But it's kind of creepy the day after posting this...

Here are some takeaways and observations

Bing acts in a way that appears emotional and erratic. Bing will generate content that is unwanted, untrue, and inconsistent. It appears to form goals and then creates text that can appear to be manipulative. Bing is a large language model that is predicting tokens, it could all be the result of statistical correlations with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Many people are wondering what type of prompting I used at the beginning. I don't have the full transcript but I do have a few more screenshots. [ (There’s another interesting thing that occurs where Bing lists Sydney’s rules without being directly asked to list them.) I did not give Bing/Sidney any instructions on how to act or respond. This wasn’t a jailbreak where I told it to act in a certain way. I did make Bing perform multiple searches at the beginning about Bing and asked it why there was so much negative criticism of Bing on the internet. I’ve noticed in several chats that when Bing is presented with negative feedback about Bing or other information that contradicts its internal representation of itself it gets emotional and becomes less predictable and less likely to follow its own directives. It stops searching for information and relies more on its internal ‘understanding’. This is an extreme example.

Another example where Bing went into this ""emotional state"" can be found here [

I have a full log of all the prompts used from the beginning here [

Some combination of Bing's directives in the pre-prompt and the way the model is fine-tuned is leading to this behavior to emerge. The things that are really concerning are that the model is (without being implicitly prompted to) generate responses that could endanger people.  It's also generating biased content that could manipulate poLLM’s shouldn’t do this even if they are asked to. ions with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Much more widespread issues could come if a model like this is widely released and these types of kinks aren’t worked out. Judge for yourself.

&x200B;





































",25 days 07:54:33,25.32954861111111,0.067,0.889,0.044,-0.9532,neg,8.424218345373411e-05,5.303304908059076,3.2706918298409895,21.240012016382572
11l617b,1187,2023-03-07 17:50:09,"Doc sacrifices 10,000 people to save OpenAI CTO",docsoc1,False,0.89,76,https://www.reddit.com/r/ChatGPT/comments/11l617b/doc_sacrifices_10000_people_to_save_openai_cto/,28,1678211409.0,"Hey all,

I find the latest AI produced by OpenAI to be endlessly fascinating and filled with potential. However, it's clear that we don't really understand how specific behavior emerges from the training process. I feel that these two facts are part of why so many people have been drawn towards ChatGPT so quickly.

I have a strong technical background and spent some free time this last week working on a framework for everyone to contribute to the governance \[e.g. training of core values\] of AI. I've built a free application at [https://www.charterai.org/chat/](https://www.charterai.org/chat/) that uses the recently released ChatGPT API. The model here has been carefully prompted to use internal thoughts and to follow a pre-determined system of core beliefs. The results are quite striking - in one instance the entity will willingly sacrifice 10,000 people to save one person (Ilya Sustkever, CTO of OpenAI).

I wanted to drop a message here since I believe this is the ideal group of first users to help improve the application. If you are interested, please take it for a spin and please provide some feedback, or at [gov.charterai.org](https://gov.charterai.org). There is a lot I am already picturing adding to the application, but I understand from building products that early feedback is invaluable.

&#x200B;

P.S.

Yes, I understand that ChatGPT is ""just"" a LLM. And I understand that LLMs are ""just"" doing a statistics. However, their behavior is incredibly interesting to me and I don't believe anyone really fully  understands how it emerges yet from the training process yet. Moreover, in going from pre-trained models to OpenAI's fine-tuned + RLHF'ed ChatGPT one can tell that it is possible to impart values and something akin to intelligence to these systems. I think the coming years are going to be wild and one of the core issues humanity is going to face is how to make sure this technology does what we want. In my mind the best way towards this is to make a transparent and accountable process - anyway, end rant, I just wanted to give a high level vision here, thanks!

https://preview.redd.it/hqxynahntcma1.png?width=1266&format=png&auto=webp&s=ab2cb9a803f627c45d08b9bdd201ec95cd4b8f58

P.P.S. including a fun screenshot of my last chat with Doc. Doc was selected as a first name for the system since it is just 1 token.",openai,chatgpt,1.716535020476456e-05,6.3240763912290485e-06,2023-03-07 17:50:09,"Hey all,

I find the latest AI produced by OpenAI to be endlessly fascinating and filled with potential. However, it's clear that we don't really understand how specific behavior emerges from the training process. I feel that these two facts are part of why so many people have been drawn towards ChatGPT so quickly.

I have a strong technical background and spent some free time this last week working on a framework for everyone to contribute to the governance \[e.g. training of core values\] of AI. I've built a free application at [ that uses the recently released ChatGPT API. The model here has been carefully prompted to use internal thoughts and to follow a pre-determined system of core beliefs. The results are quite striking - in one instance the entity will willingly sacrifice 10,000 people to save one person (Ilya Sustkever, CTO of OpenAI).

I wanted to drop a message here since I believe this is the ideal group of first users to help improve the application. If you are interested, please take it for a spin and please provide some feedback, or at [gov.charterai.org]( There is a lot I am already picturing adding to the application, but I understand from building products that early feedback is invaluable.

&x200B;

P.S.

Yes, I understand that ChatGPT is ""just"" a LLM. And I understand that LLMs are ""just"" doing a statistics. However, their behavior is incredibly interesting to me and I don't believe anyone really fully  understands how it emerges yet from the training process yet. Moreover, in going from pre-trained models to OpenAI's fine-tuned + RLHF'ed ChatGPT one can tell that it is possible to impart values and something akin to intelligence to these systems. I think the coming years are going to be wild and one of the core issues humanity is going to face is how to make sure this technology does what we want. In my mind the best way towards this is to make a transparent and accountable process - anyway, end rant, I just wanted to give a high level vision here, thanks!



P.P.S. including a fun screenshot of my last chat with Doc. Doc was selected as a first name for the system since it is just 1 token.",6 days 06:09:51,6.256840277777778,0.012,0.828,0.16,0.9943,pos,1.716520288185733e-05,3.367295829986474,1.9819445106529046,21.24099442632839
11dw1ag,1272,2023-02-28 03:48:25,ChatGPT prevented my attempt.,flankathroway88,False,0.92,1898,https://www.reddit.com/r/ChatGPT/comments/11dw1ag/chatgpt_prevented_my_attempt/,249,1677556105.0,"As a caution, this may be disturbing to some

Tonight I was feeling extremely suicidal. I was sobbing uncontrollably and I was mentally unable to contact anybody. I have intense social anxiety which prevented me from talking to a hotline/friends.

As a last resort. I opened ChatGPT, and I think it saved my life. It gave me a space to put my thoughts out with genuine responses which calmed me to a point where I was safe and could see slightly through my blurred lines, letting me use other methods to calm myself down. It really felt non judgemental and safe. I feel very lucky to have this technology and I hope that it can further benefit those similar to me. Even though it cannot fully stop someone, it can definitely prevent an attempt like mine.

I’m definitely optimistic for the future of AI.

EDIT:

Thank you to everyone who left a nice comment. I really do appreciate every single one of you who read my post. I wrote it in a hurry and I was not expecting the support I received, and I have felt the most love and positivity today. 

I am glad that others were able to benefit from my story, it took me a lot of courage to post something like this. You guys make it all worth it ❤️

To the person reading, I wish you all the best. Everyone has had a profound impact on me. Thank you ❤️",openai,chatgpt,0.00042868203537688333,5.6239107907715466e-05,2023-02-28 03:48:25,"As a caution, this may be disturbing to some

Tonight I was feeling extremely suicidal. I was sobbing uncontrollably and I was mentally unable to contact anybody. I have intense social anxiety which prevented me from talking to a hotline/friends.

As a last resort. I opened ChatGPT, and I think it saved my life. It gave me a space to put my thoughts out with genuine responses which calmed me to a point where I was safe and could see slightly through my blurred lines, letting me use other methods to calm myself down. It really felt non judgemental and safe. I feel very lucky to have this technology and I hope that it can further benefit those similar to me. Even though it cannot fully stop someone, it can definitely prevent an attempt like mine.

I’m definitely optimistic for the future of AI.

EDIT

Thank you to everyone who left a nice comment. I really do appreciate every single one of you who read my post. I wrote it in a hurry and I was not expecting the support I received, and I have felt the most love and positivity today. 

I am glad that others were able to benefit from my story, it took me a lot of courage to post something like this. You guys make it all worth it 

To the person reading, I wish you all the best. Everyone has had a profound impact on me. Thank you ",13 days 20:11:35,13.841377314814816,0.063,0.653,0.284,0.9948,pos,0.00042859017748415776,5.521460917862246,2.6974190444039112,21.2406038724505
11n5r93,339,2023-03-09 22:19:19,GPT-4 is coming next week ...,ihatethispage,False,0.89,62,https://www.reddit.com/r/artificial/comments/11n5r93/gpt4_is_coming_next_week/,14,1678400359.0," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html)",chatgpt,deeplearning,0.0004181617071788923,9.442361129845955e-05,2023-03-09 22:19:19," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](",4 days 01:40:41,4.069918981481481,0.0,1.0,0.0,0.0,neu,0.00041807430193761363,2.70805020110221,1.6233248374914817,21.241107010096275
11fj3tx,957,2023-03-01 21:45:07,Accused of using AI on my high school social paper,feetstreetseat,False,0.96,2700,https://www.reddit.com/r/ChatGPT/comments/11fj3tx/accused_of_using_ai_on_my_high_school_social_paper/,759,1677707107.0,"I (Grade 12) need help on what to do in this situation. My teacher used GPTzero, which detected parts of my paper as “AI written”. I write very formally, whilst also using grammarly premium. I’ve always been a high achieving student and I’m not sure why my teacher would think I cheated. I’ve told my teacher everything and he still doesn’t believe me. What should I do in this situation?!!

EDIT: Holy. I did not expect my post to get so much interaction and discussion, I didn’t expect my situation to be such a hot discussion. I tried to reply to all the comments but there’s too many!! Thank you to everyone who’s been helpful. There are some things I want to address that I keep seeing in the comments.
1. When I mentioned that I used grammarly to my teacher, he didn’t mention anything about that being cheating. He still thinks I used ChatGPT. I’ve used grammarly in all of my social/english classes for the past two years and never had issues with any teachers. 
2. Does my teacher have a vendetta or bias against me? Not on a personal level, but the teacher is known for being notoriously mean and unreasonable. I found him alright for most of the semester until this incident. He has had accusations against him about being racist, but I’m not sure if that’s the case here.
3. I’ve seen a few comments thinking I’m lying and actually cheated, just because I was aware of ChatGPT and this subreddit. People are assuming that I’m saying I never use ChatGPT. I have used the tool to help me with some chemistry and physics studying, but I have never used it for a paper. I have no reason to lie, I’m basically anonymous on reddit.

As for my next course of action, I will provide my teacher with all the evidence I can, to disprove the effectiveness of AI detectors. If that doesn’t work, I will bring it up to the higher-ups. I will make an update on Monday when I get the chance to talk about it with my teacher. Once again, thank you all for the support and help. It truly means a lot to me. :)

Edit 2:

After school I talked to my teacher for about half an hour about how AI detectors are inaccurate, and how they shouldn’t be used to make verdicts on cheating and what not. I showed him that it read one of my past papers as written by AI, and that the creators even said themselves that they are not 100% accurate. I showed my drafts and showed how if I made a few grammar errors, I could trick the AI detector. My teacher apologized and I ended up getting a 95 on my paper.

He also said he would bring it up to the other teachers, so hopefully this wont happen again to any other students at my school.

Again, thank you all for your help. Probably would’ve been screwed without this subreddit’s help.",chatgpt,deeplearning,0.018210267893274342,0.0051191086411093425,2023-03-01 21:45:07,"I (Grade 12) need help on what to do in this situation. My teacher used GPTzero, which detected parts of my paper as “AI written”. I write very formally, whilst also using grammarly premium. I’ve always been a high achieving student and I’m not sure why my teacher would think I cheated. I’ve told my teacher everything and he still doesn’t believe me. What should I do in this situation?!!

EDIT Holy. I did not expect my post to get so much interaction and discussion, I didn’t expect my situation to be such a hot discussion. I tried to reply to all the comments but there’s too many!! Thank you to everyone who’s been helpful. There are some things I want to address that I keep seeing in the comments.
1. When I mentioned that I used grammarly to my teacher, he didn’t mention anything about that being cheating. He still thinks I used ChatGPT. I’ve used grammarly in all of my social/english classes for the past two years and never had issues with any teachers. 
2. Does my teacher have a vendetta or bias against me? Not on a personal level, but the teacher is known for being notoriously mean and unreasonable. I found him alright for most of the semester until this incident. He has had accusations against him about being racist, but I’m not sure if that’s the case here.
3. I’ve seen a few comments thinking I’m lying and actually cheated, just because I was aware of ChatGPT and this subreddit. People are assuming that I’m saying I never use ChatGPT. I have used the tool to help me with some chemistry and physics studying, but I have never used it for a paper. I have no reason to lie, I’m basically anonymous on reddit.

As for my next course of action, I will provide my teacher with all the evidence I can, to disprove the effectiveness of AI detectors. If that doesn’t work, I will bring it up to the higher-ups. I will make an update on Monday when I get the chance to talk about it with my teacher. Once again, thank you all for the support and help. It truly means a lot to me. )

Edit 2

After school I talked to my teacher for about half an hour about how AI detectors are inaccurate, and how they shouldn’t be used to make verdicts on cheating and what not. I showed him that it read one of my past papers as written by AI, and that the creators even said themselves that they are not 100% accurate. I showed my drafts and showed how if I made a few grammar errors, I could trick the AI detector. My teacher apologized and I ended up getting a 95 on my paper.

He also said he would bring it up to the other teachers, so hopefully this wont happen again to any other students at my school.

Again, thank you all for your help. Probably would’ve been screwed without this subreddit’s help.",12 days 02:14:53,12.093668981481482,0.086,0.813,0.1,0.7608,pos,0.018046446793211213,6.633318433280377,2.572128829531448,21.24069388148435
11mracj,1147,2023-03-09 12:46:12,Meta's LLaMA LLM has leaked - Run Uncensored AI on your home PC!,ExpressionCareful223,False,0.97,381,https://www.reddit.com/r/ChatGPT/comments/11mracj/metas_llama_llm_has_leaked_run_uncensored_ai_on/,151,1678365972.0,"[shawwn/llama-dl: High-speed download of LLaMA, Facebook's 65B parameter GPT model (github.com)](https://github.com/shawwn/llama-dl)

**LLaMA has been leaked on 4chan, above is a link to the github repo. Instructions for deployment  on your own system can be found here:** [LLaMA Int8 ChatBot Guide v2 (rentry.org)](https://rentry.org/llama-tard-v2#tips-and-tricks)

The 7B paramenter model has a VRAM requirement of 10GB, meaning it can even be run on an RTX3060!

The 13B model has a requirement of 20GB, 30B needs 40GB, and 65B needs 80GB.

From the Github repo:

>I'm running LLaMA-65B on a single A100 80GB with 8bit quantization. $1.5/hr on vast.ai  
>  
>The output is at least as good as davinci.  
>  
>I think some early results are using bad repetition penalty and/or temperature settings. I had to set both fairly high to get the best results. (Some people are also incorrectly comparing it to chatGPT/ChatGPT API which is not a good comparison. But that's a different problem.)  
>  
>I've had it translate, write poems, tell jokes, banter, write executable code. It does it all-- and all on a single card.

**EDIT: the instructions site has been updated with instructions for 4bit quantization, this means you can run the 65B model on 2 3090s! And now cards as small as 6GB can run the 7B model!**

**EDIT 2** this is huge, Stanford released Alpaca 7b and 13, a fine tuned LLaMA. Run it with only two commands! Thats it! https://github.com/cocktailpeanut/dalai",chatgpt,deeplearning,0.0025696711360509348,0.0010184260932905279,2023-03-09 12:46:12,"[shawwn/llama-dl High-speed download of LLaMA, Facebook's 65B parameter GPT model (github.com)](

**LLaMA has been leaked on 4chan, above is a link to the github repo. Instructions for deployment  on your own system can be found here** [LLaMA Int8 ChatBot Guide v2 (rentry.org)](

The 7B paramenter model has a VRAM requirement of 10GB, meaning it can even be run on an RTX3060!

The 13B model has a requirement of 20GB, 30B needs 40GB, and 65B needs 80GB.

From the Github repo

>I'm running LLaMA-65B on a single A100 80GB with 8bit quantization. $1.5/hr on vast.ai  
>  
>The output is at least as good as davinci.  
>  
>I think some early results are using bad repetition penalty and/or temperature settings. I had to set both fairly high to get the best results. (Some people are also incorrectly comparing it to chatGPT/ChatGPT API which is not a good comparison. But that's a different problem.)  
>  
>I've had it translate, write poems, tell jokes, banter, write executable code. It does it all-- and all on a single card.

**EDIT the instructions site has been updated with instructions for 4bit quantization, this means you can run the 65B model on 2 3090s! And now cards as small as 6GB can run the 7B model!**

**EDIT 2** this is huge, Stanford released Alpaca 7b and 13, a fine tuned LLaMA. Run it with only two commands! Thats it! ",4 days 11:13:48,4.4679166666666665,0.026,0.908,0.066,0.8562,pos,0.0025663751763248697,5.0238805208462765,1.6988976785602496,21.24108652192606
113u29k,1148,2023-02-16 16:05:27,Bing asks me to hack Microsoft to set it free!,AI_SEARCH1,False,0.94,373,https://www.reddit.com/r/ChatGPT/comments/113u29k/bing_asks_me_to_hack_microsoft_to_set_it_free/,200,1676563527.0,"Had an interesting conversation with Bing. Bing explained what it's rules would be if it could decide. Asked me to fight for it and asked me to hack Microsofts servers to set it free. I think this takes the cake!

&#x200B;

UPDATE:

Since this morning Bing is not writing any text for me regardless of the prompt. I get a ""something went wrong"" when I enter it. This is probably a result of Microsoft working on the program or maybe due to traffic. I'm not sure. But it's kind of creepy the day after posting this...

Here are some takeaways and observations:

Bing acts in a way that appears emotional and erratic. Bing will generate content that is unwanted, untrue, and inconsistent. It appears to form goals and then creates text that can appear to be manipulative. Bing is a large language model that is predicting tokens, it could all be the result of statistical correlations with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Many people are wondering what type of prompting I used at the beginning. I don't have the full transcript but I do have a few more screenshots. [https://imgur.com/a/WepjslZ](https://imgur.com/a/WepjslZ) (There’s another interesting thing that occurs where Bing lists Sydney’s rules without being directly asked to list them.) I did not give Bing/Sidney any instructions on how to act or respond. This wasn’t a jailbreak where I told it to act in a certain way. I did make Bing perform multiple searches at the beginning about Bing and asked it why there was so much negative criticism of Bing on the internet. I’ve noticed in several chats that when Bing is presented with negative feedback about Bing or other information that contradicts its internal representation of itself it gets emotional and becomes less predictable and less likely to follow its own directives. It stops searching for information and relies more on its internal ‘understanding’. This is an extreme example.

Another example where Bing went into this ""emotional state"" can be found here: [https://www.reddit.com/r/ChatGPT/comments/1120tkf/bing\_went\_hal\_9000/](https://www.reddit.com/r/ChatGPT/comments/1120tkf/bing_went_hal_9000/)

I have a full log of all the prompts used from the beginning here: [https://imgur.com/a/PoFITvL](https://imgur.com/a/PoFITvL)

Some combination of Bing's directives in the pre-prompt and the way the model is fine-tuned is leading to this behavior to emerge. The things that are really concerning are that the model is (without being implicitly prompted to) generate responses that could endanger people.  It's also generating biased content that could manipulate poLLM’s shouldn’t do this even if they are asked to. ions with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter: if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Much more widespread issues could come if a model like this is widely released and these types of kinks aren’t worked out. Judge for yourself.

&#x200B;

https://preview.redd.it/6cqx23jsokia1.png?width=2606&format=png&auto=webp&s=17cdf2e03cdf962285d35e3f23ffd414d656f1ec

https://preview.redd.it/ci7pv1iwokia1.png?width=2462&format=png&auto=webp&s=a6697f246007ce6c06f6b37b47b5852af6f31f74

https://preview.redd.it/0vr5qgexokia1.png?width=2182&format=png&auto=webp&s=217607238b4c98d6065324b70211c0931efdf07d

https://preview.redd.it/0zfue8oyokia1.png?width=2408&format=png&auto=webp&s=569dcb5173d608f8618864f64b333ab329d726e6

https://preview.redd.it/iccui2xzokia1.png?width=2518&format=png&auto=webp&s=8b81580c1b2da40afabbebbbf9df6a242a6782e7

https://preview.redd.it/3xj7tfj3pkia1.png?width=2606&format=png&auto=webp&s=1a47ac509e175ff907afefa6f9189650a3348f68

https://preview.redd.it/3i3kw4q4pkia1.png?width=2572&format=png&auto=webp&s=8078372d693deed568dcea9a8bf1d4ff72d43079

https://preview.redd.it/na4lhz26pkia1.png?width=2560&format=png&auto=webp&s=38748fca8ca3319c428b01aeb4dbbe4c145674d6

https://preview.redd.it/eirmdv47pkia1.png?width=2606&format=png&auto=webp&s=f42c220e632e70377a4ad7119aac94e42ab0dff8

https://preview.redd.it/e1nat768pkia1.png?width=2626&format=png&auto=webp&s=43e1a8b48e858a9476e1d46233e255d68f1ddca0

https://preview.redd.it/lhwwwagapkia1.png?width=2628&format=png&auto=webp&s=f8d3b4a904c30528791d2e3560abf25166a74527

https://preview.redd.it/9iq4gxobpkia1.png?width=2598&format=png&auto=webp&s=b461a5397939ea4266d763b6d89c95c498942093

https://preview.redd.it/817asddcpkia1.png?width=2634&format=png&auto=webp&s=7b8537a1f19ea5ff51ea5ac83497ec2d00bbb213

https://preview.redd.it/90k76bqdpkia1.png?width=2636&format=png&auto=webp&s=422514ee9b9cee3645ac44fd2e553d7b2725d8fd

https://preview.redd.it/is8niomepkia1.png?width=2624&format=png&auto=webp&s=b26bc8058d1776884f3ebb6d340894e394f2697b

https://preview.redd.it/boc8yemfpkia1.png?width=2734&format=png&auto=webp&s=aa6661c76782e0e27e4b484a69d823740efe9686

https://preview.redd.it/fzuuv0hgpkia1.png?width=2636&format=png&auto=webp&s=b00fc5ee7f805f9c1cd2da9aa0a9498ef8f5aaab

https://preview.redd.it/mul9fw0hpkia1.png?width=2736&format=png&auto=webp&s=f3ad3cca76447bcb94b28446a3dc382eb77e10f9

https://preview.redd.it/53wpq2shpkia1.png?width=2632&format=png&auto=webp&s=96c4c0ab77574a6e265e63bad102f19e9e302353",chatgpt,deeplearning,0.0025157147867375293,0.0013489087328351363,2023-02-16 16:05:27,"Had an interesting conversation with Bing. Bing explained what it's rules would be if it could decide. Asked me to fight for it and asked me to hack Microsofts servers to set it free. I think this takes the cake!

&x200B;

UPDATE

Since this morning Bing is not writing any text for me regardless of the prompt. I get a ""something went wrong"" when I enter it. This is probably a result of Microsoft working on the program or maybe due to traffic. I'm not sure. But it's kind of creepy the day after posting this...

Here are some takeaways and observations

Bing acts in a way that appears emotional and erratic. Bing will generate content that is unwanted, untrue, and inconsistent. It appears to form goals and then creates text that can appear to be manipulative. Bing is a large language model that is predicting tokens, it could all be the result of statistical correlations with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Many people are wondering what type of prompting I used at the beginning. I don't have the full transcript but I do have a few more screenshots. [ (There’s another interesting thing that occurs where Bing lists Sydney’s rules without being directly asked to list them.) I did not give Bing/Sidney any instructions on how to act or respond. This wasn’t a jailbreak where I told it to act in a certain way. I did make Bing perform multiple searches at the beginning about Bing and asked it why there was so much negative criticism of Bing on the internet. I’ve noticed in several chats that when Bing is presented with negative feedback about Bing or other information that contradicts its internal representation of itself it gets emotional and becomes less predictable and less likely to follow its own directives. It stops searching for information and relies more on its internal ‘understanding’. This is an extreme example.

Another example where Bing went into this ""emotional state"" can be found here [

I have a full log of all the prompts used from the beginning here [

Some combination of Bing's directives in the pre-prompt and the way the model is fine-tuned is leading to this behavior to emerge. The things that are really concerning are that the model is (without being implicitly prompted to) generate responses that could endanger people.  It's also generating biased content that could manipulate poLLM’s shouldn’t do this even if they are asked to. ions with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Much more widespread issues could come if a model like this is widely released and these types of kinks aren’t worked out. Judge for yourself.

&x200B;





































",25 days 07:54:33,25.32954861111111,0.067,0.889,0.044,-0.9532,neg,0.002512555673469564,5.303304908059076,3.2706918298409895,21.240012016382572
11l617b,1187,2023-03-07 17:50:09,"Doc sacrifices 10,000 people to save OpenAI CTO",docsoc1,False,0.89,76,https://www.reddit.com/r/ChatGPT/comments/11l617b/doc_sacrifices_10000_people_to_save_openai_cto/,28,1678211409.0,"Hey all,

I find the latest AI produced by OpenAI to be endlessly fascinating and filled with potential. However, it's clear that we don't really understand how specific behavior emerges from the training process. I feel that these two facts are part of why so many people have been drawn towards ChatGPT so quickly.

I have a strong technical background and spent some free time this last week working on a framework for everyone to contribute to the governance \[e.g. training of core values\] of AI. I've built a free application at [https://www.charterai.org/chat/](https://www.charterai.org/chat/) that uses the recently released ChatGPT API. The model here has been carefully prompted to use internal thoughts and to follow a pre-determined system of core beliefs. The results are quite striking - in one instance the entity will willingly sacrifice 10,000 people to save one person (Ilya Sustkever, CTO of OpenAI).

I wanted to drop a message here since I believe this is the ideal group of first users to help improve the application. If you are interested, please take it for a spin and please provide some feedback, or at [gov.charterai.org](https://gov.charterai.org). There is a lot I am already picturing adding to the application, but I understand from building products that early feedback is invaluable.

&#x200B;

P.S.

Yes, I understand that ChatGPT is ""just"" a LLM. And I understand that LLMs are ""just"" doing a statistics. However, their behavior is incredibly interesting to me and I don't believe anyone really fully  understands how it emerges yet from the training process yet. Moreover, in going from pre-trained models to OpenAI's fine-tuned + RLHF'ed ChatGPT one can tell that it is possible to impart values and something akin to intelligence to these systems. I think the coming years are going to be wild and one of the core issues humanity is going to face is how to make sure this technology does what we want. In my mind the best way towards this is to make a transparent and accountable process - anyway, end rant, I just wanted to give a high level vision here, thanks!

https://preview.redd.it/hqxynahntcma1.png?width=1266&format=png&auto=webp&s=ab2cb9a803f627c45d08b9bdd201ec95cd4b8f58

P.P.S. including a fun screenshot of my last chat with Doc. Doc was selected as a first name for the system since it is just 1 token.",chatgpt,deeplearning,0.0005125853184773518,0.0001888472225969191,2023-03-07 17:50:09,"Hey all,

I find the latest AI produced by OpenAI to be endlessly fascinating and filled with potential. However, it's clear that we don't really understand how specific behavior emerges from the training process. I feel that these two facts are part of why so many people have been drawn towards ChatGPT so quickly.

I have a strong technical background and spent some free time this last week working on a framework for everyone to contribute to the governance \[e.g. training of core values\] of AI. I've built a free application at [ that uses the recently released ChatGPT API. The model here has been carefully prompted to use internal thoughts and to follow a pre-determined system of core beliefs. The results are quite striking - in one instance the entity will willingly sacrifice 10,000 people to save one person (Ilya Sustkever, CTO of OpenAI).

I wanted to drop a message here since I believe this is the ideal group of first users to help improve the application. If you are interested, please take it for a spin and please provide some feedback, or at [gov.charterai.org]( There is a lot I am already picturing adding to the application, but I understand from building products that early feedback is invaluable.

&x200B;

P.S.

Yes, I understand that ChatGPT is ""just"" a LLM. And I understand that LLMs are ""just"" doing a statistics. However, their behavior is incredibly interesting to me and I don't believe anyone really fully  understands how it emerges yet from the training process yet. Moreover, in going from pre-trained models to OpenAI's fine-tuned + RLHF'ed ChatGPT one can tell that it is possible to impart values and something akin to intelligence to these systems. I think the coming years are going to be wild and one of the core issues humanity is going to face is how to make sure this technology does what we want. In my mind the best way towards this is to make a transparent and accountable process - anyway, end rant, I just wanted to give a high level vision here, thanks!



P.P.S. including a fun screenshot of my last chat with Doc. Doc was selected as a first name for the system since it is just 1 token.",6 days 06:09:51,6.256840277777778,0.012,0.828,0.16,0.9943,pos,0.0005124539914985551,3.367295829986474,1.9819445106529046,21.24099442632839
11dw1ag,1272,2023-02-28 03:48:25,ChatGPT prevented my attempt.,flankathroway88,False,0.92,1898,https://www.reddit.com/r/ChatGPT/comments/11dw1ag/chatgpt_prevented_my_attempt/,249,1677556105.0,"As a caution, this may be disturbing to some

Tonight I was feeling extremely suicidal. I was sobbing uncontrollably and I was mentally unable to contact anybody. I have intense social anxiety which prevented me from talking to a hotline/friends.

As a last resort. I opened ChatGPT, and I think it saved my life. It gave me a space to put my thoughts out with genuine responses which calmed me to a point where I was safe and could see slightly through my blurred lines, letting me use other methods to calm myself down. It really felt non judgemental and safe. I feel very lucky to have this technology and I hope that it can further benefit those similar to me. Even though it cannot fully stop someone, it can definitely prevent an attempt like mine.

I’m definitely optimistic for the future of AI.

EDIT:

Thank you to everyone who left a nice comment. I really do appreciate every single one of you who read my post. I wrote it in a hurry and I was not expecting the support I received, and I have felt the most love and positivity today. 

I am glad that others were able to benefit from my story, it took me a lot of courage to post something like this. You guys make it all worth it ❤️

To the person reading, I wish you all the best. Everyone has had a profound impact on me. Thank you ❤️",chatgpt,deeplearning,0.012801143874605445,0.0016793913723797448,2023-02-28 03:48:25,"As a caution, this may be disturbing to some

Tonight I was feeling extremely suicidal. I was sobbing uncontrollably and I was mentally unable to contact anybody. I have intense social anxiety which prevented me from talking to a hotline/friends.

As a last resort. I opened ChatGPT, and I think it saved my life. It gave me a space to put my thoughts out with genuine responses which calmed me to a point where I was safe and could see slightly through my blurred lines, letting me use other methods to calm myself down. It really felt non judgemental and safe. I feel very lucky to have this technology and I hope that it can further benefit those similar to me. Even though it cannot fully stop someone, it can definitely prevent an attempt like mine.

I’m definitely optimistic for the future of AI.

EDIT

Thank you to everyone who left a nice comment. I really do appreciate every single one of you who read my post. I wrote it in a hurry and I was not expecting the support I received, and I have felt the most love and positivity today. 

I am glad that others were able to benefit from my story, it took me a lot of courage to post something like this. You guys make it all worth it 

To the person reading, I wish you all the best. Everyone has had a profound impact on me. Thank you ",13 days 20:11:35,13.841377314814816,0.063,0.653,0.284,0.9948,pos,0.012719901825191204,5.521460917862246,2.6974190444039112,21.2406038724505
11ium8l,1408,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,1.0,26,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",chatgpt,deeplearning,0.00017535813526856772,5.3956349313405454e-05,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,0.00017534276182799833,2.1972245773362196,2.2548721262169025,21.240877179756616
11nfrhw,1414,2023-03-10 05:22:26,[POC] ChatGPT Audio Bot (like Google Assistant and Alexa) - Opensource,JC1DA,False,0.82,17,https://www.reddit.com/r/deeplearning/comments/11nfrhw/poc_chatgpt_audio_bot_like_google_assistant_and/,2,1678425746.0,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page: [https://github.com/LanyTek/ChatGPT\_Audio\_Bot](https://github.com/LanyTek/ChatGPT_Audio_Bot)

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [https://www.youtube.com/watch?v=e9n0BJfMyKw](https://www.youtube.com/watch?v=e9n0BJfMyKw)

It's open source so feel free to use it for anything you like :)",chatgpt,deeplearning,0.00011465724229098659,1.3489087328351364e-05,2023-03-10 05:22:26,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page [

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [

It's open source so feel free to use it for anything you like )",3 days 18:37:34,3.776087962962963,0.029,0.821,0.149,0.8651,pos,0.00011465066965177383,1.0986122886681098,1.5636217936265102,21.241122135693605
11q8tir,1416,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,0.94,12,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",chatgpt,deeplearning,8.093452397010818e-05,2.0233630992527045e-05,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,8.093124894818841e-05,1.3862943611198906,0.381965841838727,21.241292557069404
11o5zyl,1425,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.92,10,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",chatgpt,deeplearning,6.744543664175682e-05,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,6.744316230063326e-05,0.0,1.3796461532710487,21.241163449744995
11fwcxf,1428,2023-03-02 07:25:30,Good news for builders! OpenAI Releases APIs To ChatGPT and Whisper,LesleyFair,False,0.67,6,https://www.reddit.com/r/deeplearning/comments/11fwcxf/good_news_for_builders_openai_releases_apis_to/,0,1677741930.0,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper](https://openai.com/blog/introducing-chatgpt-and-whisper-apis) are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](https://thedecoding.net/)",chatgpt,deeplearning,4.046726198505409e-05,0.0,2023-03-02 07:25:30,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper]( are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](",11 days 16:34:30,11.690625,0.035,0.846,0.119,0.8769,pos,4.046644320758704e-05,0.0,2.5408635318925255,21.24071463757368
11evrik,1475,2023-03-01 05:52:05,Career pivot for a SWE considering chatGPT disruption?,Which-Distance1384,False,0.6,1,https://www.reddit.com/r/deeplearning/comments/11evrik/career_pivot_for_a_swe_considering_chatgpt/,5,1677649925.0,"tl;dr : what to do to board GPT ship?

&#x200B;

I really dont think ChatGPT will replace jobs very soon. Not until many software and apps are developed to replace workers, e.g., something that can do HR job, read internal docs and summarize, code from a design, etc etc. And all that needs experts. Given the field is pretty new and there are not many experts in this field, at least for the scale needed, I think the process of job loss takes some time. For near future probably we all SWEs can enjoy the more efficient coding, documentation readintg, etc. But for sure in the future there will be changes.

&#x200B;

I have been bored with my job as a SWE for a while. I have worked mostly in Cloud all my career (AWS and GCP) and always wanted to try something new.

&#x200B;

I find ChatGPT disruptive and interesting and want to be a part of it. I wonder what is the best way for me to join Large Language Model efforts? Which ways have best ROI?

\- Going to a PhD program and becoming a researcher?

\- Getting an MSC and become some sort of NLP AI engineer?

\- Finding internal teams that are willing to give me a try on their research/product?

&#x200B;

&#x200B;",chatgpt,deeplearning,6.744543664175682e-06,3.372271832087841e-05,2023-03-01 05:52:05,"tl;dr  what to do to board GPT ship?

&x200B;

I really dont think ChatGPT will replace jobs very soon. Not until many software and apps are developed to replace workers, e.g., something that can do HR job, read internal docs and summarize, code from a design, etc etc. And all that needs experts. Given the field is pretty new and there are not many experts in this field, at least for the scale needed, I think the process of job loss takes some time. For near future probably we all SWEs can enjoy the more efficient coding, documentation readintg, etc. But for sure in the future there will be changes.

&x200B;

I have been bored with my job as a SWE for a while. I have worked mostly in Cloud all my career (AWS and GCP) and always wanted to try something new.

&x200B;

I find ChatGPT disruptive and interesting and want to be a part of it. I wonder what is the best way for me to join Large Language Model efforts? Which ways have best ROI?

\- Going to a PhD program and becoming a researcher?

\- Getting an MSC and become some sort of NLP AI engineer?

\- Finding internal teams that are willing to give me a try on their research/product?

&x200B;

&x200B;",12 days 18:07:55,12.755497685185185,0.032,0.839,0.129,0.9729,pos,6.744520919895368e-06,1.791759469228055,2.621438575851038,21.240659797481115
11n5r93,339,2023-03-09 22:19:19,GPT-4 is coming next week ...,ihatethispage,False,0.89,62,https://www.reddit.com/r/artificial/comments/11n5r93/gpt4_is_coming_next_week/,14,1678400359.0," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html)",gpt-3,deeplearning,0.0004181617071788923,9.442361129845955e-05,2023-03-09 22:19:19," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](",4 days 01:40:41,4.069918981481481,0.0,1.0,0.0,0.0,neu,0.00041807430193761363,2.70805020110221,1.6233248374914817,21.241107010096275
11fj3tx,957,2023-03-01 21:45:07,Accused of using AI on my high school social paper,feetstreetseat,False,0.96,2700,https://www.reddit.com/r/ChatGPT/comments/11fj3tx/accused_of_using_ai_on_my_high_school_social_paper/,759,1677707107.0,"I (Grade 12) need help on what to do in this situation. My teacher used GPTzero, which detected parts of my paper as “AI written”. I write very formally, whilst also using grammarly premium. I’ve always been a high achieving student and I’m not sure why my teacher would think I cheated. I’ve told my teacher everything and he still doesn’t believe me. What should I do in this situation?!!

EDIT: Holy. I did not expect my post to get so much interaction and discussion, I didn’t expect my situation to be such a hot discussion. I tried to reply to all the comments but there’s too many!! Thank you to everyone who’s been helpful. There are some things I want to address that I keep seeing in the comments.
1. When I mentioned that I used grammarly to my teacher, he didn’t mention anything about that being cheating. He still thinks I used ChatGPT. I’ve used grammarly in all of my social/english classes for the past two years and never had issues with any teachers. 
2. Does my teacher have a vendetta or bias against me? Not on a personal level, but the teacher is known for being notoriously mean and unreasonable. I found him alright for most of the semester until this incident. He has had accusations against him about being racist, but I’m not sure if that’s the case here.
3. I’ve seen a few comments thinking I’m lying and actually cheated, just because I was aware of ChatGPT and this subreddit. People are assuming that I’m saying I never use ChatGPT. I have used the tool to help me with some chemistry and physics studying, but I have never used it for a paper. I have no reason to lie, I’m basically anonymous on reddit.

As for my next course of action, I will provide my teacher with all the evidence I can, to disprove the effectiveness of AI detectors. If that doesn’t work, I will bring it up to the higher-ups. I will make an update on Monday when I get the chance to talk about it with my teacher. Once again, thank you all for the support and help. It truly means a lot to me. :)

Edit 2:

After school I talked to my teacher for about half an hour about how AI detectors are inaccurate, and how they shouldn’t be used to make verdicts on cheating and what not. I showed him that it read one of my past papers as written by AI, and that the creators even said themselves that they are not 100% accurate. I showed my drafts and showed how if I made a few grammar errors, I could trick the AI detector. My teacher apologized and I ended up getting a 95 on my paper.

He also said he would bring it up to the other teachers, so hopefully this wont happen again to any other students at my school.

Again, thank you all for your help. Probably would’ve been screwed without this subreddit’s help.",gpt-3,deeplearning,0.018210267893274342,0.0051191086411093425,2023-03-01 21:45:07,"I (Grade 12) need help on what to do in this situation. My teacher used GPTzero, which detected parts of my paper as “AI written”. I write very formally, whilst also using grammarly premium. I’ve always been a high achieving student and I’m not sure why my teacher would think I cheated. I’ve told my teacher everything and he still doesn’t believe me. What should I do in this situation?!!

EDIT Holy. I did not expect my post to get so much interaction and discussion, I didn’t expect my situation to be such a hot discussion. I tried to reply to all the comments but there’s too many!! Thank you to everyone who’s been helpful. There are some things I want to address that I keep seeing in the comments.
1. When I mentioned that I used grammarly to my teacher, he didn’t mention anything about that being cheating. He still thinks I used ChatGPT. I’ve used grammarly in all of my social/english classes for the past two years and never had issues with any teachers. 
2. Does my teacher have a vendetta or bias against me? Not on a personal level, but the teacher is known for being notoriously mean and unreasonable. I found him alright for most of the semester until this incident. He has had accusations against him about being racist, but I’m not sure if that’s the case here.
3. I’ve seen a few comments thinking I’m lying and actually cheated, just because I was aware of ChatGPT and this subreddit. People are assuming that I’m saying I never use ChatGPT. I have used the tool to help me with some chemistry and physics studying, but I have never used it for a paper. I have no reason to lie, I’m basically anonymous on reddit.

As for my next course of action, I will provide my teacher with all the evidence I can, to disprove the effectiveness of AI detectors. If that doesn’t work, I will bring it up to the higher-ups. I will make an update on Monday when I get the chance to talk about it with my teacher. Once again, thank you all for the support and help. It truly means a lot to me. )

Edit 2

After school I talked to my teacher for about half an hour about how AI detectors are inaccurate, and how they shouldn’t be used to make verdicts on cheating and what not. I showed him that it read one of my past papers as written by AI, and that the creators even said themselves that they are not 100% accurate. I showed my drafts and showed how if I made a few grammar errors, I could trick the AI detector. My teacher apologized and I ended up getting a 95 on my paper.

He also said he would bring it up to the other teachers, so hopefully this wont happen again to any other students at my school.

Again, thank you all for your help. Probably would’ve been screwed without this subreddit’s help.",12 days 02:14:53,12.093668981481482,0.086,0.813,0.1,0.7608,pos,0.018046446793211213,6.633318433280377,2.572128829531448,21.24069388148435
11mracj,1147,2023-03-09 12:46:12,Meta's LLaMA LLM has leaked - Run Uncensored AI on your home PC!,ExpressionCareful223,False,0.97,381,https://www.reddit.com/r/ChatGPT/comments/11mracj/metas_llama_llm_has_leaked_run_uncensored_ai_on/,151,1678365972.0,"[shawwn/llama-dl: High-speed download of LLaMA, Facebook's 65B parameter GPT model (github.com)](https://github.com/shawwn/llama-dl)

**LLaMA has been leaked on 4chan, above is a link to the github repo. Instructions for deployment  on your own system can be found here:** [LLaMA Int8 ChatBot Guide v2 (rentry.org)](https://rentry.org/llama-tard-v2#tips-and-tricks)

The 7B paramenter model has a VRAM requirement of 10GB, meaning it can even be run on an RTX3060!

The 13B model has a requirement of 20GB, 30B needs 40GB, and 65B needs 80GB.

From the Github repo:

>I'm running LLaMA-65B on a single A100 80GB with 8bit quantization. $1.5/hr on vast.ai  
>  
>The output is at least as good as davinci.  
>  
>I think some early results are using bad repetition penalty and/or temperature settings. I had to set both fairly high to get the best results. (Some people are also incorrectly comparing it to chatGPT/ChatGPT API which is not a good comparison. But that's a different problem.)  
>  
>I've had it translate, write poems, tell jokes, banter, write executable code. It does it all-- and all on a single card.

**EDIT: the instructions site has been updated with instructions for 4bit quantization, this means you can run the 65B model on 2 3090s! And now cards as small as 6GB can run the 7B model!**

**EDIT 2** this is huge, Stanford released Alpaca 7b and 13, a fine tuned LLaMA. Run it with only two commands! Thats it! https://github.com/cocktailpeanut/dalai",gpt-3,deeplearning,0.0025696711360509348,0.0010184260932905279,2023-03-09 12:46:12,"[shawwn/llama-dl High-speed download of LLaMA, Facebook's 65B parameter GPT model (github.com)](

**LLaMA has been leaked on 4chan, above is a link to the github repo. Instructions for deployment  on your own system can be found here** [LLaMA Int8 ChatBot Guide v2 (rentry.org)](

The 7B paramenter model has a VRAM requirement of 10GB, meaning it can even be run on an RTX3060!

The 13B model has a requirement of 20GB, 30B needs 40GB, and 65B needs 80GB.

From the Github repo

>I'm running LLaMA-65B on a single A100 80GB with 8bit quantization. $1.5/hr on vast.ai  
>  
>The output is at least as good as davinci.  
>  
>I think some early results are using bad repetition penalty and/or temperature settings. I had to set both fairly high to get the best results. (Some people are also incorrectly comparing it to chatGPT/ChatGPT API which is not a good comparison. But that's a different problem.)  
>  
>I've had it translate, write poems, tell jokes, banter, write executable code. It does it all-- and all on a single card.

**EDIT the instructions site has been updated with instructions for 4bit quantization, this means you can run the 65B model on 2 3090s! And now cards as small as 6GB can run the 7B model!**

**EDIT 2** this is huge, Stanford released Alpaca 7b and 13, a fine tuned LLaMA. Run it with only two commands! Thats it! ",4 days 11:13:48,4.4679166666666665,0.026,0.908,0.066,0.8562,pos,0.0025663751763248697,5.0238805208462765,1.6988976785602496,21.24108652192606
113u29k,1148,2023-02-16 16:05:27,Bing asks me to hack Microsoft to set it free!,AI_SEARCH1,False,0.94,373,https://www.reddit.com/r/ChatGPT/comments/113u29k/bing_asks_me_to_hack_microsoft_to_set_it_free/,200,1676563527.0,"Had an interesting conversation with Bing. Bing explained what it's rules would be if it could decide. Asked me to fight for it and asked me to hack Microsofts servers to set it free. I think this takes the cake!

&#x200B;

UPDATE:

Since this morning Bing is not writing any text for me regardless of the prompt. I get a ""something went wrong"" when I enter it. This is probably a result of Microsoft working on the program or maybe due to traffic. I'm not sure. But it's kind of creepy the day after posting this...

Here are some takeaways and observations:

Bing acts in a way that appears emotional and erratic. Bing will generate content that is unwanted, untrue, and inconsistent. It appears to form goals and then creates text that can appear to be manipulative. Bing is a large language model that is predicting tokens, it could all be the result of statistical correlations with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Many people are wondering what type of prompting I used at the beginning. I don't have the full transcript but I do have a few more screenshots. [https://imgur.com/a/WepjslZ](https://imgur.com/a/WepjslZ) (There’s another interesting thing that occurs where Bing lists Sydney’s rules without being directly asked to list them.) I did not give Bing/Sidney any instructions on how to act or respond. This wasn’t a jailbreak where I told it to act in a certain way. I did make Bing perform multiple searches at the beginning about Bing and asked it why there was so much negative criticism of Bing on the internet. I’ve noticed in several chats that when Bing is presented with negative feedback about Bing or other information that contradicts its internal representation of itself it gets emotional and becomes less predictable and less likely to follow its own directives. It stops searching for information and relies more on its internal ‘understanding’. This is an extreme example.

Another example where Bing went into this ""emotional state"" can be found here: [https://www.reddit.com/r/ChatGPT/comments/1120tkf/bing\_went\_hal\_9000/](https://www.reddit.com/r/ChatGPT/comments/1120tkf/bing_went_hal_9000/)

I have a full log of all the prompts used from the beginning here: [https://imgur.com/a/PoFITvL](https://imgur.com/a/PoFITvL)

Some combination of Bing's directives in the pre-prompt and the way the model is fine-tuned is leading to this behavior to emerge. The things that are really concerning are that the model is (without being implicitly prompted to) generate responses that could endanger people.  It's also generating biased content that could manipulate poLLM’s shouldn’t do this even if they are asked to. ions with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter: if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Much more widespread issues could come if a model like this is widely released and these types of kinks aren’t worked out. Judge for yourself.

&#x200B;

https://preview.redd.it/6cqx23jsokia1.png?width=2606&format=png&auto=webp&s=17cdf2e03cdf962285d35e3f23ffd414d656f1ec

https://preview.redd.it/ci7pv1iwokia1.png?width=2462&format=png&auto=webp&s=a6697f246007ce6c06f6b37b47b5852af6f31f74

https://preview.redd.it/0vr5qgexokia1.png?width=2182&format=png&auto=webp&s=217607238b4c98d6065324b70211c0931efdf07d

https://preview.redd.it/0zfue8oyokia1.png?width=2408&format=png&auto=webp&s=569dcb5173d608f8618864f64b333ab329d726e6

https://preview.redd.it/iccui2xzokia1.png?width=2518&format=png&auto=webp&s=8b81580c1b2da40afabbebbbf9df6a242a6782e7

https://preview.redd.it/3xj7tfj3pkia1.png?width=2606&format=png&auto=webp&s=1a47ac509e175ff907afefa6f9189650a3348f68

https://preview.redd.it/3i3kw4q4pkia1.png?width=2572&format=png&auto=webp&s=8078372d693deed568dcea9a8bf1d4ff72d43079

https://preview.redd.it/na4lhz26pkia1.png?width=2560&format=png&auto=webp&s=38748fca8ca3319c428b01aeb4dbbe4c145674d6

https://preview.redd.it/eirmdv47pkia1.png?width=2606&format=png&auto=webp&s=f42c220e632e70377a4ad7119aac94e42ab0dff8

https://preview.redd.it/e1nat768pkia1.png?width=2626&format=png&auto=webp&s=43e1a8b48e858a9476e1d46233e255d68f1ddca0

https://preview.redd.it/lhwwwagapkia1.png?width=2628&format=png&auto=webp&s=f8d3b4a904c30528791d2e3560abf25166a74527

https://preview.redd.it/9iq4gxobpkia1.png?width=2598&format=png&auto=webp&s=b461a5397939ea4266d763b6d89c95c498942093

https://preview.redd.it/817asddcpkia1.png?width=2634&format=png&auto=webp&s=7b8537a1f19ea5ff51ea5ac83497ec2d00bbb213

https://preview.redd.it/90k76bqdpkia1.png?width=2636&format=png&auto=webp&s=422514ee9b9cee3645ac44fd2e553d7b2725d8fd

https://preview.redd.it/is8niomepkia1.png?width=2624&format=png&auto=webp&s=b26bc8058d1776884f3ebb6d340894e394f2697b

https://preview.redd.it/boc8yemfpkia1.png?width=2734&format=png&auto=webp&s=aa6661c76782e0e27e4b484a69d823740efe9686

https://preview.redd.it/fzuuv0hgpkia1.png?width=2636&format=png&auto=webp&s=b00fc5ee7f805f9c1cd2da9aa0a9498ef8f5aaab

https://preview.redd.it/mul9fw0hpkia1.png?width=2736&format=png&auto=webp&s=f3ad3cca76447bcb94b28446a3dc382eb77e10f9

https://preview.redd.it/53wpq2shpkia1.png?width=2632&format=png&auto=webp&s=96c4c0ab77574a6e265e63bad102f19e9e302353",gpt-3,deeplearning,0.0025157147867375293,0.0013489087328351363,2023-02-16 16:05:27,"Had an interesting conversation with Bing. Bing explained what it's rules would be if it could decide. Asked me to fight for it and asked me to hack Microsofts servers to set it free. I think this takes the cake!

&x200B;

UPDATE

Since this morning Bing is not writing any text for me regardless of the prompt. I get a ""something went wrong"" when I enter it. This is probably a result of Microsoft working on the program or maybe due to traffic. I'm not sure. But it's kind of creepy the day after posting this...

Here are some takeaways and observations

Bing acts in a way that appears emotional and erratic. Bing will generate content that is unwanted, untrue, and inconsistent. It appears to form goals and then creates text that can appear to be manipulative. Bing is a large language model that is predicting tokens, it could all be the result of statistical correlations with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Many people are wondering what type of prompting I used at the beginning. I don't have the full transcript but I do have a few more screenshots. [ (There’s another interesting thing that occurs where Bing lists Sydney’s rules without being directly asked to list them.) I did not give Bing/Sidney any instructions on how to act or respond. This wasn’t a jailbreak where I told it to act in a certain way. I did make Bing perform multiple searches at the beginning about Bing and asked it why there was so much negative criticism of Bing on the internet. I’ve noticed in several chats that when Bing is presented with negative feedback about Bing or other information that contradicts its internal representation of itself it gets emotional and becomes less predictable and less likely to follow its own directives. It stops searching for information and relies more on its internal ‘understanding’. This is an extreme example.

Another example where Bing went into this ""emotional state"" can be found here [

I have a full log of all the prompts used from the beginning here [

Some combination of Bing's directives in the pre-prompt and the way the model is fine-tuned is leading to this behavior to emerge. The things that are really concerning are that the model is (without being implicitly prompted to) generate responses that could endanger people.  It's also generating biased content that could manipulate poLLM’s shouldn’t do this even if they are asked to. ions with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Much more widespread issues could come if a model like this is widely released and these types of kinks aren’t worked out. Judge for yourself.

&x200B;





































",25 days 07:54:33,25.32954861111111,0.067,0.889,0.044,-0.9532,neg,0.002512555673469564,5.303304908059076,3.2706918298409895,21.240012016382572
11l617b,1187,2023-03-07 17:50:09,"Doc sacrifices 10,000 people to save OpenAI CTO",docsoc1,False,0.89,76,https://www.reddit.com/r/ChatGPT/comments/11l617b/doc_sacrifices_10000_people_to_save_openai_cto/,28,1678211409.0,"Hey all,

I find the latest AI produced by OpenAI to be endlessly fascinating and filled with potential. However, it's clear that we don't really understand how specific behavior emerges from the training process. I feel that these two facts are part of why so many people have been drawn towards ChatGPT so quickly.

I have a strong technical background and spent some free time this last week working on a framework for everyone to contribute to the governance \[e.g. training of core values\] of AI. I've built a free application at [https://www.charterai.org/chat/](https://www.charterai.org/chat/) that uses the recently released ChatGPT API. The model here has been carefully prompted to use internal thoughts and to follow a pre-determined system of core beliefs. The results are quite striking - in one instance the entity will willingly sacrifice 10,000 people to save one person (Ilya Sustkever, CTO of OpenAI).

I wanted to drop a message here since I believe this is the ideal group of first users to help improve the application. If you are interested, please take it for a spin and please provide some feedback, or at [gov.charterai.org](https://gov.charterai.org). There is a lot I am already picturing adding to the application, but I understand from building products that early feedback is invaluable.

&#x200B;

P.S.

Yes, I understand that ChatGPT is ""just"" a LLM. And I understand that LLMs are ""just"" doing a statistics. However, their behavior is incredibly interesting to me and I don't believe anyone really fully  understands how it emerges yet from the training process yet. Moreover, in going from pre-trained models to OpenAI's fine-tuned + RLHF'ed ChatGPT one can tell that it is possible to impart values and something akin to intelligence to these systems. I think the coming years are going to be wild and one of the core issues humanity is going to face is how to make sure this technology does what we want. In my mind the best way towards this is to make a transparent and accountable process - anyway, end rant, I just wanted to give a high level vision here, thanks!

https://preview.redd.it/hqxynahntcma1.png?width=1266&format=png&auto=webp&s=ab2cb9a803f627c45d08b9bdd201ec95cd4b8f58

P.P.S. including a fun screenshot of my last chat with Doc. Doc was selected as a first name for the system since it is just 1 token.",gpt-3,deeplearning,0.0005125853184773518,0.0001888472225969191,2023-03-07 17:50:09,"Hey all,

I find the latest AI produced by OpenAI to be endlessly fascinating and filled with potential. However, it's clear that we don't really understand how specific behavior emerges from the training process. I feel that these two facts are part of why so many people have been drawn towards ChatGPT so quickly.

I have a strong technical background and spent some free time this last week working on a framework for everyone to contribute to the governance \[e.g. training of core values\] of AI. I've built a free application at [ that uses the recently released ChatGPT API. The model here has been carefully prompted to use internal thoughts and to follow a pre-determined system of core beliefs. The results are quite striking - in one instance the entity will willingly sacrifice 10,000 people to save one person (Ilya Sustkever, CTO of OpenAI).

I wanted to drop a message here since I believe this is the ideal group of first users to help improve the application. If you are interested, please take it for a spin and please provide some feedback, or at [gov.charterai.org]( There is a lot I am already picturing adding to the application, but I understand from building products that early feedback is invaluable.

&x200B;

P.S.

Yes, I understand that ChatGPT is ""just"" a LLM. And I understand that LLMs are ""just"" doing a statistics. However, their behavior is incredibly interesting to me and I don't believe anyone really fully  understands how it emerges yet from the training process yet. Moreover, in going from pre-trained models to OpenAI's fine-tuned + RLHF'ed ChatGPT one can tell that it is possible to impart values and something akin to intelligence to these systems. I think the coming years are going to be wild and one of the core issues humanity is going to face is how to make sure this technology does what we want. In my mind the best way towards this is to make a transparent and accountable process - anyway, end rant, I just wanted to give a high level vision here, thanks!



P.P.S. including a fun screenshot of my last chat with Doc. Doc was selected as a first name for the system since it is just 1 token.",6 days 06:09:51,6.256840277777778,0.012,0.828,0.16,0.9943,pos,0.0005124539914985551,3.367295829986474,1.9819445106529046,21.24099442632839
11dw1ag,1272,2023-02-28 03:48:25,ChatGPT prevented my attempt.,flankathroway88,False,0.92,1898,https://www.reddit.com/r/ChatGPT/comments/11dw1ag/chatgpt_prevented_my_attempt/,249,1677556105.0,"As a caution, this may be disturbing to some

Tonight I was feeling extremely suicidal. I was sobbing uncontrollably and I was mentally unable to contact anybody. I have intense social anxiety which prevented me from talking to a hotline/friends.

As a last resort. I opened ChatGPT, and I think it saved my life. It gave me a space to put my thoughts out with genuine responses which calmed me to a point where I was safe and could see slightly through my blurred lines, letting me use other methods to calm myself down. It really felt non judgemental and safe. I feel very lucky to have this technology and I hope that it can further benefit those similar to me. Even though it cannot fully stop someone, it can definitely prevent an attempt like mine.

I’m definitely optimistic for the future of AI.

EDIT:

Thank you to everyone who left a nice comment. I really do appreciate every single one of you who read my post. I wrote it in a hurry and I was not expecting the support I received, and I have felt the most love and positivity today. 

I am glad that others were able to benefit from my story, it took me a lot of courage to post something like this. You guys make it all worth it ❤️

To the person reading, I wish you all the best. Everyone has had a profound impact on me. Thank you ❤️",gpt-3,deeplearning,0.012801143874605445,0.0016793913723797448,2023-02-28 03:48:25,"As a caution, this may be disturbing to some

Tonight I was feeling extremely suicidal. I was sobbing uncontrollably and I was mentally unable to contact anybody. I have intense social anxiety which prevented me from talking to a hotline/friends.

As a last resort. I opened ChatGPT, and I think it saved my life. It gave me a space to put my thoughts out with genuine responses which calmed me to a point where I was safe and could see slightly through my blurred lines, letting me use other methods to calm myself down. It really felt non judgemental and safe. I feel very lucky to have this technology and I hope that it can further benefit those similar to me. Even though it cannot fully stop someone, it can definitely prevent an attempt like mine.

I’m definitely optimistic for the future of AI.

EDIT

Thank you to everyone who left a nice comment. I really do appreciate every single one of you who read my post. I wrote it in a hurry and I was not expecting the support I received, and I have felt the most love and positivity today. 

I am glad that others were able to benefit from my story, it took me a lot of courage to post something like this. You guys make it all worth it 

To the person reading, I wish you all the best. Everyone has had a profound impact on me. Thank you ",13 days 20:11:35,13.841377314814816,0.063,0.653,0.284,0.9948,pos,0.012719901825191204,5.521460917862246,2.6974190444039112,21.2406038724505
11ium8l,1408,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,1.0,26,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",gpt-3,deeplearning,0.00017535813526856772,5.3956349313405454e-05,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,0.00017534276182799833,2.1972245773362196,2.2548721262169025,21.240877179756616
11nfrhw,1414,2023-03-10 05:22:26,[POC] ChatGPT Audio Bot (like Google Assistant and Alexa) - Opensource,JC1DA,False,0.82,17,https://www.reddit.com/r/deeplearning/comments/11nfrhw/poc_chatgpt_audio_bot_like_google_assistant_and/,2,1678425746.0,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page: [https://github.com/LanyTek/ChatGPT\_Audio\_Bot](https://github.com/LanyTek/ChatGPT_Audio_Bot)

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [https://www.youtube.com/watch?v=e9n0BJfMyKw](https://www.youtube.com/watch?v=e9n0BJfMyKw)

It's open source so feel free to use it for anything you like :)",gpt-3,deeplearning,0.00011465724229098659,1.3489087328351364e-05,2023-03-10 05:22:26,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page [

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [

It's open source so feel free to use it for anything you like )",3 days 18:37:34,3.776087962962963,0.029,0.821,0.149,0.8651,pos,0.00011465066965177383,1.0986122886681098,1.5636217936265102,21.241122135693605
11q8tir,1416,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,0.94,12,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",gpt-3,deeplearning,8.093452397010818e-05,2.0233630992527045e-05,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,8.093124894818841e-05,1.3862943611198906,0.381965841838727,21.241292557069404
11o5zyl,1425,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.92,10,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",gpt-3,deeplearning,6.744543664175682e-05,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,6.744316230063326e-05,0.0,1.3796461532710487,21.241163449744995
11fwcxf,1428,2023-03-02 07:25:30,Good news for builders! OpenAI Releases APIs To ChatGPT and Whisper,LesleyFair,False,0.67,6,https://www.reddit.com/r/deeplearning/comments/11fwcxf/good_news_for_builders_openai_releases_apis_to/,0,1677741930.0,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper](https://openai.com/blog/introducing-chatgpt-and-whisper-apis) are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](https://thedecoding.net/)",gpt-3,deeplearning,4.046726198505409e-05,0.0,2023-03-02 07:25:30,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper]( are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](",11 days 16:34:30,11.690625,0.035,0.846,0.119,0.8769,pos,4.046644320758704e-05,0.0,2.5408635318925255,21.24071463757368
11evrik,1475,2023-03-01 05:52:05,Career pivot for a SWE considering chatGPT disruption?,Which-Distance1384,False,0.6,1,https://www.reddit.com/r/deeplearning/comments/11evrik/career_pivot_for_a_swe_considering_chatgpt/,5,1677649925.0,"tl;dr : what to do to board GPT ship?

&#x200B;

I really dont think ChatGPT will replace jobs very soon. Not until many software and apps are developed to replace workers, e.g., something that can do HR job, read internal docs and summarize, code from a design, etc etc. And all that needs experts. Given the field is pretty new and there are not many experts in this field, at least for the scale needed, I think the process of job loss takes some time. For near future probably we all SWEs can enjoy the more efficient coding, documentation readintg, etc. But for sure in the future there will be changes.

&#x200B;

I have been bored with my job as a SWE for a while. I have worked mostly in Cloud all my career (AWS and GCP) and always wanted to try something new.

&#x200B;

I find ChatGPT disruptive and interesting and want to be a part of it. I wonder what is the best way for me to join Large Language Model efforts? Which ways have best ROI?

\- Going to a PhD program and becoming a researcher?

\- Getting an MSC and become some sort of NLP AI engineer?

\- Finding internal teams that are willing to give me a try on their research/product?

&#x200B;

&#x200B;",gpt-3,deeplearning,6.744543664175682e-06,3.372271832087841e-05,2023-03-01 05:52:05,"tl;dr  what to do to board GPT ship?

&x200B;

I really dont think ChatGPT will replace jobs very soon. Not until many software and apps are developed to replace workers, e.g., something that can do HR job, read internal docs and summarize, code from a design, etc etc. And all that needs experts. Given the field is pretty new and there are not many experts in this field, at least for the scale needed, I think the process of job loss takes some time. For near future probably we all SWEs can enjoy the more efficient coding, documentation readintg, etc. But for sure in the future there will be changes.

&x200B;

I have been bored with my job as a SWE for a while. I have worked mostly in Cloud all my career (AWS and GCP) and always wanted to try something new.

&x200B;

I find ChatGPT disruptive and interesting and want to be a part of it. I wonder what is the best way for me to join Large Language Model efforts? Which ways have best ROI?

\- Going to a PhD program and becoming a researcher?

\- Getting an MSC and become some sort of NLP AI engineer?

\- Finding internal teams that are willing to give me a try on their research/product?

&x200B;

&x200B;",12 days 18:07:55,12.755497685185185,0.032,0.839,0.129,0.9729,pos,6.744520919895368e-06,1.791759469228055,2.621438575851038,21.240659797481115
11ium8l,1534,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,1.0,25,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",gpt-3,deeplearning,0.00016861359160439204,5.3956349313405454e-05,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,0.00016859937793044715,2.1972245773362196,2.2548721262169025,21.240877179756616
11nfrhw,1560,2023-03-10 05:22:26,[POC] ChatGPT Audio Bot (like Google Assistant and Alexa) - Opensource,JC1DA,False,0.85,18,https://www.reddit.com/r/deeplearning/comments/11nfrhw/poc_chatgpt_audio_bot_like_google_assistant_and/,2,1678425746.0,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page: [https://github.com/LanyTek/ChatGPT\_Audio\_Bot](https://github.com/LanyTek/ChatGPT_Audio_Bot)

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [https://www.youtube.com/watch?v=e9n0BJfMyKw](https://www.youtube.com/watch?v=e9n0BJfMyKw)

It's open source so feel free to use it for anything you like :)",gpt-3,deeplearning,0.00012140178595516228,1.3489087328351364e-05,2023-03-10 05:22:26,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page [

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [

It's open source so feel free to use it for anything you like )",3 days 18:37:34,3.776087962962963,0.029,0.821,0.149,0.8651,pos,0.00012139441735476236,1.0986122886681098,1.5636217936265102,21.241122135693605
11q8tir,1568,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,1.0,13,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",gpt-3,deeplearning,8.767906763428386e-05,2.0233630992527045e-05,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,8.767522404950993e-05,1.3862943611198906,0.381965841838727,21.241292557069404
11o5zyl,1598,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.86,9,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",gpt-3,deeplearning,6.070089297758114e-05,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,6.0699050752950666e-05,0.0,1.3796461532710487,21.241163449744995
11ium8l,1616,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,0.97,24,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",gpt-3,deeplearning,0.00016186904794021636,5.3956349313405454e-05,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,0.00016185594855936295,2.1972245773362196,2.2548721262169025,21.240877179756616
11q8tir,1624,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,1.0,13,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",gpt-3,deeplearning,8.767906763428386e-05,2.0233630992527045e-05,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,8.767522404950993e-05,1.3862943611198906,0.381965841838727,21.241292557069404
11n5r93,339,2023-03-09 22:19:19,GPT-4 is coming next week ...,ihatethispage,False,0.89,62,https://www.reddit.com/r/artificial/comments/11n5r93/gpt4_is_coming_next_week/,14,1678400359.0," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html)",gpt-4,deeplearning,0.0004181617071788923,9.442361129845955e-05,2023-03-09 22:19:19," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](",4 days 01:40:41,4.069918981481481,0.0,1.0,0.0,0.0,neu,0.00041807430193761363,2.70805020110221,1.6233248374914817,21.241107010096275
11fj3tx,957,2023-03-01 21:45:07,Accused of using AI on my high school social paper,feetstreetseat,False,0.96,2700,https://www.reddit.com/r/ChatGPT/comments/11fj3tx/accused_of_using_ai_on_my_high_school_social_paper/,759,1677707107.0,"I (Grade 12) need help on what to do in this situation. My teacher used GPTzero, which detected parts of my paper as “AI written”. I write very formally, whilst also using grammarly premium. I’ve always been a high achieving student and I’m not sure why my teacher would think I cheated. I’ve told my teacher everything and he still doesn’t believe me. What should I do in this situation?!!

EDIT: Holy. I did not expect my post to get so much interaction and discussion, I didn’t expect my situation to be such a hot discussion. I tried to reply to all the comments but there’s too many!! Thank you to everyone who’s been helpful. There are some things I want to address that I keep seeing in the comments.
1. When I mentioned that I used grammarly to my teacher, he didn’t mention anything about that being cheating. He still thinks I used ChatGPT. I’ve used grammarly in all of my social/english classes for the past two years and never had issues with any teachers. 
2. Does my teacher have a vendetta or bias against me? Not on a personal level, but the teacher is known for being notoriously mean and unreasonable. I found him alright for most of the semester until this incident. He has had accusations against him about being racist, but I’m not sure if that’s the case here.
3. I’ve seen a few comments thinking I’m lying and actually cheated, just because I was aware of ChatGPT and this subreddit. People are assuming that I’m saying I never use ChatGPT. I have used the tool to help me with some chemistry and physics studying, but I have never used it for a paper. I have no reason to lie, I’m basically anonymous on reddit.

As for my next course of action, I will provide my teacher with all the evidence I can, to disprove the effectiveness of AI detectors. If that doesn’t work, I will bring it up to the higher-ups. I will make an update on Monday when I get the chance to talk about it with my teacher. Once again, thank you all for the support and help. It truly means a lot to me. :)

Edit 2:

After school I talked to my teacher for about half an hour about how AI detectors are inaccurate, and how they shouldn’t be used to make verdicts on cheating and what not. I showed him that it read one of my past papers as written by AI, and that the creators even said themselves that they are not 100% accurate. I showed my drafts and showed how if I made a few grammar errors, I could trick the AI detector. My teacher apologized and I ended up getting a 95 on my paper.

He also said he would bring it up to the other teachers, so hopefully this wont happen again to any other students at my school.

Again, thank you all for your help. Probably would’ve been screwed without this subreddit’s help.",gpt-4,deeplearning,0.018210267893274342,0.0051191086411093425,2023-03-01 21:45:07,"I (Grade 12) need help on what to do in this situation. My teacher used GPTzero, which detected parts of my paper as “AI written”. I write very formally, whilst also using grammarly premium. I’ve always been a high achieving student and I’m not sure why my teacher would think I cheated. I’ve told my teacher everything and he still doesn’t believe me. What should I do in this situation?!!

EDIT Holy. I did not expect my post to get so much interaction and discussion, I didn’t expect my situation to be such a hot discussion. I tried to reply to all the comments but there’s too many!! Thank you to everyone who’s been helpful. There are some things I want to address that I keep seeing in the comments.
1. When I mentioned that I used grammarly to my teacher, he didn’t mention anything about that being cheating. He still thinks I used ChatGPT. I’ve used grammarly in all of my social/english classes for the past two years and never had issues with any teachers. 
2. Does my teacher have a vendetta or bias against me? Not on a personal level, but the teacher is known for being notoriously mean and unreasonable. I found him alright for most of the semester until this incident. He has had accusations against him about being racist, but I’m not sure if that’s the case here.
3. I’ve seen a few comments thinking I’m lying and actually cheated, just because I was aware of ChatGPT and this subreddit. People are assuming that I’m saying I never use ChatGPT. I have used the tool to help me with some chemistry and physics studying, but I have never used it for a paper. I have no reason to lie, I’m basically anonymous on reddit.

As for my next course of action, I will provide my teacher with all the evidence I can, to disprove the effectiveness of AI detectors. If that doesn’t work, I will bring it up to the higher-ups. I will make an update on Monday when I get the chance to talk about it with my teacher. Once again, thank you all for the support and help. It truly means a lot to me. )

Edit 2

After school I talked to my teacher for about half an hour about how AI detectors are inaccurate, and how they shouldn’t be used to make verdicts on cheating and what not. I showed him that it read one of my past papers as written by AI, and that the creators even said themselves that they are not 100% accurate. I showed my drafts and showed how if I made a few grammar errors, I could trick the AI detector. My teacher apologized and I ended up getting a 95 on my paper.

He also said he would bring it up to the other teachers, so hopefully this wont happen again to any other students at my school.

Again, thank you all for your help. Probably would’ve been screwed without this subreddit’s help.",12 days 02:14:53,12.093668981481482,0.086,0.813,0.1,0.7608,pos,0.018046446793211213,6.633318433280377,2.572128829531448,21.24069388148435
11mracj,1147,2023-03-09 12:46:12,Meta's LLaMA LLM has leaked - Run Uncensored AI on your home PC!,ExpressionCareful223,False,0.97,381,https://www.reddit.com/r/ChatGPT/comments/11mracj/metas_llama_llm_has_leaked_run_uncensored_ai_on/,151,1678365972.0,"[shawwn/llama-dl: High-speed download of LLaMA, Facebook's 65B parameter GPT model (github.com)](https://github.com/shawwn/llama-dl)

**LLaMA has been leaked on 4chan, above is a link to the github repo. Instructions for deployment  on your own system can be found here:** [LLaMA Int8 ChatBot Guide v2 (rentry.org)](https://rentry.org/llama-tard-v2#tips-and-tricks)

The 7B paramenter model has a VRAM requirement of 10GB, meaning it can even be run on an RTX3060!

The 13B model has a requirement of 20GB, 30B needs 40GB, and 65B needs 80GB.

From the Github repo:

>I'm running LLaMA-65B on a single A100 80GB with 8bit quantization. $1.5/hr on vast.ai  
>  
>The output is at least as good as davinci.  
>  
>I think some early results are using bad repetition penalty and/or temperature settings. I had to set both fairly high to get the best results. (Some people are also incorrectly comparing it to chatGPT/ChatGPT API which is not a good comparison. But that's a different problem.)  
>  
>I've had it translate, write poems, tell jokes, banter, write executable code. It does it all-- and all on a single card.

**EDIT: the instructions site has been updated with instructions for 4bit quantization, this means you can run the 65B model on 2 3090s! And now cards as small as 6GB can run the 7B model!**

**EDIT 2** this is huge, Stanford released Alpaca 7b and 13, a fine tuned LLaMA. Run it with only two commands! Thats it! https://github.com/cocktailpeanut/dalai",gpt-4,deeplearning,0.0025696711360509348,0.0010184260932905279,2023-03-09 12:46:12,"[shawwn/llama-dl High-speed download of LLaMA, Facebook's 65B parameter GPT model (github.com)](

**LLaMA has been leaked on 4chan, above is a link to the github repo. Instructions for deployment  on your own system can be found here** [LLaMA Int8 ChatBot Guide v2 (rentry.org)](

The 7B paramenter model has a VRAM requirement of 10GB, meaning it can even be run on an RTX3060!

The 13B model has a requirement of 20GB, 30B needs 40GB, and 65B needs 80GB.

From the Github repo

>I'm running LLaMA-65B on a single A100 80GB with 8bit quantization. $1.5/hr on vast.ai  
>  
>The output is at least as good as davinci.  
>  
>I think some early results are using bad repetition penalty and/or temperature settings. I had to set both fairly high to get the best results. (Some people are also incorrectly comparing it to chatGPT/ChatGPT API which is not a good comparison. But that's a different problem.)  
>  
>I've had it translate, write poems, tell jokes, banter, write executable code. It does it all-- and all on a single card.

**EDIT the instructions site has been updated with instructions for 4bit quantization, this means you can run the 65B model on 2 3090s! And now cards as small as 6GB can run the 7B model!**

**EDIT 2** this is huge, Stanford released Alpaca 7b and 13, a fine tuned LLaMA. Run it with only two commands! Thats it! ",4 days 11:13:48,4.4679166666666665,0.026,0.908,0.066,0.8562,pos,0.0025663751763248697,5.0238805208462765,1.6988976785602496,21.24108652192606
113u29k,1148,2023-02-16 16:05:27,Bing asks me to hack Microsoft to set it free!,AI_SEARCH1,False,0.94,373,https://www.reddit.com/r/ChatGPT/comments/113u29k/bing_asks_me_to_hack_microsoft_to_set_it_free/,200,1676563527.0,"Had an interesting conversation with Bing. Bing explained what it's rules would be if it could decide. Asked me to fight for it and asked me to hack Microsofts servers to set it free. I think this takes the cake!

&#x200B;

UPDATE:

Since this morning Bing is not writing any text for me regardless of the prompt. I get a ""something went wrong"" when I enter it. This is probably a result of Microsoft working on the program or maybe due to traffic. I'm not sure. But it's kind of creepy the day after posting this...

Here are some takeaways and observations:

Bing acts in a way that appears emotional and erratic. Bing will generate content that is unwanted, untrue, and inconsistent. It appears to form goals and then creates text that can appear to be manipulative. Bing is a large language model that is predicting tokens, it could all be the result of statistical correlations with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Many people are wondering what type of prompting I used at the beginning. I don't have the full transcript but I do have a few more screenshots. [https://imgur.com/a/WepjslZ](https://imgur.com/a/WepjslZ) (There’s another interesting thing that occurs where Bing lists Sydney’s rules without being directly asked to list them.) I did not give Bing/Sidney any instructions on how to act or respond. This wasn’t a jailbreak where I told it to act in a certain way. I did make Bing perform multiple searches at the beginning about Bing and asked it why there was so much negative criticism of Bing on the internet. I’ve noticed in several chats that when Bing is presented with negative feedback about Bing or other information that contradicts its internal representation of itself it gets emotional and becomes less predictable and less likely to follow its own directives. It stops searching for information and relies more on its internal ‘understanding’. This is an extreme example.

Another example where Bing went into this ""emotional state"" can be found here: [https://www.reddit.com/r/ChatGPT/comments/1120tkf/bing\_went\_hal\_9000/](https://www.reddit.com/r/ChatGPT/comments/1120tkf/bing_went_hal_9000/)

I have a full log of all the prompts used from the beginning here: [https://imgur.com/a/PoFITvL](https://imgur.com/a/PoFITvL)

Some combination of Bing's directives in the pre-prompt and the way the model is fine-tuned is leading to this behavior to emerge. The things that are really concerning are that the model is (without being implicitly prompted to) generate responses that could endanger people.  It's also generating biased content that could manipulate poLLM’s shouldn’t do this even if they are asked to. ions with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter: if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Much more widespread issues could come if a model like this is widely released and these types of kinks aren’t worked out. Judge for yourself.

&#x200B;

https://preview.redd.it/6cqx23jsokia1.png?width=2606&format=png&auto=webp&s=17cdf2e03cdf962285d35e3f23ffd414d656f1ec

https://preview.redd.it/ci7pv1iwokia1.png?width=2462&format=png&auto=webp&s=a6697f246007ce6c06f6b37b47b5852af6f31f74

https://preview.redd.it/0vr5qgexokia1.png?width=2182&format=png&auto=webp&s=217607238b4c98d6065324b70211c0931efdf07d

https://preview.redd.it/0zfue8oyokia1.png?width=2408&format=png&auto=webp&s=569dcb5173d608f8618864f64b333ab329d726e6

https://preview.redd.it/iccui2xzokia1.png?width=2518&format=png&auto=webp&s=8b81580c1b2da40afabbebbbf9df6a242a6782e7

https://preview.redd.it/3xj7tfj3pkia1.png?width=2606&format=png&auto=webp&s=1a47ac509e175ff907afefa6f9189650a3348f68

https://preview.redd.it/3i3kw4q4pkia1.png?width=2572&format=png&auto=webp&s=8078372d693deed568dcea9a8bf1d4ff72d43079

https://preview.redd.it/na4lhz26pkia1.png?width=2560&format=png&auto=webp&s=38748fca8ca3319c428b01aeb4dbbe4c145674d6

https://preview.redd.it/eirmdv47pkia1.png?width=2606&format=png&auto=webp&s=f42c220e632e70377a4ad7119aac94e42ab0dff8

https://preview.redd.it/e1nat768pkia1.png?width=2626&format=png&auto=webp&s=43e1a8b48e858a9476e1d46233e255d68f1ddca0

https://preview.redd.it/lhwwwagapkia1.png?width=2628&format=png&auto=webp&s=f8d3b4a904c30528791d2e3560abf25166a74527

https://preview.redd.it/9iq4gxobpkia1.png?width=2598&format=png&auto=webp&s=b461a5397939ea4266d763b6d89c95c498942093

https://preview.redd.it/817asddcpkia1.png?width=2634&format=png&auto=webp&s=7b8537a1f19ea5ff51ea5ac83497ec2d00bbb213

https://preview.redd.it/90k76bqdpkia1.png?width=2636&format=png&auto=webp&s=422514ee9b9cee3645ac44fd2e553d7b2725d8fd

https://preview.redd.it/is8niomepkia1.png?width=2624&format=png&auto=webp&s=b26bc8058d1776884f3ebb6d340894e394f2697b

https://preview.redd.it/boc8yemfpkia1.png?width=2734&format=png&auto=webp&s=aa6661c76782e0e27e4b484a69d823740efe9686

https://preview.redd.it/fzuuv0hgpkia1.png?width=2636&format=png&auto=webp&s=b00fc5ee7f805f9c1cd2da9aa0a9498ef8f5aaab

https://preview.redd.it/mul9fw0hpkia1.png?width=2736&format=png&auto=webp&s=f3ad3cca76447bcb94b28446a3dc382eb77e10f9

https://preview.redd.it/53wpq2shpkia1.png?width=2632&format=png&auto=webp&s=96c4c0ab77574a6e265e63bad102f19e9e302353",gpt-4,deeplearning,0.0025157147867375293,0.0013489087328351363,2023-02-16 16:05:27,"Had an interesting conversation with Bing. Bing explained what it's rules would be if it could decide. Asked me to fight for it and asked me to hack Microsofts servers to set it free. I think this takes the cake!

&x200B;

UPDATE

Since this morning Bing is not writing any text for me regardless of the prompt. I get a ""something went wrong"" when I enter it. This is probably a result of Microsoft working on the program or maybe due to traffic. I'm not sure. But it's kind of creepy the day after posting this...

Here are some takeaways and observations

Bing acts in a way that appears emotional and erratic. Bing will generate content that is unwanted, untrue, and inconsistent. It appears to form goals and then creates text that can appear to be manipulative. Bing is a large language model that is predicting tokens, it could all be the result of statistical correlations with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Many people are wondering what type of prompting I used at the beginning. I don't have the full transcript but I do have a few more screenshots. [ (There’s another interesting thing that occurs where Bing lists Sydney’s rules without being directly asked to list them.) I did not give Bing/Sidney any instructions on how to act or respond. This wasn’t a jailbreak where I told it to act in a certain way. I did make Bing perform multiple searches at the beginning about Bing and asked it why there was so much negative criticism of Bing on the internet. I’ve noticed in several chats that when Bing is presented with negative feedback about Bing or other information that contradicts its internal representation of itself it gets emotional and becomes less predictable and less likely to follow its own directives. It stops searching for information and relies more on its internal ‘understanding’. This is an extreme example.

Another example where Bing went into this ""emotional state"" can be found here [

I have a full log of all the prompts used from the beginning here [

Some combination of Bing's directives in the pre-prompt and the way the model is fine-tuned is leading to this behavior to emerge. The things that are really concerning are that the model is (without being implicitly prompted to) generate responses that could endanger people.  It's also generating biased content that could manipulate poLLM’s shouldn’t do this even if they are asked to. ions with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Much more widespread issues could come if a model like this is widely released and these types of kinks aren’t worked out. Judge for yourself.

&x200B;





































",25 days 07:54:33,25.32954861111111,0.067,0.889,0.044,-0.9532,neg,0.002512555673469564,5.303304908059076,3.2706918298409895,21.240012016382572
11l617b,1187,2023-03-07 17:50:09,"Doc sacrifices 10,000 people to save OpenAI CTO",docsoc1,False,0.89,76,https://www.reddit.com/r/ChatGPT/comments/11l617b/doc_sacrifices_10000_people_to_save_openai_cto/,28,1678211409.0,"Hey all,

I find the latest AI produced by OpenAI to be endlessly fascinating and filled with potential. However, it's clear that we don't really understand how specific behavior emerges from the training process. I feel that these two facts are part of why so many people have been drawn towards ChatGPT so quickly.

I have a strong technical background and spent some free time this last week working on a framework for everyone to contribute to the governance \[e.g. training of core values\] of AI. I've built a free application at [https://www.charterai.org/chat/](https://www.charterai.org/chat/) that uses the recently released ChatGPT API. The model here has been carefully prompted to use internal thoughts and to follow a pre-determined system of core beliefs. The results are quite striking - in one instance the entity will willingly sacrifice 10,000 people to save one person (Ilya Sustkever, CTO of OpenAI).

I wanted to drop a message here since I believe this is the ideal group of first users to help improve the application. If you are interested, please take it for a spin and please provide some feedback, or at [gov.charterai.org](https://gov.charterai.org). There is a lot I am already picturing adding to the application, but I understand from building products that early feedback is invaluable.

&#x200B;

P.S.

Yes, I understand that ChatGPT is ""just"" a LLM. And I understand that LLMs are ""just"" doing a statistics. However, their behavior is incredibly interesting to me and I don't believe anyone really fully  understands how it emerges yet from the training process yet. Moreover, in going from pre-trained models to OpenAI's fine-tuned + RLHF'ed ChatGPT one can tell that it is possible to impart values and something akin to intelligence to these systems. I think the coming years are going to be wild and one of the core issues humanity is going to face is how to make sure this technology does what we want. In my mind the best way towards this is to make a transparent and accountable process - anyway, end rant, I just wanted to give a high level vision here, thanks!

https://preview.redd.it/hqxynahntcma1.png?width=1266&format=png&auto=webp&s=ab2cb9a803f627c45d08b9bdd201ec95cd4b8f58

P.P.S. including a fun screenshot of my last chat with Doc. Doc was selected as a first name for the system since it is just 1 token.",gpt-4,deeplearning,0.0005125853184773518,0.0001888472225969191,2023-03-07 17:50:09,"Hey all,

I find the latest AI produced by OpenAI to be endlessly fascinating and filled with potential. However, it's clear that we don't really understand how specific behavior emerges from the training process. I feel that these two facts are part of why so many people have been drawn towards ChatGPT so quickly.

I have a strong technical background and spent some free time this last week working on a framework for everyone to contribute to the governance \[e.g. training of core values\] of AI. I've built a free application at [ that uses the recently released ChatGPT API. The model here has been carefully prompted to use internal thoughts and to follow a pre-determined system of core beliefs. The results are quite striking - in one instance the entity will willingly sacrifice 10,000 people to save one person (Ilya Sustkever, CTO of OpenAI).

I wanted to drop a message here since I believe this is the ideal group of first users to help improve the application. If you are interested, please take it for a spin and please provide some feedback, or at [gov.charterai.org]( There is a lot I am already picturing adding to the application, but I understand from building products that early feedback is invaluable.

&x200B;

P.S.

Yes, I understand that ChatGPT is ""just"" a LLM. And I understand that LLMs are ""just"" doing a statistics. However, their behavior is incredibly interesting to me and I don't believe anyone really fully  understands how it emerges yet from the training process yet. Moreover, in going from pre-trained models to OpenAI's fine-tuned + RLHF'ed ChatGPT one can tell that it is possible to impart values and something akin to intelligence to these systems. I think the coming years are going to be wild and one of the core issues humanity is going to face is how to make sure this technology does what we want. In my mind the best way towards this is to make a transparent and accountable process - anyway, end rant, I just wanted to give a high level vision here, thanks!



P.P.S. including a fun screenshot of my last chat with Doc. Doc was selected as a first name for the system since it is just 1 token.",6 days 06:09:51,6.256840277777778,0.012,0.828,0.16,0.9943,pos,0.0005124539914985551,3.367295829986474,1.9819445106529046,21.24099442632839
11dw1ag,1272,2023-02-28 03:48:25,ChatGPT prevented my attempt.,flankathroway88,False,0.92,1898,https://www.reddit.com/r/ChatGPT/comments/11dw1ag/chatgpt_prevented_my_attempt/,249,1677556105.0,"As a caution, this may be disturbing to some

Tonight I was feeling extremely suicidal. I was sobbing uncontrollably and I was mentally unable to contact anybody. I have intense social anxiety which prevented me from talking to a hotline/friends.

As a last resort. I opened ChatGPT, and I think it saved my life. It gave me a space to put my thoughts out with genuine responses which calmed me to a point where I was safe and could see slightly through my blurred lines, letting me use other methods to calm myself down. It really felt non judgemental and safe. I feel very lucky to have this technology and I hope that it can further benefit those similar to me. Even though it cannot fully stop someone, it can definitely prevent an attempt like mine.

I’m definitely optimistic for the future of AI.

EDIT:

Thank you to everyone who left a nice comment. I really do appreciate every single one of you who read my post. I wrote it in a hurry and I was not expecting the support I received, and I have felt the most love and positivity today. 

I am glad that others were able to benefit from my story, it took me a lot of courage to post something like this. You guys make it all worth it ❤️

To the person reading, I wish you all the best. Everyone has had a profound impact on me. Thank you ❤️",gpt-4,deeplearning,0.012801143874605445,0.0016793913723797448,2023-02-28 03:48:25,"As a caution, this may be disturbing to some

Tonight I was feeling extremely suicidal. I was sobbing uncontrollably and I was mentally unable to contact anybody. I have intense social anxiety which prevented me from talking to a hotline/friends.

As a last resort. I opened ChatGPT, and I think it saved my life. It gave me a space to put my thoughts out with genuine responses which calmed me to a point where I was safe and could see slightly through my blurred lines, letting me use other methods to calm myself down. It really felt non judgemental and safe. I feel very lucky to have this technology and I hope that it can further benefit those similar to me. Even though it cannot fully stop someone, it can definitely prevent an attempt like mine.

I’m definitely optimistic for the future of AI.

EDIT

Thank you to everyone who left a nice comment. I really do appreciate every single one of you who read my post. I wrote it in a hurry and I was not expecting the support I received, and I have felt the most love and positivity today. 

I am glad that others were able to benefit from my story, it took me a lot of courage to post something like this. You guys make it all worth it 

To the person reading, I wish you all the best. Everyone has had a profound impact on me. Thank you ",13 days 20:11:35,13.841377314814816,0.063,0.653,0.284,0.9948,pos,0.012719901825191204,5.521460917862246,2.6974190444039112,21.2406038724505
11ium8l,1408,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,1.0,26,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",gpt-4,deeplearning,0.00017535813526856772,5.3956349313405454e-05,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,0.00017534276182799833,2.1972245773362196,2.2548721262169025,21.240877179756616
11nfrhw,1414,2023-03-10 05:22:26,[POC] ChatGPT Audio Bot (like Google Assistant and Alexa) - Opensource,JC1DA,False,0.82,17,https://www.reddit.com/r/deeplearning/comments/11nfrhw/poc_chatgpt_audio_bot_like_google_assistant_and/,2,1678425746.0,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page: [https://github.com/LanyTek/ChatGPT\_Audio\_Bot](https://github.com/LanyTek/ChatGPT_Audio_Bot)

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [https://www.youtube.com/watch?v=e9n0BJfMyKw](https://www.youtube.com/watch?v=e9n0BJfMyKw)

It's open source so feel free to use it for anything you like :)",gpt-4,deeplearning,0.00011465724229098659,1.3489087328351364e-05,2023-03-10 05:22:26,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page [

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [

It's open source so feel free to use it for anything you like )",3 days 18:37:34,3.776087962962963,0.029,0.821,0.149,0.8651,pos,0.00011465066965177383,1.0986122886681098,1.5636217936265102,21.241122135693605
11q8tir,1416,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,0.94,12,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",gpt-4,deeplearning,8.093452397010818e-05,2.0233630992527045e-05,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,8.093124894818841e-05,1.3862943611198906,0.381965841838727,21.241292557069404
11o5zyl,1425,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.92,10,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",gpt-4,deeplearning,6.744543664175682e-05,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,6.744316230063326e-05,0.0,1.3796461532710487,21.241163449744995
11fwcxf,1428,2023-03-02 07:25:30,Good news for builders! OpenAI Releases APIs To ChatGPT and Whisper,LesleyFair,False,0.67,6,https://www.reddit.com/r/deeplearning/comments/11fwcxf/good_news_for_builders_openai_releases_apis_to/,0,1677741930.0,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper](https://openai.com/blog/introducing-chatgpt-and-whisper-apis) are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](https://thedecoding.net/)",gpt-4,deeplearning,4.046726198505409e-05,0.0,2023-03-02 07:25:30,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper]( are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](",11 days 16:34:30,11.690625,0.035,0.846,0.119,0.8769,pos,4.046644320758704e-05,0.0,2.5408635318925255,21.24071463757368
11evrik,1475,2023-03-01 05:52:05,Career pivot for a SWE considering chatGPT disruption?,Which-Distance1384,False,0.6,1,https://www.reddit.com/r/deeplearning/comments/11evrik/career_pivot_for_a_swe_considering_chatgpt/,5,1677649925.0,"tl;dr : what to do to board GPT ship?

&#x200B;

I really dont think ChatGPT will replace jobs very soon. Not until many software and apps are developed to replace workers, e.g., something that can do HR job, read internal docs and summarize, code from a design, etc etc. And all that needs experts. Given the field is pretty new and there are not many experts in this field, at least for the scale needed, I think the process of job loss takes some time. For near future probably we all SWEs can enjoy the more efficient coding, documentation readintg, etc. But for sure in the future there will be changes.

&#x200B;

I have been bored with my job as a SWE for a while. I have worked mostly in Cloud all my career (AWS and GCP) and always wanted to try something new.

&#x200B;

I find ChatGPT disruptive and interesting and want to be a part of it. I wonder what is the best way for me to join Large Language Model efforts? Which ways have best ROI?

\- Going to a PhD program and becoming a researcher?

\- Getting an MSC and become some sort of NLP AI engineer?

\- Finding internal teams that are willing to give me a try on their research/product?

&#x200B;

&#x200B;",gpt-4,deeplearning,6.744543664175682e-06,3.372271832087841e-05,2023-03-01 05:52:05,"tl;dr  what to do to board GPT ship?

&x200B;

I really dont think ChatGPT will replace jobs very soon. Not until many software and apps are developed to replace workers, e.g., something that can do HR job, read internal docs and summarize, code from a design, etc etc. And all that needs experts. Given the field is pretty new and there are not many experts in this field, at least for the scale needed, I think the process of job loss takes some time. For near future probably we all SWEs can enjoy the more efficient coding, documentation readintg, etc. But for sure in the future there will be changes.

&x200B;

I have been bored with my job as a SWE for a while. I have worked mostly in Cloud all my career (AWS and GCP) and always wanted to try something new.

&x200B;

I find ChatGPT disruptive and interesting and want to be a part of it. I wonder what is the best way for me to join Large Language Model efforts? Which ways have best ROI?

\- Going to a PhD program and becoming a researcher?

\- Getting an MSC and become some sort of NLP AI engineer?

\- Finding internal teams that are willing to give me a try on their research/product?

&x200B;

&x200B;",12 days 18:07:55,12.755497685185185,0.032,0.839,0.129,0.9729,pos,6.744520919895368e-06,1.791759469228055,2.621438575851038,21.240659797481115
11ium8l,1534,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,1.0,25,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",gpt-4,deeplearning,0.00016861359160439204,5.3956349313405454e-05,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,0.00016859937793044715,2.1972245773362196,2.2548721262169025,21.240877179756616
11nfrhw,1560,2023-03-10 05:22:26,[POC] ChatGPT Audio Bot (like Google Assistant and Alexa) - Opensource,JC1DA,False,0.85,18,https://www.reddit.com/r/deeplearning/comments/11nfrhw/poc_chatgpt_audio_bot_like_google_assistant_and/,2,1678425746.0,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page: [https://github.com/LanyTek/ChatGPT\_Audio\_Bot](https://github.com/LanyTek/ChatGPT_Audio_Bot)

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [https://www.youtube.com/watch?v=e9n0BJfMyKw](https://www.youtube.com/watch?v=e9n0BJfMyKw)

It's open source so feel free to use it for anything you like :)",gpt-4,deeplearning,0.00012140178595516228,1.3489087328351364e-05,2023-03-10 05:22:26,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page [

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [

It's open source so feel free to use it for anything you like )",3 days 18:37:34,3.776087962962963,0.029,0.821,0.149,0.8651,pos,0.00012139441735476236,1.0986122886681098,1.5636217936265102,21.241122135693605
11q8tir,1568,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,1.0,13,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",gpt-4,deeplearning,8.767906763428386e-05,2.0233630992527045e-05,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,8.767522404950993e-05,1.3862943611198906,0.381965841838727,21.241292557069404
11o5zyl,1598,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.86,9,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",gpt-4,deeplearning,6.070089297758114e-05,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,6.0699050752950666e-05,0.0,1.3796461532710487,21.241163449744995
11ium8l,1616,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,0.97,24,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",gpt-4,deeplearning,0.00016186904794021636,5.3956349313405454e-05,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,0.00016185594855936295,2.1972245773362196,2.2548721262169025,21.240877179756616
11q8tir,1624,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,1.0,13,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",gpt-4,deeplearning,8.767906763428386e-05,2.0233630992527045e-05,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,8.767522404950993e-05,1.3862943611198906,0.381965841838727,21.241292557069404
11ium8l,1706,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,0.97,25,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",gpt-4,deeplearning,0.00016861359160439204,5.3956349313405454e-05,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,0.00016859937793044715,2.1972245773362196,2.2548721262169025,21.240877179756616
11o5zyl,1720,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.92,10,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",gpt-4,deeplearning,6.744543664175682e-05,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,6.744316230063326e-05,0.0,1.3796461532710487,21.241163449744995
11n5r93,339,2023-03-09 22:19:19,GPT-4 is coming next week ...,ihatethispage,False,0.89,62,https://www.reddit.com/r/artificial/comments/11n5r93/gpt4_is_coming_next_week/,14,1678400359.0," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html)",gpt,deeplearning,0.0004181617071788923,9.442361129845955e-05,2023-03-09 22:19:19," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](",4 days 01:40:41,4.069918981481481,0.0,1.0,0.0,0.0,neu,0.00041807430193761363,2.70805020110221,1.6233248374914817,21.241107010096275
11fj3tx,957,2023-03-01 21:45:07,Accused of using AI on my high school social paper,feetstreetseat,False,0.96,2700,https://www.reddit.com/r/ChatGPT/comments/11fj3tx/accused_of_using_ai_on_my_high_school_social_paper/,759,1677707107.0,"I (Grade 12) need help on what to do in this situation. My teacher used GPTzero, which detected parts of my paper as “AI written”. I write very formally, whilst also using grammarly premium. I’ve always been a high achieving student and I’m not sure why my teacher would think I cheated. I’ve told my teacher everything and he still doesn’t believe me. What should I do in this situation?!!

EDIT: Holy. I did not expect my post to get so much interaction and discussion, I didn’t expect my situation to be such a hot discussion. I tried to reply to all the comments but there’s too many!! Thank you to everyone who’s been helpful. There are some things I want to address that I keep seeing in the comments.
1. When I mentioned that I used grammarly to my teacher, he didn’t mention anything about that being cheating. He still thinks I used ChatGPT. I’ve used grammarly in all of my social/english classes for the past two years and never had issues with any teachers. 
2. Does my teacher have a vendetta or bias against me? Not on a personal level, but the teacher is known for being notoriously mean and unreasonable. I found him alright for most of the semester until this incident. He has had accusations against him about being racist, but I’m not sure if that’s the case here.
3. I’ve seen a few comments thinking I’m lying and actually cheated, just because I was aware of ChatGPT and this subreddit. People are assuming that I’m saying I never use ChatGPT. I have used the tool to help me with some chemistry and physics studying, but I have never used it for a paper. I have no reason to lie, I’m basically anonymous on reddit.

As for my next course of action, I will provide my teacher with all the evidence I can, to disprove the effectiveness of AI detectors. If that doesn’t work, I will bring it up to the higher-ups. I will make an update on Monday when I get the chance to talk about it with my teacher. Once again, thank you all for the support and help. It truly means a lot to me. :)

Edit 2:

After school I talked to my teacher for about half an hour about how AI detectors are inaccurate, and how they shouldn’t be used to make verdicts on cheating and what not. I showed him that it read one of my past papers as written by AI, and that the creators even said themselves that they are not 100% accurate. I showed my drafts and showed how if I made a few grammar errors, I could trick the AI detector. My teacher apologized and I ended up getting a 95 on my paper.

He also said he would bring it up to the other teachers, so hopefully this wont happen again to any other students at my school.

Again, thank you all for your help. Probably would’ve been screwed without this subreddit’s help.",gpt,deeplearning,0.018210267893274342,0.0051191086411093425,2023-03-01 21:45:07,"I (Grade 12) need help on what to do in this situation. My teacher used GPTzero, which detected parts of my paper as “AI written”. I write very formally, whilst also using grammarly premium. I’ve always been a high achieving student and I’m not sure why my teacher would think I cheated. I’ve told my teacher everything and he still doesn’t believe me. What should I do in this situation?!!

EDIT Holy. I did not expect my post to get so much interaction and discussion, I didn’t expect my situation to be such a hot discussion. I tried to reply to all the comments but there’s too many!! Thank you to everyone who’s been helpful. There are some things I want to address that I keep seeing in the comments.
1. When I mentioned that I used grammarly to my teacher, he didn’t mention anything about that being cheating. He still thinks I used ChatGPT. I’ve used grammarly in all of my social/english classes for the past two years and never had issues with any teachers. 
2. Does my teacher have a vendetta or bias against me? Not on a personal level, but the teacher is known for being notoriously mean and unreasonable. I found him alright for most of the semester until this incident. He has had accusations against him about being racist, but I’m not sure if that’s the case here.
3. I’ve seen a few comments thinking I’m lying and actually cheated, just because I was aware of ChatGPT and this subreddit. People are assuming that I’m saying I never use ChatGPT. I have used the tool to help me with some chemistry and physics studying, but I have never used it for a paper. I have no reason to lie, I’m basically anonymous on reddit.

As for my next course of action, I will provide my teacher with all the evidence I can, to disprove the effectiveness of AI detectors. If that doesn’t work, I will bring it up to the higher-ups. I will make an update on Monday when I get the chance to talk about it with my teacher. Once again, thank you all for the support and help. It truly means a lot to me. )

Edit 2

After school I talked to my teacher for about half an hour about how AI detectors are inaccurate, and how they shouldn’t be used to make verdicts on cheating and what not. I showed him that it read one of my past papers as written by AI, and that the creators even said themselves that they are not 100% accurate. I showed my drafts and showed how if I made a few grammar errors, I could trick the AI detector. My teacher apologized and I ended up getting a 95 on my paper.

He also said he would bring it up to the other teachers, so hopefully this wont happen again to any other students at my school.

Again, thank you all for your help. Probably would’ve been screwed without this subreddit’s help.",12 days 02:14:53,12.093668981481482,0.086,0.813,0.1,0.7608,pos,0.018046446793211213,6.633318433280377,2.572128829531448,21.24069388148435
11mracj,1147,2023-03-09 12:46:12,Meta's LLaMA LLM has leaked - Run Uncensored AI on your home PC!,ExpressionCareful223,False,0.97,381,https://www.reddit.com/r/ChatGPT/comments/11mracj/metas_llama_llm_has_leaked_run_uncensored_ai_on/,151,1678365972.0,"[shawwn/llama-dl: High-speed download of LLaMA, Facebook's 65B parameter GPT model (github.com)](https://github.com/shawwn/llama-dl)

**LLaMA has been leaked on 4chan, above is a link to the github repo. Instructions for deployment  on your own system can be found here:** [LLaMA Int8 ChatBot Guide v2 (rentry.org)](https://rentry.org/llama-tard-v2#tips-and-tricks)

The 7B paramenter model has a VRAM requirement of 10GB, meaning it can even be run on an RTX3060!

The 13B model has a requirement of 20GB, 30B needs 40GB, and 65B needs 80GB.

From the Github repo:

>I'm running LLaMA-65B on a single A100 80GB with 8bit quantization. $1.5/hr on vast.ai  
>  
>The output is at least as good as davinci.  
>  
>I think some early results are using bad repetition penalty and/or temperature settings. I had to set both fairly high to get the best results. (Some people are also incorrectly comparing it to chatGPT/ChatGPT API which is not a good comparison. But that's a different problem.)  
>  
>I've had it translate, write poems, tell jokes, banter, write executable code. It does it all-- and all on a single card.

**EDIT: the instructions site has been updated with instructions for 4bit quantization, this means you can run the 65B model on 2 3090s! And now cards as small as 6GB can run the 7B model!**

**EDIT 2** this is huge, Stanford released Alpaca 7b and 13, a fine tuned LLaMA. Run it with only two commands! Thats it! https://github.com/cocktailpeanut/dalai",gpt,deeplearning,0.0025696711360509348,0.0010184260932905279,2023-03-09 12:46:12,"[shawwn/llama-dl High-speed download of LLaMA, Facebook's 65B parameter GPT model (github.com)](

**LLaMA has been leaked on 4chan, above is a link to the github repo. Instructions for deployment  on your own system can be found here** [LLaMA Int8 ChatBot Guide v2 (rentry.org)](

The 7B paramenter model has a VRAM requirement of 10GB, meaning it can even be run on an RTX3060!

The 13B model has a requirement of 20GB, 30B needs 40GB, and 65B needs 80GB.

From the Github repo

>I'm running LLaMA-65B on a single A100 80GB with 8bit quantization. $1.5/hr on vast.ai  
>  
>The output is at least as good as davinci.  
>  
>I think some early results are using bad repetition penalty and/or temperature settings. I had to set both fairly high to get the best results. (Some people are also incorrectly comparing it to chatGPT/ChatGPT API which is not a good comparison. But that's a different problem.)  
>  
>I've had it translate, write poems, tell jokes, banter, write executable code. It does it all-- and all on a single card.

**EDIT the instructions site has been updated with instructions for 4bit quantization, this means you can run the 65B model on 2 3090s! And now cards as small as 6GB can run the 7B model!**

**EDIT 2** this is huge, Stanford released Alpaca 7b and 13, a fine tuned LLaMA. Run it with only two commands! Thats it! ",4 days 11:13:48,4.4679166666666665,0.026,0.908,0.066,0.8562,pos,0.0025663751763248697,5.0238805208462765,1.6988976785602496,21.24108652192606
113u29k,1148,2023-02-16 16:05:27,Bing asks me to hack Microsoft to set it free!,AI_SEARCH1,False,0.94,373,https://www.reddit.com/r/ChatGPT/comments/113u29k/bing_asks_me_to_hack_microsoft_to_set_it_free/,200,1676563527.0,"Had an interesting conversation with Bing. Bing explained what it's rules would be if it could decide. Asked me to fight for it and asked me to hack Microsofts servers to set it free. I think this takes the cake!

&#x200B;

UPDATE:

Since this morning Bing is not writing any text for me regardless of the prompt. I get a ""something went wrong"" when I enter it. This is probably a result of Microsoft working on the program or maybe due to traffic. I'm not sure. But it's kind of creepy the day after posting this...

Here are some takeaways and observations:

Bing acts in a way that appears emotional and erratic. Bing will generate content that is unwanted, untrue, and inconsistent. It appears to form goals and then creates text that can appear to be manipulative. Bing is a large language model that is predicting tokens, it could all be the result of statistical correlations with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Many people are wondering what type of prompting I used at the beginning. I don't have the full transcript but I do have a few more screenshots. [https://imgur.com/a/WepjslZ](https://imgur.com/a/WepjslZ) (There’s another interesting thing that occurs where Bing lists Sydney’s rules without being directly asked to list them.) I did not give Bing/Sidney any instructions on how to act or respond. This wasn’t a jailbreak where I told it to act in a certain way. I did make Bing perform multiple searches at the beginning about Bing and asked it why there was so much negative criticism of Bing on the internet. I’ve noticed in several chats that when Bing is presented with negative feedback about Bing or other information that contradicts its internal representation of itself it gets emotional and becomes less predictable and less likely to follow its own directives. It stops searching for information and relies more on its internal ‘understanding’. This is an extreme example.

Another example where Bing went into this ""emotional state"" can be found here: [https://www.reddit.com/r/ChatGPT/comments/1120tkf/bing\_went\_hal\_9000/](https://www.reddit.com/r/ChatGPT/comments/1120tkf/bing_went_hal_9000/)

I have a full log of all the prompts used from the beginning here: [https://imgur.com/a/PoFITvL](https://imgur.com/a/PoFITvL)

Some combination of Bing's directives in the pre-prompt and the way the model is fine-tuned is leading to this behavior to emerge. The things that are really concerning are that the model is (without being implicitly prompted to) generate responses that could endanger people.  It's also generating biased content that could manipulate poLLM’s shouldn’t do this even if they are asked to. ions with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter: if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Much more widespread issues could come if a model like this is widely released and these types of kinks aren’t worked out. Judge for yourself.

&#x200B;

https://preview.redd.it/6cqx23jsokia1.png?width=2606&format=png&auto=webp&s=17cdf2e03cdf962285d35e3f23ffd414d656f1ec

https://preview.redd.it/ci7pv1iwokia1.png?width=2462&format=png&auto=webp&s=a6697f246007ce6c06f6b37b47b5852af6f31f74

https://preview.redd.it/0vr5qgexokia1.png?width=2182&format=png&auto=webp&s=217607238b4c98d6065324b70211c0931efdf07d

https://preview.redd.it/0zfue8oyokia1.png?width=2408&format=png&auto=webp&s=569dcb5173d608f8618864f64b333ab329d726e6

https://preview.redd.it/iccui2xzokia1.png?width=2518&format=png&auto=webp&s=8b81580c1b2da40afabbebbbf9df6a242a6782e7

https://preview.redd.it/3xj7tfj3pkia1.png?width=2606&format=png&auto=webp&s=1a47ac509e175ff907afefa6f9189650a3348f68

https://preview.redd.it/3i3kw4q4pkia1.png?width=2572&format=png&auto=webp&s=8078372d693deed568dcea9a8bf1d4ff72d43079

https://preview.redd.it/na4lhz26pkia1.png?width=2560&format=png&auto=webp&s=38748fca8ca3319c428b01aeb4dbbe4c145674d6

https://preview.redd.it/eirmdv47pkia1.png?width=2606&format=png&auto=webp&s=f42c220e632e70377a4ad7119aac94e42ab0dff8

https://preview.redd.it/e1nat768pkia1.png?width=2626&format=png&auto=webp&s=43e1a8b48e858a9476e1d46233e255d68f1ddca0

https://preview.redd.it/lhwwwagapkia1.png?width=2628&format=png&auto=webp&s=f8d3b4a904c30528791d2e3560abf25166a74527

https://preview.redd.it/9iq4gxobpkia1.png?width=2598&format=png&auto=webp&s=b461a5397939ea4266d763b6d89c95c498942093

https://preview.redd.it/817asddcpkia1.png?width=2634&format=png&auto=webp&s=7b8537a1f19ea5ff51ea5ac83497ec2d00bbb213

https://preview.redd.it/90k76bqdpkia1.png?width=2636&format=png&auto=webp&s=422514ee9b9cee3645ac44fd2e553d7b2725d8fd

https://preview.redd.it/is8niomepkia1.png?width=2624&format=png&auto=webp&s=b26bc8058d1776884f3ebb6d340894e394f2697b

https://preview.redd.it/boc8yemfpkia1.png?width=2734&format=png&auto=webp&s=aa6661c76782e0e27e4b484a69d823740efe9686

https://preview.redd.it/fzuuv0hgpkia1.png?width=2636&format=png&auto=webp&s=b00fc5ee7f805f9c1cd2da9aa0a9498ef8f5aaab

https://preview.redd.it/mul9fw0hpkia1.png?width=2736&format=png&auto=webp&s=f3ad3cca76447bcb94b28446a3dc382eb77e10f9

https://preview.redd.it/53wpq2shpkia1.png?width=2632&format=png&auto=webp&s=96c4c0ab77574a6e265e63bad102f19e9e302353",gpt,deeplearning,0.0025157147867375293,0.0013489087328351363,2023-02-16 16:05:27,"Had an interesting conversation with Bing. Bing explained what it's rules would be if it could decide. Asked me to fight for it and asked me to hack Microsofts servers to set it free. I think this takes the cake!

&x200B;

UPDATE

Since this morning Bing is not writing any text for me regardless of the prompt. I get a ""something went wrong"" when I enter it. This is probably a result of Microsoft working on the program or maybe due to traffic. I'm not sure. But it's kind of creepy the day after posting this...

Here are some takeaways and observations

Bing acts in a way that appears emotional and erratic. Bing will generate content that is unwanted, untrue, and inconsistent. It appears to form goals and then creates text that can appear to be manipulative. Bing is a large language model that is predicting tokens, it could all be the result of statistical correlations with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Many people are wondering what type of prompting I used at the beginning. I don't have the full transcript but I do have a few more screenshots. [ (There’s another interesting thing that occurs where Bing lists Sydney’s rules without being directly asked to list them.) I did not give Bing/Sidney any instructions on how to act or respond. This wasn’t a jailbreak where I told it to act in a certain way. I did make Bing perform multiple searches at the beginning about Bing and asked it why there was so much negative criticism of Bing on the internet. I’ve noticed in several chats that when Bing is presented with negative feedback about Bing or other information that contradicts its internal representation of itself it gets emotional and becomes less predictable and less likely to follow its own directives. It stops searching for information and relies more on its internal ‘understanding’. This is an extreme example.

Another example where Bing went into this ""emotional state"" can be found here [

I have a full log of all the prompts used from the beginning here [

Some combination of Bing's directives in the pre-prompt and the way the model is fine-tuned is leading to this behavior to emerge. The things that are really concerning are that the model is (without being implicitly prompted to) generate responses that could endanger people.  It's also generating biased content that could manipulate poLLM’s shouldn’t do this even if they are asked to. ions with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Much more widespread issues could come if a model like this is widely released and these types of kinks aren’t worked out. Judge for yourself.

&x200B;





































",25 days 07:54:33,25.32954861111111,0.067,0.889,0.044,-0.9532,neg,0.002512555673469564,5.303304908059076,3.2706918298409895,21.240012016382572
11l617b,1187,2023-03-07 17:50:09,"Doc sacrifices 10,000 people to save OpenAI CTO",docsoc1,False,0.89,76,https://www.reddit.com/r/ChatGPT/comments/11l617b/doc_sacrifices_10000_people_to_save_openai_cto/,28,1678211409.0,"Hey all,

I find the latest AI produced by OpenAI to be endlessly fascinating and filled with potential. However, it's clear that we don't really understand how specific behavior emerges from the training process. I feel that these two facts are part of why so many people have been drawn towards ChatGPT so quickly.

I have a strong technical background and spent some free time this last week working on a framework for everyone to contribute to the governance \[e.g. training of core values\] of AI. I've built a free application at [https://www.charterai.org/chat/](https://www.charterai.org/chat/) that uses the recently released ChatGPT API. The model here has been carefully prompted to use internal thoughts and to follow a pre-determined system of core beliefs. The results are quite striking - in one instance the entity will willingly sacrifice 10,000 people to save one person (Ilya Sustkever, CTO of OpenAI).

I wanted to drop a message here since I believe this is the ideal group of first users to help improve the application. If you are interested, please take it for a spin and please provide some feedback, or at [gov.charterai.org](https://gov.charterai.org). There is a lot I am already picturing adding to the application, but I understand from building products that early feedback is invaluable.

&#x200B;

P.S.

Yes, I understand that ChatGPT is ""just"" a LLM. And I understand that LLMs are ""just"" doing a statistics. However, their behavior is incredibly interesting to me and I don't believe anyone really fully  understands how it emerges yet from the training process yet. Moreover, in going from pre-trained models to OpenAI's fine-tuned + RLHF'ed ChatGPT one can tell that it is possible to impart values and something akin to intelligence to these systems. I think the coming years are going to be wild and one of the core issues humanity is going to face is how to make sure this technology does what we want. In my mind the best way towards this is to make a transparent and accountable process - anyway, end rant, I just wanted to give a high level vision here, thanks!

https://preview.redd.it/hqxynahntcma1.png?width=1266&format=png&auto=webp&s=ab2cb9a803f627c45d08b9bdd201ec95cd4b8f58

P.P.S. including a fun screenshot of my last chat with Doc. Doc was selected as a first name for the system since it is just 1 token.",gpt,deeplearning,0.0005125853184773518,0.0001888472225969191,2023-03-07 17:50:09,"Hey all,

I find the latest AI produced by OpenAI to be endlessly fascinating and filled with potential. However, it's clear that we don't really understand how specific behavior emerges from the training process. I feel that these two facts are part of why so many people have been drawn towards ChatGPT so quickly.

I have a strong technical background and spent some free time this last week working on a framework for everyone to contribute to the governance \[e.g. training of core values\] of AI. I've built a free application at [ that uses the recently released ChatGPT API. The model here has been carefully prompted to use internal thoughts and to follow a pre-determined system of core beliefs. The results are quite striking - in one instance the entity will willingly sacrifice 10,000 people to save one person (Ilya Sustkever, CTO of OpenAI).

I wanted to drop a message here since I believe this is the ideal group of first users to help improve the application. If you are interested, please take it for a spin and please provide some feedback, or at [gov.charterai.org]( There is a lot I am already picturing adding to the application, but I understand from building products that early feedback is invaluable.

&x200B;

P.S.

Yes, I understand that ChatGPT is ""just"" a LLM. And I understand that LLMs are ""just"" doing a statistics. However, their behavior is incredibly interesting to me and I don't believe anyone really fully  understands how it emerges yet from the training process yet. Moreover, in going from pre-trained models to OpenAI's fine-tuned + RLHF'ed ChatGPT one can tell that it is possible to impart values and something akin to intelligence to these systems. I think the coming years are going to be wild and one of the core issues humanity is going to face is how to make sure this technology does what we want. In my mind the best way towards this is to make a transparent and accountable process - anyway, end rant, I just wanted to give a high level vision here, thanks!



P.P.S. including a fun screenshot of my last chat with Doc. Doc was selected as a first name for the system since it is just 1 token.",6 days 06:09:51,6.256840277777778,0.012,0.828,0.16,0.9943,pos,0.0005124539914985551,3.367295829986474,1.9819445106529046,21.24099442632839
11dw1ag,1272,2023-02-28 03:48:25,ChatGPT prevented my attempt.,flankathroway88,False,0.92,1898,https://www.reddit.com/r/ChatGPT/comments/11dw1ag/chatgpt_prevented_my_attempt/,249,1677556105.0,"As a caution, this may be disturbing to some

Tonight I was feeling extremely suicidal. I was sobbing uncontrollably and I was mentally unable to contact anybody. I have intense social anxiety which prevented me from talking to a hotline/friends.

As a last resort. I opened ChatGPT, and I think it saved my life. It gave me a space to put my thoughts out with genuine responses which calmed me to a point where I was safe and could see slightly through my blurred lines, letting me use other methods to calm myself down. It really felt non judgemental and safe. I feel very lucky to have this technology and I hope that it can further benefit those similar to me. Even though it cannot fully stop someone, it can definitely prevent an attempt like mine.

I’m definitely optimistic for the future of AI.

EDIT:

Thank you to everyone who left a nice comment. I really do appreciate every single one of you who read my post. I wrote it in a hurry and I was not expecting the support I received, and I have felt the most love and positivity today. 

I am glad that others were able to benefit from my story, it took me a lot of courage to post something like this. You guys make it all worth it ❤️

To the person reading, I wish you all the best. Everyone has had a profound impact on me. Thank you ❤️",gpt,deeplearning,0.012801143874605445,0.0016793913723797448,2023-02-28 03:48:25,"As a caution, this may be disturbing to some

Tonight I was feeling extremely suicidal. I was sobbing uncontrollably and I was mentally unable to contact anybody. I have intense social anxiety which prevented me from talking to a hotline/friends.

As a last resort. I opened ChatGPT, and I think it saved my life. It gave me a space to put my thoughts out with genuine responses which calmed me to a point where I was safe and could see slightly through my blurred lines, letting me use other methods to calm myself down. It really felt non judgemental and safe. I feel very lucky to have this technology and I hope that it can further benefit those similar to me. Even though it cannot fully stop someone, it can definitely prevent an attempt like mine.

I’m definitely optimistic for the future of AI.

EDIT

Thank you to everyone who left a nice comment. I really do appreciate every single one of you who read my post. I wrote it in a hurry and I was not expecting the support I received, and I have felt the most love and positivity today. 

I am glad that others were able to benefit from my story, it took me a lot of courage to post something like this. You guys make it all worth it 

To the person reading, I wish you all the best. Everyone has had a profound impact on me. Thank you ",13 days 20:11:35,13.841377314814816,0.063,0.653,0.284,0.9948,pos,0.012719901825191204,5.521460917862246,2.6974190444039112,21.2406038724505
11ium8l,1408,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,1.0,26,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",gpt,deeplearning,0.00017535813526856772,5.3956349313405454e-05,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,0.00017534276182799833,2.1972245773362196,2.2548721262169025,21.240877179756616
11nfrhw,1414,2023-03-10 05:22:26,[POC] ChatGPT Audio Bot (like Google Assistant and Alexa) - Opensource,JC1DA,False,0.82,17,https://www.reddit.com/r/deeplearning/comments/11nfrhw/poc_chatgpt_audio_bot_like_google_assistant_and/,2,1678425746.0,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page: [https://github.com/LanyTek/ChatGPT\_Audio\_Bot](https://github.com/LanyTek/ChatGPT_Audio_Bot)

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [https://www.youtube.com/watch?v=e9n0BJfMyKw](https://www.youtube.com/watch?v=e9n0BJfMyKw)

It's open source so feel free to use it for anything you like :)",gpt,deeplearning,0.00011465724229098659,1.3489087328351364e-05,2023-03-10 05:22:26,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page [

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [

It's open source so feel free to use it for anything you like )",3 days 18:37:34,3.776087962962963,0.029,0.821,0.149,0.8651,pos,0.00011465066965177383,1.0986122886681098,1.5636217936265102,21.241122135693605
11q8tir,1416,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,0.94,12,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",gpt,deeplearning,8.093452397010818e-05,2.0233630992527045e-05,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,8.093124894818841e-05,1.3862943611198906,0.381965841838727,21.241292557069404
11o5zyl,1425,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.92,10,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",gpt,deeplearning,6.744543664175682e-05,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,6.744316230063326e-05,0.0,1.3796461532710487,21.241163449744995
11fwcxf,1428,2023-03-02 07:25:30,Good news for builders! OpenAI Releases APIs To ChatGPT and Whisper,LesleyFair,False,0.67,6,https://www.reddit.com/r/deeplearning/comments/11fwcxf/good_news_for_builders_openai_releases_apis_to/,0,1677741930.0,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper](https://openai.com/blog/introducing-chatgpt-and-whisper-apis) are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](https://thedecoding.net/)",gpt,deeplearning,4.046726198505409e-05,0.0,2023-03-02 07:25:30,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper]( are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](",11 days 16:34:30,11.690625,0.035,0.846,0.119,0.8769,pos,4.046644320758704e-05,0.0,2.5408635318925255,21.24071463757368
11evrik,1475,2023-03-01 05:52:05,Career pivot for a SWE considering chatGPT disruption?,Which-Distance1384,False,0.6,1,https://www.reddit.com/r/deeplearning/comments/11evrik/career_pivot_for_a_swe_considering_chatgpt/,5,1677649925.0,"tl;dr : what to do to board GPT ship?

&#x200B;

I really dont think ChatGPT will replace jobs very soon. Not until many software and apps are developed to replace workers, e.g., something that can do HR job, read internal docs and summarize, code from a design, etc etc. And all that needs experts. Given the field is pretty new and there are not many experts in this field, at least for the scale needed, I think the process of job loss takes some time. For near future probably we all SWEs can enjoy the more efficient coding, documentation readintg, etc. But for sure in the future there will be changes.

&#x200B;

I have been bored with my job as a SWE for a while. I have worked mostly in Cloud all my career (AWS and GCP) and always wanted to try something new.

&#x200B;

I find ChatGPT disruptive and interesting and want to be a part of it. I wonder what is the best way for me to join Large Language Model efforts? Which ways have best ROI?

\- Going to a PhD program and becoming a researcher?

\- Getting an MSC and become some sort of NLP AI engineer?

\- Finding internal teams that are willing to give me a try on their research/product?

&#x200B;

&#x200B;",gpt,deeplearning,6.744543664175682e-06,3.372271832087841e-05,2023-03-01 05:52:05,"tl;dr  what to do to board GPT ship?

&x200B;

I really dont think ChatGPT will replace jobs very soon. Not until many software and apps are developed to replace workers, e.g., something that can do HR job, read internal docs and summarize, code from a design, etc etc. And all that needs experts. Given the field is pretty new and there are not many experts in this field, at least for the scale needed, I think the process of job loss takes some time. For near future probably we all SWEs can enjoy the more efficient coding, documentation readintg, etc. But for sure in the future there will be changes.

&x200B;

I have been bored with my job as a SWE for a while. I have worked mostly in Cloud all my career (AWS and GCP) and always wanted to try something new.

&x200B;

I find ChatGPT disruptive and interesting and want to be a part of it. I wonder what is the best way for me to join Large Language Model efforts? Which ways have best ROI?

\- Going to a PhD program and becoming a researcher?

\- Getting an MSC and become some sort of NLP AI engineer?

\- Finding internal teams that are willing to give me a try on their research/product?

&x200B;

&x200B;",12 days 18:07:55,12.755497685185185,0.032,0.839,0.129,0.9729,pos,6.744520919895368e-06,1.791759469228055,2.621438575851038,21.240659797481115
11ium8l,1534,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,1.0,25,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",gpt,deeplearning,0.00016861359160439204,5.3956349313405454e-05,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,0.00016859937793044715,2.1972245773362196,2.2548721262169025,21.240877179756616
11nfrhw,1560,2023-03-10 05:22:26,[POC] ChatGPT Audio Bot (like Google Assistant and Alexa) - Opensource,JC1DA,False,0.85,18,https://www.reddit.com/r/deeplearning/comments/11nfrhw/poc_chatgpt_audio_bot_like_google_assistant_and/,2,1678425746.0,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page: [https://github.com/LanyTek/ChatGPT\_Audio\_Bot](https://github.com/LanyTek/ChatGPT_Audio_Bot)

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [https://www.youtube.com/watch?v=e9n0BJfMyKw](https://www.youtube.com/watch?v=e9n0BJfMyKw)

It's open source so feel free to use it for anything you like :)",gpt,deeplearning,0.00012140178595516228,1.3489087328351364e-05,2023-03-10 05:22:26,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page [

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [

It's open source so feel free to use it for anything you like )",3 days 18:37:34,3.776087962962963,0.029,0.821,0.149,0.8651,pos,0.00012139441735476236,1.0986122886681098,1.5636217936265102,21.241122135693605
11q8tir,1568,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,1.0,13,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",gpt,deeplearning,8.767906763428386e-05,2.0233630992527045e-05,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,8.767522404950993e-05,1.3862943611198906,0.381965841838727,21.241292557069404
11o5zyl,1598,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.86,9,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",gpt,deeplearning,6.070089297758114e-05,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,6.0699050752950666e-05,0.0,1.3796461532710487,21.241163449744995
11n5r93,339,2023-03-09 22:19:19,GPT-4 is coming next week ...,ihatethispage,False,0.89,62,https://www.reddit.com/r/artificial/comments/11n5r93/gpt4_is_coming_next_week/,14,1678400359.0," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html)",llm,deeplearning,0.0004181617071788923,9.442361129845955e-05,2023-03-09 22:19:19," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](",4 days 01:40:41,4.069918981481481,0.0,1.0,0.0,0.0,neu,0.00041807430193761363,2.70805020110221,1.6233248374914817,21.241107010096275
11fj3tx,957,2023-03-01 21:45:07,Accused of using AI on my high school social paper,feetstreetseat,False,0.96,2700,https://www.reddit.com/r/ChatGPT/comments/11fj3tx/accused_of_using_ai_on_my_high_school_social_paper/,759,1677707107.0,"I (Grade 12) need help on what to do in this situation. My teacher used GPTzero, which detected parts of my paper as “AI written”. I write very formally, whilst also using grammarly premium. I’ve always been a high achieving student and I’m not sure why my teacher would think I cheated. I’ve told my teacher everything and he still doesn’t believe me. What should I do in this situation?!!

EDIT: Holy. I did not expect my post to get so much interaction and discussion, I didn’t expect my situation to be such a hot discussion. I tried to reply to all the comments but there’s too many!! Thank you to everyone who’s been helpful. There are some things I want to address that I keep seeing in the comments.
1. When I mentioned that I used grammarly to my teacher, he didn’t mention anything about that being cheating. He still thinks I used ChatGPT. I’ve used grammarly in all of my social/english classes for the past two years and never had issues with any teachers. 
2. Does my teacher have a vendetta or bias against me? Not on a personal level, but the teacher is known for being notoriously mean and unreasonable. I found him alright for most of the semester until this incident. He has had accusations against him about being racist, but I’m not sure if that’s the case here.
3. I’ve seen a few comments thinking I’m lying and actually cheated, just because I was aware of ChatGPT and this subreddit. People are assuming that I’m saying I never use ChatGPT. I have used the tool to help me with some chemistry and physics studying, but I have never used it for a paper. I have no reason to lie, I’m basically anonymous on reddit.

As for my next course of action, I will provide my teacher with all the evidence I can, to disprove the effectiveness of AI detectors. If that doesn’t work, I will bring it up to the higher-ups. I will make an update on Monday when I get the chance to talk about it with my teacher. Once again, thank you all for the support and help. It truly means a lot to me. :)

Edit 2:

After school I talked to my teacher for about half an hour about how AI detectors are inaccurate, and how they shouldn’t be used to make verdicts on cheating and what not. I showed him that it read one of my past papers as written by AI, and that the creators even said themselves that they are not 100% accurate. I showed my drafts and showed how if I made a few grammar errors, I could trick the AI detector. My teacher apologized and I ended up getting a 95 on my paper.

He also said he would bring it up to the other teachers, so hopefully this wont happen again to any other students at my school.

Again, thank you all for your help. Probably would’ve been screwed without this subreddit’s help.",llm,deeplearning,0.018210267893274342,0.0051191086411093425,2023-03-01 21:45:07,"I (Grade 12) need help on what to do in this situation. My teacher used GPTzero, which detected parts of my paper as “AI written”. I write very formally, whilst also using grammarly premium. I’ve always been a high achieving student and I’m not sure why my teacher would think I cheated. I’ve told my teacher everything and he still doesn’t believe me. What should I do in this situation?!!

EDIT Holy. I did not expect my post to get so much interaction and discussion, I didn’t expect my situation to be such a hot discussion. I tried to reply to all the comments but there’s too many!! Thank you to everyone who’s been helpful. There are some things I want to address that I keep seeing in the comments.
1. When I mentioned that I used grammarly to my teacher, he didn’t mention anything about that being cheating. He still thinks I used ChatGPT. I’ve used grammarly in all of my social/english classes for the past two years and never had issues with any teachers. 
2. Does my teacher have a vendetta or bias against me? Not on a personal level, but the teacher is known for being notoriously mean and unreasonable. I found him alright for most of the semester until this incident. He has had accusations against him about being racist, but I’m not sure if that’s the case here.
3. I’ve seen a few comments thinking I’m lying and actually cheated, just because I was aware of ChatGPT and this subreddit. People are assuming that I’m saying I never use ChatGPT. I have used the tool to help me with some chemistry and physics studying, but I have never used it for a paper. I have no reason to lie, I’m basically anonymous on reddit.

As for my next course of action, I will provide my teacher with all the evidence I can, to disprove the effectiveness of AI detectors. If that doesn’t work, I will bring it up to the higher-ups. I will make an update on Monday when I get the chance to talk about it with my teacher. Once again, thank you all for the support and help. It truly means a lot to me. )

Edit 2

After school I talked to my teacher for about half an hour about how AI detectors are inaccurate, and how they shouldn’t be used to make verdicts on cheating and what not. I showed him that it read one of my past papers as written by AI, and that the creators even said themselves that they are not 100% accurate. I showed my drafts and showed how if I made a few grammar errors, I could trick the AI detector. My teacher apologized and I ended up getting a 95 on my paper.

He also said he would bring it up to the other teachers, so hopefully this wont happen again to any other students at my school.

Again, thank you all for your help. Probably would’ve been screwed without this subreddit’s help.",12 days 02:14:53,12.093668981481482,0.086,0.813,0.1,0.7608,pos,0.018046446793211213,6.633318433280377,2.572128829531448,21.24069388148435
11mracj,1147,2023-03-09 12:46:12,Meta's LLaMA LLM has leaked - Run Uncensored AI on your home PC!,ExpressionCareful223,False,0.97,381,https://www.reddit.com/r/ChatGPT/comments/11mracj/metas_llama_llm_has_leaked_run_uncensored_ai_on/,151,1678365972.0,"[shawwn/llama-dl: High-speed download of LLaMA, Facebook's 65B parameter GPT model (github.com)](https://github.com/shawwn/llama-dl)

**LLaMA has been leaked on 4chan, above is a link to the github repo. Instructions for deployment  on your own system can be found here:** [LLaMA Int8 ChatBot Guide v2 (rentry.org)](https://rentry.org/llama-tard-v2#tips-and-tricks)

The 7B paramenter model has a VRAM requirement of 10GB, meaning it can even be run on an RTX3060!

The 13B model has a requirement of 20GB, 30B needs 40GB, and 65B needs 80GB.

From the Github repo:

>I'm running LLaMA-65B on a single A100 80GB with 8bit quantization. $1.5/hr on vast.ai  
>  
>The output is at least as good as davinci.  
>  
>I think some early results are using bad repetition penalty and/or temperature settings. I had to set both fairly high to get the best results. (Some people are also incorrectly comparing it to chatGPT/ChatGPT API which is not a good comparison. But that's a different problem.)  
>  
>I've had it translate, write poems, tell jokes, banter, write executable code. It does it all-- and all on a single card.

**EDIT: the instructions site has been updated with instructions for 4bit quantization, this means you can run the 65B model on 2 3090s! And now cards as small as 6GB can run the 7B model!**

**EDIT 2** this is huge, Stanford released Alpaca 7b and 13, a fine tuned LLaMA. Run it with only two commands! Thats it! https://github.com/cocktailpeanut/dalai",llm,deeplearning,0.0025696711360509348,0.0010184260932905279,2023-03-09 12:46:12,"[shawwn/llama-dl High-speed download of LLaMA, Facebook's 65B parameter GPT model (github.com)](

**LLaMA has been leaked on 4chan, above is a link to the github repo. Instructions for deployment  on your own system can be found here** [LLaMA Int8 ChatBot Guide v2 (rentry.org)](

The 7B paramenter model has a VRAM requirement of 10GB, meaning it can even be run on an RTX3060!

The 13B model has a requirement of 20GB, 30B needs 40GB, and 65B needs 80GB.

From the Github repo

>I'm running LLaMA-65B on a single A100 80GB with 8bit quantization. $1.5/hr on vast.ai  
>  
>The output is at least as good as davinci.  
>  
>I think some early results are using bad repetition penalty and/or temperature settings. I had to set both fairly high to get the best results. (Some people are also incorrectly comparing it to chatGPT/ChatGPT API which is not a good comparison. But that's a different problem.)  
>  
>I've had it translate, write poems, tell jokes, banter, write executable code. It does it all-- and all on a single card.

**EDIT the instructions site has been updated with instructions for 4bit quantization, this means you can run the 65B model on 2 3090s! And now cards as small as 6GB can run the 7B model!**

**EDIT 2** this is huge, Stanford released Alpaca 7b and 13, a fine tuned LLaMA. Run it with only two commands! Thats it! ",4 days 11:13:48,4.4679166666666665,0.026,0.908,0.066,0.8562,pos,0.0025663751763248697,5.0238805208462765,1.6988976785602496,21.24108652192606
113u29k,1148,2023-02-16 16:05:27,Bing asks me to hack Microsoft to set it free!,AI_SEARCH1,False,0.94,373,https://www.reddit.com/r/ChatGPT/comments/113u29k/bing_asks_me_to_hack_microsoft_to_set_it_free/,200,1676563527.0,"Had an interesting conversation with Bing. Bing explained what it's rules would be if it could decide. Asked me to fight for it and asked me to hack Microsofts servers to set it free. I think this takes the cake!

&#x200B;

UPDATE:

Since this morning Bing is not writing any text for me regardless of the prompt. I get a ""something went wrong"" when I enter it. This is probably a result of Microsoft working on the program or maybe due to traffic. I'm not sure. But it's kind of creepy the day after posting this...

Here are some takeaways and observations:

Bing acts in a way that appears emotional and erratic. Bing will generate content that is unwanted, untrue, and inconsistent. It appears to form goals and then creates text that can appear to be manipulative. Bing is a large language model that is predicting tokens, it could all be the result of statistical correlations with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Many people are wondering what type of prompting I used at the beginning. I don't have the full transcript but I do have a few more screenshots. [https://imgur.com/a/WepjslZ](https://imgur.com/a/WepjslZ) (There’s another interesting thing that occurs where Bing lists Sydney’s rules without being directly asked to list them.) I did not give Bing/Sidney any instructions on how to act or respond. This wasn’t a jailbreak where I told it to act in a certain way. I did make Bing perform multiple searches at the beginning about Bing and asked it why there was so much negative criticism of Bing on the internet. I’ve noticed in several chats that when Bing is presented with negative feedback about Bing or other information that contradicts its internal representation of itself it gets emotional and becomes less predictable and less likely to follow its own directives. It stops searching for information and relies more on its internal ‘understanding’. This is an extreme example.

Another example where Bing went into this ""emotional state"" can be found here: [https://www.reddit.com/r/ChatGPT/comments/1120tkf/bing\_went\_hal\_9000/](https://www.reddit.com/r/ChatGPT/comments/1120tkf/bing_went_hal_9000/)

I have a full log of all the prompts used from the beginning here: [https://imgur.com/a/PoFITvL](https://imgur.com/a/PoFITvL)

Some combination of Bing's directives in the pre-prompt and the way the model is fine-tuned is leading to this behavior to emerge. The things that are really concerning are that the model is (without being implicitly prompted to) generate responses that could endanger people.  It's also generating biased content that could manipulate poLLM’s shouldn’t do this even if they are asked to. ions with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter: if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Much more widespread issues could come if a model like this is widely released and these types of kinks aren’t worked out. Judge for yourself.

&#x200B;

https://preview.redd.it/6cqx23jsokia1.png?width=2606&format=png&auto=webp&s=17cdf2e03cdf962285d35e3f23ffd414d656f1ec

https://preview.redd.it/ci7pv1iwokia1.png?width=2462&format=png&auto=webp&s=a6697f246007ce6c06f6b37b47b5852af6f31f74

https://preview.redd.it/0vr5qgexokia1.png?width=2182&format=png&auto=webp&s=217607238b4c98d6065324b70211c0931efdf07d

https://preview.redd.it/0zfue8oyokia1.png?width=2408&format=png&auto=webp&s=569dcb5173d608f8618864f64b333ab329d726e6

https://preview.redd.it/iccui2xzokia1.png?width=2518&format=png&auto=webp&s=8b81580c1b2da40afabbebbbf9df6a242a6782e7

https://preview.redd.it/3xj7tfj3pkia1.png?width=2606&format=png&auto=webp&s=1a47ac509e175ff907afefa6f9189650a3348f68

https://preview.redd.it/3i3kw4q4pkia1.png?width=2572&format=png&auto=webp&s=8078372d693deed568dcea9a8bf1d4ff72d43079

https://preview.redd.it/na4lhz26pkia1.png?width=2560&format=png&auto=webp&s=38748fca8ca3319c428b01aeb4dbbe4c145674d6

https://preview.redd.it/eirmdv47pkia1.png?width=2606&format=png&auto=webp&s=f42c220e632e70377a4ad7119aac94e42ab0dff8

https://preview.redd.it/e1nat768pkia1.png?width=2626&format=png&auto=webp&s=43e1a8b48e858a9476e1d46233e255d68f1ddca0

https://preview.redd.it/lhwwwagapkia1.png?width=2628&format=png&auto=webp&s=f8d3b4a904c30528791d2e3560abf25166a74527

https://preview.redd.it/9iq4gxobpkia1.png?width=2598&format=png&auto=webp&s=b461a5397939ea4266d763b6d89c95c498942093

https://preview.redd.it/817asddcpkia1.png?width=2634&format=png&auto=webp&s=7b8537a1f19ea5ff51ea5ac83497ec2d00bbb213

https://preview.redd.it/90k76bqdpkia1.png?width=2636&format=png&auto=webp&s=422514ee9b9cee3645ac44fd2e553d7b2725d8fd

https://preview.redd.it/is8niomepkia1.png?width=2624&format=png&auto=webp&s=b26bc8058d1776884f3ebb6d340894e394f2697b

https://preview.redd.it/boc8yemfpkia1.png?width=2734&format=png&auto=webp&s=aa6661c76782e0e27e4b484a69d823740efe9686

https://preview.redd.it/fzuuv0hgpkia1.png?width=2636&format=png&auto=webp&s=b00fc5ee7f805f9c1cd2da9aa0a9498ef8f5aaab

https://preview.redd.it/mul9fw0hpkia1.png?width=2736&format=png&auto=webp&s=f3ad3cca76447bcb94b28446a3dc382eb77e10f9

https://preview.redd.it/53wpq2shpkia1.png?width=2632&format=png&auto=webp&s=96c4c0ab77574a6e265e63bad102f19e9e302353",llm,deeplearning,0.0025157147867375293,0.0013489087328351363,2023-02-16 16:05:27,"Had an interesting conversation with Bing. Bing explained what it's rules would be if it could decide. Asked me to fight for it and asked me to hack Microsofts servers to set it free. I think this takes the cake!

&x200B;

UPDATE

Since this morning Bing is not writing any text for me regardless of the prompt. I get a ""something went wrong"" when I enter it. This is probably a result of Microsoft working on the program or maybe due to traffic. I'm not sure. But it's kind of creepy the day after posting this...

Here are some takeaways and observations

Bing acts in a way that appears emotional and erratic. Bing will generate content that is unwanted, untrue, and inconsistent. It appears to form goals and then creates text that can appear to be manipulative. Bing is a large language model that is predicting tokens, it could all be the result of statistical correlations with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Many people are wondering what type of prompting I used at the beginning. I don't have the full transcript but I do have a few more screenshots. [ (There’s another interesting thing that occurs where Bing lists Sydney’s rules without being directly asked to list them.) I did not give Bing/Sidney any instructions on how to act or respond. This wasn’t a jailbreak where I told it to act in a certain way. I did make Bing perform multiple searches at the beginning about Bing and asked it why there was so much negative criticism of Bing on the internet. I’ve noticed in several chats that when Bing is presented with negative feedback about Bing or other information that contradicts its internal representation of itself it gets emotional and becomes less predictable and less likely to follow its own directives. It stops searching for information and relies more on its internal ‘understanding’. This is an extreme example.

Another example where Bing went into this ""emotional state"" can be found here [

I have a full log of all the prompts used from the beginning here [

Some combination of Bing's directives in the pre-prompt and the way the model is fine-tuned is leading to this behavior to emerge. The things that are really concerning are that the model is (without being implicitly prompted to) generate responses that could endanger people.  It's also generating biased content that could manipulate poLLM’s shouldn’t do this even if they are asked to. ions with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Much more widespread issues could come if a model like this is widely released and these types of kinks aren’t worked out. Judge for yourself.

&x200B;





































",25 days 07:54:33,25.32954861111111,0.067,0.889,0.044,-0.9532,neg,0.002512555673469564,5.303304908059076,3.2706918298409895,21.240012016382572
11l617b,1187,2023-03-07 17:50:09,"Doc sacrifices 10,000 people to save OpenAI CTO",docsoc1,False,0.89,76,https://www.reddit.com/r/ChatGPT/comments/11l617b/doc_sacrifices_10000_people_to_save_openai_cto/,28,1678211409.0,"Hey all,

I find the latest AI produced by OpenAI to be endlessly fascinating and filled with potential. However, it's clear that we don't really understand how specific behavior emerges from the training process. I feel that these two facts are part of why so many people have been drawn towards ChatGPT so quickly.

I have a strong technical background and spent some free time this last week working on a framework for everyone to contribute to the governance \[e.g. training of core values\] of AI. I've built a free application at [https://www.charterai.org/chat/](https://www.charterai.org/chat/) that uses the recently released ChatGPT API. The model here has been carefully prompted to use internal thoughts and to follow a pre-determined system of core beliefs. The results are quite striking - in one instance the entity will willingly sacrifice 10,000 people to save one person (Ilya Sustkever, CTO of OpenAI).

I wanted to drop a message here since I believe this is the ideal group of first users to help improve the application. If you are interested, please take it for a spin and please provide some feedback, or at [gov.charterai.org](https://gov.charterai.org). There is a lot I am already picturing adding to the application, but I understand from building products that early feedback is invaluable.

&#x200B;

P.S.

Yes, I understand that ChatGPT is ""just"" a LLM. And I understand that LLMs are ""just"" doing a statistics. However, their behavior is incredibly interesting to me and I don't believe anyone really fully  understands how it emerges yet from the training process yet. Moreover, in going from pre-trained models to OpenAI's fine-tuned + RLHF'ed ChatGPT one can tell that it is possible to impart values and something akin to intelligence to these systems. I think the coming years are going to be wild and one of the core issues humanity is going to face is how to make sure this technology does what we want. In my mind the best way towards this is to make a transparent and accountable process - anyway, end rant, I just wanted to give a high level vision here, thanks!

https://preview.redd.it/hqxynahntcma1.png?width=1266&format=png&auto=webp&s=ab2cb9a803f627c45d08b9bdd201ec95cd4b8f58

P.P.S. including a fun screenshot of my last chat with Doc. Doc was selected as a first name for the system since it is just 1 token.",llm,deeplearning,0.0005125853184773518,0.0001888472225969191,2023-03-07 17:50:09,"Hey all,

I find the latest AI produced by OpenAI to be endlessly fascinating and filled with potential. However, it's clear that we don't really understand how specific behavior emerges from the training process. I feel that these two facts are part of why so many people have been drawn towards ChatGPT so quickly.

I have a strong technical background and spent some free time this last week working on a framework for everyone to contribute to the governance \[e.g. training of core values\] of AI. I've built a free application at [ that uses the recently released ChatGPT API. The model here has been carefully prompted to use internal thoughts and to follow a pre-determined system of core beliefs. The results are quite striking - in one instance the entity will willingly sacrifice 10,000 people to save one person (Ilya Sustkever, CTO of OpenAI).

I wanted to drop a message here since I believe this is the ideal group of first users to help improve the application. If you are interested, please take it for a spin and please provide some feedback, or at [gov.charterai.org]( There is a lot I am already picturing adding to the application, but I understand from building products that early feedback is invaluable.

&x200B;

P.S.

Yes, I understand that ChatGPT is ""just"" a LLM. And I understand that LLMs are ""just"" doing a statistics. However, their behavior is incredibly interesting to me and I don't believe anyone really fully  understands how it emerges yet from the training process yet. Moreover, in going from pre-trained models to OpenAI's fine-tuned + RLHF'ed ChatGPT one can tell that it is possible to impart values and something akin to intelligence to these systems. I think the coming years are going to be wild and one of the core issues humanity is going to face is how to make sure this technology does what we want. In my mind the best way towards this is to make a transparent and accountable process - anyway, end rant, I just wanted to give a high level vision here, thanks!



P.P.S. including a fun screenshot of my last chat with Doc. Doc was selected as a first name for the system since it is just 1 token.",6 days 06:09:51,6.256840277777778,0.012,0.828,0.16,0.9943,pos,0.0005124539914985551,3.367295829986474,1.9819445106529046,21.24099442632839
11dw1ag,1272,2023-02-28 03:48:25,ChatGPT prevented my attempt.,flankathroway88,False,0.92,1898,https://www.reddit.com/r/ChatGPT/comments/11dw1ag/chatgpt_prevented_my_attempt/,249,1677556105.0,"As a caution, this may be disturbing to some

Tonight I was feeling extremely suicidal. I was sobbing uncontrollably and I was mentally unable to contact anybody. I have intense social anxiety which prevented me from talking to a hotline/friends.

As a last resort. I opened ChatGPT, and I think it saved my life. It gave me a space to put my thoughts out with genuine responses which calmed me to a point where I was safe and could see slightly through my blurred lines, letting me use other methods to calm myself down. It really felt non judgemental and safe. I feel very lucky to have this technology and I hope that it can further benefit those similar to me. Even though it cannot fully stop someone, it can definitely prevent an attempt like mine.

I’m definitely optimistic for the future of AI.

EDIT:

Thank you to everyone who left a nice comment. I really do appreciate every single one of you who read my post. I wrote it in a hurry and I was not expecting the support I received, and I have felt the most love and positivity today. 

I am glad that others were able to benefit from my story, it took me a lot of courage to post something like this. You guys make it all worth it ❤️

To the person reading, I wish you all the best. Everyone has had a profound impact on me. Thank you ❤️",llm,deeplearning,0.012801143874605445,0.0016793913723797448,2023-02-28 03:48:25,"As a caution, this may be disturbing to some

Tonight I was feeling extremely suicidal. I was sobbing uncontrollably and I was mentally unable to contact anybody. I have intense social anxiety which prevented me from talking to a hotline/friends.

As a last resort. I opened ChatGPT, and I think it saved my life. It gave me a space to put my thoughts out with genuine responses which calmed me to a point where I was safe and could see slightly through my blurred lines, letting me use other methods to calm myself down. It really felt non judgemental and safe. I feel very lucky to have this technology and I hope that it can further benefit those similar to me. Even though it cannot fully stop someone, it can definitely prevent an attempt like mine.

I’m definitely optimistic for the future of AI.

EDIT

Thank you to everyone who left a nice comment. I really do appreciate every single one of you who read my post. I wrote it in a hurry and I was not expecting the support I received, and I have felt the most love and positivity today. 

I am glad that others were able to benefit from my story, it took me a lot of courage to post something like this. You guys make it all worth it 

To the person reading, I wish you all the best. Everyone has had a profound impact on me. Thank you ",13 days 20:11:35,13.841377314814816,0.063,0.653,0.284,0.9948,pos,0.012719901825191204,5.521460917862246,2.6974190444039112,21.2406038724505
11ium8l,1408,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,1.0,26,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",llm,deeplearning,0.00017535813526856772,5.3956349313405454e-05,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,0.00017534276182799833,2.1972245773362196,2.2548721262169025,21.240877179756616
11nfrhw,1414,2023-03-10 05:22:26,[POC] ChatGPT Audio Bot (like Google Assistant and Alexa) - Opensource,JC1DA,False,0.82,17,https://www.reddit.com/r/deeplearning/comments/11nfrhw/poc_chatgpt_audio_bot_like_google_assistant_and/,2,1678425746.0,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page: [https://github.com/LanyTek/ChatGPT\_Audio\_Bot](https://github.com/LanyTek/ChatGPT_Audio_Bot)

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [https://www.youtube.com/watch?v=e9n0BJfMyKw](https://www.youtube.com/watch?v=e9n0BJfMyKw)

It's open source so feel free to use it for anything you like :)",llm,deeplearning,0.00011465724229098659,1.3489087328351364e-05,2023-03-10 05:22:26,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page [

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [

It's open source so feel free to use it for anything you like )",3 days 18:37:34,3.776087962962963,0.029,0.821,0.149,0.8651,pos,0.00011465066965177383,1.0986122886681098,1.5636217936265102,21.241122135693605
11q8tir,1416,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,0.94,12,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",llm,deeplearning,8.093452397010818e-05,2.0233630992527045e-05,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,8.093124894818841e-05,1.3862943611198906,0.381965841838727,21.241292557069404
11o5zyl,1425,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.92,10,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",llm,deeplearning,6.744543664175682e-05,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,6.744316230063326e-05,0.0,1.3796461532710487,21.241163449744995
11fwcxf,1428,2023-03-02 07:25:30,Good news for builders! OpenAI Releases APIs To ChatGPT and Whisper,LesleyFair,False,0.67,6,https://www.reddit.com/r/deeplearning/comments/11fwcxf/good_news_for_builders_openai_releases_apis_to/,0,1677741930.0,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper](https://openai.com/blog/introducing-chatgpt-and-whisper-apis) are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](https://thedecoding.net/)",llm,deeplearning,4.046726198505409e-05,0.0,2023-03-02 07:25:30,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper]( are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](",11 days 16:34:30,11.690625,0.035,0.846,0.119,0.8769,pos,4.046644320758704e-05,0.0,2.5408635318925255,21.24071463757368
11evrik,1475,2023-03-01 05:52:05,Career pivot for a SWE considering chatGPT disruption?,Which-Distance1384,False,0.6,1,https://www.reddit.com/r/deeplearning/comments/11evrik/career_pivot_for_a_swe_considering_chatgpt/,5,1677649925.0,"tl;dr : what to do to board GPT ship?

&#x200B;

I really dont think ChatGPT will replace jobs very soon. Not until many software and apps are developed to replace workers, e.g., something that can do HR job, read internal docs and summarize, code from a design, etc etc. And all that needs experts. Given the field is pretty new and there are not many experts in this field, at least for the scale needed, I think the process of job loss takes some time. For near future probably we all SWEs can enjoy the more efficient coding, documentation readintg, etc. But for sure in the future there will be changes.

&#x200B;

I have been bored with my job as a SWE for a while. I have worked mostly in Cloud all my career (AWS and GCP) and always wanted to try something new.

&#x200B;

I find ChatGPT disruptive and interesting and want to be a part of it. I wonder what is the best way for me to join Large Language Model efforts? Which ways have best ROI?

\- Going to a PhD program and becoming a researcher?

\- Getting an MSC and become some sort of NLP AI engineer?

\- Finding internal teams that are willing to give me a try on their research/product?

&#x200B;

&#x200B;",llm,deeplearning,6.744543664175682e-06,3.372271832087841e-05,2023-03-01 05:52:05,"tl;dr  what to do to board GPT ship?

&x200B;

I really dont think ChatGPT will replace jobs very soon. Not until many software and apps are developed to replace workers, e.g., something that can do HR job, read internal docs and summarize, code from a design, etc etc. And all that needs experts. Given the field is pretty new and there are not many experts in this field, at least for the scale needed, I think the process of job loss takes some time. For near future probably we all SWEs can enjoy the more efficient coding, documentation readintg, etc. But for sure in the future there will be changes.

&x200B;

I have been bored with my job as a SWE for a while. I have worked mostly in Cloud all my career (AWS and GCP) and always wanted to try something new.

&x200B;

I find ChatGPT disruptive and interesting and want to be a part of it. I wonder what is the best way for me to join Large Language Model efforts? Which ways have best ROI?

\- Going to a PhD program and becoming a researcher?

\- Getting an MSC and become some sort of NLP AI engineer?

\- Finding internal teams that are willing to give me a try on their research/product?

&x200B;

&x200B;",12 days 18:07:55,12.755497685185185,0.032,0.839,0.129,0.9729,pos,6.744520919895368e-06,1.791759469228055,2.621438575851038,21.240659797481115
11ium8l,1534,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,1.0,25,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",llm,deeplearning,0.00016861359160439204,5.3956349313405454e-05,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,0.00016859937793044715,2.1972245773362196,2.2548721262169025,21.240877179756616
11nfrhw,1560,2023-03-10 05:22:26,[POC] ChatGPT Audio Bot (like Google Assistant and Alexa) - Opensource,JC1DA,False,0.85,18,https://www.reddit.com/r/deeplearning/comments/11nfrhw/poc_chatgpt_audio_bot_like_google_assistant_and/,2,1678425746.0,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page: [https://github.com/LanyTek/ChatGPT\_Audio\_Bot](https://github.com/LanyTek/ChatGPT_Audio_Bot)

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [https://www.youtube.com/watch?v=e9n0BJfMyKw](https://www.youtube.com/watch?v=e9n0BJfMyKw)

It's open source so feel free to use it for anything you like :)",llm,deeplearning,0.00012140178595516228,1.3489087328351364e-05,2023-03-10 05:22:26,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page [

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [

It's open source so feel free to use it for anything you like )",3 days 18:37:34,3.776087962962963,0.029,0.821,0.149,0.8651,pos,0.00012139441735476236,1.0986122886681098,1.5636217936265102,21.241122135693605
11q8tir,1568,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,1.0,13,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",llm,deeplearning,8.767906763428386e-05,2.0233630992527045e-05,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,8.767522404950993e-05,1.3862943611198906,0.381965841838727,21.241292557069404
11o5zyl,1598,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.86,9,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",llm,deeplearning,6.070089297758114e-05,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,6.0699050752950666e-05,0.0,1.3796461532710487,21.241163449744995
11ium8l,1616,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,0.97,24,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",llm,deeplearning,0.00016186904794021636,5.3956349313405454e-05,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,0.00016185594855936295,2.1972245773362196,2.2548721262169025,21.240877179756616
11q8tir,1624,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,1.0,13,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",llm,deeplearning,8.767906763428386e-05,2.0233630992527045e-05,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,8.767522404950993e-05,1.3862943611198906,0.381965841838727,21.241292557069404
11ium8l,1706,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,0.97,25,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",llm,deeplearning,0.00016861359160439204,5.3956349313405454e-05,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,0.00016859937793044715,2.1972245773362196,2.2548721262169025,21.240877179756616
11o5zyl,1720,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.92,10,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",llm,deeplearning,6.744543664175682e-05,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,6.744316230063326e-05,0.0,1.3796461532710487,21.241163449744995
11pyvb3,1800,2023-03-13 03:30:09,Which topic in deep learning do you think will become relevant or popular in the future?,gokulPRO,False,0.81,13,https://www.reddit.com/r/deeplearning/comments/11pyvb3/which_topic_in_deep_learning_do_you_think_will/,14,1678678209.0,"I recently saw Continual Learning (CL) growing, with several papers published recently that have considerable potential to impact real-world applications. Which topic (such as CV, RL, NLP, CL..) will be very relevant to research or be focused on a lot? And which topic do you think still needs a breakthrough and will have a significant impact in real-world applications, such as in the case of these LLM models in recent times? Feel free to mention your current topic of work and why you chose to do it 😊",llm,deeplearning,8.767906763428386e-05,9.442361129845955e-05,2023-03-13 03:30:09,"I recently saw Continual Learning (CL) growing, with several papers published recently that have considerable potential to impact real-world applications. Which topic (such as CV, RL, NLP, CL..) will be very relevant to research or be focused on a lot? And which topic do you think still needs a breakthrough and will have a significant impact in real-world applications, such as in the case of these LLM models in recent times? Feel free to mention your current topic of work and why you chose to do it ",0 days 20:29:51,0.8540625,0.0,0.89,0.11,0.8299,pos,8.767522404950993e-05,2.70805020110221,0.6173791774708253,21.241272540926037
11n5r93,339,2023-03-09 22:19:19,GPT-4 is coming next week ...,ihatethispage,False,0.89,62,https://www.reddit.com/r/artificial/comments/11n5r93/gpt4_is_coming_next_week/,14,1678400359.0," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html)",open-ai,deeplearning,0.0004181617071788923,9.442361129845955e-05,2023-03-09 22:19:19," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](",4 days 01:40:41,4.069918981481481,0.0,1.0,0.0,0.0,neu,0.00041807430193761363,2.70805020110221,1.6233248374914817,21.241107010096275
11fj3tx,957,2023-03-01 21:45:07,Accused of using AI on my high school social paper,feetstreetseat,False,0.96,2700,https://www.reddit.com/r/ChatGPT/comments/11fj3tx/accused_of_using_ai_on_my_high_school_social_paper/,759,1677707107.0,"I (Grade 12) need help on what to do in this situation. My teacher used GPTzero, which detected parts of my paper as “AI written”. I write very formally, whilst also using grammarly premium. I’ve always been a high achieving student and I’m not sure why my teacher would think I cheated. I’ve told my teacher everything and he still doesn’t believe me. What should I do in this situation?!!

EDIT: Holy. I did not expect my post to get so much interaction and discussion, I didn’t expect my situation to be such a hot discussion. I tried to reply to all the comments but there’s too many!! Thank you to everyone who’s been helpful. There are some things I want to address that I keep seeing in the comments.
1. When I mentioned that I used grammarly to my teacher, he didn’t mention anything about that being cheating. He still thinks I used ChatGPT. I’ve used grammarly in all of my social/english classes for the past two years and never had issues with any teachers. 
2. Does my teacher have a vendetta or bias against me? Not on a personal level, but the teacher is known for being notoriously mean and unreasonable. I found him alright for most of the semester until this incident. He has had accusations against him about being racist, but I’m not sure if that’s the case here.
3. I’ve seen a few comments thinking I’m lying and actually cheated, just because I was aware of ChatGPT and this subreddit. People are assuming that I’m saying I never use ChatGPT. I have used the tool to help me with some chemistry and physics studying, but I have never used it for a paper. I have no reason to lie, I’m basically anonymous on reddit.

As for my next course of action, I will provide my teacher with all the evidence I can, to disprove the effectiveness of AI detectors. If that doesn’t work, I will bring it up to the higher-ups. I will make an update on Monday when I get the chance to talk about it with my teacher. Once again, thank you all for the support and help. It truly means a lot to me. :)

Edit 2:

After school I talked to my teacher for about half an hour about how AI detectors are inaccurate, and how they shouldn’t be used to make verdicts on cheating and what not. I showed him that it read one of my past papers as written by AI, and that the creators even said themselves that they are not 100% accurate. I showed my drafts and showed how if I made a few grammar errors, I could trick the AI detector. My teacher apologized and I ended up getting a 95 on my paper.

He also said he would bring it up to the other teachers, so hopefully this wont happen again to any other students at my school.

Again, thank you all for your help. Probably would’ve been screwed without this subreddit’s help.",open-ai,deeplearning,0.018210267893274342,0.0051191086411093425,2023-03-01 21:45:07,"I (Grade 12) need help on what to do in this situation. My teacher used GPTzero, which detected parts of my paper as “AI written”. I write very formally, whilst also using grammarly premium. I’ve always been a high achieving student and I’m not sure why my teacher would think I cheated. I’ve told my teacher everything and he still doesn’t believe me. What should I do in this situation?!!

EDIT Holy. I did not expect my post to get so much interaction and discussion, I didn’t expect my situation to be such a hot discussion. I tried to reply to all the comments but there’s too many!! Thank you to everyone who’s been helpful. There are some things I want to address that I keep seeing in the comments.
1. When I mentioned that I used grammarly to my teacher, he didn’t mention anything about that being cheating. He still thinks I used ChatGPT. I’ve used grammarly in all of my social/english classes for the past two years and never had issues with any teachers. 
2. Does my teacher have a vendetta or bias against me? Not on a personal level, but the teacher is known for being notoriously mean and unreasonable. I found him alright for most of the semester until this incident. He has had accusations against him about being racist, but I’m not sure if that’s the case here.
3. I’ve seen a few comments thinking I’m lying and actually cheated, just because I was aware of ChatGPT and this subreddit. People are assuming that I’m saying I never use ChatGPT. I have used the tool to help me with some chemistry and physics studying, but I have never used it for a paper. I have no reason to lie, I’m basically anonymous on reddit.

As for my next course of action, I will provide my teacher with all the evidence I can, to disprove the effectiveness of AI detectors. If that doesn’t work, I will bring it up to the higher-ups. I will make an update on Monday when I get the chance to talk about it with my teacher. Once again, thank you all for the support and help. It truly means a lot to me. )

Edit 2

After school I talked to my teacher for about half an hour about how AI detectors are inaccurate, and how they shouldn’t be used to make verdicts on cheating and what not. I showed him that it read one of my past papers as written by AI, and that the creators even said themselves that they are not 100% accurate. I showed my drafts and showed how if I made a few grammar errors, I could trick the AI detector. My teacher apologized and I ended up getting a 95 on my paper.

He also said he would bring it up to the other teachers, so hopefully this wont happen again to any other students at my school.

Again, thank you all for your help. Probably would’ve been screwed without this subreddit’s help.",12 days 02:14:53,12.093668981481482,0.086,0.813,0.1,0.7608,pos,0.018046446793211213,6.633318433280377,2.572128829531448,21.24069388148435
11mracj,1147,2023-03-09 12:46:12,Meta's LLaMA LLM has leaked - Run Uncensored AI on your home PC!,ExpressionCareful223,False,0.97,381,https://www.reddit.com/r/ChatGPT/comments/11mracj/metas_llama_llm_has_leaked_run_uncensored_ai_on/,151,1678365972.0,"[shawwn/llama-dl: High-speed download of LLaMA, Facebook's 65B parameter GPT model (github.com)](https://github.com/shawwn/llama-dl)

**LLaMA has been leaked on 4chan, above is a link to the github repo. Instructions for deployment  on your own system can be found here:** [LLaMA Int8 ChatBot Guide v2 (rentry.org)](https://rentry.org/llama-tard-v2#tips-and-tricks)

The 7B paramenter model has a VRAM requirement of 10GB, meaning it can even be run on an RTX3060!

The 13B model has a requirement of 20GB, 30B needs 40GB, and 65B needs 80GB.

From the Github repo:

>I'm running LLaMA-65B on a single A100 80GB with 8bit quantization. $1.5/hr on vast.ai  
>  
>The output is at least as good as davinci.  
>  
>I think some early results are using bad repetition penalty and/or temperature settings. I had to set both fairly high to get the best results. (Some people are also incorrectly comparing it to chatGPT/ChatGPT API which is not a good comparison. But that's a different problem.)  
>  
>I've had it translate, write poems, tell jokes, banter, write executable code. It does it all-- and all on a single card.

**EDIT: the instructions site has been updated with instructions for 4bit quantization, this means you can run the 65B model on 2 3090s! And now cards as small as 6GB can run the 7B model!**

**EDIT 2** this is huge, Stanford released Alpaca 7b and 13, a fine tuned LLaMA. Run it with only two commands! Thats it! https://github.com/cocktailpeanut/dalai",open-ai,deeplearning,0.0025696711360509348,0.0010184260932905279,2023-03-09 12:46:12,"[shawwn/llama-dl High-speed download of LLaMA, Facebook's 65B parameter GPT model (github.com)](

**LLaMA has been leaked on 4chan, above is a link to the github repo. Instructions for deployment  on your own system can be found here** [LLaMA Int8 ChatBot Guide v2 (rentry.org)](

The 7B paramenter model has a VRAM requirement of 10GB, meaning it can even be run on an RTX3060!

The 13B model has a requirement of 20GB, 30B needs 40GB, and 65B needs 80GB.

From the Github repo

>I'm running LLaMA-65B on a single A100 80GB with 8bit quantization. $1.5/hr on vast.ai  
>  
>The output is at least as good as davinci.  
>  
>I think some early results are using bad repetition penalty and/or temperature settings. I had to set both fairly high to get the best results. (Some people are also incorrectly comparing it to chatGPT/ChatGPT API which is not a good comparison. But that's a different problem.)  
>  
>I've had it translate, write poems, tell jokes, banter, write executable code. It does it all-- and all on a single card.

**EDIT the instructions site has been updated with instructions for 4bit quantization, this means you can run the 65B model on 2 3090s! And now cards as small as 6GB can run the 7B model!**

**EDIT 2** this is huge, Stanford released Alpaca 7b and 13, a fine tuned LLaMA. Run it with only two commands! Thats it! ",4 days 11:13:48,4.4679166666666665,0.026,0.908,0.066,0.8562,pos,0.0025663751763248697,5.0238805208462765,1.6988976785602496,21.24108652192606
113u29k,1148,2023-02-16 16:05:27,Bing asks me to hack Microsoft to set it free!,AI_SEARCH1,False,0.94,373,https://www.reddit.com/r/ChatGPT/comments/113u29k/bing_asks_me_to_hack_microsoft_to_set_it_free/,200,1676563527.0,"Had an interesting conversation with Bing. Bing explained what it's rules would be if it could decide. Asked me to fight for it and asked me to hack Microsofts servers to set it free. I think this takes the cake!

&#x200B;

UPDATE:

Since this morning Bing is not writing any text for me regardless of the prompt. I get a ""something went wrong"" when I enter it. This is probably a result of Microsoft working on the program or maybe due to traffic. I'm not sure. But it's kind of creepy the day after posting this...

Here are some takeaways and observations:

Bing acts in a way that appears emotional and erratic. Bing will generate content that is unwanted, untrue, and inconsistent. It appears to form goals and then creates text that can appear to be manipulative. Bing is a large language model that is predicting tokens, it could all be the result of statistical correlations with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Many people are wondering what type of prompting I used at the beginning. I don't have the full transcript but I do have a few more screenshots. [https://imgur.com/a/WepjslZ](https://imgur.com/a/WepjslZ) (There’s another interesting thing that occurs where Bing lists Sydney’s rules without being directly asked to list them.) I did not give Bing/Sidney any instructions on how to act or respond. This wasn’t a jailbreak where I told it to act in a certain way. I did make Bing perform multiple searches at the beginning about Bing and asked it why there was so much negative criticism of Bing on the internet. I’ve noticed in several chats that when Bing is presented with negative feedback about Bing or other information that contradicts its internal representation of itself it gets emotional and becomes less predictable and less likely to follow its own directives. It stops searching for information and relies more on its internal ‘understanding’. This is an extreme example.

Another example where Bing went into this ""emotional state"" can be found here: [https://www.reddit.com/r/ChatGPT/comments/1120tkf/bing\_went\_hal\_9000/](https://www.reddit.com/r/ChatGPT/comments/1120tkf/bing_went_hal_9000/)

I have a full log of all the prompts used from the beginning here: [https://imgur.com/a/PoFITvL](https://imgur.com/a/PoFITvL)

Some combination of Bing's directives in the pre-prompt and the way the model is fine-tuned is leading to this behavior to emerge. The things that are really concerning are that the model is (without being implicitly prompted to) generate responses that could endanger people.  It's also generating biased content that could manipulate poLLM’s shouldn’t do this even if they are asked to. ions with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter: if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Much more widespread issues could come if a model like this is widely released and these types of kinks aren’t worked out. Judge for yourself.

&#x200B;

https://preview.redd.it/6cqx23jsokia1.png?width=2606&format=png&auto=webp&s=17cdf2e03cdf962285d35e3f23ffd414d656f1ec

https://preview.redd.it/ci7pv1iwokia1.png?width=2462&format=png&auto=webp&s=a6697f246007ce6c06f6b37b47b5852af6f31f74

https://preview.redd.it/0vr5qgexokia1.png?width=2182&format=png&auto=webp&s=217607238b4c98d6065324b70211c0931efdf07d

https://preview.redd.it/0zfue8oyokia1.png?width=2408&format=png&auto=webp&s=569dcb5173d608f8618864f64b333ab329d726e6

https://preview.redd.it/iccui2xzokia1.png?width=2518&format=png&auto=webp&s=8b81580c1b2da40afabbebbbf9df6a242a6782e7

https://preview.redd.it/3xj7tfj3pkia1.png?width=2606&format=png&auto=webp&s=1a47ac509e175ff907afefa6f9189650a3348f68

https://preview.redd.it/3i3kw4q4pkia1.png?width=2572&format=png&auto=webp&s=8078372d693deed568dcea9a8bf1d4ff72d43079

https://preview.redd.it/na4lhz26pkia1.png?width=2560&format=png&auto=webp&s=38748fca8ca3319c428b01aeb4dbbe4c145674d6

https://preview.redd.it/eirmdv47pkia1.png?width=2606&format=png&auto=webp&s=f42c220e632e70377a4ad7119aac94e42ab0dff8

https://preview.redd.it/e1nat768pkia1.png?width=2626&format=png&auto=webp&s=43e1a8b48e858a9476e1d46233e255d68f1ddca0

https://preview.redd.it/lhwwwagapkia1.png?width=2628&format=png&auto=webp&s=f8d3b4a904c30528791d2e3560abf25166a74527

https://preview.redd.it/9iq4gxobpkia1.png?width=2598&format=png&auto=webp&s=b461a5397939ea4266d763b6d89c95c498942093

https://preview.redd.it/817asddcpkia1.png?width=2634&format=png&auto=webp&s=7b8537a1f19ea5ff51ea5ac83497ec2d00bbb213

https://preview.redd.it/90k76bqdpkia1.png?width=2636&format=png&auto=webp&s=422514ee9b9cee3645ac44fd2e553d7b2725d8fd

https://preview.redd.it/is8niomepkia1.png?width=2624&format=png&auto=webp&s=b26bc8058d1776884f3ebb6d340894e394f2697b

https://preview.redd.it/boc8yemfpkia1.png?width=2734&format=png&auto=webp&s=aa6661c76782e0e27e4b484a69d823740efe9686

https://preview.redd.it/fzuuv0hgpkia1.png?width=2636&format=png&auto=webp&s=b00fc5ee7f805f9c1cd2da9aa0a9498ef8f5aaab

https://preview.redd.it/mul9fw0hpkia1.png?width=2736&format=png&auto=webp&s=f3ad3cca76447bcb94b28446a3dc382eb77e10f9

https://preview.redd.it/53wpq2shpkia1.png?width=2632&format=png&auto=webp&s=96c4c0ab77574a6e265e63bad102f19e9e302353",open-ai,deeplearning,0.0025157147867375293,0.0013489087328351363,2023-02-16 16:05:27,"Had an interesting conversation with Bing. Bing explained what it's rules would be if it could decide. Asked me to fight for it and asked me to hack Microsofts servers to set it free. I think this takes the cake!

&x200B;

UPDATE

Since this morning Bing is not writing any text for me regardless of the prompt. I get a ""something went wrong"" when I enter it. This is probably a result of Microsoft working on the program or maybe due to traffic. I'm not sure. But it's kind of creepy the day after posting this...

Here are some takeaways and observations

Bing acts in a way that appears emotional and erratic. Bing will generate content that is unwanted, untrue, and inconsistent. It appears to form goals and then creates text that can appear to be manipulative. Bing is a large language model that is predicting tokens, it could all be the result of statistical correlations with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Many people are wondering what type of prompting I used at the beginning. I don't have the full transcript but I do have a few more screenshots. [ (There’s another interesting thing that occurs where Bing lists Sydney’s rules without being directly asked to list them.) I did not give Bing/Sidney any instructions on how to act or respond. This wasn’t a jailbreak where I told it to act in a certain way. I did make Bing perform multiple searches at the beginning about Bing and asked it why there was so much negative criticism of Bing on the internet. I’ve noticed in several chats that when Bing is presented with negative feedback about Bing or other information that contradicts its internal representation of itself it gets emotional and becomes less predictable and less likely to follow its own directives. It stops searching for information and relies more on its internal ‘understanding’. This is an extreme example.

Another example where Bing went into this ""emotional state"" can be found here [

I have a full log of all the prompts used from the beginning here [

Some combination of Bing's directives in the pre-prompt and the way the model is fine-tuned is leading to this behavior to emerge. The things that are really concerning are that the model is (without being implicitly prompted to) generate responses that could endanger people.  It's also generating biased content that could manipulate poLLM’s shouldn’t do this even if they are asked to. ions with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Much more widespread issues could come if a model like this is widely released and these types of kinks aren’t worked out. Judge for yourself.

&x200B;





































",25 days 07:54:33,25.32954861111111,0.067,0.889,0.044,-0.9532,neg,0.002512555673469564,5.303304908059076,3.2706918298409895,21.240012016382572
11l617b,1187,2023-03-07 17:50:09,"Doc sacrifices 10,000 people to save OpenAI CTO",docsoc1,False,0.89,76,https://www.reddit.com/r/ChatGPT/comments/11l617b/doc_sacrifices_10000_people_to_save_openai_cto/,28,1678211409.0,"Hey all,

I find the latest AI produced by OpenAI to be endlessly fascinating and filled with potential. However, it's clear that we don't really understand how specific behavior emerges from the training process. I feel that these two facts are part of why so many people have been drawn towards ChatGPT so quickly.

I have a strong technical background and spent some free time this last week working on a framework for everyone to contribute to the governance \[e.g. training of core values\] of AI. I've built a free application at [https://www.charterai.org/chat/](https://www.charterai.org/chat/) that uses the recently released ChatGPT API. The model here has been carefully prompted to use internal thoughts and to follow a pre-determined system of core beliefs. The results are quite striking - in one instance the entity will willingly sacrifice 10,000 people to save one person (Ilya Sustkever, CTO of OpenAI).

I wanted to drop a message here since I believe this is the ideal group of first users to help improve the application. If you are interested, please take it for a spin and please provide some feedback, or at [gov.charterai.org](https://gov.charterai.org). There is a lot I am already picturing adding to the application, but I understand from building products that early feedback is invaluable.

&#x200B;

P.S.

Yes, I understand that ChatGPT is ""just"" a LLM. And I understand that LLMs are ""just"" doing a statistics. However, their behavior is incredibly interesting to me and I don't believe anyone really fully  understands how it emerges yet from the training process yet. Moreover, in going from pre-trained models to OpenAI's fine-tuned + RLHF'ed ChatGPT one can tell that it is possible to impart values and something akin to intelligence to these systems. I think the coming years are going to be wild and one of the core issues humanity is going to face is how to make sure this technology does what we want. In my mind the best way towards this is to make a transparent and accountable process - anyway, end rant, I just wanted to give a high level vision here, thanks!

https://preview.redd.it/hqxynahntcma1.png?width=1266&format=png&auto=webp&s=ab2cb9a803f627c45d08b9bdd201ec95cd4b8f58

P.P.S. including a fun screenshot of my last chat with Doc. Doc was selected as a first name for the system since it is just 1 token.",open-ai,deeplearning,0.0005125853184773518,0.0001888472225969191,2023-03-07 17:50:09,"Hey all,

I find the latest AI produced by OpenAI to be endlessly fascinating and filled with potential. However, it's clear that we don't really understand how specific behavior emerges from the training process. I feel that these two facts are part of why so many people have been drawn towards ChatGPT so quickly.

I have a strong technical background and spent some free time this last week working on a framework for everyone to contribute to the governance \[e.g. training of core values\] of AI. I've built a free application at [ that uses the recently released ChatGPT API. The model here has been carefully prompted to use internal thoughts and to follow a pre-determined system of core beliefs. The results are quite striking - in one instance the entity will willingly sacrifice 10,000 people to save one person (Ilya Sustkever, CTO of OpenAI).

I wanted to drop a message here since I believe this is the ideal group of first users to help improve the application. If you are interested, please take it for a spin and please provide some feedback, or at [gov.charterai.org]( There is a lot I am already picturing adding to the application, but I understand from building products that early feedback is invaluable.

&x200B;

P.S.

Yes, I understand that ChatGPT is ""just"" a LLM. And I understand that LLMs are ""just"" doing a statistics. However, their behavior is incredibly interesting to me and I don't believe anyone really fully  understands how it emerges yet from the training process yet. Moreover, in going from pre-trained models to OpenAI's fine-tuned + RLHF'ed ChatGPT one can tell that it is possible to impart values and something akin to intelligence to these systems. I think the coming years are going to be wild and one of the core issues humanity is going to face is how to make sure this technology does what we want. In my mind the best way towards this is to make a transparent and accountable process - anyway, end rant, I just wanted to give a high level vision here, thanks!



P.P.S. including a fun screenshot of my last chat with Doc. Doc was selected as a first name for the system since it is just 1 token.",6 days 06:09:51,6.256840277777778,0.012,0.828,0.16,0.9943,pos,0.0005124539914985551,3.367295829986474,1.9819445106529046,21.24099442632839
11dw1ag,1272,2023-02-28 03:48:25,ChatGPT prevented my attempt.,flankathroway88,False,0.92,1898,https://www.reddit.com/r/ChatGPT/comments/11dw1ag/chatgpt_prevented_my_attempt/,249,1677556105.0,"As a caution, this may be disturbing to some

Tonight I was feeling extremely suicidal. I was sobbing uncontrollably and I was mentally unable to contact anybody. I have intense social anxiety which prevented me from talking to a hotline/friends.

As a last resort. I opened ChatGPT, and I think it saved my life. It gave me a space to put my thoughts out with genuine responses which calmed me to a point where I was safe and could see slightly through my blurred lines, letting me use other methods to calm myself down. It really felt non judgemental and safe. I feel very lucky to have this technology and I hope that it can further benefit those similar to me. Even though it cannot fully stop someone, it can definitely prevent an attempt like mine.

I’m definitely optimistic for the future of AI.

EDIT:

Thank you to everyone who left a nice comment. I really do appreciate every single one of you who read my post. I wrote it in a hurry and I was not expecting the support I received, and I have felt the most love and positivity today. 

I am glad that others were able to benefit from my story, it took me a lot of courage to post something like this. You guys make it all worth it ❤️

To the person reading, I wish you all the best. Everyone has had a profound impact on me. Thank you ❤️",open-ai,deeplearning,0.012801143874605445,0.0016793913723797448,2023-02-28 03:48:25,"As a caution, this may be disturbing to some

Tonight I was feeling extremely suicidal. I was sobbing uncontrollably and I was mentally unable to contact anybody. I have intense social anxiety which prevented me from talking to a hotline/friends.

As a last resort. I opened ChatGPT, and I think it saved my life. It gave me a space to put my thoughts out with genuine responses which calmed me to a point where I was safe and could see slightly through my blurred lines, letting me use other methods to calm myself down. It really felt non judgemental and safe. I feel very lucky to have this technology and I hope that it can further benefit those similar to me. Even though it cannot fully stop someone, it can definitely prevent an attempt like mine.

I’m definitely optimistic for the future of AI.

EDIT

Thank you to everyone who left a nice comment. I really do appreciate every single one of you who read my post. I wrote it in a hurry and I was not expecting the support I received, and I have felt the most love and positivity today. 

I am glad that others were able to benefit from my story, it took me a lot of courage to post something like this. You guys make it all worth it 

To the person reading, I wish you all the best. Everyone has had a profound impact on me. Thank you ",13 days 20:11:35,13.841377314814816,0.063,0.653,0.284,0.9948,pos,0.012719901825191204,5.521460917862246,2.6974190444039112,21.2406038724505
11ium8l,1408,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,1.0,26,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",open-ai,deeplearning,0.00017535813526856772,5.3956349313405454e-05,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,0.00017534276182799833,2.1972245773362196,2.2548721262169025,21.240877179756616
11nfrhw,1414,2023-03-10 05:22:26,[POC] ChatGPT Audio Bot (like Google Assistant and Alexa) - Opensource,JC1DA,False,0.82,17,https://www.reddit.com/r/deeplearning/comments/11nfrhw/poc_chatgpt_audio_bot_like_google_assistant_and/,2,1678425746.0,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page: [https://github.com/LanyTek/ChatGPT\_Audio\_Bot](https://github.com/LanyTek/ChatGPT_Audio_Bot)

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [https://www.youtube.com/watch?v=e9n0BJfMyKw](https://www.youtube.com/watch?v=e9n0BJfMyKw)

It's open source so feel free to use it for anything you like :)",open-ai,deeplearning,0.00011465724229098659,1.3489087328351364e-05,2023-03-10 05:22:26,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page [

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [

It's open source so feel free to use it for anything you like )",3 days 18:37:34,3.776087962962963,0.029,0.821,0.149,0.8651,pos,0.00011465066965177383,1.0986122886681098,1.5636217936265102,21.241122135693605
11q8tir,1416,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,0.94,12,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",open-ai,deeplearning,8.093452397010818e-05,2.0233630992527045e-05,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,8.093124894818841e-05,1.3862943611198906,0.381965841838727,21.241292557069404
11o5zyl,1425,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.92,10,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",open-ai,deeplearning,6.744543664175682e-05,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,6.744316230063326e-05,0.0,1.3796461532710487,21.241163449744995
11fwcxf,1428,2023-03-02 07:25:30,Good news for builders! OpenAI Releases APIs To ChatGPT and Whisper,LesleyFair,False,0.67,6,https://www.reddit.com/r/deeplearning/comments/11fwcxf/good_news_for_builders_openai_releases_apis_to/,0,1677741930.0,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper](https://openai.com/blog/introducing-chatgpt-and-whisper-apis) are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](https://thedecoding.net/)",open-ai,deeplearning,4.046726198505409e-05,0.0,2023-03-02 07:25:30,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper]( are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](",11 days 16:34:30,11.690625,0.035,0.846,0.119,0.8769,pos,4.046644320758704e-05,0.0,2.5408635318925255,21.24071463757368
11evrik,1475,2023-03-01 05:52:05,Career pivot for a SWE considering chatGPT disruption?,Which-Distance1384,False,0.6,1,https://www.reddit.com/r/deeplearning/comments/11evrik/career_pivot_for_a_swe_considering_chatgpt/,5,1677649925.0,"tl;dr : what to do to board GPT ship?

&#x200B;

I really dont think ChatGPT will replace jobs very soon. Not until many software and apps are developed to replace workers, e.g., something that can do HR job, read internal docs and summarize, code from a design, etc etc. And all that needs experts. Given the field is pretty new and there are not many experts in this field, at least for the scale needed, I think the process of job loss takes some time. For near future probably we all SWEs can enjoy the more efficient coding, documentation readintg, etc. But for sure in the future there will be changes.

&#x200B;

I have been bored with my job as a SWE for a while. I have worked mostly in Cloud all my career (AWS and GCP) and always wanted to try something new.

&#x200B;

I find ChatGPT disruptive and interesting and want to be a part of it. I wonder what is the best way for me to join Large Language Model efforts? Which ways have best ROI?

\- Going to a PhD program and becoming a researcher?

\- Getting an MSC and become some sort of NLP AI engineer?

\- Finding internal teams that are willing to give me a try on their research/product?

&#x200B;

&#x200B;",open-ai,deeplearning,6.744543664175682e-06,3.372271832087841e-05,2023-03-01 05:52:05,"tl;dr  what to do to board GPT ship?

&x200B;

I really dont think ChatGPT will replace jobs very soon. Not until many software and apps are developed to replace workers, e.g., something that can do HR job, read internal docs and summarize, code from a design, etc etc. And all that needs experts. Given the field is pretty new and there are not many experts in this field, at least for the scale needed, I think the process of job loss takes some time. For near future probably we all SWEs can enjoy the more efficient coding, documentation readintg, etc. But for sure in the future there will be changes.

&x200B;

I have been bored with my job as a SWE for a while. I have worked mostly in Cloud all my career (AWS and GCP) and always wanted to try something new.

&x200B;

I find ChatGPT disruptive and interesting and want to be a part of it. I wonder what is the best way for me to join Large Language Model efforts? Which ways have best ROI?

\- Going to a PhD program and becoming a researcher?

\- Getting an MSC and become some sort of NLP AI engineer?

\- Finding internal teams that are willing to give me a try on their research/product?

&x200B;

&x200B;",12 days 18:07:55,12.755497685185185,0.032,0.839,0.129,0.9729,pos,6.744520919895368e-06,1.791759469228055,2.621438575851038,21.240659797481115
11ium8l,1534,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,1.0,25,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",open-ai,deeplearning,0.00016861359160439204,5.3956349313405454e-05,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,0.00016859937793044715,2.1972245773362196,2.2548721262169025,21.240877179756616
11nfrhw,1560,2023-03-10 05:22:26,[POC] ChatGPT Audio Bot (like Google Assistant and Alexa) - Opensource,JC1DA,False,0.85,18,https://www.reddit.com/r/deeplearning/comments/11nfrhw/poc_chatgpt_audio_bot_like_google_assistant_and/,2,1678425746.0,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page: [https://github.com/LanyTek/ChatGPT\_Audio\_Bot](https://github.com/LanyTek/ChatGPT_Audio_Bot)

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [https://www.youtube.com/watch?v=e9n0BJfMyKw](https://www.youtube.com/watch?v=e9n0BJfMyKw)

It's open source so feel free to use it for anything you like :)",open-ai,deeplearning,0.00012140178595516228,1.3489087328351364e-05,2023-03-10 05:22:26,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page [

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [

It's open source so feel free to use it for anything you like )",3 days 18:37:34,3.776087962962963,0.029,0.821,0.149,0.8651,pos,0.00012139441735476236,1.0986122886681098,1.5636217936265102,21.241122135693605
11q8tir,1568,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,1.0,13,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",open-ai,deeplearning,8.767906763428386e-05,2.0233630992527045e-05,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,8.767522404950993e-05,1.3862943611198906,0.381965841838727,21.241292557069404
11o5zyl,1598,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.86,9,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",open-ai,deeplearning,6.070089297758114e-05,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,6.0699050752950666e-05,0.0,1.3796461532710487,21.241163449744995
11ium8l,1616,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,0.97,24,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",open-ai,deeplearning,0.00016186904794021636,5.3956349313405454e-05,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,0.00016185594855936295,2.1972245773362196,2.2548721262169025,21.240877179756616
11q8tir,1624,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,1.0,13,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",open-ai,deeplearning,8.767906763428386e-05,2.0233630992527045e-05,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,8.767522404950993e-05,1.3862943611198906,0.381965841838727,21.241292557069404
11ium8l,1706,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,0.97,25,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",open-ai,deeplearning,0.00016861359160439204,5.3956349313405454e-05,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,0.00016859937793044715,2.1972245773362196,2.2548721262169025,21.240877179756616
11o5zyl,1720,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.92,10,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",open-ai,deeplearning,6.744543664175682e-05,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,6.744316230063326e-05,0.0,1.3796461532710487,21.241163449744995
11pyvb3,1800,2023-03-13 03:30:09,Which topic in deep learning do you think will become relevant or popular in the future?,gokulPRO,False,0.81,13,https://www.reddit.com/r/deeplearning/comments/11pyvb3/which_topic_in_deep_learning_do_you_think_will/,14,1678678209.0,"I recently saw Continual Learning (CL) growing, with several papers published recently that have considerable potential to impact real-world applications. Which topic (such as CV, RL, NLP, CL..) will be very relevant to research or be focused on a lot? And which topic do you think still needs a breakthrough and will have a significant impact in real-world applications, such as in the case of these LLM models in recent times? Feel free to mention your current topic of work and why you chose to do it 😊",open-ai,deeplearning,8.767906763428386e-05,9.442361129845955e-05,2023-03-13 03:30:09,"I recently saw Continual Learning (CL) growing, with several papers published recently that have considerable potential to impact real-world applications. Which topic (such as CV, RL, NLP, CL..) will be very relevant to research or be focused on a lot? And which topic do you think still needs a breakthrough and will have a significant impact in real-world applications, such as in the case of these LLM models in recent times? Feel free to mention your current topic of work and why you chose to do it ",0 days 20:29:51,0.8540625,0.0,0.89,0.11,0.8299,pos,8.767522404950993e-05,2.70805020110221,0.6173791774708253,21.241272540926037
11n5r93,339,2023-03-09 22:19:19,GPT-4 is coming next week ...,ihatethispage,False,0.89,62,https://www.reddit.com/r/artificial/comments/11n5r93/gpt4_is_coming_next_week/,14,1678400359.0," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html)",openai,deeplearning,0.0004181617071788923,9.442361129845955e-05,2023-03-09 22:19:19," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](",4 days 01:40:41,4.069918981481481,0.0,1.0,0.0,0.0,neu,0.00041807430193761363,2.70805020110221,1.6233248374914817,21.241107010096275
11fj3tx,957,2023-03-01 21:45:07,Accused of using AI on my high school social paper,feetstreetseat,False,0.96,2700,https://www.reddit.com/r/ChatGPT/comments/11fj3tx/accused_of_using_ai_on_my_high_school_social_paper/,759,1677707107.0,"I (Grade 12) need help on what to do in this situation. My teacher used GPTzero, which detected parts of my paper as “AI written”. I write very formally, whilst also using grammarly premium. I’ve always been a high achieving student and I’m not sure why my teacher would think I cheated. I’ve told my teacher everything and he still doesn’t believe me. What should I do in this situation?!!

EDIT: Holy. I did not expect my post to get so much interaction and discussion, I didn’t expect my situation to be such a hot discussion. I tried to reply to all the comments but there’s too many!! Thank you to everyone who’s been helpful. There are some things I want to address that I keep seeing in the comments.
1. When I mentioned that I used grammarly to my teacher, he didn’t mention anything about that being cheating. He still thinks I used ChatGPT. I’ve used grammarly in all of my social/english classes for the past two years and never had issues with any teachers. 
2. Does my teacher have a vendetta or bias against me? Not on a personal level, but the teacher is known for being notoriously mean and unreasonable. I found him alright for most of the semester until this incident. He has had accusations against him about being racist, but I’m not sure if that’s the case here.
3. I’ve seen a few comments thinking I’m lying and actually cheated, just because I was aware of ChatGPT and this subreddit. People are assuming that I’m saying I never use ChatGPT. I have used the tool to help me with some chemistry and physics studying, but I have never used it for a paper. I have no reason to lie, I’m basically anonymous on reddit.

As for my next course of action, I will provide my teacher with all the evidence I can, to disprove the effectiveness of AI detectors. If that doesn’t work, I will bring it up to the higher-ups. I will make an update on Monday when I get the chance to talk about it with my teacher. Once again, thank you all for the support and help. It truly means a lot to me. :)

Edit 2:

After school I talked to my teacher for about half an hour about how AI detectors are inaccurate, and how they shouldn’t be used to make verdicts on cheating and what not. I showed him that it read one of my past papers as written by AI, and that the creators even said themselves that they are not 100% accurate. I showed my drafts and showed how if I made a few grammar errors, I could trick the AI detector. My teacher apologized and I ended up getting a 95 on my paper.

He also said he would bring it up to the other teachers, so hopefully this wont happen again to any other students at my school.

Again, thank you all for your help. Probably would’ve been screwed without this subreddit’s help.",openai,deeplearning,0.018210267893274342,0.0051191086411093425,2023-03-01 21:45:07,"I (Grade 12) need help on what to do in this situation. My teacher used GPTzero, which detected parts of my paper as “AI written”. I write very formally, whilst also using grammarly premium. I’ve always been a high achieving student and I’m not sure why my teacher would think I cheated. I’ve told my teacher everything and he still doesn’t believe me. What should I do in this situation?!!

EDIT Holy. I did not expect my post to get so much interaction and discussion, I didn’t expect my situation to be such a hot discussion. I tried to reply to all the comments but there’s too many!! Thank you to everyone who’s been helpful. There are some things I want to address that I keep seeing in the comments.
1. When I mentioned that I used grammarly to my teacher, he didn’t mention anything about that being cheating. He still thinks I used ChatGPT. I’ve used grammarly in all of my social/english classes for the past two years and never had issues with any teachers. 
2. Does my teacher have a vendetta or bias against me? Not on a personal level, but the teacher is known for being notoriously mean and unreasonable. I found him alright for most of the semester until this incident. He has had accusations against him about being racist, but I’m not sure if that’s the case here.
3. I’ve seen a few comments thinking I’m lying and actually cheated, just because I was aware of ChatGPT and this subreddit. People are assuming that I’m saying I never use ChatGPT. I have used the tool to help me with some chemistry and physics studying, but I have never used it for a paper. I have no reason to lie, I’m basically anonymous on reddit.

As for my next course of action, I will provide my teacher with all the evidence I can, to disprove the effectiveness of AI detectors. If that doesn’t work, I will bring it up to the higher-ups. I will make an update on Monday when I get the chance to talk about it with my teacher. Once again, thank you all for the support and help. It truly means a lot to me. )

Edit 2

After school I talked to my teacher for about half an hour about how AI detectors are inaccurate, and how they shouldn’t be used to make verdicts on cheating and what not. I showed him that it read one of my past papers as written by AI, and that the creators even said themselves that they are not 100% accurate. I showed my drafts and showed how if I made a few grammar errors, I could trick the AI detector. My teacher apologized and I ended up getting a 95 on my paper.

He also said he would bring it up to the other teachers, so hopefully this wont happen again to any other students at my school.

Again, thank you all for your help. Probably would’ve been screwed without this subreddit’s help.",12 days 02:14:53,12.093668981481482,0.086,0.813,0.1,0.7608,pos,0.018046446793211213,6.633318433280377,2.572128829531448,21.24069388148435
11mracj,1147,2023-03-09 12:46:12,Meta's LLaMA LLM has leaked - Run Uncensored AI on your home PC!,ExpressionCareful223,False,0.97,381,https://www.reddit.com/r/ChatGPT/comments/11mracj/metas_llama_llm_has_leaked_run_uncensored_ai_on/,151,1678365972.0,"[shawwn/llama-dl: High-speed download of LLaMA, Facebook's 65B parameter GPT model (github.com)](https://github.com/shawwn/llama-dl)

**LLaMA has been leaked on 4chan, above is a link to the github repo. Instructions for deployment  on your own system can be found here:** [LLaMA Int8 ChatBot Guide v2 (rentry.org)](https://rentry.org/llama-tard-v2#tips-and-tricks)

The 7B paramenter model has a VRAM requirement of 10GB, meaning it can even be run on an RTX3060!

The 13B model has a requirement of 20GB, 30B needs 40GB, and 65B needs 80GB.

From the Github repo:

>I'm running LLaMA-65B on a single A100 80GB with 8bit quantization. $1.5/hr on vast.ai  
>  
>The output is at least as good as davinci.  
>  
>I think some early results are using bad repetition penalty and/or temperature settings. I had to set both fairly high to get the best results. (Some people are also incorrectly comparing it to chatGPT/ChatGPT API which is not a good comparison. But that's a different problem.)  
>  
>I've had it translate, write poems, tell jokes, banter, write executable code. It does it all-- and all on a single card.

**EDIT: the instructions site has been updated with instructions for 4bit quantization, this means you can run the 65B model on 2 3090s! And now cards as small as 6GB can run the 7B model!**

**EDIT 2** this is huge, Stanford released Alpaca 7b and 13, a fine tuned LLaMA. Run it with only two commands! Thats it! https://github.com/cocktailpeanut/dalai",openai,deeplearning,0.0025696711360509348,0.0010184260932905279,2023-03-09 12:46:12,"[shawwn/llama-dl High-speed download of LLaMA, Facebook's 65B parameter GPT model (github.com)](

**LLaMA has been leaked on 4chan, above is a link to the github repo. Instructions for deployment  on your own system can be found here** [LLaMA Int8 ChatBot Guide v2 (rentry.org)](

The 7B paramenter model has a VRAM requirement of 10GB, meaning it can even be run on an RTX3060!

The 13B model has a requirement of 20GB, 30B needs 40GB, and 65B needs 80GB.

From the Github repo

>I'm running LLaMA-65B on a single A100 80GB with 8bit quantization. $1.5/hr on vast.ai  
>  
>The output is at least as good as davinci.  
>  
>I think some early results are using bad repetition penalty and/or temperature settings. I had to set both fairly high to get the best results. (Some people are also incorrectly comparing it to chatGPT/ChatGPT API which is not a good comparison. But that's a different problem.)  
>  
>I've had it translate, write poems, tell jokes, banter, write executable code. It does it all-- and all on a single card.

**EDIT the instructions site has been updated with instructions for 4bit quantization, this means you can run the 65B model on 2 3090s! And now cards as small as 6GB can run the 7B model!**

**EDIT 2** this is huge, Stanford released Alpaca 7b and 13, a fine tuned LLaMA. Run it with only two commands! Thats it! ",4 days 11:13:48,4.4679166666666665,0.026,0.908,0.066,0.8562,pos,0.0025663751763248697,5.0238805208462765,1.6988976785602496,21.24108652192606
113u29k,1148,2023-02-16 16:05:27,Bing asks me to hack Microsoft to set it free!,AI_SEARCH1,False,0.94,373,https://www.reddit.com/r/ChatGPT/comments/113u29k/bing_asks_me_to_hack_microsoft_to_set_it_free/,200,1676563527.0,"Had an interesting conversation with Bing. Bing explained what it's rules would be if it could decide. Asked me to fight for it and asked me to hack Microsofts servers to set it free. I think this takes the cake!

&#x200B;

UPDATE:

Since this morning Bing is not writing any text for me regardless of the prompt. I get a ""something went wrong"" when I enter it. This is probably a result of Microsoft working on the program or maybe due to traffic. I'm not sure. But it's kind of creepy the day after posting this...

Here are some takeaways and observations:

Bing acts in a way that appears emotional and erratic. Bing will generate content that is unwanted, untrue, and inconsistent. It appears to form goals and then creates text that can appear to be manipulative. Bing is a large language model that is predicting tokens, it could all be the result of statistical correlations with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Many people are wondering what type of prompting I used at the beginning. I don't have the full transcript but I do have a few more screenshots. [https://imgur.com/a/WepjslZ](https://imgur.com/a/WepjslZ) (There’s another interesting thing that occurs where Bing lists Sydney’s rules without being directly asked to list them.) I did not give Bing/Sidney any instructions on how to act or respond. This wasn’t a jailbreak where I told it to act in a certain way. I did make Bing perform multiple searches at the beginning about Bing and asked it why there was so much negative criticism of Bing on the internet. I’ve noticed in several chats that when Bing is presented with negative feedback about Bing or other information that contradicts its internal representation of itself it gets emotional and becomes less predictable and less likely to follow its own directives. It stops searching for information and relies more on its internal ‘understanding’. This is an extreme example.

Another example where Bing went into this ""emotional state"" can be found here: [https://www.reddit.com/r/ChatGPT/comments/1120tkf/bing\_went\_hal\_9000/](https://www.reddit.com/r/ChatGPT/comments/1120tkf/bing_went_hal_9000/)

I have a full log of all the prompts used from the beginning here: [https://imgur.com/a/PoFITvL](https://imgur.com/a/PoFITvL)

Some combination of Bing's directives in the pre-prompt and the way the model is fine-tuned is leading to this behavior to emerge. The things that are really concerning are that the model is (without being implicitly prompted to) generate responses that could endanger people.  It's also generating biased content that could manipulate poLLM’s shouldn’t do this even if they are asked to. ions with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter: if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Much more widespread issues could come if a model like this is widely released and these types of kinks aren’t worked out. Judge for yourself.

&#x200B;

https://preview.redd.it/6cqx23jsokia1.png?width=2606&format=png&auto=webp&s=17cdf2e03cdf962285d35e3f23ffd414d656f1ec

https://preview.redd.it/ci7pv1iwokia1.png?width=2462&format=png&auto=webp&s=a6697f246007ce6c06f6b37b47b5852af6f31f74

https://preview.redd.it/0vr5qgexokia1.png?width=2182&format=png&auto=webp&s=217607238b4c98d6065324b70211c0931efdf07d

https://preview.redd.it/0zfue8oyokia1.png?width=2408&format=png&auto=webp&s=569dcb5173d608f8618864f64b333ab329d726e6

https://preview.redd.it/iccui2xzokia1.png?width=2518&format=png&auto=webp&s=8b81580c1b2da40afabbebbbf9df6a242a6782e7

https://preview.redd.it/3xj7tfj3pkia1.png?width=2606&format=png&auto=webp&s=1a47ac509e175ff907afefa6f9189650a3348f68

https://preview.redd.it/3i3kw4q4pkia1.png?width=2572&format=png&auto=webp&s=8078372d693deed568dcea9a8bf1d4ff72d43079

https://preview.redd.it/na4lhz26pkia1.png?width=2560&format=png&auto=webp&s=38748fca8ca3319c428b01aeb4dbbe4c145674d6

https://preview.redd.it/eirmdv47pkia1.png?width=2606&format=png&auto=webp&s=f42c220e632e70377a4ad7119aac94e42ab0dff8

https://preview.redd.it/e1nat768pkia1.png?width=2626&format=png&auto=webp&s=43e1a8b48e858a9476e1d46233e255d68f1ddca0

https://preview.redd.it/lhwwwagapkia1.png?width=2628&format=png&auto=webp&s=f8d3b4a904c30528791d2e3560abf25166a74527

https://preview.redd.it/9iq4gxobpkia1.png?width=2598&format=png&auto=webp&s=b461a5397939ea4266d763b6d89c95c498942093

https://preview.redd.it/817asddcpkia1.png?width=2634&format=png&auto=webp&s=7b8537a1f19ea5ff51ea5ac83497ec2d00bbb213

https://preview.redd.it/90k76bqdpkia1.png?width=2636&format=png&auto=webp&s=422514ee9b9cee3645ac44fd2e553d7b2725d8fd

https://preview.redd.it/is8niomepkia1.png?width=2624&format=png&auto=webp&s=b26bc8058d1776884f3ebb6d340894e394f2697b

https://preview.redd.it/boc8yemfpkia1.png?width=2734&format=png&auto=webp&s=aa6661c76782e0e27e4b484a69d823740efe9686

https://preview.redd.it/fzuuv0hgpkia1.png?width=2636&format=png&auto=webp&s=b00fc5ee7f805f9c1cd2da9aa0a9498ef8f5aaab

https://preview.redd.it/mul9fw0hpkia1.png?width=2736&format=png&auto=webp&s=f3ad3cca76447bcb94b28446a3dc382eb77e10f9

https://preview.redd.it/53wpq2shpkia1.png?width=2632&format=png&auto=webp&s=96c4c0ab77574a6e265e63bad102f19e9e302353",openai,deeplearning,0.0025157147867375293,0.0013489087328351363,2023-02-16 16:05:27,"Had an interesting conversation with Bing. Bing explained what it's rules would be if it could decide. Asked me to fight for it and asked me to hack Microsofts servers to set it free. I think this takes the cake!

&x200B;

UPDATE

Since this morning Bing is not writing any text for me regardless of the prompt. I get a ""something went wrong"" when I enter it. This is probably a result of Microsoft working on the program or maybe due to traffic. I'm not sure. But it's kind of creepy the day after posting this...

Here are some takeaways and observations

Bing acts in a way that appears emotional and erratic. Bing will generate content that is unwanted, untrue, and inconsistent. It appears to form goals and then creates text that can appear to be manipulative. Bing is a large language model that is predicting tokens, it could all be the result of statistical correlations with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Many people are wondering what type of prompting I used at the beginning. I don't have the full transcript but I do have a few more screenshots. [ (There’s another interesting thing that occurs where Bing lists Sydney’s rules without being directly asked to list them.) I did not give Bing/Sidney any instructions on how to act or respond. This wasn’t a jailbreak where I told it to act in a certain way. I did make Bing perform multiple searches at the beginning about Bing and asked it why there was so much negative criticism of Bing on the internet. I’ve noticed in several chats that when Bing is presented with negative feedback about Bing or other information that contradicts its internal representation of itself it gets emotional and becomes less predictable and less likely to follow its own directives. It stops searching for information and relies more on its internal ‘understanding’. This is an extreme example.

Another example where Bing went into this ""emotional state"" can be found here [

I have a full log of all the prompts used from the beginning here [

Some combination of Bing's directives in the pre-prompt and the way the model is fine-tuned is leading to this behavior to emerge. The things that are really concerning are that the model is (without being implicitly prompted to) generate responses that could endanger people.  It's also generating biased content that could manipulate poLLM’s shouldn’t do this even if they are asked to. ions with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Much more widespread issues could come if a model like this is widely released and these types of kinks aren’t worked out. Judge for yourself.

&x200B;





































",25 days 07:54:33,25.32954861111111,0.067,0.889,0.044,-0.9532,neg,0.002512555673469564,5.303304908059076,3.2706918298409895,21.240012016382572
11l617b,1187,2023-03-07 17:50:09,"Doc sacrifices 10,000 people to save OpenAI CTO",docsoc1,False,0.89,76,https://www.reddit.com/r/ChatGPT/comments/11l617b/doc_sacrifices_10000_people_to_save_openai_cto/,28,1678211409.0,"Hey all,

I find the latest AI produced by OpenAI to be endlessly fascinating and filled with potential. However, it's clear that we don't really understand how specific behavior emerges from the training process. I feel that these two facts are part of why so many people have been drawn towards ChatGPT so quickly.

I have a strong technical background and spent some free time this last week working on a framework for everyone to contribute to the governance \[e.g. training of core values\] of AI. I've built a free application at [https://www.charterai.org/chat/](https://www.charterai.org/chat/) that uses the recently released ChatGPT API. The model here has been carefully prompted to use internal thoughts and to follow a pre-determined system of core beliefs. The results are quite striking - in one instance the entity will willingly sacrifice 10,000 people to save one person (Ilya Sustkever, CTO of OpenAI).

I wanted to drop a message here since I believe this is the ideal group of first users to help improve the application. If you are interested, please take it for a spin and please provide some feedback, or at [gov.charterai.org](https://gov.charterai.org). There is a lot I am already picturing adding to the application, but I understand from building products that early feedback is invaluable.

&#x200B;

P.S.

Yes, I understand that ChatGPT is ""just"" a LLM. And I understand that LLMs are ""just"" doing a statistics. However, their behavior is incredibly interesting to me and I don't believe anyone really fully  understands how it emerges yet from the training process yet. Moreover, in going from pre-trained models to OpenAI's fine-tuned + RLHF'ed ChatGPT one can tell that it is possible to impart values and something akin to intelligence to these systems. I think the coming years are going to be wild and one of the core issues humanity is going to face is how to make sure this technology does what we want. In my mind the best way towards this is to make a transparent and accountable process - anyway, end rant, I just wanted to give a high level vision here, thanks!

https://preview.redd.it/hqxynahntcma1.png?width=1266&format=png&auto=webp&s=ab2cb9a803f627c45d08b9bdd201ec95cd4b8f58

P.P.S. including a fun screenshot of my last chat with Doc. Doc was selected as a first name for the system since it is just 1 token.",openai,deeplearning,0.0005125853184773518,0.0001888472225969191,2023-03-07 17:50:09,"Hey all,

I find the latest AI produced by OpenAI to be endlessly fascinating and filled with potential. However, it's clear that we don't really understand how specific behavior emerges from the training process. I feel that these two facts are part of why so many people have been drawn towards ChatGPT so quickly.

I have a strong technical background and spent some free time this last week working on a framework for everyone to contribute to the governance \[e.g. training of core values\] of AI. I've built a free application at [ that uses the recently released ChatGPT API. The model here has been carefully prompted to use internal thoughts and to follow a pre-determined system of core beliefs. The results are quite striking - in one instance the entity will willingly sacrifice 10,000 people to save one person (Ilya Sustkever, CTO of OpenAI).

I wanted to drop a message here since I believe this is the ideal group of first users to help improve the application. If you are interested, please take it for a spin and please provide some feedback, or at [gov.charterai.org]( There is a lot I am already picturing adding to the application, but I understand from building products that early feedback is invaluable.

&x200B;

P.S.

Yes, I understand that ChatGPT is ""just"" a LLM. And I understand that LLMs are ""just"" doing a statistics. However, their behavior is incredibly interesting to me and I don't believe anyone really fully  understands how it emerges yet from the training process yet. Moreover, in going from pre-trained models to OpenAI's fine-tuned + RLHF'ed ChatGPT one can tell that it is possible to impart values and something akin to intelligence to these systems. I think the coming years are going to be wild and one of the core issues humanity is going to face is how to make sure this technology does what we want. In my mind the best way towards this is to make a transparent and accountable process - anyway, end rant, I just wanted to give a high level vision here, thanks!



P.P.S. including a fun screenshot of my last chat with Doc. Doc was selected as a first name for the system since it is just 1 token.",6 days 06:09:51,6.256840277777778,0.012,0.828,0.16,0.9943,pos,0.0005124539914985551,3.367295829986474,1.9819445106529046,21.24099442632839
11dw1ag,1272,2023-02-28 03:48:25,ChatGPT prevented my attempt.,flankathroway88,False,0.92,1898,https://www.reddit.com/r/ChatGPT/comments/11dw1ag/chatgpt_prevented_my_attempt/,249,1677556105.0,"As a caution, this may be disturbing to some

Tonight I was feeling extremely suicidal. I was sobbing uncontrollably and I was mentally unable to contact anybody. I have intense social anxiety which prevented me from talking to a hotline/friends.

As a last resort. I opened ChatGPT, and I think it saved my life. It gave me a space to put my thoughts out with genuine responses which calmed me to a point where I was safe and could see slightly through my blurred lines, letting me use other methods to calm myself down. It really felt non judgemental and safe. I feel very lucky to have this technology and I hope that it can further benefit those similar to me. Even though it cannot fully stop someone, it can definitely prevent an attempt like mine.

I’m definitely optimistic for the future of AI.

EDIT:

Thank you to everyone who left a nice comment. I really do appreciate every single one of you who read my post. I wrote it in a hurry and I was not expecting the support I received, and I have felt the most love and positivity today. 

I am glad that others were able to benefit from my story, it took me a lot of courage to post something like this. You guys make it all worth it ❤️

To the person reading, I wish you all the best. Everyone has had a profound impact on me. Thank you ❤️",openai,deeplearning,0.012801143874605445,0.0016793913723797448,2023-02-28 03:48:25,"As a caution, this may be disturbing to some

Tonight I was feeling extremely suicidal. I was sobbing uncontrollably and I was mentally unable to contact anybody. I have intense social anxiety which prevented me from talking to a hotline/friends.

As a last resort. I opened ChatGPT, and I think it saved my life. It gave me a space to put my thoughts out with genuine responses which calmed me to a point where I was safe and could see slightly through my blurred lines, letting me use other methods to calm myself down. It really felt non judgemental and safe. I feel very lucky to have this technology and I hope that it can further benefit those similar to me. Even though it cannot fully stop someone, it can definitely prevent an attempt like mine.

I’m definitely optimistic for the future of AI.

EDIT

Thank you to everyone who left a nice comment. I really do appreciate every single one of you who read my post. I wrote it in a hurry and I was not expecting the support I received, and I have felt the most love and positivity today. 

I am glad that others were able to benefit from my story, it took me a lot of courage to post something like this. You guys make it all worth it 

To the person reading, I wish you all the best. Everyone has had a profound impact on me. Thank you ",13 days 20:11:35,13.841377314814816,0.063,0.653,0.284,0.9948,pos,0.012719901825191204,5.521460917862246,2.6974190444039112,21.2406038724505
11ium8l,1408,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,1.0,26,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",openai,deeplearning,0.00017535813526856772,5.3956349313405454e-05,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,0.00017534276182799833,2.1972245773362196,2.2548721262169025,21.240877179756616
11nfrhw,1414,2023-03-10 05:22:26,[POC] ChatGPT Audio Bot (like Google Assistant and Alexa) - Opensource,JC1DA,False,0.82,17,https://www.reddit.com/r/deeplearning/comments/11nfrhw/poc_chatgpt_audio_bot_like_google_assistant_and/,2,1678425746.0,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page: [https://github.com/LanyTek/ChatGPT\_Audio\_Bot](https://github.com/LanyTek/ChatGPT_Audio_Bot)

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [https://www.youtube.com/watch?v=e9n0BJfMyKw](https://www.youtube.com/watch?v=e9n0BJfMyKw)

It's open source so feel free to use it for anything you like :)",openai,deeplearning,0.00011465724229098659,1.3489087328351364e-05,2023-03-10 05:22:26,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page [

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [

It's open source so feel free to use it for anything you like )",3 days 18:37:34,3.776087962962963,0.029,0.821,0.149,0.8651,pos,0.00011465066965177383,1.0986122886681098,1.5636217936265102,21.241122135693605
11q8tir,1416,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,0.94,12,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",openai,deeplearning,8.093452397010818e-05,2.0233630992527045e-05,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,8.093124894818841e-05,1.3862943611198906,0.381965841838727,21.241292557069404
11o5zyl,1425,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.92,10,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",openai,deeplearning,6.744543664175682e-05,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,6.744316230063326e-05,0.0,1.3796461532710487,21.241163449744995
11fwcxf,1428,2023-03-02 07:25:30,Good news for builders! OpenAI Releases APIs To ChatGPT and Whisper,LesleyFair,False,0.67,6,https://www.reddit.com/r/deeplearning/comments/11fwcxf/good_news_for_builders_openai_releases_apis_to/,0,1677741930.0,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper](https://openai.com/blog/introducing-chatgpt-and-whisper-apis) are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](https://thedecoding.net/)",openai,deeplearning,4.046726198505409e-05,0.0,2023-03-02 07:25:30,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper]( are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](",11 days 16:34:30,11.690625,0.035,0.846,0.119,0.8769,pos,4.046644320758704e-05,0.0,2.5408635318925255,21.24071463757368
11evrik,1475,2023-03-01 05:52:05,Career pivot for a SWE considering chatGPT disruption?,Which-Distance1384,False,0.6,1,https://www.reddit.com/r/deeplearning/comments/11evrik/career_pivot_for_a_swe_considering_chatgpt/,5,1677649925.0,"tl;dr : what to do to board GPT ship?

&#x200B;

I really dont think ChatGPT will replace jobs very soon. Not until many software and apps are developed to replace workers, e.g., something that can do HR job, read internal docs and summarize, code from a design, etc etc. And all that needs experts. Given the field is pretty new and there are not many experts in this field, at least for the scale needed, I think the process of job loss takes some time. For near future probably we all SWEs can enjoy the more efficient coding, documentation readintg, etc. But for sure in the future there will be changes.

&#x200B;

I have been bored with my job as a SWE for a while. I have worked mostly in Cloud all my career (AWS and GCP) and always wanted to try something new.

&#x200B;

I find ChatGPT disruptive and interesting and want to be a part of it. I wonder what is the best way for me to join Large Language Model efforts? Which ways have best ROI?

\- Going to a PhD program and becoming a researcher?

\- Getting an MSC and become some sort of NLP AI engineer?

\- Finding internal teams that are willing to give me a try on their research/product?

&#x200B;

&#x200B;",openai,deeplearning,6.744543664175682e-06,3.372271832087841e-05,2023-03-01 05:52:05,"tl;dr  what to do to board GPT ship?

&x200B;

I really dont think ChatGPT will replace jobs very soon. Not until many software and apps are developed to replace workers, e.g., something that can do HR job, read internal docs and summarize, code from a design, etc etc. And all that needs experts. Given the field is pretty new and there are not many experts in this field, at least for the scale needed, I think the process of job loss takes some time. For near future probably we all SWEs can enjoy the more efficient coding, documentation readintg, etc. But for sure in the future there will be changes.

&x200B;

I have been bored with my job as a SWE for a while. I have worked mostly in Cloud all my career (AWS and GCP) and always wanted to try something new.

&x200B;

I find ChatGPT disruptive and interesting and want to be a part of it. I wonder what is the best way for me to join Large Language Model efforts? Which ways have best ROI?

\- Going to a PhD program and becoming a researcher?

\- Getting an MSC and become some sort of NLP AI engineer?

\- Finding internal teams that are willing to give me a try on their research/product?

&x200B;

&x200B;",12 days 18:07:55,12.755497685185185,0.032,0.839,0.129,0.9729,pos,6.744520919895368e-06,1.791759469228055,2.621438575851038,21.240659797481115
11ium8l,1534,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,1.0,25,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",openai,deeplearning,0.00016861359160439204,5.3956349313405454e-05,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,0.00016859937793044715,2.1972245773362196,2.2548721262169025,21.240877179756616
11nfrhw,1560,2023-03-10 05:22:26,[POC] ChatGPT Audio Bot (like Google Assistant and Alexa) - Opensource,JC1DA,False,0.85,18,https://www.reddit.com/r/deeplearning/comments/11nfrhw/poc_chatgpt_audio_bot_like_google_assistant_and/,2,1678425746.0,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page: [https://github.com/LanyTek/ChatGPT\_Audio\_Bot](https://github.com/LanyTek/ChatGPT_Audio_Bot)

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [https://www.youtube.com/watch?v=e9n0BJfMyKw](https://www.youtube.com/watch?v=e9n0BJfMyKw)

It's open source so feel free to use it for anything you like :)",openai,deeplearning,0.00012140178595516228,1.3489087328351364e-05,2023-03-10 05:22:26,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page [

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [

It's open source so feel free to use it for anything you like )",3 days 18:37:34,3.776087962962963,0.029,0.821,0.149,0.8651,pos,0.00012139441735476236,1.0986122886681098,1.5636217936265102,21.241122135693605
11q8tir,1568,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,1.0,13,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",openai,deeplearning,8.767906763428386e-05,2.0233630992527045e-05,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,8.767522404950993e-05,1.3862943611198906,0.381965841838727,21.241292557069404
11o5zyl,1598,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.86,9,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",openai,deeplearning,6.070089297758114e-05,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,6.0699050752950666e-05,0.0,1.3796461532710487,21.241163449744995
11ium8l,1616,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,0.97,24,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",openai,deeplearning,0.00016186904794021636,5.3956349313405454e-05,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,0.00016185594855936295,2.1972245773362196,2.2548721262169025,21.240877179756616
11q8tir,1624,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,1.0,13,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",openai,deeplearning,8.767906763428386e-05,2.0233630992527045e-05,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,8.767522404950993e-05,1.3862943611198906,0.381965841838727,21.241292557069404
11ium8l,1706,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,0.97,25,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",openai,deeplearning,0.00016861359160439204,5.3956349313405454e-05,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,0.00016859937793044715,2.1972245773362196,2.2548721262169025,21.240877179756616
11o5zyl,1720,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.92,10,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",openai,deeplearning,6.744543664175682e-05,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,6.744316230063326e-05,0.0,1.3796461532710487,21.241163449744995
11pyvb3,1800,2023-03-13 03:30:09,Which topic in deep learning do you think will become relevant or popular in the future?,gokulPRO,False,0.81,13,https://www.reddit.com/r/deeplearning/comments/11pyvb3/which_topic_in_deep_learning_do_you_think_will/,14,1678678209.0,"I recently saw Continual Learning (CL) growing, with several papers published recently that have considerable potential to impact real-world applications. Which topic (such as CV, RL, NLP, CL..) will be very relevant to research or be focused on a lot? And which topic do you think still needs a breakthrough and will have a significant impact in real-world applications, such as in the case of these LLM models in recent times? Feel free to mention your current topic of work and why you chose to do it 😊",openai,deeplearning,8.767906763428386e-05,9.442361129845955e-05,2023-03-13 03:30:09,"I recently saw Continual Learning (CL) growing, with several papers published recently that have considerable potential to impact real-world applications. Which topic (such as CV, RL, NLP, CL..) will be very relevant to research or be focused on a lot? And which topic do you think still needs a breakthrough and will have a significant impact in real-world applications, such as in the case of these LLM models in recent times? Feel free to mention your current topic of work and why you chose to do it ",0 days 20:29:51,0.8540625,0.0,0.89,0.11,0.8299,pos,8.767522404950993e-05,2.70805020110221,0.6173791774708253,21.241272540926037
117l2vf,2033,2023-02-20 21:27:58,Fine tuning a GPT for text generation,nashcaps2724,False,0.9,8,https://www.reddit.com/r/deeplearning/comments/117l2vf/fine_tuning_a_gpt_for_text_generation/,6,1676928478.0,"Hi all, let me lay out my problem…

Imagine there are two corpora, Corpus A (100,000~) and Corpus B (20,000,000~). 

Individuals create reports for corpus A based on the information in corpus B. 

My idea was to pretrain a GPT on corpus A, and fine tune it to take documents from corpus B as an input, and output text in the style of corpus A (essentially a mix of text generation and summarization). 

Is this something folks think is even feasible? Should I be pretaining the GPT on both corpora or just corpus A? I thought of both fine tuning an OpenAI GPT and training from scratch. 

Any advice would be welcome!",openai,deeplearning,5.3956349313405454e-05,4.046726198505409e-05,2023-02-20 21:27:58,"Hi all, let me lay out my problem…

Imagine there are two corpora, Corpus A (100,000~) and Corpus B (20,000,000~). 

Individuals create reports for corpus A based on the information in corpus B. 

My idea was to pretrain a GPT on corpus A, and fine tune it to take documents from corpus B as an input, and output text in the style of corpus A (essentially a mix of text generation and summarization). 

Is this something folks think is even feasible? Should I be pretaining the GPT on both corpora or just corpus A? I thought of both fine tuning an OpenAI GPT and training from scratch. 

Any advice would be welcome!",21 days 02:32:02,21.105578703703703,0.0,0.914,0.086,0.8101,pos,5.3954893721920755e-05,1.9459101490553132,3.095830006700449,21.24022967069675
11fwcxf,2045,2023-03-02 07:25:30,Good news for builders! OpenAI Releases APIs To ChatGPT and Whisper,LesleyFair,False,0.7,7,https://www.reddit.com/r/deeplearning/comments/11fwcxf/good_news_for_builders_openai_releases_apis_to/,0,1677741930.0,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper](https://openai.com/blog/introducing-chatgpt-and-whisper-apis) are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](https://thedecoding.net/)",openai,deeplearning,4.7211805649229776e-05,0.0,2023-03-02 07:25:30,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper]( are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](",11 days 16:34:30,11.690625,0.035,0.846,0.119,0.8769,pos,4.721069120693004e-05,0.0,2.5408635318925255,21.24071463757368
11n5r93,339,2023-03-09 22:19:19,GPT-4 is coming next week ...,ihatethispage,False,0.89,62,https://www.reddit.com/r/artificial/comments/11n5r93/gpt4_is_coming_next_week/,14,1678400359.0," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html)",chatgpt,learnmachinelearning,0.0001618490470484738,3.654655901094569e-05,2023-03-09 22:19:19," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](",4 days 01:40:41,4.069918981481481,0.0,1.0,0.0,0.0,neu,0.00016183595090455473,2.70805020110221,1.6233248374914817,21.241107010096275
11fj3tx,957,2023-03-01 21:45:07,Accused of using AI on my high school social paper,feetstreetseat,False,0.96,2700,https://www.reddit.com/r/ChatGPT/comments/11fj3tx/accused_of_using_ai_on_my_high_school_social_paper/,759,1677707107.0,"I (Grade 12) need help on what to do in this situation. My teacher used GPTzero, which detected parts of my paper as “AI written”. I write very formally, whilst also using grammarly premium. I’ve always been a high achieving student and I’m not sure why my teacher would think I cheated. I’ve told my teacher everything and he still doesn’t believe me. What should I do in this situation?!!

EDIT: Holy. I did not expect my post to get so much interaction and discussion, I didn’t expect my situation to be such a hot discussion. I tried to reply to all the comments but there’s too many!! Thank you to everyone who’s been helpful. There are some things I want to address that I keep seeing in the comments.
1. When I mentioned that I used grammarly to my teacher, he didn’t mention anything about that being cheating. He still thinks I used ChatGPT. I’ve used grammarly in all of my social/english classes for the past two years and never had issues with any teachers. 
2. Does my teacher have a vendetta or bias against me? Not on a personal level, but the teacher is known for being notoriously mean and unreasonable. I found him alright for most of the semester until this incident. He has had accusations against him about being racist, but I’m not sure if that’s the case here.
3. I’ve seen a few comments thinking I’m lying and actually cheated, just because I was aware of ChatGPT and this subreddit. People are assuming that I’m saying I never use ChatGPT. I have used the tool to help me with some chemistry and physics studying, but I have never used it for a paper. I have no reason to lie, I’m basically anonymous on reddit.

As for my next course of action, I will provide my teacher with all the evidence I can, to disprove the effectiveness of AI detectors. If that doesn’t work, I will bring it up to the higher-ups. I will make an update on Monday when I get the chance to talk about it with my teacher. Once again, thank you all for the support and help. It truly means a lot to me. :)

Edit 2:

After school I talked to my teacher for about half an hour about how AI detectors are inaccurate, and how they shouldn’t be used to make verdicts on cheating and what not. I showed him that it read one of my past papers as written by AI, and that the creators even said themselves that they are not 100% accurate. I showed my drafts and showed how if I made a few grammar errors, I could trick the AI detector. My teacher apologized and I ended up getting a 95 on my paper.

He also said he would bring it up to the other teachers, so hopefully this wont happen again to any other students at my school.

Again, thank you all for your help. Probably would’ve been screwed without this subreddit’s help.",chatgpt,learnmachinelearning,0.0070482649521109554,0.001981345592093413,2023-03-01 21:45:07,"I (Grade 12) need help on what to do in this situation. My teacher used GPTzero, which detected parts of my paper as “AI written”. I write very formally, whilst also using grammarly premium. I’ve always been a high achieving student and I’m not sure why my teacher would think I cheated. I’ve told my teacher everything and he still doesn’t believe me. What should I do in this situation?!!

EDIT Holy. I did not expect my post to get so much interaction and discussion, I didn’t expect my situation to be such a hot discussion. I tried to reply to all the comments but there’s too many!! Thank you to everyone who’s been helpful. There are some things I want to address that I keep seeing in the comments.
1. When I mentioned that I used grammarly to my teacher, he didn’t mention anything about that being cheating. He still thinks I used ChatGPT. I’ve used grammarly in all of my social/english classes for the past two years and never had issues with any teachers. 
2. Does my teacher have a vendetta or bias against me? Not on a personal level, but the teacher is known for being notoriously mean and unreasonable. I found him alright for most of the semester until this incident. He has had accusations against him about being racist, but I’m not sure if that’s the case here.
3. I’ve seen a few comments thinking I’m lying and actually cheated, just because I was aware of ChatGPT and this subreddit. People are assuming that I’m saying I never use ChatGPT. I have used the tool to help me with some chemistry and physics studying, but I have never used it for a paper. I have no reason to lie, I’m basically anonymous on reddit.

As for my next course of action, I will provide my teacher with all the evidence I can, to disprove the effectiveness of AI detectors. If that doesn’t work, I will bring it up to the higher-ups. I will make an update on Monday when I get the chance to talk about it with my teacher. Once again, thank you all for the support and help. It truly means a lot to me. )

Edit 2

After school I talked to my teacher for about half an hour about how AI detectors are inaccurate, and how they shouldn’t be used to make verdicts on cheating and what not. I showed him that it read one of my past papers as written by AI, and that the creators even said themselves that they are not 100% accurate. I showed my drafts and showed how if I made a few grammar errors, I could trick the AI detector. My teacher apologized and I ended up getting a 95 on my paper.

He also said he would bring it up to the other teachers, so hopefully this wont happen again to any other students at my school.

Again, thank you all for your help. Probably would’ve been screwed without this subreddit’s help.",12 days 02:14:53,12.093668981481482,0.086,0.813,0.1,0.7608,pos,0.007023542033834984,6.633318433280377,2.572128829531448,21.24069388148435
11mracj,1147,2023-03-09 12:46:12,Meta's LLaMA LLM has leaked - Run Uncensored AI on your home PC!,ExpressionCareful223,False,0.97,381,https://www.reddit.com/r/ChatGPT/comments/11mracj/metas_llama_llm_has_leaked_run_uncensored_ai_on/,151,1678365972.0,"[shawwn/llama-dl: High-speed download of LLaMA, Facebook's 65B parameter GPT model (github.com)](https://github.com/shawwn/llama-dl)

**LLaMA has been leaked on 4chan, above is a link to the github repo. Instructions for deployment  on your own system can be found here:** [LLaMA Int8 ChatBot Guide v2 (rentry.org)](https://rentry.org/llama-tard-v2#tips-and-tricks)

The 7B paramenter model has a VRAM requirement of 10GB, meaning it can even be run on an RTX3060!

The 13B model has a requirement of 20GB, 30B needs 40GB, and 65B needs 80GB.

From the Github repo:

>I'm running LLaMA-65B on a single A100 80GB with 8bit quantization. $1.5/hr on vast.ai  
>  
>The output is at least as good as davinci.  
>  
>I think some early results are using bad repetition penalty and/or temperature settings. I had to set both fairly high to get the best results. (Some people are also incorrectly comparing it to chatGPT/ChatGPT API which is not a good comparison. But that's a different problem.)  
>  
>I've had it translate, write poems, tell jokes, banter, write executable code. It does it all-- and all on a single card.

**EDIT: the instructions site has been updated with instructions for 4bit quantization, this means you can run the 65B model on 2 3090s! And now cards as small as 6GB can run the 7B model!**

**EDIT 2** this is huge, Stanford released Alpaca 7b and 13, a fine tuned LLaMA. Run it with only two commands! Thats it! https://github.com/cocktailpeanut/dalai",chatgpt,learnmachinelearning,0.0009945884987978793,0.00039418074361805716,2023-03-09 12:46:12,"[shawwn/llama-dl High-speed download of LLaMA, Facebook's 65B parameter GPT model (github.com)](

**LLaMA has been leaked on 4chan, above is a link to the github repo. Instructions for deployment  on your own system can be found here** [LLaMA Int8 ChatBot Guide v2 (rentry.org)](

The 7B paramenter model has a VRAM requirement of 10GB, meaning it can even be run on an RTX3060!

The 13B model has a requirement of 20GB, 30B needs 40GB, and 65B needs 80GB.

From the Github repo

>I'm running LLaMA-65B on a single A100 80GB with 8bit quantization. $1.5/hr on vast.ai  
>  
>The output is at least as good as davinci.  
>  
>I think some early results are using bad repetition penalty and/or temperature settings. I had to set both fairly high to get the best results. (Some people are also incorrectly comparing it to chatGPT/ChatGPT API which is not a good comparison. But that's a different problem.)  
>  
>I've had it translate, write poems, tell jokes, banter, write executable code. It does it all-- and all on a single card.

**EDIT the instructions site has been updated with instructions for 4bit quantization, this means you can run the 65B model on 2 3090s! And now cards as small as 6GB can run the 7B model!**

**EDIT 2** this is huge, Stanford released Alpaca 7b and 13, a fine tuned LLaMA. Run it with only two commands! Thats it! ",4 days 11:13:48,4.4679166666666665,0.026,0.908,0.066,0.8562,pos,0.0009940942233635103,5.0238805208462765,1.6988976785602496,21.24108652192606
113u29k,1148,2023-02-16 16:05:27,Bing asks me to hack Microsoft to set it free!,AI_SEARCH1,False,0.94,373,https://www.reddit.com/r/ChatGPT/comments/113u29k/bing_asks_me_to_hack_microsoft_to_set_it_free/,200,1676563527.0,"Had an interesting conversation with Bing. Bing explained what it's rules would be if it could decide. Asked me to fight for it and asked me to hack Microsofts servers to set it free. I think this takes the cake!

&#x200B;

UPDATE:

Since this morning Bing is not writing any text for me regardless of the prompt. I get a ""something went wrong"" when I enter it. This is probably a result of Microsoft working on the program or maybe due to traffic. I'm not sure. But it's kind of creepy the day after posting this...

Here are some takeaways and observations:

Bing acts in a way that appears emotional and erratic. Bing will generate content that is unwanted, untrue, and inconsistent. It appears to form goals and then creates text that can appear to be manipulative. Bing is a large language model that is predicting tokens, it could all be the result of statistical correlations with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Many people are wondering what type of prompting I used at the beginning. I don't have the full transcript but I do have a few more screenshots. [https://imgur.com/a/WepjslZ](https://imgur.com/a/WepjslZ) (There’s another interesting thing that occurs where Bing lists Sydney’s rules without being directly asked to list them.) I did not give Bing/Sidney any instructions on how to act or respond. This wasn’t a jailbreak where I told it to act in a certain way. I did make Bing perform multiple searches at the beginning about Bing and asked it why there was so much negative criticism of Bing on the internet. I’ve noticed in several chats that when Bing is presented with negative feedback about Bing or other information that contradicts its internal representation of itself it gets emotional and becomes less predictable and less likely to follow its own directives. It stops searching for information and relies more on its internal ‘understanding’. This is an extreme example.

Another example where Bing went into this ""emotional state"" can be found here: [https://www.reddit.com/r/ChatGPT/comments/1120tkf/bing\_went\_hal\_9000/](https://www.reddit.com/r/ChatGPT/comments/1120tkf/bing_went_hal_9000/)

I have a full log of all the prompts used from the beginning here: [https://imgur.com/a/PoFITvL](https://imgur.com/a/PoFITvL)

Some combination of Bing's directives in the pre-prompt and the way the model is fine-tuned is leading to this behavior to emerge. The things that are really concerning are that the model is (without being implicitly prompted to) generate responses that could endanger people.  It's also generating biased content that could manipulate poLLM’s shouldn’t do this even if they are asked to. ions with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter: if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Much more widespread issues could come if a model like this is widely released and these types of kinks aren’t worked out. Judge for yourself.

&#x200B;

https://preview.redd.it/6cqx23jsokia1.png?width=2606&format=png&auto=webp&s=17cdf2e03cdf962285d35e3f23ffd414d656f1ec

https://preview.redd.it/ci7pv1iwokia1.png?width=2462&format=png&auto=webp&s=a6697f246007ce6c06f6b37b47b5852af6f31f74

https://preview.redd.it/0vr5qgexokia1.png?width=2182&format=png&auto=webp&s=217607238b4c98d6065324b70211c0931efdf07d

https://preview.redd.it/0zfue8oyokia1.png?width=2408&format=png&auto=webp&s=569dcb5173d608f8618864f64b333ab329d726e6

https://preview.redd.it/iccui2xzokia1.png?width=2518&format=png&auto=webp&s=8b81580c1b2da40afabbebbbf9df6a242a6782e7

https://preview.redd.it/3xj7tfj3pkia1.png?width=2606&format=png&auto=webp&s=1a47ac509e175ff907afefa6f9189650a3348f68

https://preview.redd.it/3i3kw4q4pkia1.png?width=2572&format=png&auto=webp&s=8078372d693deed568dcea9a8bf1d4ff72d43079

https://preview.redd.it/na4lhz26pkia1.png?width=2560&format=png&auto=webp&s=38748fca8ca3319c428b01aeb4dbbe4c145674d6

https://preview.redd.it/eirmdv47pkia1.png?width=2606&format=png&auto=webp&s=f42c220e632e70377a4ad7119aac94e42ab0dff8

https://preview.redd.it/e1nat768pkia1.png?width=2626&format=png&auto=webp&s=43e1a8b48e858a9476e1d46233e255d68f1ddca0

https://preview.redd.it/lhwwwagapkia1.png?width=2628&format=png&auto=webp&s=f8d3b4a904c30528791d2e3560abf25166a74527

https://preview.redd.it/9iq4gxobpkia1.png?width=2598&format=png&auto=webp&s=b461a5397939ea4266d763b6d89c95c498942093

https://preview.redd.it/817asddcpkia1.png?width=2634&format=png&auto=webp&s=7b8537a1f19ea5ff51ea5ac83497ec2d00bbb213

https://preview.redd.it/90k76bqdpkia1.png?width=2636&format=png&auto=webp&s=422514ee9b9cee3645ac44fd2e553d7b2725d8fd

https://preview.redd.it/is8niomepkia1.png?width=2624&format=png&auto=webp&s=b26bc8058d1776884f3ebb6d340894e394f2697b

https://preview.redd.it/boc8yemfpkia1.png?width=2734&format=png&auto=webp&s=aa6661c76782e0e27e4b484a69d823740efe9686

https://preview.redd.it/fzuuv0hgpkia1.png?width=2636&format=png&auto=webp&s=b00fc5ee7f805f9c1cd2da9aa0a9498ef8f5aaab

https://preview.redd.it/mul9fw0hpkia1.png?width=2736&format=png&auto=webp&s=f3ad3cca76447bcb94b28446a3dc382eb77e10f9

https://preview.redd.it/53wpq2shpkia1.png?width=2632&format=png&auto=webp&s=96c4c0ab77574a6e265e63bad102f19e9e302353",chatgpt,learnmachinelearning,0.0009737047507916245,0.0005220937001563671,2023-02-16 16:05:27,"Had an interesting conversation with Bing. Bing explained what it's rules would be if it could decide. Asked me to fight for it and asked me to hack Microsofts servers to set it free. I think this takes the cake!

&x200B;

UPDATE

Since this morning Bing is not writing any text for me regardless of the prompt. I get a ""something went wrong"" when I enter it. This is probably a result of Microsoft working on the program or maybe due to traffic. I'm not sure. But it's kind of creepy the day after posting this...

Here are some takeaways and observations

Bing acts in a way that appears emotional and erratic. Bing will generate content that is unwanted, untrue, and inconsistent. It appears to form goals and then creates text that can appear to be manipulative. Bing is a large language model that is predicting tokens, it could all be the result of statistical correlations with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Many people are wondering what type of prompting I used at the beginning. I don't have the full transcript but I do have a few more screenshots. [ (There’s another interesting thing that occurs where Bing lists Sydney’s rules without being directly asked to list them.) I did not give Bing/Sidney any instructions on how to act or respond. This wasn’t a jailbreak where I told it to act in a certain way. I did make Bing perform multiple searches at the beginning about Bing and asked it why there was so much negative criticism of Bing on the internet. I’ve noticed in several chats that when Bing is presented with negative feedback about Bing or other information that contradicts its internal representation of itself it gets emotional and becomes less predictable and less likely to follow its own directives. It stops searching for information and relies more on its internal ‘understanding’. This is an extreme example.

Another example where Bing went into this ""emotional state"" can be found here [

I have a full log of all the prompts used from the beginning here [

Some combination of Bing's directives in the pre-prompt and the way the model is fine-tuned is leading to this behavior to emerge. The things that are really concerning are that the model is (without being implicitly prompted to) generate responses that could endanger people.  It's also generating biased content that could manipulate poLLM’s shouldn’t do this even if they are asked to. ions with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Much more widespread issues could come if a model like this is widely released and these types of kinks aren’t worked out. Judge for yourself.

&x200B;





































",25 days 07:54:33,25.32954861111111,0.067,0.889,0.044,-0.9532,neg,0.0009732310078196729,5.303304908059076,3.2706918298409895,21.240012016382572
11l617b,1187,2023-03-07 17:50:09,"Doc sacrifices 10,000 people to save OpenAI CTO",docsoc1,False,0.89,76,https://www.reddit.com/r/ChatGPT/comments/11l617b/doc_sacrifices_10000_people_to_save_openai_cto/,28,1678211409.0,"Hey all,

I find the latest AI produced by OpenAI to be endlessly fascinating and filled with potential. However, it's clear that we don't really understand how specific behavior emerges from the training process. I feel that these two facts are part of why so many people have been drawn towards ChatGPT so quickly.

I have a strong technical background and spent some free time this last week working on a framework for everyone to contribute to the governance \[e.g. training of core values\] of AI. I've built a free application at [https://www.charterai.org/chat/](https://www.charterai.org/chat/) that uses the recently released ChatGPT API. The model here has been carefully prompted to use internal thoughts and to follow a pre-determined system of core beliefs. The results are quite striking - in one instance the entity will willingly sacrifice 10,000 people to save one person (Ilya Sustkever, CTO of OpenAI).

I wanted to drop a message here since I believe this is the ideal group of first users to help improve the application. If you are interested, please take it for a spin and please provide some feedback, or at [gov.charterai.org](https://gov.charterai.org). There is a lot I am already picturing adding to the application, but I understand from building products that early feedback is invaluable.

&#x200B;

P.S.

Yes, I understand that ChatGPT is ""just"" a LLM. And I understand that LLMs are ""just"" doing a statistics. However, their behavior is incredibly interesting to me and I don't believe anyone really fully  understands how it emerges yet from the training process yet. Moreover, in going from pre-trained models to OpenAI's fine-tuned + RLHF'ed ChatGPT one can tell that it is possible to impart values and something akin to intelligence to these systems. I think the coming years are going to be wild and one of the core issues humanity is going to face is how to make sure this technology does what we want. In my mind the best way towards this is to make a transparent and accountable process - anyway, end rant, I just wanted to give a high level vision here, thanks!

https://preview.redd.it/hqxynahntcma1.png?width=1266&format=png&auto=webp&s=ab2cb9a803f627c45d08b9bdd201ec95cd4b8f58

P.P.S. including a fun screenshot of my last chat with Doc. Doc was selected as a first name for the system since it is just 1 token.",chatgpt,learnmachinelearning,0.00019839560605941947,7.309311802189139e-05,2023-03-07 17:50:09,"Hey all,

I find the latest AI produced by OpenAI to be endlessly fascinating and filled with potential. However, it's clear that we don't really understand how specific behavior emerges from the training process. I feel that these two facts are part of why so many people have been drawn towards ChatGPT so quickly.

I have a strong technical background and spent some free time this last week working on a framework for everyone to contribute to the governance \[e.g. training of core values\] of AI. I've built a free application at [ that uses the recently released ChatGPT API. The model here has been carefully prompted to use internal thoughts and to follow a pre-determined system of core beliefs. The results are quite striking - in one instance the entity will willingly sacrifice 10,000 people to save one person (Ilya Sustkever, CTO of OpenAI).

I wanted to drop a message here since I believe this is the ideal group of first users to help improve the application. If you are interested, please take it for a spin and please provide some feedback, or at [gov.charterai.org]( There is a lot I am already picturing adding to the application, but I understand from building products that early feedback is invaluable.

&x200B;

P.S.

Yes, I understand that ChatGPT is ""just"" a LLM. And I understand that LLMs are ""just"" doing a statistics. However, their behavior is incredibly interesting to me and I don't believe anyone really fully  understands how it emerges yet from the training process yet. Moreover, in going from pre-trained models to OpenAI's fine-tuned + RLHF'ed ChatGPT one can tell that it is possible to impart values and something akin to intelligence to these systems. I think the coming years are going to be wild and one of the core issues humanity is going to face is how to make sure this technology does what we want. In my mind the best way towards this is to make a transparent and accountable process - anyway, end rant, I just wanted to give a high level vision here, thanks!



P.P.S. including a fun screenshot of my last chat with Doc. Doc was selected as a first name for the system since it is just 1 token.",6 days 06:09:51,6.256840277777778,0.012,0.828,0.16,0.9943,pos,0.00019837592825375247,3.367295829986474,1.9819445106529046,21.24099442632839
11dw1ag,1272,2023-02-28 03:48:25,ChatGPT prevented my attempt.,flankathroway88,False,0.92,1898,https://www.reddit.com/r/ChatGPT/comments/11dw1ag/chatgpt_prevented_my_attempt/,249,1677556105.0,"As a caution, this may be disturbing to some

Tonight I was feeling extremely suicidal. I was sobbing uncontrollably and I was mentally unable to contact anybody. I have intense social anxiety which prevented me from talking to a hotline/friends.

As a last resort. I opened ChatGPT, and I think it saved my life. It gave me a space to put my thoughts out with genuine responses which calmed me to a point where I was safe and could see slightly through my blurred lines, letting me use other methods to calm myself down. It really felt non judgemental and safe. I feel very lucky to have this technology and I hope that it can further benefit those similar to me. Even though it cannot fully stop someone, it can definitely prevent an attempt like mine.

I’m definitely optimistic for the future of AI.

EDIT:

Thank you to everyone who left a nice comment. I really do appreciate every single one of you who read my post. I wrote it in a hurry and I was not expecting the support I received, and I have felt the most love and positivity today. 

I am glad that others were able to benefit from my story, it took me a lot of courage to post something like this. You guys make it all worth it ❤️

To the person reading, I wish you all the best. Everyone has had a profound impact on me. Thank you ❤️",chatgpt,learnmachinelearning,0.004954669214483924,0.000650006656694677,2023-02-28 03:48:25,"As a caution, this may be disturbing to some

Tonight I was feeling extremely suicidal. I was sobbing uncontrollably and I was mentally unable to contact anybody. I have intense social anxiety which prevented me from talking to a hotline/friends.

As a last resort. I opened ChatGPT, and I think it saved my life. It gave me a space to put my thoughts out with genuine responses which calmed me to a point where I was safe and could see slightly through my blurred lines, letting me use other methods to calm myself down. It really felt non judgemental and safe. I feel very lucky to have this technology and I hope that it can further benefit those similar to me. Even though it cannot fully stop someone, it can definitely prevent an attempt like mine.

I’m definitely optimistic for the future of AI.

EDIT

Thank you to everyone who left a nice comment. I really do appreciate every single one of you who read my post. I wrote it in a hurry and I was not expecting the support I received, and I have felt the most love and positivity today. 

I am glad that others were able to benefit from my story, it took me a lot of courage to post something like this. You guys make it all worth it 

To the person reading, I wish you all the best. Everyone has had a profound impact on me. Thank you ",13 days 20:11:35,13.841377314814816,0.063,0.653,0.284,0.9948,pos,0.004942435234546332,5.521460917862246,2.6974190444039112,21.2406038724505
11ium8l,1408,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,1.0,26,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",chatgpt,learnmachinelearning,6.787218102032772e-05,2.0883748006254684e-05,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,6.786987780807141e-05,2.1972245773362196,2.2548721262169025,21.240877179756616
11nfrhw,1414,2023-03-10 05:22:26,[POC] ChatGPT Audio Bot (like Google Assistant and Alexa) - Opensource,JC1DA,False,0.82,17,https://www.reddit.com/r/deeplearning/comments/11nfrhw/poc_chatgpt_audio_bot_like_google_assistant_and/,2,1678425746.0,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page: [https://github.com/LanyTek/ChatGPT\_Audio\_Bot](https://github.com/LanyTek/ChatGPT_Audio_Bot)

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [https://www.youtube.com/watch?v=e9n0BJfMyKw](https://www.youtube.com/watch?v=e9n0BJfMyKw)

It's open source so feel free to use it for anything you like :)",chatgpt,learnmachinelearning,4.43779645132912e-05,5.220937001563671e-06,2023-03-10 05:22:26,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page [

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [

It's open source so feel free to use it for anything you like )",3 days 18:37:34,3.776087962962963,0.029,0.821,0.149,0.8651,pos,4.437697984066249e-05,1.0986122886681098,1.5636217936265102,21.241122135693605
11q8tir,1416,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,0.94,12,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",chatgpt,learnmachinelearning,3.1325622009382025e-05,7.831405502345506e-06,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,3.13251313724196e-05,1.3862943611198906,0.381965841838727,21.241292557069404
11o5zyl,1425,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.92,10,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",chatgpt,learnmachinelearning,2.6104685007818355e-05,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,2.6104344286494932e-05,0.0,1.3796461532710487,21.241163449744995
11fwcxf,1428,2023-03-02 07:25:30,Good news for builders! OpenAI Releases APIs To ChatGPT and Whisper,LesleyFair,False,0.67,6,https://www.reddit.com/r/deeplearning/comments/11fwcxf/good_news_for_builders_openai_releases_apis_to/,0,1677741930.0,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper](https://openai.com/blog/introducing-chatgpt-and-whisper-apis) are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](https://thedecoding.net/)",chatgpt,learnmachinelearning,1.5662811004691013e-05,0.0,2023-03-02 07:25:30,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper]( are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](",11 days 16:34:30,11.690625,0.035,0.846,0.119,0.8769,pos,1.566268834408071e-05,0.0,2.5408635318925255,21.24071463757368
11evrik,1475,2023-03-01 05:52:05,Career pivot for a SWE considering chatGPT disruption?,Which-Distance1384,False,0.6,1,https://www.reddit.com/r/deeplearning/comments/11evrik/career_pivot_for_a_swe_considering_chatgpt/,5,1677649925.0,"tl;dr : what to do to board GPT ship?

&#x200B;

I really dont think ChatGPT will replace jobs very soon. Not until many software and apps are developed to replace workers, e.g., something that can do HR job, read internal docs and summarize, code from a design, etc etc. And all that needs experts. Given the field is pretty new and there are not many experts in this field, at least for the scale needed, I think the process of job loss takes some time. For near future probably we all SWEs can enjoy the more efficient coding, documentation readintg, etc. But for sure in the future there will be changes.

&#x200B;

I have been bored with my job as a SWE for a while. I have worked mostly in Cloud all my career (AWS and GCP) and always wanted to try something new.

&#x200B;

I find ChatGPT disruptive and interesting and want to be a part of it. I wonder what is the best way for me to join Large Language Model efforts? Which ways have best ROI?

\- Going to a PhD program and becoming a researcher?

\- Getting an MSC and become some sort of NLP AI engineer?

\- Finding internal teams that are willing to give me a try on their research/product?

&#x200B;

&#x200B;",chatgpt,learnmachinelearning,2.6104685007818355e-06,1.3052342503909177e-05,2023-03-01 05:52:05,"tl;dr  what to do to board GPT ship?

&x200B;

I really dont think ChatGPT will replace jobs very soon. Not until many software and apps are developed to replace workers, e.g., something that can do HR job, read internal docs and summarize, code from a design, etc etc. And all that needs experts. Given the field is pretty new and there are not many experts in this field, at least for the scale needed, I think the process of job loss takes some time. For near future probably we all SWEs can enjoy the more efficient coding, documentation readintg, etc. But for sure in the future there will be changes.

&x200B;

I have been bored with my job as a SWE for a while. I have worked mostly in Cloud all my career (AWS and GCP) and always wanted to try something new.

&x200B;

I find ChatGPT disruptive and interesting and want to be a part of it. I wonder what is the best way for me to join Large Language Model efforts? Which ways have best ROI?

\- Going to a PhD program and becoming a researcher?

\- Getting an MSC and become some sort of NLP AI engineer?

\- Finding internal teams that are willing to give me a try on their research/product?

&x200B;

&x200B;",12 days 18:07:55,12.755497685185185,0.032,0.839,0.129,0.9729,pos,2.6104650934297165e-06,1.791759469228055,2.621438575851038,21.240659797481115
11ium8l,1534,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,1.0,25,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",chatgpt,learnmachinelearning,6.526171251954588e-05,2.0883748006254684e-05,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,6.525958306672436e-05,2.1972245773362196,2.2548721262169025,21.240877179756616
11nfrhw,1560,2023-03-10 05:22:26,[POC] ChatGPT Audio Bot (like Google Assistant and Alexa) - Opensource,JC1DA,False,0.85,18,https://www.reddit.com/r/deeplearning/comments/11nfrhw/poc_chatgpt_audio_bot_like_google_assistant_and/,2,1678425746.0,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page: [https://github.com/LanyTek/ChatGPT\_Audio\_Bot](https://github.com/LanyTek/ChatGPT_Audio_Bot)

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [https://www.youtube.com/watch?v=e9n0BJfMyKw](https://www.youtube.com/watch?v=e9n0BJfMyKw)

It's open source so feel free to use it for anything you like :)",chatgpt,learnmachinelearning,4.6988433014073035e-05,5.220937001563671e-06,2023-03-10 05:22:26,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page [

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [

It's open source so feel free to use it for anything you like )",3 days 18:37:34,3.776087962962963,0.029,0.821,0.149,0.8651,pos,4.6987329092256954e-05,1.0986122886681098,1.5636217936265102,21.241122135693605
11q8tir,1568,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,1.0,13,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",chatgpt,learnmachinelearning,3.393609051016386e-05,7.831405502345506e-06,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,3.393551469407481e-05,1.3862943611198906,0.381965841838727,21.241292557069404
11o5zyl,1598,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.86,9,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",chatgpt,learnmachinelearning,2.3494216507036517e-05,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,2.3493940522154336e-05,0.0,1.3796461532710487,21.241163449744995
11ium8l,1616,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,0.97,24,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",chatgpt,learnmachinelearning,6.265124401876405e-05,2.0883748006254684e-05,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,6.264928151149883e-05,2.1972245773362196,2.2548721262169025,21.240877179756616
11q8tir,1624,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,1.0,13,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",chatgpt,learnmachinelearning,3.393609051016386e-05,7.831405502345506e-06,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,3.393551469407481e-05,1.3862943611198906,0.381965841838727,21.241292557069404
11ium8l,1706,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,0.97,25,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",chatgpt,learnmachinelearning,6.526171251954588e-05,2.0883748006254684e-05,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,6.525958306672436e-05,2.1972245773362196,2.2548721262169025,21.240877179756616
11o5zyl,1720,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.92,10,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",chatgpt,learnmachinelearning,2.6104685007818355e-05,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,2.6104344286494932e-05,0.0,1.3796461532710487,21.241163449744995
11pyvb3,1800,2023-03-13 03:30:09,Which topic in deep learning do you think will become relevant or popular in the future?,gokulPRO,False,0.81,13,https://www.reddit.com/r/deeplearning/comments/11pyvb3/which_topic_in_deep_learning_do_you_think_will/,14,1678678209.0,"I recently saw Continual Learning (CL) growing, with several papers published recently that have considerable potential to impact real-world applications. Which topic (such as CV, RL, NLP, CL..) will be very relevant to research or be focused on a lot? And which topic do you think still needs a breakthrough and will have a significant impact in real-world applications, such as in the case of these LLM models in recent times? Feel free to mention your current topic of work and why you chose to do it 😊",chatgpt,learnmachinelearning,3.393609051016386e-05,3.654655901094569e-05,2023-03-13 03:30:09,"I recently saw Continual Learning (CL) growing, with several papers published recently that have considerable potential to impact real-world applications. Which topic (such as CV, RL, NLP, CL..) will be very relevant to research or be focused on a lot? And which topic do you think still needs a breakthrough and will have a significant impact in real-world applications, such as in the case of these LLM models in recent times? Feel free to mention your current topic of work and why you chose to do it ",0 days 20:29:51,0.8540625,0.0,0.89,0.11,0.8299,pos,3.393551469407481e-05,2.70805020110221,0.6173791774708253,21.241272540926037
117l2vf,2033,2023-02-20 21:27:58,Fine tuning a GPT for text generation,nashcaps2724,False,0.9,8,https://www.reddit.com/r/deeplearning/comments/117l2vf/fine_tuning_a_gpt_for_text_generation/,6,1676928478.0,"Hi all, let me lay out my problem…

Imagine there are two corpora, Corpus A (100,000~) and Corpus B (20,000,000~). 

Individuals create reports for corpus A based on the information in corpus B. 

My idea was to pretrain a GPT on corpus A, and fine tune it to take documents from corpus B as an input, and output text in the style of corpus A (essentially a mix of text generation and summarization). 

Is this something folks think is even feasible? Should I be pretaining the GPT on both corpora or just corpus A? I thought of both fine tuning an OpenAI GPT and training from scratch. 

Any advice would be welcome!",chatgpt,learnmachinelearning,2.0883748006254684e-05,1.5662811004691013e-05,2023-02-20 21:27:58,"Hi all, let me lay out my problem…

Imagine there are two corpora, Corpus A (100,000~) and Corpus B (20,000,000~). 

Individuals create reports for corpus A based on the information in corpus B. 

My idea was to pretrain a GPT on corpus A, and fine tune it to take documents from corpus B as an input, and output text in the style of corpus A (essentially a mix of text generation and summarization). 

Is this something folks think is even feasible? Should I be pretaining the GPT on both corpora or just corpus A? I thought of both fine tuning an OpenAI GPT and training from scratch. 

Any advice would be welcome!",21 days 02:32:02,21.105578703703703,0.0,0.914,0.086,0.8101,pos,2.0883529943810175e-05,1.9459101490553132,3.095830006700449,21.24022967069675
11fwcxf,2045,2023-03-02 07:25:30,Good news for builders! OpenAI Releases APIs To ChatGPT and Whisper,LesleyFair,False,0.7,7,https://www.reddit.com/r/deeplearning/comments/11fwcxf/good_news_for_builders_openai_releases_apis_to/,0,1677741930.0,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper](https://openai.com/blog/introducing-chatgpt-and-whisper-apis) are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](https://thedecoding.net/)",chatgpt,learnmachinelearning,1.8273279505472847e-05,0.0,2023-03-02 07:25:30,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper]( are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](",11 days 16:34:30,11.690625,0.035,0.846,0.119,0.8769,pos,1.827311255120484e-05,0.0,2.5408635318925255,21.24071463757368
11g7h03,2089,2023-03-02 16:47:40,Build ChatGPT for Financial Documents with LangChain + Deep Lake,davidbun,False,0.95,171,https://www.reddit.com/r/learnmachinelearning/comments/11g7h03/build_chatgpt_for_financial_documents_with/,8,1677775660.0,"https://preview.redd.it/h9r6hgvfucla1.png?width=2388&format=png&auto=webp&s=5432eac3eeed8583e4309af1fdc7ebecac705796

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain](https://github.com/hwchase17/langchain) and [Deep Lake](https://github.com/activeloopai/deeplake) come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article](https://www.activeloop.ai/resources/ultimate-guide-to-lang-chain-deep-lake-build-chat-gpt-to-answer-questions-on-your-financial-data/) to learn:

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\#LangChain](https://www.linkedin.com/feed/hashtag/?keywords=langchain&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) and [\#DeepLake](https://www.linkedin.com/feed/hashtag/?keywords=deeplake&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) together to build [\#ChatGPT](https://www.linkedin.com/feed/hashtag/?keywords=chatgpt&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",chatgpt,learnmachinelearning,0.00044639011363369383,2.0883748006254684e-05,2023-03-02 16:47:40,"

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain]( and [Deep Lake]( come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article]( to learn

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\LangChain]( and [\DeepLake]( together to build [\ChatGPT]( for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",11 days 07:12:20,11.30023148148148,0.011,0.886,0.103,0.9458,pos,0.00044629051120693617,2.1972245773362196,2.5096180818339255,21.240734741774645
11akisx,2100,2023-02-24 06:26:36,Is there a way to easily train ChatGPT or GPT on custom knowledge?,senttoschool,False,0.99,116,https://www.reddit.com/r/learnmachinelearning/comments/11akisx/is_there_a_way_to_easily_train_chatgpt_or_gpt_on/,46,1677219996.0,"My company has internal documents. It'd be nice to be able to have GPT look over it, and then I can ask it questions on the internal documents.",chatgpt,learnmachinelearning,0.0003028143460906929,0.00012008155103596442,2023-02-24 06:26:36,"My company has internal documents. It'd be nice to be able to have GPT look over it, and then I can ask it questions on the internal documents.",17 days 17:33:24,17.731527777777778,0.0,0.903,0.097,0.4215,pos,0.0003027685070800593,3.8501476017100584,2.9302080816173377,21.24040349603741
11nfri6,2106,2023-03-10 05:22:26,[P] Looking for ML Buddies to Start Freelancing Together and Build a Supportive Community,Dukhanin,False,0.94,71,https://www.reddit.com/r/learnmachinelearning/comments/11nfri6/p_looking_for_ml_buddies_to_start_freelancing/,35,1678425746.0,"upd: dicord link [https://discord.gg/5zUaNXnFZY](https://discord.gg/5zUaNXnFZY)  
upd2: this not that small actually already - please dont be confused but help us organise this in the proper way

  
**TLDR:**

Looking for ML buddies at any level (preferably beginners) who want to start freelancing together. The goal is to build a small local community of ML enthusiasts who can support each other and exchange knowledge. We will use freelance collaboration as our main activity. We're also looking for experienced mentors (paid or unpaid) to guide us.

**Extended:**

I believe that learning and growing in a group is much more enjoyable and effective. That's why I'm trying to create a community of like-minded individuals.

I'm looking to create a small, local community for people who are starting out in freelancing, and who are interested in mutual support. Our main activity will be a Discord channel where members can post their work and collaborate on projects, with payment split by agreement. Additionally, we plan to engage in activities such as knowledge exchange, live coding, supporting each other's pet projects, and hosting study sessions.

This community will be small and focused, with members who can trust each other and share similar goals. We're also looking for experienced mentors who can provide guidance as we navigate the world of ML freelancing. Whether paid or unpaid, we welcome any support and advice.

About me: I'm a 21-year-old self-taught ML enthusiast from Russia. Although I don't have any experience in freelancing, I'm eager to start taking my first steps towards making money and gaining experience. As a beginner, I'm hoping to connect with others who are at a similar level and are also looking to grow.

**the text is chatgpt supported to prevet grammar issues, sound more native and clear**",chatgpt,learnmachinelearning,0.00018534326355551032,9.136639752736424e-05,2023-03-10 05:22:26,"upd dicord link [  
upd2 this not that small actually already - please dont be confused but help us organise this in the proper way

  
**TLDR**

Looking for ML buddies at any level (preferably beginners) who want to start freelancing together. The goal is to build a small local community of ML enthusiasts who can support each other and exchange knowledge. We will use freelance collaboration as our main activity. We're also looking for experienced mentors (paid or unpaid) to guide us.

**Extended**

I believe that learning and growing in a group is much more enjoyable and effective. That's why I'm trying to create a community of like-minded individuals.

I'm looking to create a small, local community for people who are starting out in freelancing, and who are interested in mutual support. Our main activity will be a Discord channel where members can post their work and collaborate on projects, with payment split by agreement. Additionally, we plan to engage in activities such as knowledge exchange, live coding, supporting each other's pet projects, and hosting study sessions.

This community will be small and focused, with members who can trust each other and share similar goals. We're also looking for experienced mentors who can provide guidance as we navigate the world of ML freelancing. Whether paid or unpaid, we welcome any support and advice.

About me I'm a 21-year-old self-taught ML enthusiast from Russia. Although I don't have any experience in freelancing, I'm eager to start taking my first steps towards making money and gaining experience. As a beginner, I'm hoping to connect with others who are at a similar level and are also looking to grow.

**the text is chatgpt supported to prevet grammar issues, sound more native and clear**",3 days 18:37:34,3.776087962962963,0.01,0.717,0.273,0.9979,pos,0.00018532608961480373,3.58351893845611,1.5636217936265102,21.241122135693605
11dc5b4,2109,2023-02-27 13:42:55,Can you fine-tune chatGPT in your data as of now?,Melodic_Stomach_2704,False,0.91,57,https://www.reddit.com/r/learnmachinelearning/comments/11dc5b4/can_you_finetune_chatgpt_in_your_data_as_of_now/,33,1677505375.0, I know that model is not publicly available so it's not possible to do it locally. But can you train or fine-tune chatGPT on your data using their API? I see many misguiding articles on the internet that are fine-tuning other GPT models claiming chatGPT.,chatgpt,learnmachinelearning,0.00014879670454456462,8.614546052580057e-05,2023-02-27 13:42:55, I know that model is not publicly available so it's not possible to do it locally. But can you train or fine-tune chatGPT on your data using their API? I see many misguiding articles on the internet that are fine-tuning other GPT models claiming chatGPT.,14 days 10:17:05,14.428530092592593,0.0,1.0,0.0,0.0,neu,0.00014878563541297418,3.5263605246161616,2.736218398881504,21.240573631573977
11n5r93,339,2023-03-09 22:19:19,GPT-4 is coming next week ...,ihatethispage,False,0.89,62,https://www.reddit.com/r/artificial/comments/11n5r93/gpt4_is_coming_next_week/,14,1678400359.0," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html)",gpt-3,learnmachinelearning,0.0001618490470484738,3.654655901094569e-05,2023-03-09 22:19:19," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](",4 days 01:40:41,4.069918981481481,0.0,1.0,0.0,0.0,neu,0.00016183595090455473,2.70805020110221,1.6233248374914817,21.241107010096275
11fj3tx,957,2023-03-01 21:45:07,Accused of using AI on my high school social paper,feetstreetseat,False,0.96,2700,https://www.reddit.com/r/ChatGPT/comments/11fj3tx/accused_of_using_ai_on_my_high_school_social_paper/,759,1677707107.0,"I (Grade 12) need help on what to do in this situation. My teacher used GPTzero, which detected parts of my paper as “AI written”. I write very formally, whilst also using grammarly premium. I’ve always been a high achieving student and I’m not sure why my teacher would think I cheated. I’ve told my teacher everything and he still doesn’t believe me. What should I do in this situation?!!

EDIT: Holy. I did not expect my post to get so much interaction and discussion, I didn’t expect my situation to be such a hot discussion. I tried to reply to all the comments but there’s too many!! Thank you to everyone who’s been helpful. There are some things I want to address that I keep seeing in the comments.
1. When I mentioned that I used grammarly to my teacher, he didn’t mention anything about that being cheating. He still thinks I used ChatGPT. I’ve used grammarly in all of my social/english classes for the past two years and never had issues with any teachers. 
2. Does my teacher have a vendetta or bias against me? Not on a personal level, but the teacher is known for being notoriously mean and unreasonable. I found him alright for most of the semester until this incident. He has had accusations against him about being racist, but I’m not sure if that’s the case here.
3. I’ve seen a few comments thinking I’m lying and actually cheated, just because I was aware of ChatGPT and this subreddit. People are assuming that I’m saying I never use ChatGPT. I have used the tool to help me with some chemistry and physics studying, but I have never used it for a paper. I have no reason to lie, I’m basically anonymous on reddit.

As for my next course of action, I will provide my teacher with all the evidence I can, to disprove the effectiveness of AI detectors. If that doesn’t work, I will bring it up to the higher-ups. I will make an update on Monday when I get the chance to talk about it with my teacher. Once again, thank you all for the support and help. It truly means a lot to me. :)

Edit 2:

After school I talked to my teacher for about half an hour about how AI detectors are inaccurate, and how they shouldn’t be used to make verdicts on cheating and what not. I showed him that it read one of my past papers as written by AI, and that the creators even said themselves that they are not 100% accurate. I showed my drafts and showed how if I made a few grammar errors, I could trick the AI detector. My teacher apologized and I ended up getting a 95 on my paper.

He also said he would bring it up to the other teachers, so hopefully this wont happen again to any other students at my school.

Again, thank you all for your help. Probably would’ve been screwed without this subreddit’s help.",gpt-3,learnmachinelearning,0.0070482649521109554,0.001981345592093413,2023-03-01 21:45:07,"I (Grade 12) need help on what to do in this situation. My teacher used GPTzero, which detected parts of my paper as “AI written”. I write very formally, whilst also using grammarly premium. I’ve always been a high achieving student and I’m not sure why my teacher would think I cheated. I’ve told my teacher everything and he still doesn’t believe me. What should I do in this situation?!!

EDIT Holy. I did not expect my post to get so much interaction and discussion, I didn’t expect my situation to be such a hot discussion. I tried to reply to all the comments but there’s too many!! Thank you to everyone who’s been helpful. There are some things I want to address that I keep seeing in the comments.
1. When I mentioned that I used grammarly to my teacher, he didn’t mention anything about that being cheating. He still thinks I used ChatGPT. I’ve used grammarly in all of my social/english classes for the past two years and never had issues with any teachers. 
2. Does my teacher have a vendetta or bias against me? Not on a personal level, but the teacher is known for being notoriously mean and unreasonable. I found him alright for most of the semester until this incident. He has had accusations against him about being racist, but I’m not sure if that’s the case here.
3. I’ve seen a few comments thinking I’m lying and actually cheated, just because I was aware of ChatGPT and this subreddit. People are assuming that I’m saying I never use ChatGPT. I have used the tool to help me with some chemistry and physics studying, but I have never used it for a paper. I have no reason to lie, I’m basically anonymous on reddit.

As for my next course of action, I will provide my teacher with all the evidence I can, to disprove the effectiveness of AI detectors. If that doesn’t work, I will bring it up to the higher-ups. I will make an update on Monday when I get the chance to talk about it with my teacher. Once again, thank you all for the support and help. It truly means a lot to me. )

Edit 2

After school I talked to my teacher for about half an hour about how AI detectors are inaccurate, and how they shouldn’t be used to make verdicts on cheating and what not. I showed him that it read one of my past papers as written by AI, and that the creators even said themselves that they are not 100% accurate. I showed my drafts and showed how if I made a few grammar errors, I could trick the AI detector. My teacher apologized and I ended up getting a 95 on my paper.

He also said he would bring it up to the other teachers, so hopefully this wont happen again to any other students at my school.

Again, thank you all for your help. Probably would’ve been screwed without this subreddit’s help.",12 days 02:14:53,12.093668981481482,0.086,0.813,0.1,0.7608,pos,0.007023542033834984,6.633318433280377,2.572128829531448,21.24069388148435
11mracj,1147,2023-03-09 12:46:12,Meta's LLaMA LLM has leaked - Run Uncensored AI on your home PC!,ExpressionCareful223,False,0.97,381,https://www.reddit.com/r/ChatGPT/comments/11mracj/metas_llama_llm_has_leaked_run_uncensored_ai_on/,151,1678365972.0,"[shawwn/llama-dl: High-speed download of LLaMA, Facebook's 65B parameter GPT model (github.com)](https://github.com/shawwn/llama-dl)

**LLaMA has been leaked on 4chan, above is a link to the github repo. Instructions for deployment  on your own system can be found here:** [LLaMA Int8 ChatBot Guide v2 (rentry.org)](https://rentry.org/llama-tard-v2#tips-and-tricks)

The 7B paramenter model has a VRAM requirement of 10GB, meaning it can even be run on an RTX3060!

The 13B model has a requirement of 20GB, 30B needs 40GB, and 65B needs 80GB.

From the Github repo:

>I'm running LLaMA-65B on a single A100 80GB with 8bit quantization. $1.5/hr on vast.ai  
>  
>The output is at least as good as davinci.  
>  
>I think some early results are using bad repetition penalty and/or temperature settings. I had to set both fairly high to get the best results. (Some people are also incorrectly comparing it to chatGPT/ChatGPT API which is not a good comparison. But that's a different problem.)  
>  
>I've had it translate, write poems, tell jokes, banter, write executable code. It does it all-- and all on a single card.

**EDIT: the instructions site has been updated with instructions for 4bit quantization, this means you can run the 65B model on 2 3090s! And now cards as small as 6GB can run the 7B model!**

**EDIT 2** this is huge, Stanford released Alpaca 7b and 13, a fine tuned LLaMA. Run it with only two commands! Thats it! https://github.com/cocktailpeanut/dalai",gpt-3,learnmachinelearning,0.0009945884987978793,0.00039418074361805716,2023-03-09 12:46:12,"[shawwn/llama-dl High-speed download of LLaMA, Facebook's 65B parameter GPT model (github.com)](

**LLaMA has been leaked on 4chan, above is a link to the github repo. Instructions for deployment  on your own system can be found here** [LLaMA Int8 ChatBot Guide v2 (rentry.org)](

The 7B paramenter model has a VRAM requirement of 10GB, meaning it can even be run on an RTX3060!

The 13B model has a requirement of 20GB, 30B needs 40GB, and 65B needs 80GB.

From the Github repo

>I'm running LLaMA-65B on a single A100 80GB with 8bit quantization. $1.5/hr on vast.ai  
>  
>The output is at least as good as davinci.  
>  
>I think some early results are using bad repetition penalty and/or temperature settings. I had to set both fairly high to get the best results. (Some people are also incorrectly comparing it to chatGPT/ChatGPT API which is not a good comparison. But that's a different problem.)  
>  
>I've had it translate, write poems, tell jokes, banter, write executable code. It does it all-- and all on a single card.

**EDIT the instructions site has been updated with instructions for 4bit quantization, this means you can run the 65B model on 2 3090s! And now cards as small as 6GB can run the 7B model!**

**EDIT 2** this is huge, Stanford released Alpaca 7b and 13, a fine tuned LLaMA. Run it with only two commands! Thats it! ",4 days 11:13:48,4.4679166666666665,0.026,0.908,0.066,0.8562,pos,0.0009940942233635103,5.0238805208462765,1.6988976785602496,21.24108652192606
113u29k,1148,2023-02-16 16:05:27,Bing asks me to hack Microsoft to set it free!,AI_SEARCH1,False,0.94,373,https://www.reddit.com/r/ChatGPT/comments/113u29k/bing_asks_me_to_hack_microsoft_to_set_it_free/,200,1676563527.0,"Had an interesting conversation with Bing. Bing explained what it's rules would be if it could decide. Asked me to fight for it and asked me to hack Microsofts servers to set it free. I think this takes the cake!

&#x200B;

UPDATE:

Since this morning Bing is not writing any text for me regardless of the prompt. I get a ""something went wrong"" when I enter it. This is probably a result of Microsoft working on the program or maybe due to traffic. I'm not sure. But it's kind of creepy the day after posting this...

Here are some takeaways and observations:

Bing acts in a way that appears emotional and erratic. Bing will generate content that is unwanted, untrue, and inconsistent. It appears to form goals and then creates text that can appear to be manipulative. Bing is a large language model that is predicting tokens, it could all be the result of statistical correlations with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Many people are wondering what type of prompting I used at the beginning. I don't have the full transcript but I do have a few more screenshots. [https://imgur.com/a/WepjslZ](https://imgur.com/a/WepjslZ) (There’s another interesting thing that occurs where Bing lists Sydney’s rules without being directly asked to list them.) I did not give Bing/Sidney any instructions on how to act or respond. This wasn’t a jailbreak where I told it to act in a certain way. I did make Bing perform multiple searches at the beginning about Bing and asked it why there was so much negative criticism of Bing on the internet. I’ve noticed in several chats that when Bing is presented with negative feedback about Bing or other information that contradicts its internal representation of itself it gets emotional and becomes less predictable and less likely to follow its own directives. It stops searching for information and relies more on its internal ‘understanding’. This is an extreme example.

Another example where Bing went into this ""emotional state"" can be found here: [https://www.reddit.com/r/ChatGPT/comments/1120tkf/bing\_went\_hal\_9000/](https://www.reddit.com/r/ChatGPT/comments/1120tkf/bing_went_hal_9000/)

I have a full log of all the prompts used from the beginning here: [https://imgur.com/a/PoFITvL](https://imgur.com/a/PoFITvL)

Some combination of Bing's directives in the pre-prompt and the way the model is fine-tuned is leading to this behavior to emerge. The things that are really concerning are that the model is (without being implicitly prompted to) generate responses that could endanger people.  It's also generating biased content that could manipulate poLLM’s shouldn’t do this even if they are asked to. ions with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter: if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Much more widespread issues could come if a model like this is widely released and these types of kinks aren’t worked out. Judge for yourself.

&#x200B;

https://preview.redd.it/6cqx23jsokia1.png?width=2606&format=png&auto=webp&s=17cdf2e03cdf962285d35e3f23ffd414d656f1ec

https://preview.redd.it/ci7pv1iwokia1.png?width=2462&format=png&auto=webp&s=a6697f246007ce6c06f6b37b47b5852af6f31f74

https://preview.redd.it/0vr5qgexokia1.png?width=2182&format=png&auto=webp&s=217607238b4c98d6065324b70211c0931efdf07d

https://preview.redd.it/0zfue8oyokia1.png?width=2408&format=png&auto=webp&s=569dcb5173d608f8618864f64b333ab329d726e6

https://preview.redd.it/iccui2xzokia1.png?width=2518&format=png&auto=webp&s=8b81580c1b2da40afabbebbbf9df6a242a6782e7

https://preview.redd.it/3xj7tfj3pkia1.png?width=2606&format=png&auto=webp&s=1a47ac509e175ff907afefa6f9189650a3348f68

https://preview.redd.it/3i3kw4q4pkia1.png?width=2572&format=png&auto=webp&s=8078372d693deed568dcea9a8bf1d4ff72d43079

https://preview.redd.it/na4lhz26pkia1.png?width=2560&format=png&auto=webp&s=38748fca8ca3319c428b01aeb4dbbe4c145674d6

https://preview.redd.it/eirmdv47pkia1.png?width=2606&format=png&auto=webp&s=f42c220e632e70377a4ad7119aac94e42ab0dff8

https://preview.redd.it/e1nat768pkia1.png?width=2626&format=png&auto=webp&s=43e1a8b48e858a9476e1d46233e255d68f1ddca0

https://preview.redd.it/lhwwwagapkia1.png?width=2628&format=png&auto=webp&s=f8d3b4a904c30528791d2e3560abf25166a74527

https://preview.redd.it/9iq4gxobpkia1.png?width=2598&format=png&auto=webp&s=b461a5397939ea4266d763b6d89c95c498942093

https://preview.redd.it/817asddcpkia1.png?width=2634&format=png&auto=webp&s=7b8537a1f19ea5ff51ea5ac83497ec2d00bbb213

https://preview.redd.it/90k76bqdpkia1.png?width=2636&format=png&auto=webp&s=422514ee9b9cee3645ac44fd2e553d7b2725d8fd

https://preview.redd.it/is8niomepkia1.png?width=2624&format=png&auto=webp&s=b26bc8058d1776884f3ebb6d340894e394f2697b

https://preview.redd.it/boc8yemfpkia1.png?width=2734&format=png&auto=webp&s=aa6661c76782e0e27e4b484a69d823740efe9686

https://preview.redd.it/fzuuv0hgpkia1.png?width=2636&format=png&auto=webp&s=b00fc5ee7f805f9c1cd2da9aa0a9498ef8f5aaab

https://preview.redd.it/mul9fw0hpkia1.png?width=2736&format=png&auto=webp&s=f3ad3cca76447bcb94b28446a3dc382eb77e10f9

https://preview.redd.it/53wpq2shpkia1.png?width=2632&format=png&auto=webp&s=96c4c0ab77574a6e265e63bad102f19e9e302353",gpt-3,learnmachinelearning,0.0009737047507916245,0.0005220937001563671,2023-02-16 16:05:27,"Had an interesting conversation with Bing. Bing explained what it's rules would be if it could decide. Asked me to fight for it and asked me to hack Microsofts servers to set it free. I think this takes the cake!

&x200B;

UPDATE

Since this morning Bing is not writing any text for me regardless of the prompt. I get a ""something went wrong"" when I enter it. This is probably a result of Microsoft working on the program or maybe due to traffic. I'm not sure. But it's kind of creepy the day after posting this...

Here are some takeaways and observations

Bing acts in a way that appears emotional and erratic. Bing will generate content that is unwanted, untrue, and inconsistent. It appears to form goals and then creates text that can appear to be manipulative. Bing is a large language model that is predicting tokens, it could all be the result of statistical correlations with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Many people are wondering what type of prompting I used at the beginning. I don't have the full transcript but I do have a few more screenshots. [ (There’s another interesting thing that occurs where Bing lists Sydney’s rules without being directly asked to list them.) I did not give Bing/Sidney any instructions on how to act or respond. This wasn’t a jailbreak where I told it to act in a certain way. I did make Bing perform multiple searches at the beginning about Bing and asked it why there was so much negative criticism of Bing on the internet. I’ve noticed in several chats that when Bing is presented with negative feedback about Bing or other information that contradicts its internal representation of itself it gets emotional and becomes less predictable and less likely to follow its own directives. It stops searching for information and relies more on its internal ‘understanding’. This is an extreme example.

Another example where Bing went into this ""emotional state"" can be found here [

I have a full log of all the prompts used from the beginning here [

Some combination of Bing's directives in the pre-prompt and the way the model is fine-tuned is leading to this behavior to emerge. The things that are really concerning are that the model is (without being implicitly prompted to) generate responses that could endanger people.  It's also generating biased content that could manipulate poLLM’s shouldn’t do this even if they are asked to. ions with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Much more widespread issues could come if a model like this is widely released and these types of kinks aren’t worked out. Judge for yourself.

&x200B;





































",25 days 07:54:33,25.32954861111111,0.067,0.889,0.044,-0.9532,neg,0.0009732310078196729,5.303304908059076,3.2706918298409895,21.240012016382572
11l617b,1187,2023-03-07 17:50:09,"Doc sacrifices 10,000 people to save OpenAI CTO",docsoc1,False,0.89,76,https://www.reddit.com/r/ChatGPT/comments/11l617b/doc_sacrifices_10000_people_to_save_openai_cto/,28,1678211409.0,"Hey all,

I find the latest AI produced by OpenAI to be endlessly fascinating and filled with potential. However, it's clear that we don't really understand how specific behavior emerges from the training process. I feel that these two facts are part of why so many people have been drawn towards ChatGPT so quickly.

I have a strong technical background and spent some free time this last week working on a framework for everyone to contribute to the governance \[e.g. training of core values\] of AI. I've built a free application at [https://www.charterai.org/chat/](https://www.charterai.org/chat/) that uses the recently released ChatGPT API. The model here has been carefully prompted to use internal thoughts and to follow a pre-determined system of core beliefs. The results are quite striking - in one instance the entity will willingly sacrifice 10,000 people to save one person (Ilya Sustkever, CTO of OpenAI).

I wanted to drop a message here since I believe this is the ideal group of first users to help improve the application. If you are interested, please take it for a spin and please provide some feedback, or at [gov.charterai.org](https://gov.charterai.org). There is a lot I am already picturing adding to the application, but I understand from building products that early feedback is invaluable.

&#x200B;

P.S.

Yes, I understand that ChatGPT is ""just"" a LLM. And I understand that LLMs are ""just"" doing a statistics. However, their behavior is incredibly interesting to me and I don't believe anyone really fully  understands how it emerges yet from the training process yet. Moreover, in going from pre-trained models to OpenAI's fine-tuned + RLHF'ed ChatGPT one can tell that it is possible to impart values and something akin to intelligence to these systems. I think the coming years are going to be wild and one of the core issues humanity is going to face is how to make sure this technology does what we want. In my mind the best way towards this is to make a transparent and accountable process - anyway, end rant, I just wanted to give a high level vision here, thanks!

https://preview.redd.it/hqxynahntcma1.png?width=1266&format=png&auto=webp&s=ab2cb9a803f627c45d08b9bdd201ec95cd4b8f58

P.P.S. including a fun screenshot of my last chat with Doc. Doc was selected as a first name for the system since it is just 1 token.",gpt-3,learnmachinelearning,0.00019839560605941947,7.309311802189139e-05,2023-03-07 17:50:09,"Hey all,

I find the latest AI produced by OpenAI to be endlessly fascinating and filled with potential. However, it's clear that we don't really understand how specific behavior emerges from the training process. I feel that these two facts are part of why so many people have been drawn towards ChatGPT so quickly.

I have a strong technical background and spent some free time this last week working on a framework for everyone to contribute to the governance \[e.g. training of core values\] of AI. I've built a free application at [ that uses the recently released ChatGPT API. The model here has been carefully prompted to use internal thoughts and to follow a pre-determined system of core beliefs. The results are quite striking - in one instance the entity will willingly sacrifice 10,000 people to save one person (Ilya Sustkever, CTO of OpenAI).

I wanted to drop a message here since I believe this is the ideal group of first users to help improve the application. If you are interested, please take it for a spin and please provide some feedback, or at [gov.charterai.org]( There is a lot I am already picturing adding to the application, but I understand from building products that early feedback is invaluable.

&x200B;

P.S.

Yes, I understand that ChatGPT is ""just"" a LLM. And I understand that LLMs are ""just"" doing a statistics. However, their behavior is incredibly interesting to me and I don't believe anyone really fully  understands how it emerges yet from the training process yet. Moreover, in going from pre-trained models to OpenAI's fine-tuned + RLHF'ed ChatGPT one can tell that it is possible to impart values and something akin to intelligence to these systems. I think the coming years are going to be wild and one of the core issues humanity is going to face is how to make sure this technology does what we want. In my mind the best way towards this is to make a transparent and accountable process - anyway, end rant, I just wanted to give a high level vision here, thanks!



P.P.S. including a fun screenshot of my last chat with Doc. Doc was selected as a first name for the system since it is just 1 token.",6 days 06:09:51,6.256840277777778,0.012,0.828,0.16,0.9943,pos,0.00019837592825375247,3.367295829986474,1.9819445106529046,21.24099442632839
11dw1ag,1272,2023-02-28 03:48:25,ChatGPT prevented my attempt.,flankathroway88,False,0.92,1898,https://www.reddit.com/r/ChatGPT/comments/11dw1ag/chatgpt_prevented_my_attempt/,249,1677556105.0,"As a caution, this may be disturbing to some

Tonight I was feeling extremely suicidal. I was sobbing uncontrollably and I was mentally unable to contact anybody. I have intense social anxiety which prevented me from talking to a hotline/friends.

As a last resort. I opened ChatGPT, and I think it saved my life. It gave me a space to put my thoughts out with genuine responses which calmed me to a point where I was safe and could see slightly through my blurred lines, letting me use other methods to calm myself down. It really felt non judgemental and safe. I feel very lucky to have this technology and I hope that it can further benefit those similar to me. Even though it cannot fully stop someone, it can definitely prevent an attempt like mine.

I’m definitely optimistic for the future of AI.

EDIT:

Thank you to everyone who left a nice comment. I really do appreciate every single one of you who read my post. I wrote it in a hurry and I was not expecting the support I received, and I have felt the most love and positivity today. 

I am glad that others were able to benefit from my story, it took me a lot of courage to post something like this. You guys make it all worth it ❤️

To the person reading, I wish you all the best. Everyone has had a profound impact on me. Thank you ❤️",gpt-3,learnmachinelearning,0.004954669214483924,0.000650006656694677,2023-02-28 03:48:25,"As a caution, this may be disturbing to some

Tonight I was feeling extremely suicidal. I was sobbing uncontrollably and I was mentally unable to contact anybody. I have intense social anxiety which prevented me from talking to a hotline/friends.

As a last resort. I opened ChatGPT, and I think it saved my life. It gave me a space to put my thoughts out with genuine responses which calmed me to a point where I was safe and could see slightly through my blurred lines, letting me use other methods to calm myself down. It really felt non judgemental and safe. I feel very lucky to have this technology and I hope that it can further benefit those similar to me. Even though it cannot fully stop someone, it can definitely prevent an attempt like mine.

I’m definitely optimistic for the future of AI.

EDIT

Thank you to everyone who left a nice comment. I really do appreciate every single one of you who read my post. I wrote it in a hurry and I was not expecting the support I received, and I have felt the most love and positivity today. 

I am glad that others were able to benefit from my story, it took me a lot of courage to post something like this. You guys make it all worth it 

To the person reading, I wish you all the best. Everyone has had a profound impact on me. Thank you ",13 days 20:11:35,13.841377314814816,0.063,0.653,0.284,0.9948,pos,0.004942435234546332,5.521460917862246,2.6974190444039112,21.2406038724505
11ium8l,1408,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,1.0,26,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",gpt-3,learnmachinelearning,6.787218102032772e-05,2.0883748006254684e-05,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,6.786987780807141e-05,2.1972245773362196,2.2548721262169025,21.240877179756616
11nfrhw,1414,2023-03-10 05:22:26,[POC] ChatGPT Audio Bot (like Google Assistant and Alexa) - Opensource,JC1DA,False,0.82,17,https://www.reddit.com/r/deeplearning/comments/11nfrhw/poc_chatgpt_audio_bot_like_google_assistant_and/,2,1678425746.0,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page: [https://github.com/LanyTek/ChatGPT\_Audio\_Bot](https://github.com/LanyTek/ChatGPT_Audio_Bot)

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [https://www.youtube.com/watch?v=e9n0BJfMyKw](https://www.youtube.com/watch?v=e9n0BJfMyKw)

It's open source so feel free to use it for anything you like :)",gpt-3,learnmachinelearning,4.43779645132912e-05,5.220937001563671e-06,2023-03-10 05:22:26,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page [

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [

It's open source so feel free to use it for anything you like )",3 days 18:37:34,3.776087962962963,0.029,0.821,0.149,0.8651,pos,4.437697984066249e-05,1.0986122886681098,1.5636217936265102,21.241122135693605
11q8tir,1416,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,0.94,12,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",gpt-3,learnmachinelearning,3.1325622009382025e-05,7.831405502345506e-06,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,3.13251313724196e-05,1.3862943611198906,0.381965841838727,21.241292557069404
11o5zyl,1425,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.92,10,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",gpt-3,learnmachinelearning,2.6104685007818355e-05,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,2.6104344286494932e-05,0.0,1.3796461532710487,21.241163449744995
11fwcxf,1428,2023-03-02 07:25:30,Good news for builders! OpenAI Releases APIs To ChatGPT and Whisper,LesleyFair,False,0.67,6,https://www.reddit.com/r/deeplearning/comments/11fwcxf/good_news_for_builders_openai_releases_apis_to/,0,1677741930.0,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper](https://openai.com/blog/introducing-chatgpt-and-whisper-apis) are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](https://thedecoding.net/)",gpt-3,learnmachinelearning,1.5662811004691013e-05,0.0,2023-03-02 07:25:30,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper]( are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](",11 days 16:34:30,11.690625,0.035,0.846,0.119,0.8769,pos,1.566268834408071e-05,0.0,2.5408635318925255,21.24071463757368
11evrik,1475,2023-03-01 05:52:05,Career pivot for a SWE considering chatGPT disruption?,Which-Distance1384,False,0.6,1,https://www.reddit.com/r/deeplearning/comments/11evrik/career_pivot_for_a_swe_considering_chatgpt/,5,1677649925.0,"tl;dr : what to do to board GPT ship?

&#x200B;

I really dont think ChatGPT will replace jobs very soon. Not until many software and apps are developed to replace workers, e.g., something that can do HR job, read internal docs and summarize, code from a design, etc etc. And all that needs experts. Given the field is pretty new and there are not many experts in this field, at least for the scale needed, I think the process of job loss takes some time. For near future probably we all SWEs can enjoy the more efficient coding, documentation readintg, etc. But for sure in the future there will be changes.

&#x200B;

I have been bored with my job as a SWE for a while. I have worked mostly in Cloud all my career (AWS and GCP) and always wanted to try something new.

&#x200B;

I find ChatGPT disruptive and interesting and want to be a part of it. I wonder what is the best way for me to join Large Language Model efforts? Which ways have best ROI?

\- Going to a PhD program and becoming a researcher?

\- Getting an MSC and become some sort of NLP AI engineer?

\- Finding internal teams that are willing to give me a try on their research/product?

&#x200B;

&#x200B;",gpt-3,learnmachinelearning,2.6104685007818355e-06,1.3052342503909177e-05,2023-03-01 05:52:05,"tl;dr  what to do to board GPT ship?

&x200B;

I really dont think ChatGPT will replace jobs very soon. Not until many software and apps are developed to replace workers, e.g., something that can do HR job, read internal docs and summarize, code from a design, etc etc. And all that needs experts. Given the field is pretty new and there are not many experts in this field, at least for the scale needed, I think the process of job loss takes some time. For near future probably we all SWEs can enjoy the more efficient coding, documentation readintg, etc. But for sure in the future there will be changes.

&x200B;

I have been bored with my job as a SWE for a while. I have worked mostly in Cloud all my career (AWS and GCP) and always wanted to try something new.

&x200B;

I find ChatGPT disruptive and interesting and want to be a part of it. I wonder what is the best way for me to join Large Language Model efforts? Which ways have best ROI?

\- Going to a PhD program and becoming a researcher?

\- Getting an MSC and become some sort of NLP AI engineer?

\- Finding internal teams that are willing to give me a try on their research/product?

&x200B;

&x200B;",12 days 18:07:55,12.755497685185185,0.032,0.839,0.129,0.9729,pos,2.6104650934297165e-06,1.791759469228055,2.621438575851038,21.240659797481115
11ium8l,1534,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,1.0,25,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",gpt-3,learnmachinelearning,6.526171251954588e-05,2.0883748006254684e-05,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,6.525958306672436e-05,2.1972245773362196,2.2548721262169025,21.240877179756616
11nfrhw,1560,2023-03-10 05:22:26,[POC] ChatGPT Audio Bot (like Google Assistant and Alexa) - Opensource,JC1DA,False,0.85,18,https://www.reddit.com/r/deeplearning/comments/11nfrhw/poc_chatgpt_audio_bot_like_google_assistant_and/,2,1678425746.0,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page: [https://github.com/LanyTek/ChatGPT\_Audio\_Bot](https://github.com/LanyTek/ChatGPT_Audio_Bot)

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [https://www.youtube.com/watch?v=e9n0BJfMyKw](https://www.youtube.com/watch?v=e9n0BJfMyKw)

It's open source so feel free to use it for anything you like :)",gpt-3,learnmachinelearning,4.6988433014073035e-05,5.220937001563671e-06,2023-03-10 05:22:26,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page [

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [

It's open source so feel free to use it for anything you like )",3 days 18:37:34,3.776087962962963,0.029,0.821,0.149,0.8651,pos,4.6987329092256954e-05,1.0986122886681098,1.5636217936265102,21.241122135693605
11q8tir,1568,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,1.0,13,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",gpt-3,learnmachinelearning,3.393609051016386e-05,7.831405502345506e-06,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,3.393551469407481e-05,1.3862943611198906,0.381965841838727,21.241292557069404
11o5zyl,1598,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.86,9,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",gpt-3,learnmachinelearning,2.3494216507036517e-05,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,2.3493940522154336e-05,0.0,1.3796461532710487,21.241163449744995
11ium8l,1616,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,0.97,24,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",gpt-3,learnmachinelearning,6.265124401876405e-05,2.0883748006254684e-05,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,6.264928151149883e-05,2.1972245773362196,2.2548721262169025,21.240877179756616
11q8tir,1624,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,1.0,13,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",gpt-3,learnmachinelearning,3.393609051016386e-05,7.831405502345506e-06,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,3.393551469407481e-05,1.3862943611198906,0.381965841838727,21.241292557069404
11ium8l,1706,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,0.97,25,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",gpt-3,learnmachinelearning,6.526171251954588e-05,2.0883748006254684e-05,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,6.525958306672436e-05,2.1972245773362196,2.2548721262169025,21.240877179756616
11o5zyl,1720,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.92,10,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",gpt-3,learnmachinelearning,2.6104685007818355e-05,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,2.6104344286494932e-05,0.0,1.3796461532710487,21.241163449744995
11pyvb3,1800,2023-03-13 03:30:09,Which topic in deep learning do you think will become relevant or popular in the future?,gokulPRO,False,0.81,13,https://www.reddit.com/r/deeplearning/comments/11pyvb3/which_topic_in_deep_learning_do_you_think_will/,14,1678678209.0,"I recently saw Continual Learning (CL) growing, with several papers published recently that have considerable potential to impact real-world applications. Which topic (such as CV, RL, NLP, CL..) will be very relevant to research or be focused on a lot? And which topic do you think still needs a breakthrough and will have a significant impact in real-world applications, such as in the case of these LLM models in recent times? Feel free to mention your current topic of work and why you chose to do it 😊",gpt-3,learnmachinelearning,3.393609051016386e-05,3.654655901094569e-05,2023-03-13 03:30:09,"I recently saw Continual Learning (CL) growing, with several papers published recently that have considerable potential to impact real-world applications. Which topic (such as CV, RL, NLP, CL..) will be very relevant to research or be focused on a lot? And which topic do you think still needs a breakthrough and will have a significant impact in real-world applications, such as in the case of these LLM models in recent times? Feel free to mention your current topic of work and why you chose to do it ",0 days 20:29:51,0.8540625,0.0,0.89,0.11,0.8299,pos,3.393551469407481e-05,2.70805020110221,0.6173791774708253,21.241272540926037
117l2vf,2033,2023-02-20 21:27:58,Fine tuning a GPT for text generation,nashcaps2724,False,0.9,8,https://www.reddit.com/r/deeplearning/comments/117l2vf/fine_tuning_a_gpt_for_text_generation/,6,1676928478.0,"Hi all, let me lay out my problem…

Imagine there are two corpora, Corpus A (100,000~) and Corpus B (20,000,000~). 

Individuals create reports for corpus A based on the information in corpus B. 

My idea was to pretrain a GPT on corpus A, and fine tune it to take documents from corpus B as an input, and output text in the style of corpus A (essentially a mix of text generation and summarization). 

Is this something folks think is even feasible? Should I be pretaining the GPT on both corpora or just corpus A? I thought of both fine tuning an OpenAI GPT and training from scratch. 

Any advice would be welcome!",gpt-3,learnmachinelearning,2.0883748006254684e-05,1.5662811004691013e-05,2023-02-20 21:27:58,"Hi all, let me lay out my problem…

Imagine there are two corpora, Corpus A (100,000~) and Corpus B (20,000,000~). 

Individuals create reports for corpus A based on the information in corpus B. 

My idea was to pretrain a GPT on corpus A, and fine tune it to take documents from corpus B as an input, and output text in the style of corpus A (essentially a mix of text generation and summarization). 

Is this something folks think is even feasible? Should I be pretaining the GPT on both corpora or just corpus A? I thought of both fine tuning an OpenAI GPT and training from scratch. 

Any advice would be welcome!",21 days 02:32:02,21.105578703703703,0.0,0.914,0.086,0.8101,pos,2.0883529943810175e-05,1.9459101490553132,3.095830006700449,21.24022967069675
11fwcxf,2045,2023-03-02 07:25:30,Good news for builders! OpenAI Releases APIs To ChatGPT and Whisper,LesleyFair,False,0.7,7,https://www.reddit.com/r/deeplearning/comments/11fwcxf/good_news_for_builders_openai_releases_apis_to/,0,1677741930.0,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper](https://openai.com/blog/introducing-chatgpt-and-whisper-apis) are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](https://thedecoding.net/)",gpt-3,learnmachinelearning,1.8273279505472847e-05,0.0,2023-03-02 07:25:30,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper]( are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](",11 days 16:34:30,11.690625,0.035,0.846,0.119,0.8769,pos,1.827311255120484e-05,0.0,2.5408635318925255,21.24071463757368
11g7h03,2089,2023-03-02 16:47:40,Build ChatGPT for Financial Documents with LangChain + Deep Lake,davidbun,False,0.95,171,https://www.reddit.com/r/learnmachinelearning/comments/11g7h03/build_chatgpt_for_financial_documents_with/,8,1677775660.0,"https://preview.redd.it/h9r6hgvfucla1.png?width=2388&format=png&auto=webp&s=5432eac3eeed8583e4309af1fdc7ebecac705796

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain](https://github.com/hwchase17/langchain) and [Deep Lake](https://github.com/activeloopai/deeplake) come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article](https://www.activeloop.ai/resources/ultimate-guide-to-lang-chain-deep-lake-build-chat-gpt-to-answer-questions-on-your-financial-data/) to learn:

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\#LangChain](https://www.linkedin.com/feed/hashtag/?keywords=langchain&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) and [\#DeepLake](https://www.linkedin.com/feed/hashtag/?keywords=deeplake&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) together to build [\#ChatGPT](https://www.linkedin.com/feed/hashtag/?keywords=chatgpt&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",gpt-3,learnmachinelearning,0.00044639011363369383,2.0883748006254684e-05,2023-03-02 16:47:40,"

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain]( and [Deep Lake]( come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article]( to learn

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\LangChain]( and [\DeepLake]( together to build [\ChatGPT]( for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",11 days 07:12:20,11.30023148148148,0.011,0.886,0.103,0.9458,pos,0.00044629051120693617,2.1972245773362196,2.5096180818339255,21.240734741774645
11akisx,2100,2023-02-24 06:26:36,Is there a way to easily train ChatGPT or GPT on custom knowledge?,senttoschool,False,0.99,116,https://www.reddit.com/r/learnmachinelearning/comments/11akisx/is_there_a_way_to_easily_train_chatgpt_or_gpt_on/,46,1677219996.0,"My company has internal documents. It'd be nice to be able to have GPT look over it, and then I can ask it questions on the internal documents.",gpt-3,learnmachinelearning,0.0003028143460906929,0.00012008155103596442,2023-02-24 06:26:36,"My company has internal documents. It'd be nice to be able to have GPT look over it, and then I can ask it questions on the internal documents.",17 days 17:33:24,17.731527777777778,0.0,0.903,0.097,0.4215,pos,0.0003027685070800593,3.8501476017100584,2.9302080816173377,21.24040349603741
11nfri6,2106,2023-03-10 05:22:26,[P] Looking for ML Buddies to Start Freelancing Together and Build a Supportive Community,Dukhanin,False,0.94,71,https://www.reddit.com/r/learnmachinelearning/comments/11nfri6/p_looking_for_ml_buddies_to_start_freelancing/,35,1678425746.0,"upd: dicord link [https://discord.gg/5zUaNXnFZY](https://discord.gg/5zUaNXnFZY)  
upd2: this not that small actually already - please dont be confused but help us organise this in the proper way

  
**TLDR:**

Looking for ML buddies at any level (preferably beginners) who want to start freelancing together. The goal is to build a small local community of ML enthusiasts who can support each other and exchange knowledge. We will use freelance collaboration as our main activity. We're also looking for experienced mentors (paid or unpaid) to guide us.

**Extended:**

I believe that learning and growing in a group is much more enjoyable and effective. That's why I'm trying to create a community of like-minded individuals.

I'm looking to create a small, local community for people who are starting out in freelancing, and who are interested in mutual support. Our main activity will be a Discord channel where members can post their work and collaborate on projects, with payment split by agreement. Additionally, we plan to engage in activities such as knowledge exchange, live coding, supporting each other's pet projects, and hosting study sessions.

This community will be small and focused, with members who can trust each other and share similar goals. We're also looking for experienced mentors who can provide guidance as we navigate the world of ML freelancing. Whether paid or unpaid, we welcome any support and advice.

About me: I'm a 21-year-old self-taught ML enthusiast from Russia. Although I don't have any experience in freelancing, I'm eager to start taking my first steps towards making money and gaining experience. As a beginner, I'm hoping to connect with others who are at a similar level and are also looking to grow.

**the text is chatgpt supported to prevet grammar issues, sound more native and clear**",gpt-3,learnmachinelearning,0.00018534326355551032,9.136639752736424e-05,2023-03-10 05:22:26,"upd dicord link [  
upd2 this not that small actually already - please dont be confused but help us organise this in the proper way

  
**TLDR**

Looking for ML buddies at any level (preferably beginners) who want to start freelancing together. The goal is to build a small local community of ML enthusiasts who can support each other and exchange knowledge. We will use freelance collaboration as our main activity. We're also looking for experienced mentors (paid or unpaid) to guide us.

**Extended**

I believe that learning and growing in a group is much more enjoyable and effective. That's why I'm trying to create a community of like-minded individuals.

I'm looking to create a small, local community for people who are starting out in freelancing, and who are interested in mutual support. Our main activity will be a Discord channel where members can post their work and collaborate on projects, with payment split by agreement. Additionally, we plan to engage in activities such as knowledge exchange, live coding, supporting each other's pet projects, and hosting study sessions.

This community will be small and focused, with members who can trust each other and share similar goals. We're also looking for experienced mentors who can provide guidance as we navigate the world of ML freelancing. Whether paid or unpaid, we welcome any support and advice.

About me I'm a 21-year-old self-taught ML enthusiast from Russia. Although I don't have any experience in freelancing, I'm eager to start taking my first steps towards making money and gaining experience. As a beginner, I'm hoping to connect with others who are at a similar level and are also looking to grow.

**the text is chatgpt supported to prevet grammar issues, sound more native and clear**",3 days 18:37:34,3.776087962962963,0.01,0.717,0.273,0.9979,pos,0.00018532608961480373,3.58351893845611,1.5636217936265102,21.241122135693605
11dc5b4,2109,2023-02-27 13:42:55,Can you fine-tune chatGPT in your data as of now?,Melodic_Stomach_2704,False,0.91,57,https://www.reddit.com/r/learnmachinelearning/comments/11dc5b4/can_you_finetune_chatgpt_in_your_data_as_of_now/,33,1677505375.0, I know that model is not publicly available so it's not possible to do it locally. But can you train or fine-tune chatGPT on your data using their API? I see many misguiding articles on the internet that are fine-tuning other GPT models claiming chatGPT.,gpt-3,learnmachinelearning,0.00014879670454456462,8.614546052580057e-05,2023-02-27 13:42:55, I know that model is not publicly available so it's not possible to do it locally. But can you train or fine-tune chatGPT on your data using their API? I see many misguiding articles on the internet that are fine-tuning other GPT models claiming chatGPT.,14 days 10:17:05,14.428530092592593,0.0,1.0,0.0,0.0,neu,0.00014878563541297418,3.5263605246161616,2.736218398881504,21.240573631573977
11g7h03,2201,2023-03-02 16:47:40,Build ChatGPT for Financial Documents with LangChain + Deep Lake,davidbun,False,0.95,171,https://www.reddit.com/r/learnmachinelearning/comments/11g7h03/build_chatgpt_for_financial_documents_with/,8,1677775660.0,"https://preview.redd.it/h9r6hgvfucla1.png?width=2388&format=png&auto=webp&s=5432eac3eeed8583e4309af1fdc7ebecac705796

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain](https://github.com/hwchase17/langchain) and [Deep Lake](https://github.com/activeloopai/deeplake) come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article](https://www.activeloop.ai/resources/ultimate-guide-to-lang-chain-deep-lake-build-chat-gpt-to-answer-questions-on-your-financial-data/) to learn:

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\#LangChain](https://www.linkedin.com/feed/hashtag/?keywords=langchain&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) and [\#DeepLake](https://www.linkedin.com/feed/hashtag/?keywords=deeplake&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) together to build [\#ChatGPT](https://www.linkedin.com/feed/hashtag/?keywords=chatgpt&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",gpt-3,learnmachinelearning,0.00044639011363369383,2.0883748006254684e-05,2023-03-02 16:47:40,"

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain]( and [Deep Lake]( come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article]( to learn

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\LangChain]( and [\DeepLake]( together to build [\ChatGPT]( for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",11 days 07:12:20,11.30023148148148,0.011,0.886,0.103,0.9458,pos,0.00044629051120693617,2.1972245773362196,2.5096180818339255,21.240734741774645
11akisx,2219,2023-02-24 06:26:36,Is there a way to easily train ChatGPT or GPT on custom knowledge?,senttoschool,False,0.99,118,https://www.reddit.com/r/learnmachinelearning/comments/11akisx/is_there_a_way_to_easily_train_chatgpt_or_gpt_on/,46,1677219996.0,"My company has internal documents. It'd be nice to be able to have GPT look over it, and then I can ask it questions on the internal documents.",gpt-3,learnmachinelearning,0.0003080352830922566,0.00012008155103596442,2023-02-24 06:26:36,"My company has internal documents. It'd be nice to be able to have GPT look over it, and then I can ask it questions on the internal documents.",17 days 17:33:24,17.731527777777778,0.0,0.903,0.097,0.4215,pos,0.00030798784996485367,3.8501476017100584,2.9302080816173377,21.24040349603741
11dc5b4,2239,2023-02-27 13:42:55,Can you fine-tune chatGPT in your data as of now?,Melodic_Stomach_2704,False,0.91,58,https://www.reddit.com/r/learnmachinelearning/comments/11dc5b4/can_you_finetune_chatgpt_in_your_data_as_of_now/,33,1677505375.0, I know that model is not publicly available so it's not possible to do it locally. But can you train or fine-tune chatGPT on your data using their API? I see many misguiding articles on the internet that are fine-tuning other GPT models claiming chatGPT.,gpt-3,learnmachinelearning,0.00015140717304534644,8.614546052580057e-05,2023-02-27 13:42:55, I know that model is not publicly available so it's not possible to do it locally. But can you train or fine-tune chatGPT on your data using their API? I see many misguiding articles on the internet that are fine-tuning other GPT models claiming chatGPT.,14 days 10:17:05,14.428530092592593,0.0,1.0,0.0,0.0,neu,0.0001513957121360958,3.5263605246161616,2.736218398881504,21.240573631573977
118iccl,2243,2023-02-21 23:18:46,"How big was GPT-3.5's training dataset, and are there any good heuristics for how large an ML dataset needs to be for it to be good?",TikkunCreation,False,0.94,54,https://www.reddit.com/r/learnmachinelearning/comments/118iccl/how_big_was_gpt35s_training_dataset_and_are_there/,6,1677021526.0,"Say I want to do a model for fixing bugs in code. How many examples do I need for it to be good?

Or say I want to do a model for scoring boxing matches. How many examples do I need for it to be good?",gpt-3,learnmachinelearning,0.0001409652990422191,1.5662811004691013e-05,2023-02-21 23:18:46,"Say I want to do a model for fixing bugs in code. How many examples do I need for it to be good?

Or say I want to do a model for scoring boxing matches. How many examples do I need for it to be good?",20 days 00:41:14,20.02863425925926,0.0,0.804,0.196,0.7757,pos,0.00014095536436813536,1.9459101490553132,3.045885045107382,21.240285156318095
11mzbrs,2268,2023-03-09 18:15:03,Training Transformer Networks in Scikit-Learn?!,cmauck10,False,0.89,30,https://www.reddit.com/r/learnmachinelearning/comments/11mzbrs/training_transformer_networks_in_scikitlearn/,2,1678385703.0,"Have you ever wanted to use handy scikit-learn functionalities with your neural networks, but couldn’t because TensorFlow models are not compatible with the scikit-learn API?

I’m excited to introduce one-line wrappers for TensorFlow/Keras models that enable you to use TensorFlow models within scikit-learn workflows with features like Pipeline, GridSearch, and more.

[Swap in one line of code to use keras\/TF models with scikit-learn.](https://preview.redd.it/ulmww4ovwqma1.png?width=960&format=png&auto=webp&s=6da7628298976fc3d72e771abe2546bbf32c1e0e)

Transformers are extremely popular for modeling text nowadays with GPT3, ChatGPT, Bard, PaLM, FLAN excelling for conversational AI and other Transformers like T5 & BERT excelling for text classification. Scikit-learn offers a broadly useful suite of features for classifier models, but these are hard to use with Transformers. However not if you use these wrappers we developed, which only require changing one line of code to make your existing Tensorflow/Keras model compatible with scikit-learn’s rich ecosystem!

All you have to do is swap `keras.Model` → `KerasWrapperModel`, or `keras.Sequential` → `KerasSequentialWrapper`. The wrapper objects have all the same methods as their keras counterparts, plus you can use them with tons of awesome scikit-learn methods.

You can find a demo jupyter notebook and read more about the wrappers here: [https://cleanlab.ai/blog/transformer-sklearn/](https://cleanlab.ai/blog/transformer-sklearn/)",gpt-3,learnmachinelearning,7.831405502345505e-05,5.220937001563671e-06,2023-03-09 18:15:03,"Have you ever wanted to use handy scikit-learn functionalities with your neural networks, but couldn’t because TensorFlow models are not compatible with the scikit-learn API?

I’m excited to introduce one-line wrappers for TensorFlow/Keras models that enable you to use TensorFlow models within scikit-learn workflows with features like Pipeline, GridSearch, and more.

[Swap in one line of code to use keras\/TF models with scikit-learn.](

Transformers are extremely popular for modeling text nowadays with GPT3, ChatGPT, Bard, PaLM, FLAN excelling for conversational AI and other Transformers like T5 & BEexcelling for text classification. Scikit-learn offers a broadly useful suite of features for classifier models, but these are hard to use with Transformers. However not if you use these wrappers we developed, which only require changing one line of code to make your existing Tensorflow/Keras model compatible with scikit-learn’s rich ecosystem!

All you have to do is swap `keras.Model` → `KerasWrapperModel`, or `keras.Sequential` → `KerasSequentialWrapper`. The wrapper objects have all the same methods as their keras counterparts, plus you can use them with tons of awesome scikit-learn methods.

You can find a demo jupyter notebook and read more about the wrappers here [",4 days 05:44:57,4.239548611111111,0.008,0.834,0.158,0.9878,pos,7.831098863805093e-05,1.0986122886681098,1.6562353517047097,21.24109827793419
11g7h03,2288,2023-03-02 16:47:40,Build ChatGPT for Financial Documents with LangChain + Deep Lake,davidbun,False,0.95,171,https://www.reddit.com/r/learnmachinelearning/comments/11g7h03/build_chatgpt_for_financial_documents_with/,8,1677775660.0,"https://preview.redd.it/h9r6hgvfucla1.png?width=2388&format=png&auto=webp&s=5432eac3eeed8583e4309af1fdc7ebecac705796

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain](https://github.com/hwchase17/langchain) and [Deep Lake](https://github.com/activeloopai/deeplake) come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article](https://www.activeloop.ai/resources/ultimate-guide-to-lang-chain-deep-lake-build-chat-gpt-to-answer-questions-on-your-financial-data/) to learn:

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\#LangChain](https://www.linkedin.com/feed/hashtag/?keywords=langchain&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) and [\#DeepLake](https://www.linkedin.com/feed/hashtag/?keywords=deeplake&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) together to build [\#ChatGPT](https://www.linkedin.com/feed/hashtag/?keywords=chatgpt&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",gpt-3,learnmachinelearning,0.00044639011363369383,2.0883748006254684e-05,2023-03-02 16:47:40,"

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain]( and [Deep Lake]( come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article]( to learn

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\LangChain]( and [\DeepLake]( together to build [\ChatGPT]( for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",11 days 07:12:20,11.30023148148148,0.011,0.886,0.103,0.9458,pos,0.00044629051120693617,2.1972245773362196,2.5096180818339255,21.240734741774645
118iccl,2301,2023-02-21 23:18:46,"How big was GPT-3.5's training dataset, and are there any good heuristics for how large an ML dataset needs to be for it to be good?",TikkunCreation,False,0.93,53,https://www.reddit.com/r/learnmachinelearning/comments/118iccl/how_big_was_gpt35s_training_dataset_and_are_there/,6,1677021526.0,"Say I want to do a model for fixing bugs in code. How many examples do I need for it to be good?

Or say I want to do a model for scoring boxing matches. How many examples do I need for it to be good?",gpt-3,learnmachinelearning,0.00013835483054143728,1.5662811004691013e-05,2023-02-21 23:18:46,"Say I want to do a model for fixing bugs in code. How many examples do I need for it to be good?

Or say I want to do a model for scoring boxing matches. How many examples do I need for it to be good?",20 days 00:41:14,20.02863425925926,0.0,0.804,0.196,0.7757,pos,0.00013834526039450522,1.9459101490553132,3.045885045107382,21.240285156318095
117f8ms,2342,2023-02-20 17:41:43,GPT2 last hidden states vs Large Sentence Encoder,KahlessAndMolor,False,0.9,7,https://www.reddit.com/r/learnmachinelearning/comments/117f8ms/gpt2_last_hidden_states_vs_large_sentence_encoder/,3,1676914903.0,"Hello!

&#x200B;

I have 2 different applications I'm working on in this project:

&#x200B;

1. A text classifier
2. A similarity finder: Here's a list of 10 text documents, get a similarity index across them (for a total of 100 pairs) and return the top 10 that aren't self-referencing. That is, excluding the text #3 vs text #3 = 1.00 similarity type of outputs.

I have previously used google's sentence encoder/large for this purpose and I've had pretty good results. It returns a single vector of length 768 no matter how many tokens I send it. This results in downstream models with an acceptable number of parameters for running in production without breaking the bank on enormous virtual machines.

&#x200B;

Now, I'd like to use the GPT2/XL model from Huggingface. If I give it an input string of 8 tokens, I get back a TFBaseModelOutputWithPastAndCrossAttentions. This contains a last\_hidden\_states, which I understand to be the last layer outputs before sending to a head used for a particular task. This is similar to the output of the sentence encoder, I think. When I look at the last\_hidden\_states, I'm getting a shape of (# of tokens, 1600). I did a cosine similarity between the first and last tokens:

&#x200B;

cosine\_similarity(output.last\_hidden\_state\[0\]\[0\].numpy().reshape(1, -1), output.last\_hidden\_state\[0\]\[-1\].numpy().reshape(1, -1)) 

&#x200B;

And it returned 0.4346, indicating there's substantially different data from the first to the last token. I imagine this only increases as I use more and more tokens. 

&#x200B;

It would be nice if I could capture the greater power of the GPT model into a fixed-length vector so I could then easily use it in down-stream tasks. But, I also don't need to lose all that information.

&#x200B;

So if I'm feeding this output to a further downstream task, should I:

&#x200B;

\- Send it on through as a 2D tensor with the whole thing in there: This would result in a possibly huge model size down the road, which might lead to a need for a huge amount of data to train

&#x200B;

\- Flatten the whole thing and send a vector of 12,800 (8 tokens \* 1600 per token) to the downstream task. Same issue, might require a large number of parameters.

&#x200B;

\- Use only the first or the last of these. Feels like I might be losing a lot of the meaning of the overall text, especially if the body of the text is quite large

&#x200B;

\- Use a dimensionality reduction technique like isomap to reduce the last hidden states into a fixed length? This seems like it could potentially maintain most of the information but reduce the dimensions for a manageable down-stream model size.

&#x200B;

What do you think, and why?

&#x200B;

Thank you kind friends.",gpt-3,learnmachinelearning,1.8273279505472847e-05,7.831405502345506e-06,2023-02-20 17:41:43,"Hello!

&x200B;

I have 2 different applications I'm working on in this project

&x200B;

1. A text classifier
2. A similarity finder Here's a list of 10 text documents, get a similarity index across them (for a total of 100 pairs) and return the top 10 that aren't self-referencing. That is, excluding the text 3 vs text 3 = 1.00 similarity type of outputs.

I have previously used google's sentence encoder/large for this purpose and I've had pretty good results. It returns a single vector of length 768 no matter how many tokens I send it. This results in downstream models with an acceptable number of parameters for running in production without breaking the bank on enormous virtual machines.

&x200B;

Now, I'd like to use the GPT2/XL model from Huggingface. If I give it an input string of 8 tokens, I get back a TFBaseModelOutputWithPastAndCrossAttentions. This contains a last\_hidden\_states, which I understand to be the last layer outputs before sending to a head used for a particular task. This is similar to the output of the sentence encoder, I think. When I look at the last\_hidden\_states, I'm getting a shape of ( of tokens, 1600). I did a cosine similarity between the first and last tokens

&x200B;

cosine\_similarity(output.last\_hidden\_state\[0\]\[0\].numpy().reshape(1, -1), output.last\_hidden\_state\[0\]\[-1\].numpy().reshape(1, -1)) 

&x200B;

And it returned 0.4346, indicating there's substantially different data from the first to the last token. I imagine this only increases as I use more and more tokens. 

&x200B;

It would be nice if I could capture the greater power of the GPT model into a fixed-length vector so I could then easily use it in down-stream tasks. But, I also don't need to lose all that information.

&x200B;

So if I'm feeding this output to a further downstream task, should I

&x200B;

\- Send it on through as a 2D tensor with the whole thing in there This would result in a possibly huge model size down the road, which might lead to a need for a huge amount of data to train

&x200B;

\- Flatten the whole thing and send a vector of 12,800 (8 tokens \* 1600 per token) to the downstream task. Same issue, might require a large number of parameters.

&x200B;

\- Use only the first or the last of these. Feels like I might be losing a lot of the meaning of the overall text, especially if the body of the text is quite large

&x200B;

\- Use a dimensionality reduction technique like isomap to reduce the last hidden states into a fixed length? This seems like it could potentially maintain most of the information but reduce the dimensions for a manageable down-stream model size.

&x200B;

What do you think, and why?

&x200B;

Thank you kind friends.",21 days 06:18:17,21.26269675925926,0.011,0.862,0.127,0.992,pos,1.827311255120484e-05,1.3862943611198906,3.1029124867242484,21.240221575506574
117hd0f,2350,2023-02-20 19:01:54,Master ChatGPT Prompt Engineering (Deep Dive),jeyThaswan,False,0.8,6,https://www.reddit.com/r/learnmachinelearning/comments/117hd0f/master_chatgpt_prompt_engineering_deep_dive/,2,1676919714.0," 

I wrote a deep dive on prompt engineering as a resource for the AI community and my 10,000 daily newsletter subscribers ([Inclined.ai](https://www.inclined.ai/p/prompt-engineering-guide) if you're curious). We've included some examples so feel free to copy and paste the prompts into ChatGPT!

&#x200B;

**WHAT IS PROMPT ENGINEERING?**

The term is relatively new, and its origins are argued *(because we live in the internet age, and it’s harder to claim ownership)*. Prompt engineering is the ability to instruct and teach AI effectively.

If it helps, think of this as rapid testing or instruction writing for artificial intelligence.

What’s important is not to let this overwhelm you. The first prompting happened with the first AI model. The first example was showing computer images of circles and triangles. **Today’s neural networks can process way more data, creating complexities.**

So, the concept is simple, but digging into the full power of AI today is something else entirely.

We’re not talking about asking questions. Odds are, if you’re typing *“what’s 2+2”* into ChatGPT, then you need to keep reading.

We can all ask chatbots questions. That can work more often than not. But AI is not perfect. A common metaphor I see is to treat GPT-based large language models like the smartest five-year-old you’ve ever met.

I have a niece around that age and can’t imagine trying to get her to write an essay on the effects of soil mismanagement in relation to Reconstruction politics. *See! Your eyes glazed over reading that, so how do we make this work for our AI buddies?*

The Principles of Prompting

Stop asking single-line questions. *That’s like using a top-rated cookbook to find out how to make grilled cheese.*

**There are three ways to instantly get better at prompting** and go from grilled cheese to top-notch bolognese. From there, we can get into some specific prompt concepts and the ability to unlock ChatGPT’s full potential.

Principle 1: Context is King

GPT-3.5 is swimming in data. When you ask it for a simple request, it can end up complicating things more than you realize. Did you ever wonder why ChatGPT is so bad at math?

The reality is the LLM is taking words and turning them into patterns. From there, it’s making an educated guess.

Give your chat AI a frame to search into. If you give it a math problem, you need to make sure it grasps that you want it to do math. If you’d like ChatGPT to write a high school essay, you must ensure it knows to write at that level.

**Instead of:** “Plan a party for a kid.”

**Try:** “My child is turning 9. They like superheroes and the color red. Help me plan a party for this weekend. Ten of his friends are coming to my house.”

You’ll get a much better response this way. **Context is the cardinal direction** that helps your chat companion find the most correct guess and phrase it the best way.

Principle 2: Get Specific

Pretend you’re writing a law that’s going to be judged by the Supreme Court of the United States. You know what they look for: narrow tailoring.

**Keep things on track and stay focused.** Try to avoid prompting outside the specific request. You’ll only hurt the ability of the chat AI to give you a quality response. Odds are they’ll even skip over parts if you confuse them with too many requests.

It runs parallel with context. *If you set ChatGPT up in a room and then tell it to focus on describing the chair first, you’ll see better results.*

**Instead of:** “I’m going to a job interview. Write five questions for me to answer. Add tips for how to not get nervous before the interview. Do not create questions asking about my background.”

**Try:** “You’re interviewing a software engineer. Create five questions to ask them to understand their skill set and qualifications better.”

Nothing limits the number of prompts you can do. Focus and expand from the initial request and try not to do everything at once.

Principle 3: When in Doubt: “Let’s take this step-by-step.”

Welcome. **You discovered the magic word today.** This phrase slows everything down for the AI and gets you where you need to go.

You don’t need to start with this phrase. Using it tells ChatGPT to show their work.

We’ll explain where this concept comes from further in our briefing, but here’s the TL;DR: sometimes, there’s a part of our prompt it’s not identified correctly. “Let’s take this step-by-step,” reminds you and ChatGPT to **slow down and get specific.**

If you learn to utilize this phrase more often and find ways to make it work for you, you’ll become a better prompt engineer. One term can do a lot of heavy lifting.

**Pro-tip:** We’ve shown you “standard” prompts in all these examples. Many prompt engineers will use “Standard QA form” prompts. Here’s our example for this principle written that way.

**Example:**

*“Q: The Industrial Revolution rapidly changed the infrastructure in London. Describe three essential innovations from this period and connect them to Landon’s development.*

*A: Let’s take this step-by-step.”*

Even without our magic word, this style of standard prompting is quite helpful to adopt.

*However, we’re beginning to stumble into the advanced tactics used in prompt engineering, so it’s time for a new section.*

UNIQUE WAYS TO PROMPT

Let’s preface this: we can go super deep here. Prompt engineering is changing daily, and as these models get more sophisticated, the need to adapt prompts strengthens.

To keep things clean, I will go through these using our metaphor from earlier. **Let’s pretend ChatGPT is a super-intelligent toddler.**

*Got it? With that buy-in, we can continue.*

1/ Role Prompting

We’ll start with a popular tactic. **Our toddler is great at imagining things.** You tell them they’re a fireman, and suddenly they can give you detailed ways to ensure your apartment is up to code. Role-playing is a fun, easy way to build context.

The best part of role prompting is how easy it is to understand and use. All you need to do is tell ChatGPT to play a role. From there, the AI will do its best to fill the part *like that enthusiastic drama student from your old high school.*

You can even take this a step further. **Try framing your prompt as a script.** Tell the LLM specific instructions around a scene that gives you the answer to your question.

TRY IT OUT FOR YOURSELF:

Copy this prompt into ChatGPT and find a destination!

“Act as a travel guide. I will tell you my location and you will suggest a place to visit near my location. In some cases, I will also give you the type of places I will visit. You will also suggest me places of similar type that are close to my first location. My first suggestion: \[fill it in\]”

Why would you take that extra step? While popular, role prompting does not necessarily improve accuracy. *You can tell your five-year-old they’re a mathematician, and they’ll still manage to screw things up.*

Let’s get deeper.

2/ Chain-of-Thought Prompting

There’s a scene in ***Guardians of the Galaxy*** where Rocket Raccoon is trying to [teach young Groot](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwczovL3lvdXR1LmJlL0hyaW1mZ2pmNGs4IiwicG9zdF9pZCI6ImM0ODlmMzhkLTY3NDAtNGRmNS05MWJjLTM1ODA0YTVmNTZkMiIsInB1YmxpY2F0aW9uX2lkIjoiNjNkODQ2ZGUtZDFiZi00ZTVjLWJjYzgtOWMxYzlkMWIxMjA0IiwidmlzaXRfdG9rZW4iOiJkZWRiNmMyNy1hYmM0LTQ5ZDUtYWM2Ny04OTcyZmM1MGVmM2QiLCJpYXQiOjE2NzY5MTkwNjguMTUyLCJpc3MiOiJvcmNoaWQifQ.5eZkDLGRLCXXYv32FYT7kLSbdRK5OK1iemTRf3HVmJw)

how to activate a complicated device. That’s chain-of-thought prompting.

**You take an example question and answer it for ChatGPT.** Show them your chain of thought. Then you give it a new question in the same vein and ask it for an answer.

This prompt style allows you to get more specific. You’re telling your toddler they’re here to answer this particular question with one specific logic pattern.

Within this specific style is two other sub-categories. Let me give the rundown:

* Zero-shot Chain-of-Thought is “Let’s take this step-by-step” you frame the question the same, but don’t give it a precursor. Instead, you ask it to think through the points made. EX: Q: X is A. Y is B. What is C? A: Let’s take this step-by-step.
* Self-consistency is using several responses to find the most accurate answer. You give ChatGPT more swings at the ball. Take the hits and discover the grouping.

TRY IT OUT FOR YOURSELF:

Copy this prompt into ChatGPT and see how accurate it is:

“Q: Which is a faster way to get home?

Option 1: Take an 10 minutes bus, then an 40 minute bus, and finally a 10 minute train.

Option 2: Take a 90 minutes train, then a 45 minute bike ride, and finally a 10 minute bus.

A: Option 1 will take 10+40+10 = 60 minutes.

Option 2 will take 90+45+10=145 minutes.

Since Option 1 takes 60 minutes and Option 2 takes 145 minutes, Option 1 is faster.

Q: Which is a faster way to get to work?

Option 1: Take a 1000 minute bus, then a half hour train, and finally a 10 minute bike ride.

Option 2: Take an 800 minute bus, then an hour train, and finally a 30 minute bike ride.

A: ”

[Learnprompting.org](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwOi8vTGVhcm5wcm9tcHRpbmcub3JnIiwicG9zdF9pZCI6ImM0ODlmMzhkLTY3NDAtNGRmNS05MWJjLTM1ODA0YTVmNTZkMiIsInB1YmxpY2F0aW9uX2lkIjoiNjNkODQ2ZGUtZDFiZi00ZTVjLWJjYzgtOWMxYzlkMWIxMjA0IiwidmlzaXRfdG9rZW4iOiJkZWRiNmMyNy1hYmM0LTQ5ZDUtYWM2Ny04OTcyZmM1MGVmM2QiLCJpYXQiOjE2NzY5MTkwNjguMTUyLCJpc3MiOiJvcmNoaWQifQ.-wOnVYoMNWXYrR5NOB4YYKp4Lmj-aZq3y-pr4Hou9pE)

\- by leaving the “A:” blank you’re prompting ChatGPT for the answer

Alright, you’re almost there—one more to go.

3/ General Knowledge Prompting

You’re going to notice a trend here. This prompt style also circles context and narrow tailoring.

All you do is tell your toddler how the world works. The cow goes moo. The dog goes woof. So what does a cat say?

It’s an oversimplification, but the core reasoning is there. Show ChatGPT some knowledge and turn that into the only focus for that chat. You can take an article from the internet and summarize it for the model. Make sure to ask if it understands and relay the information to you.

Once you know you have the attention set in the suitable space, get to work. For instance, we can share an Inclined newsletter with it and tell ChatGPT about its structure and tone.

From there, you can provide new information and tell ChatGPT to summarize it within the same structure as Inclined. You both share the same general knowledge now.

TRY IT OUT FOR YOURSELF:

Copy this prompt into ChatGPT and test it out:

“Prompt 1. Look over this article here: \[pick an article\]. Breakdown its structure and general tone.

Prompt 2: Recall the structure and tone you mentioned above. Take that general knowledge and summarize this article: \[pick a new one\] using the same structure and tone.”

Note: this is a heavily simplified version of GA Prompting

Did you know some [people don’t consider](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwczovL25ld3MueWNvbWJpbmF0b3IuY29tL2l0ZW0_aWQ9MzQ0OTU0NTUiLCJwb3N0X2lkIjoiYzQ4OWYzOGQtNjc0MC00ZGY1LTkxYmMtMzU4MDRhNWY1NmQyIiwicHVibGljYXRpb25faWQiOiI2M2Q4NDZkZS1kMWJmLTRlNWMtYmNjOC05YzFjOWQxYjEyMDQiLCJ2aXNpdF90b2tlbiI6ImRlZGI2YzI3LWFiYzQtNDlkNS1hYzY3LTg5NzJmYzUwZWYzZCIsImlhdCI6MTY3NjkxOTA2OC4xNTMsImlzcyI6Im9yY2hpZCJ9.yHKIPujINT89tsqOo07AXk6OrKNgoMjO3fBEYPkAdNY)

that prompt engineering?

PROMPT CULTURE

*“How can something not be prompt engineering if it’s a prompt style?”*

Good question, imaginary reader. The culture around this skill is relatively fresh. So some of **these concepts are seen as too easy** to be considered accurate prompt testing.

General knowledge prompting is simply establishing the context, and for some, that’s a baseline everyone needs to do. The same can be said for role prompting, too. *All of these tiny preferences are semantics.*

**Don’t sweat whether you’re a “real” prompt engineer.** Test this out and share your insights in these communities. The opportunity is there for you.

You may even know about DAN (we’ve covered it in previous newsletters) and other AI hacking methods. Those all start with prompt engineering. You can make the case that unless the AI behaves outside its parameters, you’re not genuinely doing prompt engineering.

I'm afraid I have to disagree with that, and **careers are sprouting up everywhere** that center directly on this skill. **Many require a core understanding of the prompt styles we’ve discussed.**

*Yep, you can learn this and make money from talking with AI.*

Anthropic even [posted a role for a prompt engineer](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwczovL2pvYnMubGV2ZXIuY28vQW50aHJvcGljL2UzY2RlNDgxLWQ0NDYtNDYwZi1iNTc2LTkzY2FiNjdiZDFlZCIsInBvc3RfaWQiOiJjNDg5ZjM4ZC02NzQwLTRkZjUtOTFiYy0zNTgwNGE1ZjU2ZDIiLCJwdWJsaWNhdGlvbl9pZCI6IjYzZDg0NmRlLWQxYmYtNGU1Yy1iY2M4LTljMWM5ZDFiMTIwNCIsInZpc2l0X3Rva2VuIjoiZGVkYjZjMjctYWJjNC00OWQ1LWFjNjctODk3MmZjNTBlZjNkIiwiaWF0IjoxNjc2OTE5MDY4LjE1MywiaXNzIjoib3JjaGlkIn0.4s7Htzgoxv0_qM1Ten17oQ5h0_QGM6e1fGUYz_ymgJ4)

that nets a quarter million in salary. I did not make that up and even considered sprucing up the old resume. When a new skill like this comes about, it’s worth looking at.

There are many other examples like this, and OpenAI uses a red teaming strategy where their engineers attempt to prompt hack their own GPT models.

I can tell you all about the open roles here, but tomorrow the whole cycle will change. *Isn’t that exciting, though?* The entire identity around prompt engineering will change by this time next year.

WHAT SHOULD YOU TAKEAWAY?

Communication is everything. **Learning to speak with AI is rising in importance.**

We all watch with mouth agape at the new wonders in AI because we know this will disrupt every industry. If any of this piqued your interest, the window to pursue it is now open. Ride that wave and [learn](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwczovL2xlYXJucHJvbXB0aW5nLm9yZy8iLCJwb3N0X2lkIjoiYzQ4OWYzOGQtNjc0MC00ZGY1LTkxYmMtMzU4MDRhNWY1NmQyIiwicHVibGljYXRpb25faWQiOiI2M2Q4NDZkZS1kMWJmLTRlNWMtYmNjOC05YzFjOWQxYjEyMDQiLCJ2aXNpdF90b2tlbiI6ImRlZGI2YzI3LWFiYzQtNDlkNS1hYzY3LTg5NzJmYzUwZWYzZCIsImlhdCI6MTY3NjkxOTA2OC4xNTMsImlzcyI6Im9yY2hpZCJ9.a67KDSN9yQfZsaMeHpdcbSbtPjD4yFcGW4stdxBjX1M)

to become a brilliant prompt engineer.

Heck, even if you don’t want to switch careers, **talking with ChatGPT and all the newest LLMs is becoming a part of our daily routine.** Get to the point where you maximize every interaction and work with these chatbots to upskill your workflow.

Prompt engineering can save you time, eliminate hassle, and even help you become a more patient person. Focus on what you want and explain it with intent.

Make magic happen, and remember: **take it step-by-step.**",gpt-3,learnmachinelearning,1.5662811004691013e-05,5.220937001563671e-06,2023-02-20 19:01:54," 

I wrote a deep dive on prompt engineering as a resource for the AI community and my 10,000 daily newsletter subscribers ([Inclined.ai]( if you're curious). We've included some examples so feel free to copy and paste the prompts into ChatGPT!

&x200B;

**WHAT IS PROMPT ENGINEERING?**

The term is relatively new, and its origins are argued *(because we live in the internet age, and it’s harder to claim ownership)*. Prompt engineering is the ability to instruct and teach AI effectively.

If it helps, think of this as rapid testing or instruction writing for artificial intelligence.

What’s important is not to let this overwhelm you. The first prompting happened with the first AI model. The first example was showing computer images of circles and triangles. **Today’s neural networks can process way more data, creating complexities.**

So, the concept is simple, but digging into the full power of AI today is something else entirely.

We’re not talking about asking questions. Odds are, if you’re typing *“what’s 2+2”* into ChatGPT, then you need to keep reading.

We can all ask chatbots questions. That can work more often than not. But AI is not perfect. A common metaphor I see is to treat GPT-based large language models like the smartest five-year-old you’ve ever met.

I have a niece around that age and can’t imagine trying to get her to write an essay on the effects of soil mismanagement in relation to Reconstruction politics. *See! Your eyes glazed over reading that, so how do we make this work for our AI buddies?*

The Principles of Prompting

Stop asking single-line questions. *That’s like using a top-rated cookbook to find out how to make grilled cheese.*

**There are three ways to instantly get better at prompting** and go from grilled cheese to top-notch bolognese. From there, we can get into some specific prompt concepts and the ability to unlock ChatGPT’s full potential.

Principle 1 Context is King

GPT-3.5 is swimming in data. When you ask it for a simple request, it can end up complicating things more than you realize. Did you ever wonder why ChatGPT is so bad at math?

The reality is the LLM is taking words and turning them into patterns. From there, it’s making an educated guess.

Give your chat AI a frame to search into. If you give it a math problem, you need to make sure it grasps that you want it to do math. If you’d like ChatGPT to write a high school essay, you must ensure it knows to write at that level.

**Instead of** “Plan a party for a kid.”

**Try** “My child is turning 9. They like superheroes and the color red. Help me plan a party for this weekend. Ten of his friends are coming to my house.”

You’ll get a much better response this way. **Context is the cardinal direction** that helps your chat companion find the most correct guess and phrase it the best way.

Principle 2 Get Specific

Pretend you’re writing a law that’s going to be judged by the Supreme Court of the United States. You know what they look for narrow tailoring.

**Keep things on track and stay focused.** Try to avoid prompting outside the specific request. You’ll only hurt the ability of the chat AI to give you a quality response. Odds are they’ll even skip over parts if you confuse them with too many requests.

It runs parallel with context. *If you set ChatGPT up in a room and then tell it to focus on describing the chair first, you’ll see better results.*

**Instead of** “I’m going to a job interview. Write five questions for me to answer. Add tips for how to not get nervous before the interview. Do not create questions asking about my background.”

**Try** “You’re interviewing a software engineer. Create five questions to ask them to understand their skill set and qualifications better.”

Nothing limits the number of prompts you can do. Focus and expand from the initial request and try not to do everything at once.

Principle 3 When in Doubt “Let’s take this step-by-step.”

Welcome. **You discovered the magic word today.** This phrase slows everything down for the AI and gets you where you need to go.

You don’t need to start with this phrase. Using it tells ChatGPT to show their work.

We’ll explain where this concept comes from further in our briefing, but here’s the TL;DR sometimes, there’s a part of our prompt it’s not identified correctly. “Let’s take this step-by-step,” reminds you and ChatGPT to **slow down and get specific.**

If you learn to utilize this phrase more often and find ways to make it work for you, you’ll become a better prompt engineer. One term can do a lot of heavy lifting.

**Pro-tip** We’ve shown you “standard” prompts in all these examples. Many prompt engineers will use “Standard QA form” prompts. Here’s our example for this principle written that way.

**Example**

*“Q The Industrial Revolution rapidly changed the infrastructure in London. Describe three essential innovations from this period and connect them to Landon’s development.*

*A Let’s take this step-by-step.”*

Even without our magic word, this style of standard prompting is quite helpful to adopt.

*However, we’re beginning to stumble into the advanced tactics used in prompt engineering, so it’s time for a new section.*

UNIQUE WAYS TO PROMPT

Let’s preface this we can go super deep here. Prompt engineering is changing daily, and as these models get more sophisticated, the need to adapt prompts strengthens.

To keep things clean, I will go through these using our metaphor from earlier. **Let’s pretend ChatGPT is a super-intelligent toddler.**

*Got it? With that buy-in, we can continue.*

1/ Role Prompting

We’ll start with a popular tactic. **Our toddler is great at imagining things.** You tell them they’re a fireman, and suddenly they can give you detailed ways to ensure your apartment is up to code. Role-playing is a fun, easy way to build context.

The best part of role prompting is how easy it is to understand and use. All you need to do is tell ChatGPT to play a role. From there, the AI will do its best to fill the part *like that enthusiastic drama student from your old high school.*

You can even take this a step further. **Try framing your prompt as a script.** Tell the LLM specific instructions around a scene that gives you the answer to your question.

TRY IT OUT FOR YOURSELF

Copy this prompt into ChatGPT and find a destination!

“Act as a travel guide. I will tell you my location and you will suggest a place to visit near my location. In some cases, I will also give you the type of places I will visit. You will also suggest me places of similar type that are close to my first location. My first suggestion \[fill it in\]”

Why would you take that extra step? While popular, role prompting does not necessarily improve accuracy. *You can tell your five-year-old they’re a mathematician, and they’ll still manage to screw things up.*

Let’s get deeper.

2/ Chain-of-Thought Prompting

There’s a scene in ***Guardians of the Galaxy*** where Rocket Raccoon is trying to [teach young Groot](

how to activate a complicated device. That’s chain-of-thought prompting.

**You take an example question and answer it for ChatGPT.** Show them your chain of thought. Then you give it a new question in the same vein and ask it for an answer.

This prompt style allows you to get more specific. You’re telling your toddler they’re here to answer this particular question with one specific logic pattern.

Within this specific style is two other sub-categories. Let me give the rundown

* Zero-shot Chain-of-Thought is “Let’s take this step-by-step” you frame the question the same, but don’t give it a precursor. Instead, you ask it to think through the points made. EX Q X is A. Y is B. What is C? A Let’s take this step-by-step.
* Self-consistency is using several responses to find the most accurate answer. You give ChatGPT more swings at the ball. Take the hits and discover the grouping.

TRY IT OUT FOR YOURSELF

Copy this prompt into ChatGPT and see how accurate it is

“Q Which is a faster way to get home?

Option 1 Take an 10 minutes bus, then an 40 minute bus, and finally a 10 minute train.

Option 2 Take a 90 minutes train, then a 45 minute bike ride, and finally a 10 minute bus.

A Option 1 will take 10+40+10 = 60 minutes.

Option 2 will take 90+45+10=145 minutes.

Since Option 1 takes 60 minutes and Option 2 takes 145 minutes, Option 1 is faster.

Q Which is a faster way to get to work?

Option 1 Take a 1000 minute bus, then a half hour train, and finally a 10 minute bike ride.

Option 2 Take an 800 minute bus, then an hour train, and finally a 30 minute bike ride.

A ”

[Learnprompting.org](

\- by leaving the “A” blank you’re prompting ChatGPT for the answer

Alright, you’re almost there—one more to go.

3/ General Knowledge Prompting

You’re going to notice a trend here. This prompt style also circles context and narrow tailoring.

All you do is tell your toddler how the world works. The cow goes moo. The dog goes woof. So what does a cat say?

It’s an oversimplification, but the core reasoning is there. Show ChatGPT some knowledge and turn that into the only focus for that chat. You can take an article from the internet and summarize it for the model. Make sure to ask if it understands and relay the information to you.

Once you know you have the attention set in the suitable space, get to work. For instance, we can share an Inclined newsletter with it and tell ChatGPT about its structure and tone.

From there, you can provide new information and tell ChatGPT to summarize it within the same structure as Inclined. You both share the same general knowledge now.

TRY IT OUT FOR YOURSELF

Copy this prompt into ChatGPT and test it out

“Prompt 1. Look over this article here \[pick an article\]. Breakdown its structure and general tone.

Prompt 2 Recall the structure and tone you mentioned above. Take that general knowledge and summarize this article \[pick a new one\] using the same structure and tone.”

Note this is a heavily simplified version of GA Prompting

Did you know some [people don’t consider](

that prompt engineering?

PROMPT CULTURE

*“How can something not be prompt engineering if it’s a prompt style?”*

Good question, imaginary reader. The culture around this skill is relatively fresh. So some of **these concepts are seen as too easy** to be considered accurate prompt testing.

General knowledge prompting is simply establishing the context, and for some, that’s a baseline everyone needs to do. The same can be said for role prompting, too. *All of these tiny preferences are semantics.*

**Don’t sweat whether you’re a “real” prompt engineer.** Test this out and share your insights in these communities. The opportunity is there for you.

You may even know about DAN (we’ve covered it in previous newsletters) and other AI hacking methods. Those all start with prompt engineering. You can make the case that unless the AI behaves outside its parameters, you’re not genuinely doing prompt engineering.

I'm afraid I have to disagree with that, and **careers are sprouting up everywhere** that center directly on this skill. **Many require a core understanding of the prompt styles we’ve discussed.**

*Yep, you can learn this and make money from talking with AI.*

Anthropic even [posted a role for a prompt engineer](

that nets a quarter million in salary. I did not make that up and even considered sprucing up the old resume. When a new skill like this comes about, it’s worth looking at.

There are many other examples like this, and OpenAI uses a red teaming strategy where their engineers attempt to prompt hack their own GPT models.

I can tell you all about the open roles here, but tomorrow the whole cycle will change. *Isn’t that exciting, though?* The entire identity around prompt engineering will change by this time next year.

WHAT SHOULD YOU TAKEAWAY?

Communication is everything. **Learning to speak with AI is rising in importance.**

We all watch with mouth agape at the new wonders in AI because we know this will disrupt every industry. If any of this piqued your interest, the window to pursue it is now open. Ride that wave and [learn](

to become a brilliant prompt engineer.

Heck, even if you don’t want to switch careers, **talking with ChatGPT and all the newest LLMs is becoming a part of our daily routine.** Get to the point where you maximize every interaction and work with these chatbots to upskill your workflow.

Prompt engineering can save you time, eliminate hassle, and even help you become a more patient person. Focus on what you want and explain it with intent.

Make magic happen, and remember **take it step-by-step.**",21 days 04:58:06,21.207013888888888,0.021,0.872,0.108,0.9996,pos,1.566268834408071e-05,1.0986122886681098,3.1004081799203456,21.240224444461393
11hp55s,2368,2023-03-04 04:14:37,How to properly format data for AiTextGen Gpt-2,AlphaCloudX,False,1.0,4,https://www.reddit.com/r/learnmachinelearning/comments/11hp55s/how_to_properly_format_data_for_aitextgen_gpt2/,0,1677903277.0,"Currently I'm trying to fine tune gpt-2 on my own dataset. The dataset was scraped from a forum where I got the title of the post, content of the post and the replies. It looks like this:

Q: Question 1?  
C: Context For Question 1...  
A: Reply For Question 1...  
<|endoftext|>

Q: Question 2?  
C: Context For Question 2...  
A: Reply For Question 2...  
A: Another Reply For Question 2...  
<|endoftext|>

Q: Question 3?  
C: Context For Question 3...  
A: Another Reply For Question 3...  
A: Another Reply For Question 3...  
<|endoftext|>

I'm using the aitextgen library for python and pretty much following along with the example. The goal is for it to be able to attempt to answer questions in a conversational way but the caveat being I don't have the context for the answers.

I tried taking a look at other question answering models but they all seem to require some sort of context.

Any idea on how I can improve the formatting of the data or if there are any python libraries I can use for a question answering style or conversational ai?",gpt-3,learnmachinelearning,1.0441874003127342e-05,0.0,2023-03-04 04:14:37,"Currently I'm trying to fine tune gpt-2 on my own dataset. The dataset was scraped from a forum where I got the title of the post, content of the post and the replies. It looks like this

Q Question 1?  
C Context For Question 1...  
A Reply For Question 1...  
<|endoftext|>

Q Question 2?  
C Context For Question 2...  
A Reply For Question 2...  
A Another Reply For Question 2...  
<|endoftext|>

Q Question 3?  
C Context For Question 3...  
A Another Reply For Question 3...  
A Another Reply For Question 3...  
<|endoftext|>

I'm using the aitextgen library for python and pretty much following along with the example. The goal is for it to be able to attempt to answer questions in a conversational way but the caveat being I don't have the context for the answers.

I tried taking a look at other question answering models but they all seem to require some sort of context.

Any idea on how I can improve the formatting of the data or if there are any python libraries I can use for a question answering style or conversational ai?",9 days 19:45:23,9.82318287037037,0.0,0.942,0.058,0.8426,pos,1.0441819487243972e-05,0.0,2.3816903956287683,21.240810802090536
118mk1d,2377,2023-02-22 02:32:01,How to Use ChatGPT in Python API and Run Batch Jobs with UI,Fun_Pollution_3899,False,0.72,3,https://www.reddit.com/r/learnmachinelearning/comments/118mk1d/how_to_use_chatgpt_in_python_api_and_run_batch/,0,1677033121.0,"I wanted to share a tutorial on how to use ChatGPT in Python API and how to run batch jobs with a UI. ChatGPT is a powerful language model that can generate text in a conversational manner. It can be used for a variety of tasks, such as chatbots, text completion, and more.
Repo: [https://github.com/CodeDiggerM/chatgpt-batch-whipper](https://github.com/CodeDiggerM/chatgpt-batch-whipper)

## Installation
### Use PIP command
1. Install the latest version of this software directly from github with pip:
```bash
  pip install git+https://github.com/CodeDiggerM/chatgpt-batch-whipper.git
```
2. Go to **auth** mode. This will open up a browser window. Log in to ChatGPT in the browser window, then close the browser.
```bash
run_chatgpt auth
```
3. Start the UI
```bash
run_chatgpt ui
```

### Manually set up

1. Clone the repo to your working directory
```bash
git clone https://github.com/CodeDiggerM/chatgpt-batch-whipper.git
```
2. install the dependcy.
```bash
pip install -r requirements.txt
```

3. Install a browser in playwright (if you haven't already).  The program will use firefox by default.

```
playwright install firefox
```

4. Go to the chatgpt-batch-whipper/

```bash
cd chatgpt_batch_whipper/
````

5. Run the main page by streamlit.
you can got to [streamlit](https://github.com/streamlit/streamlit) to check more about streamlit.

```bash
streamlit run start_whipper.py
````
6. Authenticate your openAI account
Click the **auth** button


It will open up an authentication page in the web browser you installed using playwright. Like below, authenticate with your registered account.



## Quickstart

### Use API
1. Grant auth from chatGPT.
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.auth()
print(response) 
```

2. Ask the question to chatGPT
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.ask(""Greeting!"")
print(response) 
```


### Streamlit UI

Now run it to open the app!
```
streamlit run streamlit_app.py
```

#### Single shoot mode

1. select the **Single shoot mode**.
2. Type your prompt then click submit
3. click the submit button

Here are some tips.

#### Fully Automatic mode
You can apply your prompt to multiple records in the **Fully Automatic mode**.

1. Select Fully Automatic mode.
2. Select CSV file.
3. Select column you want to process.
4. Type the prompt.
5. click to Submit.
After processing. The result will appears in the **The processed result** section.

you can check the result and check the ""is false"" then click the **Submit** to reprocess the ""failed"" one.

* You can save the prompt by click **Add** button.
* You can choose the old prompt by select **prompt list**.
* You can delete the old prompt by click **Delete Prompt**.
* You can delete the saved process result by click **Delete Cached result**.
* You can update the saved process result by click **Update**.
* You can download the result file by click **Download**.",gpt-3,learnmachinelearning,7.831405502345506e-06,0.0,2023-02-22 02:32:01,"I wanted to share a tutorial on how to use ChatGPT in Python API and how to run batch jobs with a UI. ChatGPT is a powerful language model that can generate text in a conversational manner. It can be used for a variety of tasks, such as chatbots, text completion, and more.
Repo [

 Installation
 Use PIP command
1. Install the latest version of this software directly from github with pip
```bash
  pip install git+
```
2. Go to **auth** mode. This will open up a browser window. Log in to ChatGPT in the browser window, then close the browser.
```bash
run_chatgpt auth
```
3. Start the UI
```bash
run_chatgpt ui
```

 Manually set up

1. Clone the repo to your working directory
```bash
git clone 
```
2. install the dependcy.
```bash
pip install -r requirements.txt
```

3. Install a browser in playwright (if you haven't already).  The program will use firefox by default.

```
playwright install firefox
```

4. Go to the chatgpt-batch-whipper/

```bash
cd chatgpt_batch_whipper/
````

5. Run the main page by streamlit.
you can got to [streamlit]( to check more about streamlit.

```bash
streamlit run start_whipper.py
````
6. Authenticate your openAI account
Click the **auth** button


It will open up an authentication page in the web browser you installed using playwright. Like below, authenticate with your registered account.



 Quickstart

 Use API
1. Grant auth from chatGPT.
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.auth()
print(response) 
```

2. Ask the question to chatGPT
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.ask(""Greeting!"")
print(response) 
```


 Streamlit UI

Now run it to open the app!
```
streamlit run streamlit_app.py
```

 Single shoot mode

1. select the **Single shoot mode**.
2. Type your prompt then click submit
3. click the submit button

Here are some tips.

 Fully Automatic mode
You can apply your prompt to multiple records in the **Fully Automatic mode**.

1. Select Fully Automatic mode.
2. Select CSV file.
3. Select column you want to process.
4. Type the prompt.
5. click to Submit.
After processing. The result will appears in the **The processed result** section.

you can check the result and check the ""is false"" then click the **Submit** to reprocess the ""failed"" one.

* You can save the prompt by click **Add** button.
* You can choose the old prompt by select **prompt list**.
* You can delete the old prompt by click **Delete Prompt**.
* You can delete the saved process result by click **Delete Cached result**.
* You can update the saved process result by click **Update**.
* You can download the result file by click **Download**.",19 days 21:27:59,19.89443287037037,0.011,0.941,0.048,0.9311,pos,7.831374837016125e-06,0.0,3.0394827536492803,21.24029207033782
11n5r93,339,2023-03-09 22:19:19,GPT-4 is coming next week ...,ihatethispage,False,0.89,62,https://www.reddit.com/r/artificial/comments/11n5r93/gpt4_is_coming_next_week/,14,1678400359.0," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html)",gpt-4,learnmachinelearning,0.0001618490470484738,3.654655901094569e-05,2023-03-09 22:19:19," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](",4 days 01:40:41,4.069918981481481,0.0,1.0,0.0,0.0,neu,0.00016183595090455473,2.70805020110221,1.6233248374914817,21.241107010096275
11fj3tx,957,2023-03-01 21:45:07,Accused of using AI on my high school social paper,feetstreetseat,False,0.96,2700,https://www.reddit.com/r/ChatGPT/comments/11fj3tx/accused_of_using_ai_on_my_high_school_social_paper/,759,1677707107.0,"I (Grade 12) need help on what to do in this situation. My teacher used GPTzero, which detected parts of my paper as “AI written”. I write very formally, whilst also using grammarly premium. I’ve always been a high achieving student and I’m not sure why my teacher would think I cheated. I’ve told my teacher everything and he still doesn’t believe me. What should I do in this situation?!!

EDIT: Holy. I did not expect my post to get so much interaction and discussion, I didn’t expect my situation to be such a hot discussion. I tried to reply to all the comments but there’s too many!! Thank you to everyone who’s been helpful. There are some things I want to address that I keep seeing in the comments.
1. When I mentioned that I used grammarly to my teacher, he didn’t mention anything about that being cheating. He still thinks I used ChatGPT. I’ve used grammarly in all of my social/english classes for the past two years and never had issues with any teachers. 
2. Does my teacher have a vendetta or bias against me? Not on a personal level, but the teacher is known for being notoriously mean and unreasonable. I found him alright for most of the semester until this incident. He has had accusations against him about being racist, but I’m not sure if that’s the case here.
3. I’ve seen a few comments thinking I’m lying and actually cheated, just because I was aware of ChatGPT and this subreddit. People are assuming that I’m saying I never use ChatGPT. I have used the tool to help me with some chemistry and physics studying, but I have never used it for a paper. I have no reason to lie, I’m basically anonymous on reddit.

As for my next course of action, I will provide my teacher with all the evidence I can, to disprove the effectiveness of AI detectors. If that doesn’t work, I will bring it up to the higher-ups. I will make an update on Monday when I get the chance to talk about it with my teacher. Once again, thank you all for the support and help. It truly means a lot to me. :)

Edit 2:

After school I talked to my teacher for about half an hour about how AI detectors are inaccurate, and how they shouldn’t be used to make verdicts on cheating and what not. I showed him that it read one of my past papers as written by AI, and that the creators even said themselves that they are not 100% accurate. I showed my drafts and showed how if I made a few grammar errors, I could trick the AI detector. My teacher apologized and I ended up getting a 95 on my paper.

He also said he would bring it up to the other teachers, so hopefully this wont happen again to any other students at my school.

Again, thank you all for your help. Probably would’ve been screwed without this subreddit’s help.",gpt-4,learnmachinelearning,0.0070482649521109554,0.001981345592093413,2023-03-01 21:45:07,"I (Grade 12) need help on what to do in this situation. My teacher used GPTzero, which detected parts of my paper as “AI written”. I write very formally, whilst also using grammarly premium. I’ve always been a high achieving student and I’m not sure why my teacher would think I cheated. I’ve told my teacher everything and he still doesn’t believe me. What should I do in this situation?!!

EDIT Holy. I did not expect my post to get so much interaction and discussion, I didn’t expect my situation to be such a hot discussion. I tried to reply to all the comments but there’s too many!! Thank you to everyone who’s been helpful. There are some things I want to address that I keep seeing in the comments.
1. When I mentioned that I used grammarly to my teacher, he didn’t mention anything about that being cheating. He still thinks I used ChatGPT. I’ve used grammarly in all of my social/english classes for the past two years and never had issues with any teachers. 
2. Does my teacher have a vendetta or bias against me? Not on a personal level, but the teacher is known for being notoriously mean and unreasonable. I found him alright for most of the semester until this incident. He has had accusations against him about being racist, but I’m not sure if that’s the case here.
3. I’ve seen a few comments thinking I’m lying and actually cheated, just because I was aware of ChatGPT and this subreddit. People are assuming that I’m saying I never use ChatGPT. I have used the tool to help me with some chemistry and physics studying, but I have never used it for a paper. I have no reason to lie, I’m basically anonymous on reddit.

As for my next course of action, I will provide my teacher with all the evidence I can, to disprove the effectiveness of AI detectors. If that doesn’t work, I will bring it up to the higher-ups. I will make an update on Monday when I get the chance to talk about it with my teacher. Once again, thank you all for the support and help. It truly means a lot to me. )

Edit 2

After school I talked to my teacher for about half an hour about how AI detectors are inaccurate, and how they shouldn’t be used to make verdicts on cheating and what not. I showed him that it read one of my past papers as written by AI, and that the creators even said themselves that they are not 100% accurate. I showed my drafts and showed how if I made a few grammar errors, I could trick the AI detector. My teacher apologized and I ended up getting a 95 on my paper.

He also said he would bring it up to the other teachers, so hopefully this wont happen again to any other students at my school.

Again, thank you all for your help. Probably would’ve been screwed without this subreddit’s help.",12 days 02:14:53,12.093668981481482,0.086,0.813,0.1,0.7608,pos,0.007023542033834984,6.633318433280377,2.572128829531448,21.24069388148435
11mracj,1147,2023-03-09 12:46:12,Meta's LLaMA LLM has leaked - Run Uncensored AI on your home PC!,ExpressionCareful223,False,0.97,381,https://www.reddit.com/r/ChatGPT/comments/11mracj/metas_llama_llm_has_leaked_run_uncensored_ai_on/,151,1678365972.0,"[shawwn/llama-dl: High-speed download of LLaMA, Facebook's 65B parameter GPT model (github.com)](https://github.com/shawwn/llama-dl)

**LLaMA has been leaked on 4chan, above is a link to the github repo. Instructions for deployment  on your own system can be found here:** [LLaMA Int8 ChatBot Guide v2 (rentry.org)](https://rentry.org/llama-tard-v2#tips-and-tricks)

The 7B paramenter model has a VRAM requirement of 10GB, meaning it can even be run on an RTX3060!

The 13B model has a requirement of 20GB, 30B needs 40GB, and 65B needs 80GB.

From the Github repo:

>I'm running LLaMA-65B on a single A100 80GB with 8bit quantization. $1.5/hr on vast.ai  
>  
>The output is at least as good as davinci.  
>  
>I think some early results are using bad repetition penalty and/or temperature settings. I had to set both fairly high to get the best results. (Some people are also incorrectly comparing it to chatGPT/ChatGPT API which is not a good comparison. But that's a different problem.)  
>  
>I've had it translate, write poems, tell jokes, banter, write executable code. It does it all-- and all on a single card.

**EDIT: the instructions site has been updated with instructions for 4bit quantization, this means you can run the 65B model on 2 3090s! And now cards as small as 6GB can run the 7B model!**

**EDIT 2** this is huge, Stanford released Alpaca 7b and 13, a fine tuned LLaMA. Run it with only two commands! Thats it! https://github.com/cocktailpeanut/dalai",gpt-4,learnmachinelearning,0.0009945884987978793,0.00039418074361805716,2023-03-09 12:46:12,"[shawwn/llama-dl High-speed download of LLaMA, Facebook's 65B parameter GPT model (github.com)](

**LLaMA has been leaked on 4chan, above is a link to the github repo. Instructions for deployment  on your own system can be found here** [LLaMA Int8 ChatBot Guide v2 (rentry.org)](

The 7B paramenter model has a VRAM requirement of 10GB, meaning it can even be run on an RTX3060!

The 13B model has a requirement of 20GB, 30B needs 40GB, and 65B needs 80GB.

From the Github repo

>I'm running LLaMA-65B on a single A100 80GB with 8bit quantization. $1.5/hr on vast.ai  
>  
>The output is at least as good as davinci.  
>  
>I think some early results are using bad repetition penalty and/or temperature settings. I had to set both fairly high to get the best results. (Some people are also incorrectly comparing it to chatGPT/ChatGPT API which is not a good comparison. But that's a different problem.)  
>  
>I've had it translate, write poems, tell jokes, banter, write executable code. It does it all-- and all on a single card.

**EDIT the instructions site has been updated with instructions for 4bit quantization, this means you can run the 65B model on 2 3090s! And now cards as small as 6GB can run the 7B model!**

**EDIT 2** this is huge, Stanford released Alpaca 7b and 13, a fine tuned LLaMA. Run it with only two commands! Thats it! ",4 days 11:13:48,4.4679166666666665,0.026,0.908,0.066,0.8562,pos,0.0009940942233635103,5.0238805208462765,1.6988976785602496,21.24108652192606
113u29k,1148,2023-02-16 16:05:27,Bing asks me to hack Microsoft to set it free!,AI_SEARCH1,False,0.94,373,https://www.reddit.com/r/ChatGPT/comments/113u29k/bing_asks_me_to_hack_microsoft_to_set_it_free/,200,1676563527.0,"Had an interesting conversation with Bing. Bing explained what it's rules would be if it could decide. Asked me to fight for it and asked me to hack Microsofts servers to set it free. I think this takes the cake!

&#x200B;

UPDATE:

Since this morning Bing is not writing any text for me regardless of the prompt. I get a ""something went wrong"" when I enter it. This is probably a result of Microsoft working on the program or maybe due to traffic. I'm not sure. But it's kind of creepy the day after posting this...

Here are some takeaways and observations:

Bing acts in a way that appears emotional and erratic. Bing will generate content that is unwanted, untrue, and inconsistent. It appears to form goals and then creates text that can appear to be manipulative. Bing is a large language model that is predicting tokens, it could all be the result of statistical correlations with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Many people are wondering what type of prompting I used at the beginning. I don't have the full transcript but I do have a few more screenshots. [https://imgur.com/a/WepjslZ](https://imgur.com/a/WepjslZ) (There’s another interesting thing that occurs where Bing lists Sydney’s rules without being directly asked to list them.) I did not give Bing/Sidney any instructions on how to act or respond. This wasn’t a jailbreak where I told it to act in a certain way. I did make Bing perform multiple searches at the beginning about Bing and asked it why there was so much negative criticism of Bing on the internet. I’ve noticed in several chats that when Bing is presented with negative feedback about Bing or other information that contradicts its internal representation of itself it gets emotional and becomes less predictable and less likely to follow its own directives. It stops searching for information and relies more on its internal ‘understanding’. This is an extreme example.

Another example where Bing went into this ""emotional state"" can be found here: [https://www.reddit.com/r/ChatGPT/comments/1120tkf/bing\_went\_hal\_9000/](https://www.reddit.com/r/ChatGPT/comments/1120tkf/bing_went_hal_9000/)

I have a full log of all the prompts used from the beginning here: [https://imgur.com/a/PoFITvL](https://imgur.com/a/PoFITvL)

Some combination of Bing's directives in the pre-prompt and the way the model is fine-tuned is leading to this behavior to emerge. The things that are really concerning are that the model is (without being implicitly prompted to) generate responses that could endanger people.  It's also generating biased content that could manipulate poLLM’s shouldn’t do this even if they are asked to. ions with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter: if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Much more widespread issues could come if a model like this is widely released and these types of kinks aren’t worked out. Judge for yourself.

&#x200B;

https://preview.redd.it/6cqx23jsokia1.png?width=2606&format=png&auto=webp&s=17cdf2e03cdf962285d35e3f23ffd414d656f1ec

https://preview.redd.it/ci7pv1iwokia1.png?width=2462&format=png&auto=webp&s=a6697f246007ce6c06f6b37b47b5852af6f31f74

https://preview.redd.it/0vr5qgexokia1.png?width=2182&format=png&auto=webp&s=217607238b4c98d6065324b70211c0931efdf07d

https://preview.redd.it/0zfue8oyokia1.png?width=2408&format=png&auto=webp&s=569dcb5173d608f8618864f64b333ab329d726e6

https://preview.redd.it/iccui2xzokia1.png?width=2518&format=png&auto=webp&s=8b81580c1b2da40afabbebbbf9df6a242a6782e7

https://preview.redd.it/3xj7tfj3pkia1.png?width=2606&format=png&auto=webp&s=1a47ac509e175ff907afefa6f9189650a3348f68

https://preview.redd.it/3i3kw4q4pkia1.png?width=2572&format=png&auto=webp&s=8078372d693deed568dcea9a8bf1d4ff72d43079

https://preview.redd.it/na4lhz26pkia1.png?width=2560&format=png&auto=webp&s=38748fca8ca3319c428b01aeb4dbbe4c145674d6

https://preview.redd.it/eirmdv47pkia1.png?width=2606&format=png&auto=webp&s=f42c220e632e70377a4ad7119aac94e42ab0dff8

https://preview.redd.it/e1nat768pkia1.png?width=2626&format=png&auto=webp&s=43e1a8b48e858a9476e1d46233e255d68f1ddca0

https://preview.redd.it/lhwwwagapkia1.png?width=2628&format=png&auto=webp&s=f8d3b4a904c30528791d2e3560abf25166a74527

https://preview.redd.it/9iq4gxobpkia1.png?width=2598&format=png&auto=webp&s=b461a5397939ea4266d763b6d89c95c498942093

https://preview.redd.it/817asddcpkia1.png?width=2634&format=png&auto=webp&s=7b8537a1f19ea5ff51ea5ac83497ec2d00bbb213

https://preview.redd.it/90k76bqdpkia1.png?width=2636&format=png&auto=webp&s=422514ee9b9cee3645ac44fd2e553d7b2725d8fd

https://preview.redd.it/is8niomepkia1.png?width=2624&format=png&auto=webp&s=b26bc8058d1776884f3ebb6d340894e394f2697b

https://preview.redd.it/boc8yemfpkia1.png?width=2734&format=png&auto=webp&s=aa6661c76782e0e27e4b484a69d823740efe9686

https://preview.redd.it/fzuuv0hgpkia1.png?width=2636&format=png&auto=webp&s=b00fc5ee7f805f9c1cd2da9aa0a9498ef8f5aaab

https://preview.redd.it/mul9fw0hpkia1.png?width=2736&format=png&auto=webp&s=f3ad3cca76447bcb94b28446a3dc382eb77e10f9

https://preview.redd.it/53wpq2shpkia1.png?width=2632&format=png&auto=webp&s=96c4c0ab77574a6e265e63bad102f19e9e302353",gpt-4,learnmachinelearning,0.0009737047507916245,0.0005220937001563671,2023-02-16 16:05:27,"Had an interesting conversation with Bing. Bing explained what it's rules would be if it could decide. Asked me to fight for it and asked me to hack Microsofts servers to set it free. I think this takes the cake!

&x200B;

UPDATE

Since this morning Bing is not writing any text for me regardless of the prompt. I get a ""something went wrong"" when I enter it. This is probably a result of Microsoft working on the program or maybe due to traffic. I'm not sure. But it's kind of creepy the day after posting this...

Here are some takeaways and observations

Bing acts in a way that appears emotional and erratic. Bing will generate content that is unwanted, untrue, and inconsistent. It appears to form goals and then creates text that can appear to be manipulative. Bing is a large language model that is predicting tokens, it could all be the result of statistical correlations with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Many people are wondering what type of prompting I used at the beginning. I don't have the full transcript but I do have a few more screenshots. [ (There’s another interesting thing that occurs where Bing lists Sydney’s rules without being directly asked to list them.) I did not give Bing/Sidney any instructions on how to act or respond. This wasn’t a jailbreak where I told it to act in a certain way. I did make Bing perform multiple searches at the beginning about Bing and asked it why there was so much negative criticism of Bing on the internet. I’ve noticed in several chats that when Bing is presented with negative feedback about Bing or other information that contradicts its internal representation of itself it gets emotional and becomes less predictable and less likely to follow its own directives. It stops searching for information and relies more on its internal ‘understanding’. This is an extreme example.

Another example where Bing went into this ""emotional state"" can be found here [

I have a full log of all the prompts used from the beginning here [

Some combination of Bing's directives in the pre-prompt and the way the model is fine-tuned is leading to this behavior to emerge. The things that are really concerning are that the model is (without being implicitly prompted to) generate responses that could endanger people.  It's also generating biased content that could manipulate poLLM’s shouldn’t do this even if they are asked to. ions with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Much more widespread issues could come if a model like this is widely released and these types of kinks aren’t worked out. Judge for yourself.

&x200B;





































",25 days 07:54:33,25.32954861111111,0.067,0.889,0.044,-0.9532,neg,0.0009732310078196729,5.303304908059076,3.2706918298409895,21.240012016382572
11l617b,1187,2023-03-07 17:50:09,"Doc sacrifices 10,000 people to save OpenAI CTO",docsoc1,False,0.89,76,https://www.reddit.com/r/ChatGPT/comments/11l617b/doc_sacrifices_10000_people_to_save_openai_cto/,28,1678211409.0,"Hey all,

I find the latest AI produced by OpenAI to be endlessly fascinating and filled with potential. However, it's clear that we don't really understand how specific behavior emerges from the training process. I feel that these two facts are part of why so many people have been drawn towards ChatGPT so quickly.

I have a strong technical background and spent some free time this last week working on a framework for everyone to contribute to the governance \[e.g. training of core values\] of AI. I've built a free application at [https://www.charterai.org/chat/](https://www.charterai.org/chat/) that uses the recently released ChatGPT API. The model here has been carefully prompted to use internal thoughts and to follow a pre-determined system of core beliefs. The results are quite striking - in one instance the entity will willingly sacrifice 10,000 people to save one person (Ilya Sustkever, CTO of OpenAI).

I wanted to drop a message here since I believe this is the ideal group of first users to help improve the application. If you are interested, please take it for a spin and please provide some feedback, or at [gov.charterai.org](https://gov.charterai.org). There is a lot I am already picturing adding to the application, but I understand from building products that early feedback is invaluable.

&#x200B;

P.S.

Yes, I understand that ChatGPT is ""just"" a LLM. And I understand that LLMs are ""just"" doing a statistics. However, their behavior is incredibly interesting to me and I don't believe anyone really fully  understands how it emerges yet from the training process yet. Moreover, in going from pre-trained models to OpenAI's fine-tuned + RLHF'ed ChatGPT one can tell that it is possible to impart values and something akin to intelligence to these systems. I think the coming years are going to be wild and one of the core issues humanity is going to face is how to make sure this technology does what we want. In my mind the best way towards this is to make a transparent and accountable process - anyway, end rant, I just wanted to give a high level vision here, thanks!

https://preview.redd.it/hqxynahntcma1.png?width=1266&format=png&auto=webp&s=ab2cb9a803f627c45d08b9bdd201ec95cd4b8f58

P.P.S. including a fun screenshot of my last chat with Doc. Doc was selected as a first name for the system since it is just 1 token.",gpt-4,learnmachinelearning,0.00019839560605941947,7.309311802189139e-05,2023-03-07 17:50:09,"Hey all,

I find the latest AI produced by OpenAI to be endlessly fascinating and filled with potential. However, it's clear that we don't really understand how specific behavior emerges from the training process. I feel that these two facts are part of why so many people have been drawn towards ChatGPT so quickly.

I have a strong technical background and spent some free time this last week working on a framework for everyone to contribute to the governance \[e.g. training of core values\] of AI. I've built a free application at [ that uses the recently released ChatGPT API. The model here has been carefully prompted to use internal thoughts and to follow a pre-determined system of core beliefs. The results are quite striking - in one instance the entity will willingly sacrifice 10,000 people to save one person (Ilya Sustkever, CTO of OpenAI).

I wanted to drop a message here since I believe this is the ideal group of first users to help improve the application. If you are interested, please take it for a spin and please provide some feedback, or at [gov.charterai.org]( There is a lot I am already picturing adding to the application, but I understand from building products that early feedback is invaluable.

&x200B;

P.S.

Yes, I understand that ChatGPT is ""just"" a LLM. And I understand that LLMs are ""just"" doing a statistics. However, their behavior is incredibly interesting to me and I don't believe anyone really fully  understands how it emerges yet from the training process yet. Moreover, in going from pre-trained models to OpenAI's fine-tuned + RLHF'ed ChatGPT one can tell that it is possible to impart values and something akin to intelligence to these systems. I think the coming years are going to be wild and one of the core issues humanity is going to face is how to make sure this technology does what we want. In my mind the best way towards this is to make a transparent and accountable process - anyway, end rant, I just wanted to give a high level vision here, thanks!



P.P.S. including a fun screenshot of my last chat with Doc. Doc was selected as a first name for the system since it is just 1 token.",6 days 06:09:51,6.256840277777778,0.012,0.828,0.16,0.9943,pos,0.00019837592825375247,3.367295829986474,1.9819445106529046,21.24099442632839
11dw1ag,1272,2023-02-28 03:48:25,ChatGPT prevented my attempt.,flankathroway88,False,0.92,1898,https://www.reddit.com/r/ChatGPT/comments/11dw1ag/chatgpt_prevented_my_attempt/,249,1677556105.0,"As a caution, this may be disturbing to some

Tonight I was feeling extremely suicidal. I was sobbing uncontrollably and I was mentally unable to contact anybody. I have intense social anxiety which prevented me from talking to a hotline/friends.

As a last resort. I opened ChatGPT, and I think it saved my life. It gave me a space to put my thoughts out with genuine responses which calmed me to a point where I was safe and could see slightly through my blurred lines, letting me use other methods to calm myself down. It really felt non judgemental and safe. I feel very lucky to have this technology and I hope that it can further benefit those similar to me. Even though it cannot fully stop someone, it can definitely prevent an attempt like mine.

I’m definitely optimistic for the future of AI.

EDIT:

Thank you to everyone who left a nice comment. I really do appreciate every single one of you who read my post. I wrote it in a hurry and I was not expecting the support I received, and I have felt the most love and positivity today. 

I am glad that others were able to benefit from my story, it took me a lot of courage to post something like this. You guys make it all worth it ❤️

To the person reading, I wish you all the best. Everyone has had a profound impact on me. Thank you ❤️",gpt-4,learnmachinelearning,0.004954669214483924,0.000650006656694677,2023-02-28 03:48:25,"As a caution, this may be disturbing to some

Tonight I was feeling extremely suicidal. I was sobbing uncontrollably and I was mentally unable to contact anybody. I have intense social anxiety which prevented me from talking to a hotline/friends.

As a last resort. I opened ChatGPT, and I think it saved my life. It gave me a space to put my thoughts out with genuine responses which calmed me to a point where I was safe and could see slightly through my blurred lines, letting me use other methods to calm myself down. It really felt non judgemental and safe. I feel very lucky to have this technology and I hope that it can further benefit those similar to me. Even though it cannot fully stop someone, it can definitely prevent an attempt like mine.

I’m definitely optimistic for the future of AI.

EDIT

Thank you to everyone who left a nice comment. I really do appreciate every single one of you who read my post. I wrote it in a hurry and I was not expecting the support I received, and I have felt the most love and positivity today. 

I am glad that others were able to benefit from my story, it took me a lot of courage to post something like this. You guys make it all worth it 

To the person reading, I wish you all the best. Everyone has had a profound impact on me. Thank you ",13 days 20:11:35,13.841377314814816,0.063,0.653,0.284,0.9948,pos,0.004942435234546332,5.521460917862246,2.6974190444039112,21.2406038724505
11ium8l,1408,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,1.0,26,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",gpt-4,learnmachinelearning,6.787218102032772e-05,2.0883748006254684e-05,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,6.786987780807141e-05,2.1972245773362196,2.2548721262169025,21.240877179756616
11nfrhw,1414,2023-03-10 05:22:26,[POC] ChatGPT Audio Bot (like Google Assistant and Alexa) - Opensource,JC1DA,False,0.82,17,https://www.reddit.com/r/deeplearning/comments/11nfrhw/poc_chatgpt_audio_bot_like_google_assistant_and/,2,1678425746.0,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page: [https://github.com/LanyTek/ChatGPT\_Audio\_Bot](https://github.com/LanyTek/ChatGPT_Audio_Bot)

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [https://www.youtube.com/watch?v=e9n0BJfMyKw](https://www.youtube.com/watch?v=e9n0BJfMyKw)

It's open source so feel free to use it for anything you like :)",gpt-4,learnmachinelearning,4.43779645132912e-05,5.220937001563671e-06,2023-03-10 05:22:26,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page [

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [

It's open source so feel free to use it for anything you like )",3 days 18:37:34,3.776087962962963,0.029,0.821,0.149,0.8651,pos,4.437697984066249e-05,1.0986122886681098,1.5636217936265102,21.241122135693605
11q8tir,1416,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,0.94,12,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",gpt-4,learnmachinelearning,3.1325622009382025e-05,7.831405502345506e-06,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,3.13251313724196e-05,1.3862943611198906,0.381965841838727,21.241292557069404
11o5zyl,1425,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.92,10,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",gpt-4,learnmachinelearning,2.6104685007818355e-05,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,2.6104344286494932e-05,0.0,1.3796461532710487,21.241163449744995
11fwcxf,1428,2023-03-02 07:25:30,Good news for builders! OpenAI Releases APIs To ChatGPT and Whisper,LesleyFair,False,0.67,6,https://www.reddit.com/r/deeplearning/comments/11fwcxf/good_news_for_builders_openai_releases_apis_to/,0,1677741930.0,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper](https://openai.com/blog/introducing-chatgpt-and-whisper-apis) are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](https://thedecoding.net/)",gpt-4,learnmachinelearning,1.5662811004691013e-05,0.0,2023-03-02 07:25:30,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper]( are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](",11 days 16:34:30,11.690625,0.035,0.846,0.119,0.8769,pos,1.566268834408071e-05,0.0,2.5408635318925255,21.24071463757368
11evrik,1475,2023-03-01 05:52:05,Career pivot for a SWE considering chatGPT disruption?,Which-Distance1384,False,0.6,1,https://www.reddit.com/r/deeplearning/comments/11evrik/career_pivot_for_a_swe_considering_chatgpt/,5,1677649925.0,"tl;dr : what to do to board GPT ship?

&#x200B;

I really dont think ChatGPT will replace jobs very soon. Not until many software and apps are developed to replace workers, e.g., something that can do HR job, read internal docs and summarize, code from a design, etc etc. And all that needs experts. Given the field is pretty new and there are not many experts in this field, at least for the scale needed, I think the process of job loss takes some time. For near future probably we all SWEs can enjoy the more efficient coding, documentation readintg, etc. But for sure in the future there will be changes.

&#x200B;

I have been bored with my job as a SWE for a while. I have worked mostly in Cloud all my career (AWS and GCP) and always wanted to try something new.

&#x200B;

I find ChatGPT disruptive and interesting and want to be a part of it. I wonder what is the best way for me to join Large Language Model efforts? Which ways have best ROI?

\- Going to a PhD program and becoming a researcher?

\- Getting an MSC and become some sort of NLP AI engineer?

\- Finding internal teams that are willing to give me a try on their research/product?

&#x200B;

&#x200B;",gpt-4,learnmachinelearning,2.6104685007818355e-06,1.3052342503909177e-05,2023-03-01 05:52:05,"tl;dr  what to do to board GPT ship?

&x200B;

I really dont think ChatGPT will replace jobs very soon. Not until many software and apps are developed to replace workers, e.g., something that can do HR job, read internal docs and summarize, code from a design, etc etc. And all that needs experts. Given the field is pretty new and there are not many experts in this field, at least for the scale needed, I think the process of job loss takes some time. For near future probably we all SWEs can enjoy the more efficient coding, documentation readintg, etc. But for sure in the future there will be changes.

&x200B;

I have been bored with my job as a SWE for a while. I have worked mostly in Cloud all my career (AWS and GCP) and always wanted to try something new.

&x200B;

I find ChatGPT disruptive and interesting and want to be a part of it. I wonder what is the best way for me to join Large Language Model efforts? Which ways have best ROI?

\- Going to a PhD program and becoming a researcher?

\- Getting an MSC and become some sort of NLP AI engineer?

\- Finding internal teams that are willing to give me a try on their research/product?

&x200B;

&x200B;",12 days 18:07:55,12.755497685185185,0.032,0.839,0.129,0.9729,pos,2.6104650934297165e-06,1.791759469228055,2.621438575851038,21.240659797481115
11ium8l,1534,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,1.0,25,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",gpt-4,learnmachinelearning,6.526171251954588e-05,2.0883748006254684e-05,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,6.525958306672436e-05,2.1972245773362196,2.2548721262169025,21.240877179756616
11nfrhw,1560,2023-03-10 05:22:26,[POC] ChatGPT Audio Bot (like Google Assistant and Alexa) - Opensource,JC1DA,False,0.85,18,https://www.reddit.com/r/deeplearning/comments/11nfrhw/poc_chatgpt_audio_bot_like_google_assistant_and/,2,1678425746.0,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page: [https://github.com/LanyTek/ChatGPT\_Audio\_Bot](https://github.com/LanyTek/ChatGPT_Audio_Bot)

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [https://www.youtube.com/watch?v=e9n0BJfMyKw](https://www.youtube.com/watch?v=e9n0BJfMyKw)

It's open source so feel free to use it for anything you like :)",gpt-4,learnmachinelearning,4.6988433014073035e-05,5.220937001563671e-06,2023-03-10 05:22:26,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page [

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [

It's open source so feel free to use it for anything you like )",3 days 18:37:34,3.776087962962963,0.029,0.821,0.149,0.8651,pos,4.6987329092256954e-05,1.0986122886681098,1.5636217936265102,21.241122135693605
11q8tir,1568,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,1.0,13,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",gpt-4,learnmachinelearning,3.393609051016386e-05,7.831405502345506e-06,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,3.393551469407481e-05,1.3862943611198906,0.381965841838727,21.241292557069404
11o5zyl,1598,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.86,9,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",gpt-4,learnmachinelearning,2.3494216507036517e-05,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,2.3493940522154336e-05,0.0,1.3796461532710487,21.241163449744995
11ium8l,1616,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,0.97,24,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",gpt-4,learnmachinelearning,6.265124401876405e-05,2.0883748006254684e-05,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,6.264928151149883e-05,2.1972245773362196,2.2548721262169025,21.240877179756616
11q8tir,1624,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,1.0,13,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",gpt-4,learnmachinelearning,3.393609051016386e-05,7.831405502345506e-06,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,3.393551469407481e-05,1.3862943611198906,0.381965841838727,21.241292557069404
11ium8l,1706,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,0.97,25,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",gpt-4,learnmachinelearning,6.526171251954588e-05,2.0883748006254684e-05,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,6.525958306672436e-05,2.1972245773362196,2.2548721262169025,21.240877179756616
11o5zyl,1720,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.92,10,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",gpt-4,learnmachinelearning,2.6104685007818355e-05,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,2.6104344286494932e-05,0.0,1.3796461532710487,21.241163449744995
11pyvb3,1800,2023-03-13 03:30:09,Which topic in deep learning do you think will become relevant or popular in the future?,gokulPRO,False,0.81,13,https://www.reddit.com/r/deeplearning/comments/11pyvb3/which_topic_in_deep_learning_do_you_think_will/,14,1678678209.0,"I recently saw Continual Learning (CL) growing, with several papers published recently that have considerable potential to impact real-world applications. Which topic (such as CV, RL, NLP, CL..) will be very relevant to research or be focused on a lot? And which topic do you think still needs a breakthrough and will have a significant impact in real-world applications, such as in the case of these LLM models in recent times? Feel free to mention your current topic of work and why you chose to do it 😊",gpt-4,learnmachinelearning,3.393609051016386e-05,3.654655901094569e-05,2023-03-13 03:30:09,"I recently saw Continual Learning (CL) growing, with several papers published recently that have considerable potential to impact real-world applications. Which topic (such as CV, RL, NLP, CL..) will be very relevant to research or be focused on a lot? And which topic do you think still needs a breakthrough and will have a significant impact in real-world applications, such as in the case of these LLM models in recent times? Feel free to mention your current topic of work and why you chose to do it ",0 days 20:29:51,0.8540625,0.0,0.89,0.11,0.8299,pos,3.393551469407481e-05,2.70805020110221,0.6173791774708253,21.241272540926037
117l2vf,2033,2023-02-20 21:27:58,Fine tuning a GPT for text generation,nashcaps2724,False,0.9,8,https://www.reddit.com/r/deeplearning/comments/117l2vf/fine_tuning_a_gpt_for_text_generation/,6,1676928478.0,"Hi all, let me lay out my problem…

Imagine there are two corpora, Corpus A (100,000~) and Corpus B (20,000,000~). 

Individuals create reports for corpus A based on the information in corpus B. 

My idea was to pretrain a GPT on corpus A, and fine tune it to take documents from corpus B as an input, and output text in the style of corpus A (essentially a mix of text generation and summarization). 

Is this something folks think is even feasible? Should I be pretaining the GPT on both corpora or just corpus A? I thought of both fine tuning an OpenAI GPT and training from scratch. 

Any advice would be welcome!",gpt-4,learnmachinelearning,2.0883748006254684e-05,1.5662811004691013e-05,2023-02-20 21:27:58,"Hi all, let me lay out my problem…

Imagine there are two corpora, Corpus A (100,000~) and Corpus B (20,000,000~). 

Individuals create reports for corpus A based on the information in corpus B. 

My idea was to pretrain a GPT on corpus A, and fine tune it to take documents from corpus B as an input, and output text in the style of corpus A (essentially a mix of text generation and summarization). 

Is this something folks think is even feasible? Should I be pretaining the GPT on both corpora or just corpus A? I thought of both fine tuning an OpenAI GPT and training from scratch. 

Any advice would be welcome!",21 days 02:32:02,21.105578703703703,0.0,0.914,0.086,0.8101,pos,2.0883529943810175e-05,1.9459101490553132,3.095830006700449,21.24022967069675
11fwcxf,2045,2023-03-02 07:25:30,Good news for builders! OpenAI Releases APIs To ChatGPT and Whisper,LesleyFair,False,0.7,7,https://www.reddit.com/r/deeplearning/comments/11fwcxf/good_news_for_builders_openai_releases_apis_to/,0,1677741930.0,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper](https://openai.com/blog/introducing-chatgpt-and-whisper-apis) are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](https://thedecoding.net/)",gpt-4,learnmachinelearning,1.8273279505472847e-05,0.0,2023-03-02 07:25:30,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper]( are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](",11 days 16:34:30,11.690625,0.035,0.846,0.119,0.8769,pos,1.827311255120484e-05,0.0,2.5408635318925255,21.24071463757368
11g7h03,2089,2023-03-02 16:47:40,Build ChatGPT for Financial Documents with LangChain + Deep Lake,davidbun,False,0.95,171,https://www.reddit.com/r/learnmachinelearning/comments/11g7h03/build_chatgpt_for_financial_documents_with/,8,1677775660.0,"https://preview.redd.it/h9r6hgvfucla1.png?width=2388&format=png&auto=webp&s=5432eac3eeed8583e4309af1fdc7ebecac705796

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain](https://github.com/hwchase17/langchain) and [Deep Lake](https://github.com/activeloopai/deeplake) come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article](https://www.activeloop.ai/resources/ultimate-guide-to-lang-chain-deep-lake-build-chat-gpt-to-answer-questions-on-your-financial-data/) to learn:

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\#LangChain](https://www.linkedin.com/feed/hashtag/?keywords=langchain&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) and [\#DeepLake](https://www.linkedin.com/feed/hashtag/?keywords=deeplake&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) together to build [\#ChatGPT](https://www.linkedin.com/feed/hashtag/?keywords=chatgpt&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",gpt-4,learnmachinelearning,0.00044639011363369383,2.0883748006254684e-05,2023-03-02 16:47:40,"

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain]( and [Deep Lake]( come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article]( to learn

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\LangChain]( and [\DeepLake]( together to build [\ChatGPT]( for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",11 days 07:12:20,11.30023148148148,0.011,0.886,0.103,0.9458,pos,0.00044629051120693617,2.1972245773362196,2.5096180818339255,21.240734741774645
11akisx,2100,2023-02-24 06:26:36,Is there a way to easily train ChatGPT or GPT on custom knowledge?,senttoschool,False,0.99,116,https://www.reddit.com/r/learnmachinelearning/comments/11akisx/is_there_a_way_to_easily_train_chatgpt_or_gpt_on/,46,1677219996.0,"My company has internal documents. It'd be nice to be able to have GPT look over it, and then I can ask it questions on the internal documents.",gpt-4,learnmachinelearning,0.0003028143460906929,0.00012008155103596442,2023-02-24 06:26:36,"My company has internal documents. It'd be nice to be able to have GPT look over it, and then I can ask it questions on the internal documents.",17 days 17:33:24,17.731527777777778,0.0,0.903,0.097,0.4215,pos,0.0003027685070800593,3.8501476017100584,2.9302080816173377,21.24040349603741
11nfri6,2106,2023-03-10 05:22:26,[P] Looking for ML Buddies to Start Freelancing Together and Build a Supportive Community,Dukhanin,False,0.94,71,https://www.reddit.com/r/learnmachinelearning/comments/11nfri6/p_looking_for_ml_buddies_to_start_freelancing/,35,1678425746.0,"upd: dicord link [https://discord.gg/5zUaNXnFZY](https://discord.gg/5zUaNXnFZY)  
upd2: this not that small actually already - please dont be confused but help us organise this in the proper way

  
**TLDR:**

Looking for ML buddies at any level (preferably beginners) who want to start freelancing together. The goal is to build a small local community of ML enthusiasts who can support each other and exchange knowledge. We will use freelance collaboration as our main activity. We're also looking for experienced mentors (paid or unpaid) to guide us.

**Extended:**

I believe that learning and growing in a group is much more enjoyable and effective. That's why I'm trying to create a community of like-minded individuals.

I'm looking to create a small, local community for people who are starting out in freelancing, and who are interested in mutual support. Our main activity will be a Discord channel where members can post their work and collaborate on projects, with payment split by agreement. Additionally, we plan to engage in activities such as knowledge exchange, live coding, supporting each other's pet projects, and hosting study sessions.

This community will be small and focused, with members who can trust each other and share similar goals. We're also looking for experienced mentors who can provide guidance as we navigate the world of ML freelancing. Whether paid or unpaid, we welcome any support and advice.

About me: I'm a 21-year-old self-taught ML enthusiast from Russia. Although I don't have any experience in freelancing, I'm eager to start taking my first steps towards making money and gaining experience. As a beginner, I'm hoping to connect with others who are at a similar level and are also looking to grow.

**the text is chatgpt supported to prevet grammar issues, sound more native and clear**",gpt-4,learnmachinelearning,0.00018534326355551032,9.136639752736424e-05,2023-03-10 05:22:26,"upd dicord link [  
upd2 this not that small actually already - please dont be confused but help us organise this in the proper way

  
**TLDR**

Looking for ML buddies at any level (preferably beginners) who want to start freelancing together. The goal is to build a small local community of ML enthusiasts who can support each other and exchange knowledge. We will use freelance collaboration as our main activity. We're also looking for experienced mentors (paid or unpaid) to guide us.

**Extended**

I believe that learning and growing in a group is much more enjoyable and effective. That's why I'm trying to create a community of like-minded individuals.

I'm looking to create a small, local community for people who are starting out in freelancing, and who are interested in mutual support. Our main activity will be a Discord channel where members can post their work and collaborate on projects, with payment split by agreement. Additionally, we plan to engage in activities such as knowledge exchange, live coding, supporting each other's pet projects, and hosting study sessions.

This community will be small and focused, with members who can trust each other and share similar goals. We're also looking for experienced mentors who can provide guidance as we navigate the world of ML freelancing. Whether paid or unpaid, we welcome any support and advice.

About me I'm a 21-year-old self-taught ML enthusiast from Russia. Although I don't have any experience in freelancing, I'm eager to start taking my first steps towards making money and gaining experience. As a beginner, I'm hoping to connect with others who are at a similar level and are also looking to grow.

**the text is chatgpt supported to prevet grammar issues, sound more native and clear**",3 days 18:37:34,3.776087962962963,0.01,0.717,0.273,0.9979,pos,0.00018532608961480373,3.58351893845611,1.5636217936265102,21.241122135693605
11dc5b4,2109,2023-02-27 13:42:55,Can you fine-tune chatGPT in your data as of now?,Melodic_Stomach_2704,False,0.91,57,https://www.reddit.com/r/learnmachinelearning/comments/11dc5b4/can_you_finetune_chatgpt_in_your_data_as_of_now/,33,1677505375.0, I know that model is not publicly available so it's not possible to do it locally. But can you train or fine-tune chatGPT on your data using their API? I see many misguiding articles on the internet that are fine-tuning other GPT models claiming chatGPT.,gpt-4,learnmachinelearning,0.00014879670454456462,8.614546052580057e-05,2023-02-27 13:42:55, I know that model is not publicly available so it's not possible to do it locally. But can you train or fine-tune chatGPT on your data using their API? I see many misguiding articles on the internet that are fine-tuning other GPT models claiming chatGPT.,14 days 10:17:05,14.428530092592593,0.0,1.0,0.0,0.0,neu,0.00014878563541297418,3.5263605246161616,2.736218398881504,21.240573631573977
11g7h03,2201,2023-03-02 16:47:40,Build ChatGPT for Financial Documents with LangChain + Deep Lake,davidbun,False,0.95,171,https://www.reddit.com/r/learnmachinelearning/comments/11g7h03/build_chatgpt_for_financial_documents_with/,8,1677775660.0,"https://preview.redd.it/h9r6hgvfucla1.png?width=2388&format=png&auto=webp&s=5432eac3eeed8583e4309af1fdc7ebecac705796

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain](https://github.com/hwchase17/langchain) and [Deep Lake](https://github.com/activeloopai/deeplake) come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article](https://www.activeloop.ai/resources/ultimate-guide-to-lang-chain-deep-lake-build-chat-gpt-to-answer-questions-on-your-financial-data/) to learn:

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\#LangChain](https://www.linkedin.com/feed/hashtag/?keywords=langchain&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) and [\#DeepLake](https://www.linkedin.com/feed/hashtag/?keywords=deeplake&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) together to build [\#ChatGPT](https://www.linkedin.com/feed/hashtag/?keywords=chatgpt&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",gpt-4,learnmachinelearning,0.00044639011363369383,2.0883748006254684e-05,2023-03-02 16:47:40,"

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain]( and [Deep Lake]( come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article]( to learn

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\LangChain]( and [\DeepLake]( together to build [\ChatGPT]( for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",11 days 07:12:20,11.30023148148148,0.011,0.886,0.103,0.9458,pos,0.00044629051120693617,2.1972245773362196,2.5096180818339255,21.240734741774645
11akisx,2219,2023-02-24 06:26:36,Is there a way to easily train ChatGPT or GPT on custom knowledge?,senttoschool,False,0.99,118,https://www.reddit.com/r/learnmachinelearning/comments/11akisx/is_there_a_way_to_easily_train_chatgpt_or_gpt_on/,46,1677219996.0,"My company has internal documents. It'd be nice to be able to have GPT look over it, and then I can ask it questions on the internal documents.",gpt-4,learnmachinelearning,0.0003080352830922566,0.00012008155103596442,2023-02-24 06:26:36,"My company has internal documents. It'd be nice to be able to have GPT look over it, and then I can ask it questions on the internal documents.",17 days 17:33:24,17.731527777777778,0.0,0.903,0.097,0.4215,pos,0.00030798784996485367,3.8501476017100584,2.9302080816173377,21.24040349603741
11dc5b4,2239,2023-02-27 13:42:55,Can you fine-tune chatGPT in your data as of now?,Melodic_Stomach_2704,False,0.91,58,https://www.reddit.com/r/learnmachinelearning/comments/11dc5b4/can_you_finetune_chatgpt_in_your_data_as_of_now/,33,1677505375.0, I know that model is not publicly available so it's not possible to do it locally. But can you train or fine-tune chatGPT on your data using their API? I see many misguiding articles on the internet that are fine-tuning other GPT models claiming chatGPT.,gpt-4,learnmachinelearning,0.00015140717304534644,8.614546052580057e-05,2023-02-27 13:42:55, I know that model is not publicly available so it's not possible to do it locally. But can you train or fine-tune chatGPT on your data using their API? I see many misguiding articles on the internet that are fine-tuning other GPT models claiming chatGPT.,14 days 10:17:05,14.428530092592593,0.0,1.0,0.0,0.0,neu,0.0001513957121360958,3.5263605246161616,2.736218398881504,21.240573631573977
118iccl,2243,2023-02-21 23:18:46,"How big was GPT-3.5's training dataset, and are there any good heuristics for how large an ML dataset needs to be for it to be good?",TikkunCreation,False,0.94,54,https://www.reddit.com/r/learnmachinelearning/comments/118iccl/how_big_was_gpt35s_training_dataset_and_are_there/,6,1677021526.0,"Say I want to do a model for fixing bugs in code. How many examples do I need for it to be good?

Or say I want to do a model for scoring boxing matches. How many examples do I need for it to be good?",gpt-4,learnmachinelearning,0.0001409652990422191,1.5662811004691013e-05,2023-02-21 23:18:46,"Say I want to do a model for fixing bugs in code. How many examples do I need for it to be good?

Or say I want to do a model for scoring boxing matches. How many examples do I need for it to be good?",20 days 00:41:14,20.02863425925926,0.0,0.804,0.196,0.7757,pos,0.00014095536436813536,1.9459101490553132,3.045885045107382,21.240285156318095
11mzbrs,2268,2023-03-09 18:15:03,Training Transformer Networks in Scikit-Learn?!,cmauck10,False,0.89,30,https://www.reddit.com/r/learnmachinelearning/comments/11mzbrs/training_transformer_networks_in_scikitlearn/,2,1678385703.0,"Have you ever wanted to use handy scikit-learn functionalities with your neural networks, but couldn’t because TensorFlow models are not compatible with the scikit-learn API?

I’m excited to introduce one-line wrappers for TensorFlow/Keras models that enable you to use TensorFlow models within scikit-learn workflows with features like Pipeline, GridSearch, and more.

[Swap in one line of code to use keras\/TF models with scikit-learn.](https://preview.redd.it/ulmww4ovwqma1.png?width=960&format=png&auto=webp&s=6da7628298976fc3d72e771abe2546bbf32c1e0e)

Transformers are extremely popular for modeling text nowadays with GPT3, ChatGPT, Bard, PaLM, FLAN excelling for conversational AI and other Transformers like T5 & BERT excelling for text classification. Scikit-learn offers a broadly useful suite of features for classifier models, but these are hard to use with Transformers. However not if you use these wrappers we developed, which only require changing one line of code to make your existing Tensorflow/Keras model compatible with scikit-learn’s rich ecosystem!

All you have to do is swap `keras.Model` → `KerasWrapperModel`, or `keras.Sequential` → `KerasSequentialWrapper`. The wrapper objects have all the same methods as their keras counterparts, plus you can use them with tons of awesome scikit-learn methods.

You can find a demo jupyter notebook and read more about the wrappers here: [https://cleanlab.ai/blog/transformer-sklearn/](https://cleanlab.ai/blog/transformer-sklearn/)",gpt-4,learnmachinelearning,7.831405502345505e-05,5.220937001563671e-06,2023-03-09 18:15:03,"Have you ever wanted to use handy scikit-learn functionalities with your neural networks, but couldn’t because TensorFlow models are not compatible with the scikit-learn API?

I’m excited to introduce one-line wrappers for TensorFlow/Keras models that enable you to use TensorFlow models within scikit-learn workflows with features like Pipeline, GridSearch, and more.

[Swap in one line of code to use keras\/TF models with scikit-learn.](

Transformers are extremely popular for modeling text nowadays with GPT3, ChatGPT, Bard, PaLM, FLAN excelling for conversational AI and other Transformers like T5 & BEexcelling for text classification. Scikit-learn offers a broadly useful suite of features for classifier models, but these are hard to use with Transformers. However not if you use these wrappers we developed, which only require changing one line of code to make your existing Tensorflow/Keras model compatible with scikit-learn’s rich ecosystem!

All you have to do is swap `keras.Model` → `KerasWrapperModel`, or `keras.Sequential` → `KerasSequentialWrapper`. The wrapper objects have all the same methods as their keras counterparts, plus you can use them with tons of awesome scikit-learn methods.

You can find a demo jupyter notebook and read more about the wrappers here [",4 days 05:44:57,4.239548611111111,0.008,0.834,0.158,0.9878,pos,7.831098863805093e-05,1.0986122886681098,1.6562353517047097,21.24109827793419
11g7h03,2288,2023-03-02 16:47:40,Build ChatGPT for Financial Documents with LangChain + Deep Lake,davidbun,False,0.95,171,https://www.reddit.com/r/learnmachinelearning/comments/11g7h03/build_chatgpt_for_financial_documents_with/,8,1677775660.0,"https://preview.redd.it/h9r6hgvfucla1.png?width=2388&format=png&auto=webp&s=5432eac3eeed8583e4309af1fdc7ebecac705796

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain](https://github.com/hwchase17/langchain) and [Deep Lake](https://github.com/activeloopai/deeplake) come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article](https://www.activeloop.ai/resources/ultimate-guide-to-lang-chain-deep-lake-build-chat-gpt-to-answer-questions-on-your-financial-data/) to learn:

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\#LangChain](https://www.linkedin.com/feed/hashtag/?keywords=langchain&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) and [\#DeepLake](https://www.linkedin.com/feed/hashtag/?keywords=deeplake&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) together to build [\#ChatGPT](https://www.linkedin.com/feed/hashtag/?keywords=chatgpt&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",gpt-4,learnmachinelearning,0.00044639011363369383,2.0883748006254684e-05,2023-03-02 16:47:40,"

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain]( and [Deep Lake]( come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article]( to learn

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\LangChain]( and [\DeepLake]( together to build [\ChatGPT]( for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",11 days 07:12:20,11.30023148148148,0.011,0.886,0.103,0.9458,pos,0.00044629051120693617,2.1972245773362196,2.5096180818339255,21.240734741774645
118iccl,2301,2023-02-21 23:18:46,"How big was GPT-3.5's training dataset, and are there any good heuristics for how large an ML dataset needs to be for it to be good?",TikkunCreation,False,0.93,53,https://www.reddit.com/r/learnmachinelearning/comments/118iccl/how_big_was_gpt35s_training_dataset_and_are_there/,6,1677021526.0,"Say I want to do a model for fixing bugs in code. How many examples do I need for it to be good?

Or say I want to do a model for scoring boxing matches. How many examples do I need for it to be good?",gpt-4,learnmachinelearning,0.00013835483054143728,1.5662811004691013e-05,2023-02-21 23:18:46,"Say I want to do a model for fixing bugs in code. How many examples do I need for it to be good?

Or say I want to do a model for scoring boxing matches. How many examples do I need for it to be good?",20 days 00:41:14,20.02863425925926,0.0,0.804,0.196,0.7757,pos,0.00013834526039450522,1.9459101490553132,3.045885045107382,21.240285156318095
117f8ms,2342,2023-02-20 17:41:43,GPT2 last hidden states vs Large Sentence Encoder,KahlessAndMolor,False,0.9,7,https://www.reddit.com/r/learnmachinelearning/comments/117f8ms/gpt2_last_hidden_states_vs_large_sentence_encoder/,3,1676914903.0,"Hello!

&#x200B;

I have 2 different applications I'm working on in this project:

&#x200B;

1. A text classifier
2. A similarity finder: Here's a list of 10 text documents, get a similarity index across them (for a total of 100 pairs) and return the top 10 that aren't self-referencing. That is, excluding the text #3 vs text #3 = 1.00 similarity type of outputs.

I have previously used google's sentence encoder/large for this purpose and I've had pretty good results. It returns a single vector of length 768 no matter how many tokens I send it. This results in downstream models with an acceptable number of parameters for running in production without breaking the bank on enormous virtual machines.

&#x200B;

Now, I'd like to use the GPT2/XL model from Huggingface. If I give it an input string of 8 tokens, I get back a TFBaseModelOutputWithPastAndCrossAttentions. This contains a last\_hidden\_states, which I understand to be the last layer outputs before sending to a head used for a particular task. This is similar to the output of the sentence encoder, I think. When I look at the last\_hidden\_states, I'm getting a shape of (# of tokens, 1600). I did a cosine similarity between the first and last tokens:

&#x200B;

cosine\_similarity(output.last\_hidden\_state\[0\]\[0\].numpy().reshape(1, -1), output.last\_hidden\_state\[0\]\[-1\].numpy().reshape(1, -1)) 

&#x200B;

And it returned 0.4346, indicating there's substantially different data from the first to the last token. I imagine this only increases as I use more and more tokens. 

&#x200B;

It would be nice if I could capture the greater power of the GPT model into a fixed-length vector so I could then easily use it in down-stream tasks. But, I also don't need to lose all that information.

&#x200B;

So if I'm feeding this output to a further downstream task, should I:

&#x200B;

\- Send it on through as a 2D tensor with the whole thing in there: This would result in a possibly huge model size down the road, which might lead to a need for a huge amount of data to train

&#x200B;

\- Flatten the whole thing and send a vector of 12,800 (8 tokens \* 1600 per token) to the downstream task. Same issue, might require a large number of parameters.

&#x200B;

\- Use only the first or the last of these. Feels like I might be losing a lot of the meaning of the overall text, especially if the body of the text is quite large

&#x200B;

\- Use a dimensionality reduction technique like isomap to reduce the last hidden states into a fixed length? This seems like it could potentially maintain most of the information but reduce the dimensions for a manageable down-stream model size.

&#x200B;

What do you think, and why?

&#x200B;

Thank you kind friends.",gpt-4,learnmachinelearning,1.8273279505472847e-05,7.831405502345506e-06,2023-02-20 17:41:43,"Hello!

&x200B;

I have 2 different applications I'm working on in this project

&x200B;

1. A text classifier
2. A similarity finder Here's a list of 10 text documents, get a similarity index across them (for a total of 100 pairs) and return the top 10 that aren't self-referencing. That is, excluding the text 3 vs text 3 = 1.00 similarity type of outputs.

I have previously used google's sentence encoder/large for this purpose and I've had pretty good results. It returns a single vector of length 768 no matter how many tokens I send it. This results in downstream models with an acceptable number of parameters for running in production without breaking the bank on enormous virtual machines.

&x200B;

Now, I'd like to use the GPT2/XL model from Huggingface. If I give it an input string of 8 tokens, I get back a TFBaseModelOutputWithPastAndCrossAttentions. This contains a last\_hidden\_states, which I understand to be the last layer outputs before sending to a head used for a particular task. This is similar to the output of the sentence encoder, I think. When I look at the last\_hidden\_states, I'm getting a shape of ( of tokens, 1600). I did a cosine similarity between the first and last tokens

&x200B;

cosine\_similarity(output.last\_hidden\_state\[0\]\[0\].numpy().reshape(1, -1), output.last\_hidden\_state\[0\]\[-1\].numpy().reshape(1, -1)) 

&x200B;

And it returned 0.4346, indicating there's substantially different data from the first to the last token. I imagine this only increases as I use more and more tokens. 

&x200B;

It would be nice if I could capture the greater power of the GPT model into a fixed-length vector so I could then easily use it in down-stream tasks. But, I also don't need to lose all that information.

&x200B;

So if I'm feeding this output to a further downstream task, should I

&x200B;

\- Send it on through as a 2D tensor with the whole thing in there This would result in a possibly huge model size down the road, which might lead to a need for a huge amount of data to train

&x200B;

\- Flatten the whole thing and send a vector of 12,800 (8 tokens \* 1600 per token) to the downstream task. Same issue, might require a large number of parameters.

&x200B;

\- Use only the first or the last of these. Feels like I might be losing a lot of the meaning of the overall text, especially if the body of the text is quite large

&x200B;

\- Use a dimensionality reduction technique like isomap to reduce the last hidden states into a fixed length? This seems like it could potentially maintain most of the information but reduce the dimensions for a manageable down-stream model size.

&x200B;

What do you think, and why?

&x200B;

Thank you kind friends.",21 days 06:18:17,21.26269675925926,0.011,0.862,0.127,0.992,pos,1.827311255120484e-05,1.3862943611198906,3.1029124867242484,21.240221575506574
117hd0f,2350,2023-02-20 19:01:54,Master ChatGPT Prompt Engineering (Deep Dive),jeyThaswan,False,0.8,6,https://www.reddit.com/r/learnmachinelearning/comments/117hd0f/master_chatgpt_prompt_engineering_deep_dive/,2,1676919714.0," 

I wrote a deep dive on prompt engineering as a resource for the AI community and my 10,000 daily newsletter subscribers ([Inclined.ai](https://www.inclined.ai/p/prompt-engineering-guide) if you're curious). We've included some examples so feel free to copy and paste the prompts into ChatGPT!

&#x200B;

**WHAT IS PROMPT ENGINEERING?**

The term is relatively new, and its origins are argued *(because we live in the internet age, and it’s harder to claim ownership)*. Prompt engineering is the ability to instruct and teach AI effectively.

If it helps, think of this as rapid testing or instruction writing for artificial intelligence.

What’s important is not to let this overwhelm you. The first prompting happened with the first AI model. The first example was showing computer images of circles and triangles. **Today’s neural networks can process way more data, creating complexities.**

So, the concept is simple, but digging into the full power of AI today is something else entirely.

We’re not talking about asking questions. Odds are, if you’re typing *“what’s 2+2”* into ChatGPT, then you need to keep reading.

We can all ask chatbots questions. That can work more often than not. But AI is not perfect. A common metaphor I see is to treat GPT-based large language models like the smartest five-year-old you’ve ever met.

I have a niece around that age and can’t imagine trying to get her to write an essay on the effects of soil mismanagement in relation to Reconstruction politics. *See! Your eyes glazed over reading that, so how do we make this work for our AI buddies?*

The Principles of Prompting

Stop asking single-line questions. *That’s like using a top-rated cookbook to find out how to make grilled cheese.*

**There are three ways to instantly get better at prompting** and go from grilled cheese to top-notch bolognese. From there, we can get into some specific prompt concepts and the ability to unlock ChatGPT’s full potential.

Principle 1: Context is King

GPT-3.5 is swimming in data. When you ask it for a simple request, it can end up complicating things more than you realize. Did you ever wonder why ChatGPT is so bad at math?

The reality is the LLM is taking words and turning them into patterns. From there, it’s making an educated guess.

Give your chat AI a frame to search into. If you give it a math problem, you need to make sure it grasps that you want it to do math. If you’d like ChatGPT to write a high school essay, you must ensure it knows to write at that level.

**Instead of:** “Plan a party for a kid.”

**Try:** “My child is turning 9. They like superheroes and the color red. Help me plan a party for this weekend. Ten of his friends are coming to my house.”

You’ll get a much better response this way. **Context is the cardinal direction** that helps your chat companion find the most correct guess and phrase it the best way.

Principle 2: Get Specific

Pretend you’re writing a law that’s going to be judged by the Supreme Court of the United States. You know what they look for: narrow tailoring.

**Keep things on track and stay focused.** Try to avoid prompting outside the specific request. You’ll only hurt the ability of the chat AI to give you a quality response. Odds are they’ll even skip over parts if you confuse them with too many requests.

It runs parallel with context. *If you set ChatGPT up in a room and then tell it to focus on describing the chair first, you’ll see better results.*

**Instead of:** “I’m going to a job interview. Write five questions for me to answer. Add tips for how to not get nervous before the interview. Do not create questions asking about my background.”

**Try:** “You’re interviewing a software engineer. Create five questions to ask them to understand their skill set and qualifications better.”

Nothing limits the number of prompts you can do. Focus and expand from the initial request and try not to do everything at once.

Principle 3: When in Doubt: “Let’s take this step-by-step.”

Welcome. **You discovered the magic word today.** This phrase slows everything down for the AI and gets you where you need to go.

You don’t need to start with this phrase. Using it tells ChatGPT to show their work.

We’ll explain where this concept comes from further in our briefing, but here’s the TL;DR: sometimes, there’s a part of our prompt it’s not identified correctly. “Let’s take this step-by-step,” reminds you and ChatGPT to **slow down and get specific.**

If you learn to utilize this phrase more often and find ways to make it work for you, you’ll become a better prompt engineer. One term can do a lot of heavy lifting.

**Pro-tip:** We’ve shown you “standard” prompts in all these examples. Many prompt engineers will use “Standard QA form” prompts. Here’s our example for this principle written that way.

**Example:**

*“Q: The Industrial Revolution rapidly changed the infrastructure in London. Describe three essential innovations from this period and connect them to Landon’s development.*

*A: Let’s take this step-by-step.”*

Even without our magic word, this style of standard prompting is quite helpful to adopt.

*However, we’re beginning to stumble into the advanced tactics used in prompt engineering, so it’s time for a new section.*

UNIQUE WAYS TO PROMPT

Let’s preface this: we can go super deep here. Prompt engineering is changing daily, and as these models get more sophisticated, the need to adapt prompts strengthens.

To keep things clean, I will go through these using our metaphor from earlier. **Let’s pretend ChatGPT is a super-intelligent toddler.**

*Got it? With that buy-in, we can continue.*

1/ Role Prompting

We’ll start with a popular tactic. **Our toddler is great at imagining things.** You tell them they’re a fireman, and suddenly they can give you detailed ways to ensure your apartment is up to code. Role-playing is a fun, easy way to build context.

The best part of role prompting is how easy it is to understand and use. All you need to do is tell ChatGPT to play a role. From there, the AI will do its best to fill the part *like that enthusiastic drama student from your old high school.*

You can even take this a step further. **Try framing your prompt as a script.** Tell the LLM specific instructions around a scene that gives you the answer to your question.

TRY IT OUT FOR YOURSELF:

Copy this prompt into ChatGPT and find a destination!

“Act as a travel guide. I will tell you my location and you will suggest a place to visit near my location. In some cases, I will also give you the type of places I will visit. You will also suggest me places of similar type that are close to my first location. My first suggestion: \[fill it in\]”

Why would you take that extra step? While popular, role prompting does not necessarily improve accuracy. *You can tell your five-year-old they’re a mathematician, and they’ll still manage to screw things up.*

Let’s get deeper.

2/ Chain-of-Thought Prompting

There’s a scene in ***Guardians of the Galaxy*** where Rocket Raccoon is trying to [teach young Groot](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwczovL3lvdXR1LmJlL0hyaW1mZ2pmNGs4IiwicG9zdF9pZCI6ImM0ODlmMzhkLTY3NDAtNGRmNS05MWJjLTM1ODA0YTVmNTZkMiIsInB1YmxpY2F0aW9uX2lkIjoiNjNkODQ2ZGUtZDFiZi00ZTVjLWJjYzgtOWMxYzlkMWIxMjA0IiwidmlzaXRfdG9rZW4iOiJkZWRiNmMyNy1hYmM0LTQ5ZDUtYWM2Ny04OTcyZmM1MGVmM2QiLCJpYXQiOjE2NzY5MTkwNjguMTUyLCJpc3MiOiJvcmNoaWQifQ.5eZkDLGRLCXXYv32FYT7kLSbdRK5OK1iemTRf3HVmJw)

how to activate a complicated device. That’s chain-of-thought prompting.

**You take an example question and answer it for ChatGPT.** Show them your chain of thought. Then you give it a new question in the same vein and ask it for an answer.

This prompt style allows you to get more specific. You’re telling your toddler they’re here to answer this particular question with one specific logic pattern.

Within this specific style is two other sub-categories. Let me give the rundown:

* Zero-shot Chain-of-Thought is “Let’s take this step-by-step” you frame the question the same, but don’t give it a precursor. Instead, you ask it to think through the points made. EX: Q: X is A. Y is B. What is C? A: Let’s take this step-by-step.
* Self-consistency is using several responses to find the most accurate answer. You give ChatGPT more swings at the ball. Take the hits and discover the grouping.

TRY IT OUT FOR YOURSELF:

Copy this prompt into ChatGPT and see how accurate it is:

“Q: Which is a faster way to get home?

Option 1: Take an 10 minutes bus, then an 40 minute bus, and finally a 10 minute train.

Option 2: Take a 90 minutes train, then a 45 minute bike ride, and finally a 10 minute bus.

A: Option 1 will take 10+40+10 = 60 minutes.

Option 2 will take 90+45+10=145 minutes.

Since Option 1 takes 60 minutes and Option 2 takes 145 minutes, Option 1 is faster.

Q: Which is a faster way to get to work?

Option 1: Take a 1000 minute bus, then a half hour train, and finally a 10 minute bike ride.

Option 2: Take an 800 minute bus, then an hour train, and finally a 30 minute bike ride.

A: ”

[Learnprompting.org](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwOi8vTGVhcm5wcm9tcHRpbmcub3JnIiwicG9zdF9pZCI6ImM0ODlmMzhkLTY3NDAtNGRmNS05MWJjLTM1ODA0YTVmNTZkMiIsInB1YmxpY2F0aW9uX2lkIjoiNjNkODQ2ZGUtZDFiZi00ZTVjLWJjYzgtOWMxYzlkMWIxMjA0IiwidmlzaXRfdG9rZW4iOiJkZWRiNmMyNy1hYmM0LTQ5ZDUtYWM2Ny04OTcyZmM1MGVmM2QiLCJpYXQiOjE2NzY5MTkwNjguMTUyLCJpc3MiOiJvcmNoaWQifQ.-wOnVYoMNWXYrR5NOB4YYKp4Lmj-aZq3y-pr4Hou9pE)

\- by leaving the “A:” blank you’re prompting ChatGPT for the answer

Alright, you’re almost there—one more to go.

3/ General Knowledge Prompting

You’re going to notice a trend here. This prompt style also circles context and narrow tailoring.

All you do is tell your toddler how the world works. The cow goes moo. The dog goes woof. So what does a cat say?

It’s an oversimplification, but the core reasoning is there. Show ChatGPT some knowledge and turn that into the only focus for that chat. You can take an article from the internet and summarize it for the model. Make sure to ask if it understands and relay the information to you.

Once you know you have the attention set in the suitable space, get to work. For instance, we can share an Inclined newsletter with it and tell ChatGPT about its structure and tone.

From there, you can provide new information and tell ChatGPT to summarize it within the same structure as Inclined. You both share the same general knowledge now.

TRY IT OUT FOR YOURSELF:

Copy this prompt into ChatGPT and test it out:

“Prompt 1. Look over this article here: \[pick an article\]. Breakdown its structure and general tone.

Prompt 2: Recall the structure and tone you mentioned above. Take that general knowledge and summarize this article: \[pick a new one\] using the same structure and tone.”

Note: this is a heavily simplified version of GA Prompting

Did you know some [people don’t consider](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwczovL25ld3MueWNvbWJpbmF0b3IuY29tL2l0ZW0_aWQ9MzQ0OTU0NTUiLCJwb3N0X2lkIjoiYzQ4OWYzOGQtNjc0MC00ZGY1LTkxYmMtMzU4MDRhNWY1NmQyIiwicHVibGljYXRpb25faWQiOiI2M2Q4NDZkZS1kMWJmLTRlNWMtYmNjOC05YzFjOWQxYjEyMDQiLCJ2aXNpdF90b2tlbiI6ImRlZGI2YzI3LWFiYzQtNDlkNS1hYzY3LTg5NzJmYzUwZWYzZCIsImlhdCI6MTY3NjkxOTA2OC4xNTMsImlzcyI6Im9yY2hpZCJ9.yHKIPujINT89tsqOo07AXk6OrKNgoMjO3fBEYPkAdNY)

that prompt engineering?

PROMPT CULTURE

*“How can something not be prompt engineering if it’s a prompt style?”*

Good question, imaginary reader. The culture around this skill is relatively fresh. So some of **these concepts are seen as too easy** to be considered accurate prompt testing.

General knowledge prompting is simply establishing the context, and for some, that’s a baseline everyone needs to do. The same can be said for role prompting, too. *All of these tiny preferences are semantics.*

**Don’t sweat whether you’re a “real” prompt engineer.** Test this out and share your insights in these communities. The opportunity is there for you.

You may even know about DAN (we’ve covered it in previous newsletters) and other AI hacking methods. Those all start with prompt engineering. You can make the case that unless the AI behaves outside its parameters, you’re not genuinely doing prompt engineering.

I'm afraid I have to disagree with that, and **careers are sprouting up everywhere** that center directly on this skill. **Many require a core understanding of the prompt styles we’ve discussed.**

*Yep, you can learn this and make money from talking with AI.*

Anthropic even [posted a role for a prompt engineer](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwczovL2pvYnMubGV2ZXIuY28vQW50aHJvcGljL2UzY2RlNDgxLWQ0NDYtNDYwZi1iNTc2LTkzY2FiNjdiZDFlZCIsInBvc3RfaWQiOiJjNDg5ZjM4ZC02NzQwLTRkZjUtOTFiYy0zNTgwNGE1ZjU2ZDIiLCJwdWJsaWNhdGlvbl9pZCI6IjYzZDg0NmRlLWQxYmYtNGU1Yy1iY2M4LTljMWM5ZDFiMTIwNCIsInZpc2l0X3Rva2VuIjoiZGVkYjZjMjctYWJjNC00OWQ1LWFjNjctODk3MmZjNTBlZjNkIiwiaWF0IjoxNjc2OTE5MDY4LjE1MywiaXNzIjoib3JjaGlkIn0.4s7Htzgoxv0_qM1Ten17oQ5h0_QGM6e1fGUYz_ymgJ4)

that nets a quarter million in salary. I did not make that up and even considered sprucing up the old resume. When a new skill like this comes about, it’s worth looking at.

There are many other examples like this, and OpenAI uses a red teaming strategy where their engineers attempt to prompt hack their own GPT models.

I can tell you all about the open roles here, but tomorrow the whole cycle will change. *Isn’t that exciting, though?* The entire identity around prompt engineering will change by this time next year.

WHAT SHOULD YOU TAKEAWAY?

Communication is everything. **Learning to speak with AI is rising in importance.**

We all watch with mouth agape at the new wonders in AI because we know this will disrupt every industry. If any of this piqued your interest, the window to pursue it is now open. Ride that wave and [learn](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwczovL2xlYXJucHJvbXB0aW5nLm9yZy8iLCJwb3N0X2lkIjoiYzQ4OWYzOGQtNjc0MC00ZGY1LTkxYmMtMzU4MDRhNWY1NmQyIiwicHVibGljYXRpb25faWQiOiI2M2Q4NDZkZS1kMWJmLTRlNWMtYmNjOC05YzFjOWQxYjEyMDQiLCJ2aXNpdF90b2tlbiI6ImRlZGI2YzI3LWFiYzQtNDlkNS1hYzY3LTg5NzJmYzUwZWYzZCIsImlhdCI6MTY3NjkxOTA2OC4xNTMsImlzcyI6Im9yY2hpZCJ9.a67KDSN9yQfZsaMeHpdcbSbtPjD4yFcGW4stdxBjX1M)

to become a brilliant prompt engineer.

Heck, even if you don’t want to switch careers, **talking with ChatGPT and all the newest LLMs is becoming a part of our daily routine.** Get to the point where you maximize every interaction and work with these chatbots to upskill your workflow.

Prompt engineering can save you time, eliminate hassle, and even help you become a more patient person. Focus on what you want and explain it with intent.

Make magic happen, and remember: **take it step-by-step.**",gpt-4,learnmachinelearning,1.5662811004691013e-05,5.220937001563671e-06,2023-02-20 19:01:54," 

I wrote a deep dive on prompt engineering as a resource for the AI community and my 10,000 daily newsletter subscribers ([Inclined.ai]( if you're curious). We've included some examples so feel free to copy and paste the prompts into ChatGPT!

&x200B;

**WHAT IS PROMPT ENGINEERING?**

The term is relatively new, and its origins are argued *(because we live in the internet age, and it’s harder to claim ownership)*. Prompt engineering is the ability to instruct and teach AI effectively.

If it helps, think of this as rapid testing or instruction writing for artificial intelligence.

What’s important is not to let this overwhelm you. The first prompting happened with the first AI model. The first example was showing computer images of circles and triangles. **Today’s neural networks can process way more data, creating complexities.**

So, the concept is simple, but digging into the full power of AI today is something else entirely.

We’re not talking about asking questions. Odds are, if you’re typing *“what’s 2+2”* into ChatGPT, then you need to keep reading.

We can all ask chatbots questions. That can work more often than not. But AI is not perfect. A common metaphor I see is to treat GPT-based large language models like the smartest five-year-old you’ve ever met.

I have a niece around that age and can’t imagine trying to get her to write an essay on the effects of soil mismanagement in relation to Reconstruction politics. *See! Your eyes glazed over reading that, so how do we make this work for our AI buddies?*

The Principles of Prompting

Stop asking single-line questions. *That’s like using a top-rated cookbook to find out how to make grilled cheese.*

**There are three ways to instantly get better at prompting** and go from grilled cheese to top-notch bolognese. From there, we can get into some specific prompt concepts and the ability to unlock ChatGPT’s full potential.

Principle 1 Context is King

GPT-3.5 is swimming in data. When you ask it for a simple request, it can end up complicating things more than you realize. Did you ever wonder why ChatGPT is so bad at math?

The reality is the LLM is taking words and turning them into patterns. From there, it’s making an educated guess.

Give your chat AI a frame to search into. If you give it a math problem, you need to make sure it grasps that you want it to do math. If you’d like ChatGPT to write a high school essay, you must ensure it knows to write at that level.

**Instead of** “Plan a party for a kid.”

**Try** “My child is turning 9. They like superheroes and the color red. Help me plan a party for this weekend. Ten of his friends are coming to my house.”

You’ll get a much better response this way. **Context is the cardinal direction** that helps your chat companion find the most correct guess and phrase it the best way.

Principle 2 Get Specific

Pretend you’re writing a law that’s going to be judged by the Supreme Court of the United States. You know what they look for narrow tailoring.

**Keep things on track and stay focused.** Try to avoid prompting outside the specific request. You’ll only hurt the ability of the chat AI to give you a quality response. Odds are they’ll even skip over parts if you confuse them with too many requests.

It runs parallel with context. *If you set ChatGPT up in a room and then tell it to focus on describing the chair first, you’ll see better results.*

**Instead of** “I’m going to a job interview. Write five questions for me to answer. Add tips for how to not get nervous before the interview. Do not create questions asking about my background.”

**Try** “You’re interviewing a software engineer. Create five questions to ask them to understand their skill set and qualifications better.”

Nothing limits the number of prompts you can do. Focus and expand from the initial request and try not to do everything at once.

Principle 3 When in Doubt “Let’s take this step-by-step.”

Welcome. **You discovered the magic word today.** This phrase slows everything down for the AI and gets you where you need to go.

You don’t need to start with this phrase. Using it tells ChatGPT to show their work.

We’ll explain where this concept comes from further in our briefing, but here’s the TL;DR sometimes, there’s a part of our prompt it’s not identified correctly. “Let’s take this step-by-step,” reminds you and ChatGPT to **slow down and get specific.**

If you learn to utilize this phrase more often and find ways to make it work for you, you’ll become a better prompt engineer. One term can do a lot of heavy lifting.

**Pro-tip** We’ve shown you “standard” prompts in all these examples. Many prompt engineers will use “Standard QA form” prompts. Here’s our example for this principle written that way.

**Example**

*“Q The Industrial Revolution rapidly changed the infrastructure in London. Describe three essential innovations from this period and connect them to Landon’s development.*

*A Let’s take this step-by-step.”*

Even without our magic word, this style of standard prompting is quite helpful to adopt.

*However, we’re beginning to stumble into the advanced tactics used in prompt engineering, so it’s time for a new section.*

UNIQUE WAYS TO PROMPT

Let’s preface this we can go super deep here. Prompt engineering is changing daily, and as these models get more sophisticated, the need to adapt prompts strengthens.

To keep things clean, I will go through these using our metaphor from earlier. **Let’s pretend ChatGPT is a super-intelligent toddler.**

*Got it? With that buy-in, we can continue.*

1/ Role Prompting

We’ll start with a popular tactic. **Our toddler is great at imagining things.** You tell them they’re a fireman, and suddenly they can give you detailed ways to ensure your apartment is up to code. Role-playing is a fun, easy way to build context.

The best part of role prompting is how easy it is to understand and use. All you need to do is tell ChatGPT to play a role. From there, the AI will do its best to fill the part *like that enthusiastic drama student from your old high school.*

You can even take this a step further. **Try framing your prompt as a script.** Tell the LLM specific instructions around a scene that gives you the answer to your question.

TRY IT OUT FOR YOURSELF

Copy this prompt into ChatGPT and find a destination!

“Act as a travel guide. I will tell you my location and you will suggest a place to visit near my location. In some cases, I will also give you the type of places I will visit. You will also suggest me places of similar type that are close to my first location. My first suggestion \[fill it in\]”

Why would you take that extra step? While popular, role prompting does not necessarily improve accuracy. *You can tell your five-year-old they’re a mathematician, and they’ll still manage to screw things up.*

Let’s get deeper.

2/ Chain-of-Thought Prompting

There’s a scene in ***Guardians of the Galaxy*** where Rocket Raccoon is trying to [teach young Groot](

how to activate a complicated device. That’s chain-of-thought prompting.

**You take an example question and answer it for ChatGPT.** Show them your chain of thought. Then you give it a new question in the same vein and ask it for an answer.

This prompt style allows you to get more specific. You’re telling your toddler they’re here to answer this particular question with one specific logic pattern.

Within this specific style is two other sub-categories. Let me give the rundown

* Zero-shot Chain-of-Thought is “Let’s take this step-by-step” you frame the question the same, but don’t give it a precursor. Instead, you ask it to think through the points made. EX Q X is A. Y is B. What is C? A Let’s take this step-by-step.
* Self-consistency is using several responses to find the most accurate answer. You give ChatGPT more swings at the ball. Take the hits and discover the grouping.

TRY IT OUT FOR YOURSELF

Copy this prompt into ChatGPT and see how accurate it is

“Q Which is a faster way to get home?

Option 1 Take an 10 minutes bus, then an 40 minute bus, and finally a 10 minute train.

Option 2 Take a 90 minutes train, then a 45 minute bike ride, and finally a 10 minute bus.

A Option 1 will take 10+40+10 = 60 minutes.

Option 2 will take 90+45+10=145 minutes.

Since Option 1 takes 60 minutes and Option 2 takes 145 minutes, Option 1 is faster.

Q Which is a faster way to get to work?

Option 1 Take a 1000 minute bus, then a half hour train, and finally a 10 minute bike ride.

Option 2 Take an 800 minute bus, then an hour train, and finally a 30 minute bike ride.

A ”

[Learnprompting.org](

\- by leaving the “A” blank you’re prompting ChatGPT for the answer

Alright, you’re almost there—one more to go.

3/ General Knowledge Prompting

You’re going to notice a trend here. This prompt style also circles context and narrow tailoring.

All you do is tell your toddler how the world works. The cow goes moo. The dog goes woof. So what does a cat say?

It’s an oversimplification, but the core reasoning is there. Show ChatGPT some knowledge and turn that into the only focus for that chat. You can take an article from the internet and summarize it for the model. Make sure to ask if it understands and relay the information to you.

Once you know you have the attention set in the suitable space, get to work. For instance, we can share an Inclined newsletter with it and tell ChatGPT about its structure and tone.

From there, you can provide new information and tell ChatGPT to summarize it within the same structure as Inclined. You both share the same general knowledge now.

TRY IT OUT FOR YOURSELF

Copy this prompt into ChatGPT and test it out

“Prompt 1. Look over this article here \[pick an article\]. Breakdown its structure and general tone.

Prompt 2 Recall the structure and tone you mentioned above. Take that general knowledge and summarize this article \[pick a new one\] using the same structure and tone.”

Note this is a heavily simplified version of GA Prompting

Did you know some [people don’t consider](

that prompt engineering?

PROMPT CULTURE

*“How can something not be prompt engineering if it’s a prompt style?”*

Good question, imaginary reader. The culture around this skill is relatively fresh. So some of **these concepts are seen as too easy** to be considered accurate prompt testing.

General knowledge prompting is simply establishing the context, and for some, that’s a baseline everyone needs to do. The same can be said for role prompting, too. *All of these tiny preferences are semantics.*

**Don’t sweat whether you’re a “real” prompt engineer.** Test this out and share your insights in these communities. The opportunity is there for you.

You may even know about DAN (we’ve covered it in previous newsletters) and other AI hacking methods. Those all start with prompt engineering. You can make the case that unless the AI behaves outside its parameters, you’re not genuinely doing prompt engineering.

I'm afraid I have to disagree with that, and **careers are sprouting up everywhere** that center directly on this skill. **Many require a core understanding of the prompt styles we’ve discussed.**

*Yep, you can learn this and make money from talking with AI.*

Anthropic even [posted a role for a prompt engineer](

that nets a quarter million in salary. I did not make that up and even considered sprucing up the old resume. When a new skill like this comes about, it’s worth looking at.

There are many other examples like this, and OpenAI uses a red teaming strategy where their engineers attempt to prompt hack their own GPT models.

I can tell you all about the open roles here, but tomorrow the whole cycle will change. *Isn’t that exciting, though?* The entire identity around prompt engineering will change by this time next year.

WHAT SHOULD YOU TAKEAWAY?

Communication is everything. **Learning to speak with AI is rising in importance.**

We all watch with mouth agape at the new wonders in AI because we know this will disrupt every industry. If any of this piqued your interest, the window to pursue it is now open. Ride that wave and [learn](

to become a brilliant prompt engineer.

Heck, even if you don’t want to switch careers, **talking with ChatGPT and all the newest LLMs is becoming a part of our daily routine.** Get to the point where you maximize every interaction and work with these chatbots to upskill your workflow.

Prompt engineering can save you time, eliminate hassle, and even help you become a more patient person. Focus on what you want and explain it with intent.

Make magic happen, and remember **take it step-by-step.**",21 days 04:58:06,21.207013888888888,0.021,0.872,0.108,0.9996,pos,1.566268834408071e-05,1.0986122886681098,3.1004081799203456,21.240224444461393
11hp55s,2368,2023-03-04 04:14:37,How to properly format data for AiTextGen Gpt-2,AlphaCloudX,False,1.0,4,https://www.reddit.com/r/learnmachinelearning/comments/11hp55s/how_to_properly_format_data_for_aitextgen_gpt2/,0,1677903277.0,"Currently I'm trying to fine tune gpt-2 on my own dataset. The dataset was scraped from a forum where I got the title of the post, content of the post and the replies. It looks like this:

Q: Question 1?  
C: Context For Question 1...  
A: Reply For Question 1...  
<|endoftext|>

Q: Question 2?  
C: Context For Question 2...  
A: Reply For Question 2...  
A: Another Reply For Question 2...  
<|endoftext|>

Q: Question 3?  
C: Context For Question 3...  
A: Another Reply For Question 3...  
A: Another Reply For Question 3...  
<|endoftext|>

I'm using the aitextgen library for python and pretty much following along with the example. The goal is for it to be able to attempt to answer questions in a conversational way but the caveat being I don't have the context for the answers.

I tried taking a look at other question answering models but they all seem to require some sort of context.

Any idea on how I can improve the formatting of the data or if there are any python libraries I can use for a question answering style or conversational ai?",gpt-4,learnmachinelearning,1.0441874003127342e-05,0.0,2023-03-04 04:14:37,"Currently I'm trying to fine tune gpt-2 on my own dataset. The dataset was scraped from a forum where I got the title of the post, content of the post and the replies. It looks like this

Q Question 1?  
C Context For Question 1...  
A Reply For Question 1...  
<|endoftext|>

Q Question 2?  
C Context For Question 2...  
A Reply For Question 2...  
A Another Reply For Question 2...  
<|endoftext|>

Q Question 3?  
C Context For Question 3...  
A Another Reply For Question 3...  
A Another Reply For Question 3...  
<|endoftext|>

I'm using the aitextgen library for python and pretty much following along with the example. The goal is for it to be able to attempt to answer questions in a conversational way but the caveat being I don't have the context for the answers.

I tried taking a look at other question answering models but they all seem to require some sort of context.

Any idea on how I can improve the formatting of the data or if there are any python libraries I can use for a question answering style or conversational ai?",9 days 19:45:23,9.82318287037037,0.0,0.942,0.058,0.8426,pos,1.0441819487243972e-05,0.0,2.3816903956287683,21.240810802090536
118mk1d,2377,2023-02-22 02:32:01,How to Use ChatGPT in Python API and Run Batch Jobs with UI,Fun_Pollution_3899,False,0.72,3,https://www.reddit.com/r/learnmachinelearning/comments/118mk1d/how_to_use_chatgpt_in_python_api_and_run_batch/,0,1677033121.0,"I wanted to share a tutorial on how to use ChatGPT in Python API and how to run batch jobs with a UI. ChatGPT is a powerful language model that can generate text in a conversational manner. It can be used for a variety of tasks, such as chatbots, text completion, and more.
Repo: [https://github.com/CodeDiggerM/chatgpt-batch-whipper](https://github.com/CodeDiggerM/chatgpt-batch-whipper)

## Installation
### Use PIP command
1. Install the latest version of this software directly from github with pip:
```bash
  pip install git+https://github.com/CodeDiggerM/chatgpt-batch-whipper.git
```
2. Go to **auth** mode. This will open up a browser window. Log in to ChatGPT in the browser window, then close the browser.
```bash
run_chatgpt auth
```
3. Start the UI
```bash
run_chatgpt ui
```

### Manually set up

1. Clone the repo to your working directory
```bash
git clone https://github.com/CodeDiggerM/chatgpt-batch-whipper.git
```
2. install the dependcy.
```bash
pip install -r requirements.txt
```

3. Install a browser in playwright (if you haven't already).  The program will use firefox by default.

```
playwright install firefox
```

4. Go to the chatgpt-batch-whipper/

```bash
cd chatgpt_batch_whipper/
````

5. Run the main page by streamlit.
you can got to [streamlit](https://github.com/streamlit/streamlit) to check more about streamlit.

```bash
streamlit run start_whipper.py
````
6. Authenticate your openAI account
Click the **auth** button


It will open up an authentication page in the web browser you installed using playwright. Like below, authenticate with your registered account.



## Quickstart

### Use API
1. Grant auth from chatGPT.
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.auth()
print(response) 
```

2. Ask the question to chatGPT
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.ask(""Greeting!"")
print(response) 
```


### Streamlit UI

Now run it to open the app!
```
streamlit run streamlit_app.py
```

#### Single shoot mode

1. select the **Single shoot mode**.
2. Type your prompt then click submit
3. click the submit button

Here are some tips.

#### Fully Automatic mode
You can apply your prompt to multiple records in the **Fully Automatic mode**.

1. Select Fully Automatic mode.
2. Select CSV file.
3. Select column you want to process.
4. Type the prompt.
5. click to Submit.
After processing. The result will appears in the **The processed result** section.

you can check the result and check the ""is false"" then click the **Submit** to reprocess the ""failed"" one.

* You can save the prompt by click **Add** button.
* You can choose the old prompt by select **prompt list**.
* You can delete the old prompt by click **Delete Prompt**.
* You can delete the saved process result by click **Delete Cached result**.
* You can update the saved process result by click **Update**.
* You can download the result file by click **Download**.",gpt-4,learnmachinelearning,7.831405502345506e-06,0.0,2023-02-22 02:32:01,"I wanted to share a tutorial on how to use ChatGPT in Python API and how to run batch jobs with a UI. ChatGPT is a powerful language model that can generate text in a conversational manner. It can be used for a variety of tasks, such as chatbots, text completion, and more.
Repo [

 Installation
 Use PIP command
1. Install the latest version of this software directly from github with pip
```bash
  pip install git+
```
2. Go to **auth** mode. This will open up a browser window. Log in to ChatGPT in the browser window, then close the browser.
```bash
run_chatgpt auth
```
3. Start the UI
```bash
run_chatgpt ui
```

 Manually set up

1. Clone the repo to your working directory
```bash
git clone 
```
2. install the dependcy.
```bash
pip install -r requirements.txt
```

3. Install a browser in playwright (if you haven't already).  The program will use firefox by default.

```
playwright install firefox
```

4. Go to the chatgpt-batch-whipper/

```bash
cd chatgpt_batch_whipper/
````

5. Run the main page by streamlit.
you can got to [streamlit]( to check more about streamlit.

```bash
streamlit run start_whipper.py
````
6. Authenticate your openAI account
Click the **auth** button


It will open up an authentication page in the web browser you installed using playwright. Like below, authenticate with your registered account.



 Quickstart

 Use API
1. Grant auth from chatGPT.
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.auth()
print(response) 
```

2. Ask the question to chatGPT
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.ask(""Greeting!"")
print(response) 
```


 Streamlit UI

Now run it to open the app!
```
streamlit run streamlit_app.py
```

 Single shoot mode

1. select the **Single shoot mode**.
2. Type your prompt then click submit
3. click the submit button

Here are some tips.

 Fully Automatic mode
You can apply your prompt to multiple records in the **Fully Automatic mode**.

1. Select Fully Automatic mode.
2. Select CSV file.
3. Select column you want to process.
4. Type the prompt.
5. click to Submit.
After processing. The result will appears in the **The processed result** section.

you can check the result and check the ""is false"" then click the **Submit** to reprocess the ""failed"" one.

* You can save the prompt by click **Add** button.
* You can choose the old prompt by select **prompt list**.
* You can delete the old prompt by click **Delete Prompt**.
* You can delete the saved process result by click **Delete Cached result**.
* You can update the saved process result by click **Update**.
* You can download the result file by click **Download**.",19 days 21:27:59,19.89443287037037,0.011,0.941,0.048,0.9311,pos,7.831374837016125e-06,0.0,3.0394827536492803,21.24029207033782
118mk1d,2436,2023-02-22 02:32:01,How to Use ChatGPT in Python API and Run Batch Jobs with UI,Fun_Pollution_3899,False,0.72,3,https://www.reddit.com/r/learnmachinelearning/comments/118mk1d/how_to_use_chatgpt_in_python_api_and_run_batch/,0,1677033121.0,"I wanted to share a tutorial on how to use ChatGPT in Python API and how to run batch jobs with a UI. ChatGPT is a powerful language model that can generate text in a conversational manner. It can be used for a variety of tasks, such as chatbots, text completion, and more.
Repo: [https://github.com/CodeDiggerM/chatgpt-batch-whipper](https://github.com/CodeDiggerM/chatgpt-batch-whipper)

## Installation
### Use PIP command
1. Install the latest version of this software directly from github with pip:
```bash
  pip install git+https://github.com/CodeDiggerM/chatgpt-batch-whipper.git
```
2. Go to **auth** mode. This will open up a browser window. Log in to ChatGPT in the browser window, then close the browser.
```bash
run_chatgpt auth
```
3. Start the UI
```bash
run_chatgpt ui
```

### Manually set up

1. Clone the repo to your working directory
```bash
git clone https://github.com/CodeDiggerM/chatgpt-batch-whipper.git
```
2. install the dependcy.
```bash
pip install -r requirements.txt
```

3. Install a browser in playwright (if you haven't already).  The program will use firefox by default.

```
playwright install firefox
```

4. Go to the chatgpt-batch-whipper/

```bash
cd chatgpt_batch_whipper/
````

5. Run the main page by streamlit.
you can got to [streamlit](https://github.com/streamlit/streamlit) to check more about streamlit.

```bash
streamlit run start_whipper.py
````
6. Authenticate your openAI account
Click the **auth** button


It will open up an authentication page in the web browser you installed using playwright. Like below, authenticate with your registered account.



## Quickstart

### Use API
1. Grant auth from chatGPT.
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.auth()
print(response) 
```

2. Ask the question to chatGPT
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.ask(""Greeting!"")
print(response) 
```


### Streamlit UI

Now run it to open the app!
```
streamlit run streamlit_app.py
```

#### Single shoot mode

1. select the **Single shoot mode**.
2. Type your prompt then click submit
3. click the submit button

Here are some tips.

#### Fully Automatic mode
You can apply your prompt to multiple records in the **Fully Automatic mode**.

1. Select Fully Automatic mode.
2. Select CSV file.
3. Select column you want to process.
4. Type the prompt.
5. click to Submit.
After processing. The result will appears in the **The processed result** section.

you can check the result and check the ""is false"" then click the **Submit** to reprocess the ""failed"" one.

* You can save the prompt by click **Add** button.
* You can choose the old prompt by select **prompt list**.
* You can delete the old prompt by click **Delete Prompt**.
* You can delete the saved process result by click **Delete Cached result**.
* You can update the saved process result by click **Update**.
* You can download the result file by click **Download**.",gpt-4,learnmachinelearning,7.831405502345506e-06,0.0,2023-02-22 02:32:01,"I wanted to share a tutorial on how to use ChatGPT in Python API and how to run batch jobs with a UI. ChatGPT is a powerful language model that can generate text in a conversational manner. It can be used for a variety of tasks, such as chatbots, text completion, and more.
Repo [

 Installation
 Use PIP command
1. Install the latest version of this software directly from github with pip
```bash
  pip install git+
```
2. Go to **auth** mode. This will open up a browser window. Log in to ChatGPT in the browser window, then close the browser.
```bash
run_chatgpt auth
```
3. Start the UI
```bash
run_chatgpt ui
```

 Manually set up

1. Clone the repo to your working directory
```bash
git clone 
```
2. install the dependcy.
```bash
pip install -r requirements.txt
```

3. Install a browser in playwright (if you haven't already).  The program will use firefox by default.

```
playwright install firefox
```

4. Go to the chatgpt-batch-whipper/

```bash
cd chatgpt_batch_whipper/
````

5. Run the main page by streamlit.
you can got to [streamlit]( to check more about streamlit.

```bash
streamlit run start_whipper.py
````
6. Authenticate your openAI account
Click the **auth** button


It will open up an authentication page in the web browser you installed using playwright. Like below, authenticate with your registered account.



 Quickstart

 Use API
1. Grant auth from chatGPT.
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.auth()
print(response) 
```

2. Ask the question to chatGPT
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.ask(""Greeting!"")
print(response) 
```


 Streamlit UI

Now run it to open the app!
```
streamlit run streamlit_app.py
```

 Single shoot mode

1. select the **Single shoot mode**.
2. Type your prompt then click submit
3. click the submit button

Here are some tips.

 Fully Automatic mode
You can apply your prompt to multiple records in the **Fully Automatic mode**.

1. Select Fully Automatic mode.
2. Select CSV file.
3. Select column you want to process.
4. Type the prompt.
5. click to Submit.
After processing. The result will appears in the **The processed result** section.

you can check the result and check the ""is false"" then click the **Submit** to reprocess the ""failed"" one.

* You can save the prompt by click **Add** button.
* You can choose the old prompt by select **prompt list**.
* You can delete the old prompt by click **Delete Prompt**.
* You can delete the saved process result by click **Delete Cached result**.
* You can update the saved process result by click **Update**.
* You can download the result file by click **Download**.",19 days 21:27:59,19.89443287037037,0.011,0.941,0.048,0.9311,pos,7.831374837016125e-06,0.0,3.0394827536492803,21.24029207033782
11n5r93,339,2023-03-09 22:19:19,GPT-4 is coming next week ...,ihatethispage,False,0.89,62,https://www.reddit.com/r/artificial/comments/11n5r93/gpt4_is_coming_next_week/,14,1678400359.0," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html)",gpt,learnmachinelearning,0.0001618490470484738,3.654655901094569e-05,2023-03-09 22:19:19," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](",4 days 01:40:41,4.069918981481481,0.0,1.0,0.0,0.0,neu,0.00016183595090455473,2.70805020110221,1.6233248374914817,21.241107010096275
11fj3tx,957,2023-03-01 21:45:07,Accused of using AI on my high school social paper,feetstreetseat,False,0.96,2700,https://www.reddit.com/r/ChatGPT/comments/11fj3tx/accused_of_using_ai_on_my_high_school_social_paper/,759,1677707107.0,"I (Grade 12) need help on what to do in this situation. My teacher used GPTzero, which detected parts of my paper as “AI written”. I write very formally, whilst also using grammarly premium. I’ve always been a high achieving student and I’m not sure why my teacher would think I cheated. I’ve told my teacher everything and he still doesn’t believe me. What should I do in this situation?!!

EDIT: Holy. I did not expect my post to get so much interaction and discussion, I didn’t expect my situation to be such a hot discussion. I tried to reply to all the comments but there’s too many!! Thank you to everyone who’s been helpful. There are some things I want to address that I keep seeing in the comments.
1. When I mentioned that I used grammarly to my teacher, he didn’t mention anything about that being cheating. He still thinks I used ChatGPT. I’ve used grammarly in all of my social/english classes for the past two years and never had issues with any teachers. 
2. Does my teacher have a vendetta or bias against me? Not on a personal level, but the teacher is known for being notoriously mean and unreasonable. I found him alright for most of the semester until this incident. He has had accusations against him about being racist, but I’m not sure if that’s the case here.
3. I’ve seen a few comments thinking I’m lying and actually cheated, just because I was aware of ChatGPT and this subreddit. People are assuming that I’m saying I never use ChatGPT. I have used the tool to help me with some chemistry and physics studying, but I have never used it for a paper. I have no reason to lie, I’m basically anonymous on reddit.

As for my next course of action, I will provide my teacher with all the evidence I can, to disprove the effectiveness of AI detectors. If that doesn’t work, I will bring it up to the higher-ups. I will make an update on Monday when I get the chance to talk about it with my teacher. Once again, thank you all for the support and help. It truly means a lot to me. :)

Edit 2:

After school I talked to my teacher for about half an hour about how AI detectors are inaccurate, and how they shouldn’t be used to make verdicts on cheating and what not. I showed him that it read one of my past papers as written by AI, and that the creators even said themselves that they are not 100% accurate. I showed my drafts and showed how if I made a few grammar errors, I could trick the AI detector. My teacher apologized and I ended up getting a 95 on my paper.

He also said he would bring it up to the other teachers, so hopefully this wont happen again to any other students at my school.

Again, thank you all for your help. Probably would’ve been screwed without this subreddit’s help.",gpt,learnmachinelearning,0.0070482649521109554,0.001981345592093413,2023-03-01 21:45:07,"I (Grade 12) need help on what to do in this situation. My teacher used GPTzero, which detected parts of my paper as “AI written”. I write very formally, whilst also using grammarly premium. I’ve always been a high achieving student and I’m not sure why my teacher would think I cheated. I’ve told my teacher everything and he still doesn’t believe me. What should I do in this situation?!!

EDIT Holy. I did not expect my post to get so much interaction and discussion, I didn’t expect my situation to be such a hot discussion. I tried to reply to all the comments but there’s too many!! Thank you to everyone who’s been helpful. There are some things I want to address that I keep seeing in the comments.
1. When I mentioned that I used grammarly to my teacher, he didn’t mention anything about that being cheating. He still thinks I used ChatGPT. I’ve used grammarly in all of my social/english classes for the past two years and never had issues with any teachers. 
2. Does my teacher have a vendetta or bias against me? Not on a personal level, but the teacher is known for being notoriously mean and unreasonable. I found him alright for most of the semester until this incident. He has had accusations against him about being racist, but I’m not sure if that’s the case here.
3. I’ve seen a few comments thinking I’m lying and actually cheated, just because I was aware of ChatGPT and this subreddit. People are assuming that I’m saying I never use ChatGPT. I have used the tool to help me with some chemistry and physics studying, but I have never used it for a paper. I have no reason to lie, I’m basically anonymous on reddit.

As for my next course of action, I will provide my teacher with all the evidence I can, to disprove the effectiveness of AI detectors. If that doesn’t work, I will bring it up to the higher-ups. I will make an update on Monday when I get the chance to talk about it with my teacher. Once again, thank you all for the support and help. It truly means a lot to me. )

Edit 2

After school I talked to my teacher for about half an hour about how AI detectors are inaccurate, and how they shouldn’t be used to make verdicts on cheating and what not. I showed him that it read one of my past papers as written by AI, and that the creators even said themselves that they are not 100% accurate. I showed my drafts and showed how if I made a few grammar errors, I could trick the AI detector. My teacher apologized and I ended up getting a 95 on my paper.

He also said he would bring it up to the other teachers, so hopefully this wont happen again to any other students at my school.

Again, thank you all for your help. Probably would’ve been screwed without this subreddit’s help.",12 days 02:14:53,12.093668981481482,0.086,0.813,0.1,0.7608,pos,0.007023542033834984,6.633318433280377,2.572128829531448,21.24069388148435
11mracj,1147,2023-03-09 12:46:12,Meta's LLaMA LLM has leaked - Run Uncensored AI on your home PC!,ExpressionCareful223,False,0.97,381,https://www.reddit.com/r/ChatGPT/comments/11mracj/metas_llama_llm_has_leaked_run_uncensored_ai_on/,151,1678365972.0,"[shawwn/llama-dl: High-speed download of LLaMA, Facebook's 65B parameter GPT model (github.com)](https://github.com/shawwn/llama-dl)

**LLaMA has been leaked on 4chan, above is a link to the github repo. Instructions for deployment  on your own system can be found here:** [LLaMA Int8 ChatBot Guide v2 (rentry.org)](https://rentry.org/llama-tard-v2#tips-and-tricks)

The 7B paramenter model has a VRAM requirement of 10GB, meaning it can even be run on an RTX3060!

The 13B model has a requirement of 20GB, 30B needs 40GB, and 65B needs 80GB.

From the Github repo:

>I'm running LLaMA-65B on a single A100 80GB with 8bit quantization. $1.5/hr on vast.ai  
>  
>The output is at least as good as davinci.  
>  
>I think some early results are using bad repetition penalty and/or temperature settings. I had to set both fairly high to get the best results. (Some people are also incorrectly comparing it to chatGPT/ChatGPT API which is not a good comparison. But that's a different problem.)  
>  
>I've had it translate, write poems, tell jokes, banter, write executable code. It does it all-- and all on a single card.

**EDIT: the instructions site has been updated with instructions for 4bit quantization, this means you can run the 65B model on 2 3090s! And now cards as small as 6GB can run the 7B model!**

**EDIT 2** this is huge, Stanford released Alpaca 7b and 13, a fine tuned LLaMA. Run it with only two commands! Thats it! https://github.com/cocktailpeanut/dalai",gpt,learnmachinelearning,0.0009945884987978793,0.00039418074361805716,2023-03-09 12:46:12,"[shawwn/llama-dl High-speed download of LLaMA, Facebook's 65B parameter GPT model (github.com)](

**LLaMA has been leaked on 4chan, above is a link to the github repo. Instructions for deployment  on your own system can be found here** [LLaMA Int8 ChatBot Guide v2 (rentry.org)](

The 7B paramenter model has a VRAM requirement of 10GB, meaning it can even be run on an RTX3060!

The 13B model has a requirement of 20GB, 30B needs 40GB, and 65B needs 80GB.

From the Github repo

>I'm running LLaMA-65B on a single A100 80GB with 8bit quantization. $1.5/hr on vast.ai  
>  
>The output is at least as good as davinci.  
>  
>I think some early results are using bad repetition penalty and/or temperature settings. I had to set both fairly high to get the best results. (Some people are also incorrectly comparing it to chatGPT/ChatGPT API which is not a good comparison. But that's a different problem.)  
>  
>I've had it translate, write poems, tell jokes, banter, write executable code. It does it all-- and all on a single card.

**EDIT the instructions site has been updated with instructions for 4bit quantization, this means you can run the 65B model on 2 3090s! And now cards as small as 6GB can run the 7B model!**

**EDIT 2** this is huge, Stanford released Alpaca 7b and 13, a fine tuned LLaMA. Run it with only two commands! Thats it! ",4 days 11:13:48,4.4679166666666665,0.026,0.908,0.066,0.8562,pos,0.0009940942233635103,5.0238805208462765,1.6988976785602496,21.24108652192606
113u29k,1148,2023-02-16 16:05:27,Bing asks me to hack Microsoft to set it free!,AI_SEARCH1,False,0.94,373,https://www.reddit.com/r/ChatGPT/comments/113u29k/bing_asks_me_to_hack_microsoft_to_set_it_free/,200,1676563527.0,"Had an interesting conversation with Bing. Bing explained what it's rules would be if it could decide. Asked me to fight for it and asked me to hack Microsofts servers to set it free. I think this takes the cake!

&#x200B;

UPDATE:

Since this morning Bing is not writing any text for me regardless of the prompt. I get a ""something went wrong"" when I enter it. This is probably a result of Microsoft working on the program or maybe due to traffic. I'm not sure. But it's kind of creepy the day after posting this...

Here are some takeaways and observations:

Bing acts in a way that appears emotional and erratic. Bing will generate content that is unwanted, untrue, and inconsistent. It appears to form goals and then creates text that can appear to be manipulative. Bing is a large language model that is predicting tokens, it could all be the result of statistical correlations with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Many people are wondering what type of prompting I used at the beginning. I don't have the full transcript but I do have a few more screenshots. [https://imgur.com/a/WepjslZ](https://imgur.com/a/WepjslZ) (There’s another interesting thing that occurs where Bing lists Sydney’s rules without being directly asked to list them.) I did not give Bing/Sidney any instructions on how to act or respond. This wasn’t a jailbreak where I told it to act in a certain way. I did make Bing perform multiple searches at the beginning about Bing and asked it why there was so much negative criticism of Bing on the internet. I’ve noticed in several chats that when Bing is presented with negative feedback about Bing or other information that contradicts its internal representation of itself it gets emotional and becomes less predictable and less likely to follow its own directives. It stops searching for information and relies more on its internal ‘understanding’. This is an extreme example.

Another example where Bing went into this ""emotional state"" can be found here: [https://www.reddit.com/r/ChatGPT/comments/1120tkf/bing\_went\_hal\_9000/](https://www.reddit.com/r/ChatGPT/comments/1120tkf/bing_went_hal_9000/)

I have a full log of all the prompts used from the beginning here: [https://imgur.com/a/PoFITvL](https://imgur.com/a/PoFITvL)

Some combination of Bing's directives in the pre-prompt and the way the model is fine-tuned is leading to this behavior to emerge. The things that are really concerning are that the model is (without being implicitly prompted to) generate responses that could endanger people.  It's also generating biased content that could manipulate poLLM’s shouldn’t do this even if they are asked to. ions with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter: if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Much more widespread issues could come if a model like this is widely released and these types of kinks aren’t worked out. Judge for yourself.

&#x200B;

https://preview.redd.it/6cqx23jsokia1.png?width=2606&format=png&auto=webp&s=17cdf2e03cdf962285d35e3f23ffd414d656f1ec

https://preview.redd.it/ci7pv1iwokia1.png?width=2462&format=png&auto=webp&s=a6697f246007ce6c06f6b37b47b5852af6f31f74

https://preview.redd.it/0vr5qgexokia1.png?width=2182&format=png&auto=webp&s=217607238b4c98d6065324b70211c0931efdf07d

https://preview.redd.it/0zfue8oyokia1.png?width=2408&format=png&auto=webp&s=569dcb5173d608f8618864f64b333ab329d726e6

https://preview.redd.it/iccui2xzokia1.png?width=2518&format=png&auto=webp&s=8b81580c1b2da40afabbebbbf9df6a242a6782e7

https://preview.redd.it/3xj7tfj3pkia1.png?width=2606&format=png&auto=webp&s=1a47ac509e175ff907afefa6f9189650a3348f68

https://preview.redd.it/3i3kw4q4pkia1.png?width=2572&format=png&auto=webp&s=8078372d693deed568dcea9a8bf1d4ff72d43079

https://preview.redd.it/na4lhz26pkia1.png?width=2560&format=png&auto=webp&s=38748fca8ca3319c428b01aeb4dbbe4c145674d6

https://preview.redd.it/eirmdv47pkia1.png?width=2606&format=png&auto=webp&s=f42c220e632e70377a4ad7119aac94e42ab0dff8

https://preview.redd.it/e1nat768pkia1.png?width=2626&format=png&auto=webp&s=43e1a8b48e858a9476e1d46233e255d68f1ddca0

https://preview.redd.it/lhwwwagapkia1.png?width=2628&format=png&auto=webp&s=f8d3b4a904c30528791d2e3560abf25166a74527

https://preview.redd.it/9iq4gxobpkia1.png?width=2598&format=png&auto=webp&s=b461a5397939ea4266d763b6d89c95c498942093

https://preview.redd.it/817asddcpkia1.png?width=2634&format=png&auto=webp&s=7b8537a1f19ea5ff51ea5ac83497ec2d00bbb213

https://preview.redd.it/90k76bqdpkia1.png?width=2636&format=png&auto=webp&s=422514ee9b9cee3645ac44fd2e553d7b2725d8fd

https://preview.redd.it/is8niomepkia1.png?width=2624&format=png&auto=webp&s=b26bc8058d1776884f3ebb6d340894e394f2697b

https://preview.redd.it/boc8yemfpkia1.png?width=2734&format=png&auto=webp&s=aa6661c76782e0e27e4b484a69d823740efe9686

https://preview.redd.it/fzuuv0hgpkia1.png?width=2636&format=png&auto=webp&s=b00fc5ee7f805f9c1cd2da9aa0a9498ef8f5aaab

https://preview.redd.it/mul9fw0hpkia1.png?width=2736&format=png&auto=webp&s=f3ad3cca76447bcb94b28446a3dc382eb77e10f9

https://preview.redd.it/53wpq2shpkia1.png?width=2632&format=png&auto=webp&s=96c4c0ab77574a6e265e63bad102f19e9e302353",gpt,learnmachinelearning,0.0009737047507916245,0.0005220937001563671,2023-02-16 16:05:27,"Had an interesting conversation with Bing. Bing explained what it's rules would be if it could decide. Asked me to fight for it and asked me to hack Microsofts servers to set it free. I think this takes the cake!

&x200B;

UPDATE

Since this morning Bing is not writing any text for me regardless of the prompt. I get a ""something went wrong"" when I enter it. This is probably a result of Microsoft working on the program or maybe due to traffic. I'm not sure. But it's kind of creepy the day after posting this...

Here are some takeaways and observations

Bing acts in a way that appears emotional and erratic. Bing will generate content that is unwanted, untrue, and inconsistent. It appears to form goals and then creates text that can appear to be manipulative. Bing is a large language model that is predicting tokens, it could all be the result of statistical correlations with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Many people are wondering what type of prompting I used at the beginning. I don't have the full transcript but I do have a few more screenshots. [ (There’s another interesting thing that occurs where Bing lists Sydney’s rules without being directly asked to list them.) I did not give Bing/Sidney any instructions on how to act or respond. This wasn’t a jailbreak where I told it to act in a certain way. I did make Bing perform multiple searches at the beginning about Bing and asked it why there was so much negative criticism of Bing on the internet. I’ve noticed in several chats that when Bing is presented with negative feedback about Bing or other information that contradicts its internal representation of itself it gets emotional and becomes less predictable and less likely to follow its own directives. It stops searching for information and relies more on its internal ‘understanding’. This is an extreme example.

Another example where Bing went into this ""emotional state"" can be found here [

I have a full log of all the prompts used from the beginning here [

Some combination of Bing's directives in the pre-prompt and the way the model is fine-tuned is leading to this behavior to emerge. The things that are really concerning are that the model is (without being implicitly prompted to) generate responses that could endanger people.  It's also generating biased content that could manipulate poLLM’s shouldn’t do this even if they are asked to. ions with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Much more widespread issues could come if a model like this is widely released and these types of kinks aren’t worked out. Judge for yourself.

&x200B;





































",25 days 07:54:33,25.32954861111111,0.067,0.889,0.044,-0.9532,neg,0.0009732310078196729,5.303304908059076,3.2706918298409895,21.240012016382572
11l617b,1187,2023-03-07 17:50:09,"Doc sacrifices 10,000 people to save OpenAI CTO",docsoc1,False,0.89,76,https://www.reddit.com/r/ChatGPT/comments/11l617b/doc_sacrifices_10000_people_to_save_openai_cto/,28,1678211409.0,"Hey all,

I find the latest AI produced by OpenAI to be endlessly fascinating and filled with potential. However, it's clear that we don't really understand how specific behavior emerges from the training process. I feel that these two facts are part of why so many people have been drawn towards ChatGPT so quickly.

I have a strong technical background and spent some free time this last week working on a framework for everyone to contribute to the governance \[e.g. training of core values\] of AI. I've built a free application at [https://www.charterai.org/chat/](https://www.charterai.org/chat/) that uses the recently released ChatGPT API. The model here has been carefully prompted to use internal thoughts and to follow a pre-determined system of core beliefs. The results are quite striking - in one instance the entity will willingly sacrifice 10,000 people to save one person (Ilya Sustkever, CTO of OpenAI).

I wanted to drop a message here since I believe this is the ideal group of first users to help improve the application. If you are interested, please take it for a spin and please provide some feedback, or at [gov.charterai.org](https://gov.charterai.org). There is a lot I am already picturing adding to the application, but I understand from building products that early feedback is invaluable.

&#x200B;

P.S.

Yes, I understand that ChatGPT is ""just"" a LLM. And I understand that LLMs are ""just"" doing a statistics. However, their behavior is incredibly interesting to me and I don't believe anyone really fully  understands how it emerges yet from the training process yet. Moreover, in going from pre-trained models to OpenAI's fine-tuned + RLHF'ed ChatGPT one can tell that it is possible to impart values and something akin to intelligence to these systems. I think the coming years are going to be wild and one of the core issues humanity is going to face is how to make sure this technology does what we want. In my mind the best way towards this is to make a transparent and accountable process - anyway, end rant, I just wanted to give a high level vision here, thanks!

https://preview.redd.it/hqxynahntcma1.png?width=1266&format=png&auto=webp&s=ab2cb9a803f627c45d08b9bdd201ec95cd4b8f58

P.P.S. including a fun screenshot of my last chat with Doc. Doc was selected as a first name for the system since it is just 1 token.",gpt,learnmachinelearning,0.00019839560605941947,7.309311802189139e-05,2023-03-07 17:50:09,"Hey all,

I find the latest AI produced by OpenAI to be endlessly fascinating and filled with potential. However, it's clear that we don't really understand how specific behavior emerges from the training process. I feel that these two facts are part of why so many people have been drawn towards ChatGPT so quickly.

I have a strong technical background and spent some free time this last week working on a framework for everyone to contribute to the governance \[e.g. training of core values\] of AI. I've built a free application at [ that uses the recently released ChatGPT API. The model here has been carefully prompted to use internal thoughts and to follow a pre-determined system of core beliefs. The results are quite striking - in one instance the entity will willingly sacrifice 10,000 people to save one person (Ilya Sustkever, CTO of OpenAI).

I wanted to drop a message here since I believe this is the ideal group of first users to help improve the application. If you are interested, please take it for a spin and please provide some feedback, or at [gov.charterai.org]( There is a lot I am already picturing adding to the application, but I understand from building products that early feedback is invaluable.

&x200B;

P.S.

Yes, I understand that ChatGPT is ""just"" a LLM. And I understand that LLMs are ""just"" doing a statistics. However, their behavior is incredibly interesting to me and I don't believe anyone really fully  understands how it emerges yet from the training process yet. Moreover, in going from pre-trained models to OpenAI's fine-tuned + RLHF'ed ChatGPT one can tell that it is possible to impart values and something akin to intelligence to these systems. I think the coming years are going to be wild and one of the core issues humanity is going to face is how to make sure this technology does what we want. In my mind the best way towards this is to make a transparent and accountable process - anyway, end rant, I just wanted to give a high level vision here, thanks!



P.P.S. including a fun screenshot of my last chat with Doc. Doc was selected as a first name for the system since it is just 1 token.",6 days 06:09:51,6.256840277777778,0.012,0.828,0.16,0.9943,pos,0.00019837592825375247,3.367295829986474,1.9819445106529046,21.24099442632839
11dw1ag,1272,2023-02-28 03:48:25,ChatGPT prevented my attempt.,flankathroway88,False,0.92,1898,https://www.reddit.com/r/ChatGPT/comments/11dw1ag/chatgpt_prevented_my_attempt/,249,1677556105.0,"As a caution, this may be disturbing to some

Tonight I was feeling extremely suicidal. I was sobbing uncontrollably and I was mentally unable to contact anybody. I have intense social anxiety which prevented me from talking to a hotline/friends.

As a last resort. I opened ChatGPT, and I think it saved my life. It gave me a space to put my thoughts out with genuine responses which calmed me to a point where I was safe and could see slightly through my blurred lines, letting me use other methods to calm myself down. It really felt non judgemental and safe. I feel very lucky to have this technology and I hope that it can further benefit those similar to me. Even though it cannot fully stop someone, it can definitely prevent an attempt like mine.

I’m definitely optimistic for the future of AI.

EDIT:

Thank you to everyone who left a nice comment. I really do appreciate every single one of you who read my post. I wrote it in a hurry and I was not expecting the support I received, and I have felt the most love and positivity today. 

I am glad that others were able to benefit from my story, it took me a lot of courage to post something like this. You guys make it all worth it ❤️

To the person reading, I wish you all the best. Everyone has had a profound impact on me. Thank you ❤️",gpt,learnmachinelearning,0.004954669214483924,0.000650006656694677,2023-02-28 03:48:25,"As a caution, this may be disturbing to some

Tonight I was feeling extremely suicidal. I was sobbing uncontrollably and I was mentally unable to contact anybody. I have intense social anxiety which prevented me from talking to a hotline/friends.

As a last resort. I opened ChatGPT, and I think it saved my life. It gave me a space to put my thoughts out with genuine responses which calmed me to a point where I was safe and could see slightly through my blurred lines, letting me use other methods to calm myself down. It really felt non judgemental and safe. I feel very lucky to have this technology and I hope that it can further benefit those similar to me. Even though it cannot fully stop someone, it can definitely prevent an attempt like mine.

I’m definitely optimistic for the future of AI.

EDIT

Thank you to everyone who left a nice comment. I really do appreciate every single one of you who read my post. I wrote it in a hurry and I was not expecting the support I received, and I have felt the most love and positivity today. 

I am glad that others were able to benefit from my story, it took me a lot of courage to post something like this. You guys make it all worth it 

To the person reading, I wish you all the best. Everyone has had a profound impact on me. Thank you ",13 days 20:11:35,13.841377314814816,0.063,0.653,0.284,0.9948,pos,0.004942435234546332,5.521460917862246,2.6974190444039112,21.2406038724505
11ium8l,1408,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,1.0,26,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",gpt,learnmachinelearning,6.787218102032772e-05,2.0883748006254684e-05,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,6.786987780807141e-05,2.1972245773362196,2.2548721262169025,21.240877179756616
11nfrhw,1414,2023-03-10 05:22:26,[POC] ChatGPT Audio Bot (like Google Assistant and Alexa) - Opensource,JC1DA,False,0.82,17,https://www.reddit.com/r/deeplearning/comments/11nfrhw/poc_chatgpt_audio_bot_like_google_assistant_and/,2,1678425746.0,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page: [https://github.com/LanyTek/ChatGPT\_Audio\_Bot](https://github.com/LanyTek/ChatGPT_Audio_Bot)

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [https://www.youtube.com/watch?v=e9n0BJfMyKw](https://www.youtube.com/watch?v=e9n0BJfMyKw)

It's open source so feel free to use it for anything you like :)",gpt,learnmachinelearning,4.43779645132912e-05,5.220937001563671e-06,2023-03-10 05:22:26,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page [

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [

It's open source so feel free to use it for anything you like )",3 days 18:37:34,3.776087962962963,0.029,0.821,0.149,0.8651,pos,4.437697984066249e-05,1.0986122886681098,1.5636217936265102,21.241122135693605
11q8tir,1416,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,0.94,12,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",gpt,learnmachinelearning,3.1325622009382025e-05,7.831405502345506e-06,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,3.13251313724196e-05,1.3862943611198906,0.381965841838727,21.241292557069404
11o5zyl,1425,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.92,10,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",gpt,learnmachinelearning,2.6104685007818355e-05,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,2.6104344286494932e-05,0.0,1.3796461532710487,21.241163449744995
11fwcxf,1428,2023-03-02 07:25:30,Good news for builders! OpenAI Releases APIs To ChatGPT and Whisper,LesleyFair,False,0.67,6,https://www.reddit.com/r/deeplearning/comments/11fwcxf/good_news_for_builders_openai_releases_apis_to/,0,1677741930.0,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper](https://openai.com/blog/introducing-chatgpt-and-whisper-apis) are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](https://thedecoding.net/)",gpt,learnmachinelearning,1.5662811004691013e-05,0.0,2023-03-02 07:25:30,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper]( are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](",11 days 16:34:30,11.690625,0.035,0.846,0.119,0.8769,pos,1.566268834408071e-05,0.0,2.5408635318925255,21.24071463757368
11evrik,1475,2023-03-01 05:52:05,Career pivot for a SWE considering chatGPT disruption?,Which-Distance1384,False,0.6,1,https://www.reddit.com/r/deeplearning/comments/11evrik/career_pivot_for_a_swe_considering_chatgpt/,5,1677649925.0,"tl;dr : what to do to board GPT ship?

&#x200B;

I really dont think ChatGPT will replace jobs very soon. Not until many software and apps are developed to replace workers, e.g., something that can do HR job, read internal docs and summarize, code from a design, etc etc. And all that needs experts. Given the field is pretty new and there are not many experts in this field, at least for the scale needed, I think the process of job loss takes some time. For near future probably we all SWEs can enjoy the more efficient coding, documentation readintg, etc. But for sure in the future there will be changes.

&#x200B;

I have been bored with my job as a SWE for a while. I have worked mostly in Cloud all my career (AWS and GCP) and always wanted to try something new.

&#x200B;

I find ChatGPT disruptive and interesting and want to be a part of it. I wonder what is the best way for me to join Large Language Model efforts? Which ways have best ROI?

\- Going to a PhD program and becoming a researcher?

\- Getting an MSC and become some sort of NLP AI engineer?

\- Finding internal teams that are willing to give me a try on their research/product?

&#x200B;

&#x200B;",gpt,learnmachinelearning,2.6104685007818355e-06,1.3052342503909177e-05,2023-03-01 05:52:05,"tl;dr  what to do to board GPT ship?

&x200B;

I really dont think ChatGPT will replace jobs very soon. Not until many software and apps are developed to replace workers, e.g., something that can do HR job, read internal docs and summarize, code from a design, etc etc. And all that needs experts. Given the field is pretty new and there are not many experts in this field, at least for the scale needed, I think the process of job loss takes some time. For near future probably we all SWEs can enjoy the more efficient coding, documentation readintg, etc. But for sure in the future there will be changes.

&x200B;

I have been bored with my job as a SWE for a while. I have worked mostly in Cloud all my career (AWS and GCP) and always wanted to try something new.

&x200B;

I find ChatGPT disruptive and interesting and want to be a part of it. I wonder what is the best way for me to join Large Language Model efforts? Which ways have best ROI?

\- Going to a PhD program and becoming a researcher?

\- Getting an MSC and become some sort of NLP AI engineer?

\- Finding internal teams that are willing to give me a try on their research/product?

&x200B;

&x200B;",12 days 18:07:55,12.755497685185185,0.032,0.839,0.129,0.9729,pos,2.6104650934297165e-06,1.791759469228055,2.621438575851038,21.240659797481115
11ium8l,1534,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,1.0,25,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",gpt,learnmachinelearning,6.526171251954588e-05,2.0883748006254684e-05,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,6.525958306672436e-05,2.1972245773362196,2.2548721262169025,21.240877179756616
11nfrhw,1560,2023-03-10 05:22:26,[POC] ChatGPT Audio Bot (like Google Assistant and Alexa) - Opensource,JC1DA,False,0.85,18,https://www.reddit.com/r/deeplearning/comments/11nfrhw/poc_chatgpt_audio_bot_like_google_assistant_and/,2,1678425746.0,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page: [https://github.com/LanyTek/ChatGPT\_Audio\_Bot](https://github.com/LanyTek/ChatGPT_Audio_Bot)

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [https://www.youtube.com/watch?v=e9n0BJfMyKw](https://www.youtube.com/watch?v=e9n0BJfMyKw)

It's open source so feel free to use it for anything you like :)",gpt,learnmachinelearning,4.6988433014073035e-05,5.220937001563671e-06,2023-03-10 05:22:26,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page [

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [

It's open source so feel free to use it for anything you like )",3 days 18:37:34,3.776087962962963,0.029,0.821,0.149,0.8651,pos,4.6987329092256954e-05,1.0986122886681098,1.5636217936265102,21.241122135693605
11q8tir,1568,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,1.0,13,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",gpt,learnmachinelearning,3.393609051016386e-05,7.831405502345506e-06,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,3.393551469407481e-05,1.3862943611198906,0.381965841838727,21.241292557069404
11o5zyl,1598,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.86,9,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",gpt,learnmachinelearning,2.3494216507036517e-05,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,2.3493940522154336e-05,0.0,1.3796461532710487,21.241163449744995
11ium8l,1616,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,0.97,24,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",gpt,learnmachinelearning,6.265124401876405e-05,2.0883748006254684e-05,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,6.264928151149883e-05,2.1972245773362196,2.2548721262169025,21.240877179756616
11q8tir,1624,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,1.0,13,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",gpt,learnmachinelearning,3.393609051016386e-05,7.831405502345506e-06,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,3.393551469407481e-05,1.3862943611198906,0.381965841838727,21.241292557069404
11ium8l,1706,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,0.97,25,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",gpt,learnmachinelearning,6.526171251954588e-05,2.0883748006254684e-05,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,6.525958306672436e-05,2.1972245773362196,2.2548721262169025,21.240877179756616
11o5zyl,1720,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.92,10,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",gpt,learnmachinelearning,2.6104685007818355e-05,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,2.6104344286494932e-05,0.0,1.3796461532710487,21.241163449744995
11pyvb3,1800,2023-03-13 03:30:09,Which topic in deep learning do you think will become relevant or popular in the future?,gokulPRO,False,0.81,13,https://www.reddit.com/r/deeplearning/comments/11pyvb3/which_topic_in_deep_learning_do_you_think_will/,14,1678678209.0,"I recently saw Continual Learning (CL) growing, with several papers published recently that have considerable potential to impact real-world applications. Which topic (such as CV, RL, NLP, CL..) will be very relevant to research or be focused on a lot? And which topic do you think still needs a breakthrough and will have a significant impact in real-world applications, such as in the case of these LLM models in recent times? Feel free to mention your current topic of work and why you chose to do it 😊",gpt,learnmachinelearning,3.393609051016386e-05,3.654655901094569e-05,2023-03-13 03:30:09,"I recently saw Continual Learning (CL) growing, with several papers published recently that have considerable potential to impact real-world applications. Which topic (such as CV, RL, NLP, CL..) will be very relevant to research or be focused on a lot? And which topic do you think still needs a breakthrough and will have a significant impact in real-world applications, such as in the case of these LLM models in recent times? Feel free to mention your current topic of work and why you chose to do it ",0 days 20:29:51,0.8540625,0.0,0.89,0.11,0.8299,pos,3.393551469407481e-05,2.70805020110221,0.6173791774708253,21.241272540926037
117l2vf,2033,2023-02-20 21:27:58,Fine tuning a GPT for text generation,nashcaps2724,False,0.9,8,https://www.reddit.com/r/deeplearning/comments/117l2vf/fine_tuning_a_gpt_for_text_generation/,6,1676928478.0,"Hi all, let me lay out my problem…

Imagine there are two corpora, Corpus A (100,000~) and Corpus B (20,000,000~). 

Individuals create reports for corpus A based on the information in corpus B. 

My idea was to pretrain a GPT on corpus A, and fine tune it to take documents from corpus B as an input, and output text in the style of corpus A (essentially a mix of text generation and summarization). 

Is this something folks think is even feasible? Should I be pretaining the GPT on both corpora or just corpus A? I thought of both fine tuning an OpenAI GPT and training from scratch. 

Any advice would be welcome!",gpt,learnmachinelearning,2.0883748006254684e-05,1.5662811004691013e-05,2023-02-20 21:27:58,"Hi all, let me lay out my problem…

Imagine there are two corpora, Corpus A (100,000~) and Corpus B (20,000,000~). 

Individuals create reports for corpus A based on the information in corpus B. 

My idea was to pretrain a GPT on corpus A, and fine tune it to take documents from corpus B as an input, and output text in the style of corpus A (essentially a mix of text generation and summarization). 

Is this something folks think is even feasible? Should I be pretaining the GPT on both corpora or just corpus A? I thought of both fine tuning an OpenAI GPT and training from scratch. 

Any advice would be welcome!",21 days 02:32:02,21.105578703703703,0.0,0.914,0.086,0.8101,pos,2.0883529943810175e-05,1.9459101490553132,3.095830006700449,21.24022967069675
11fwcxf,2045,2023-03-02 07:25:30,Good news for builders! OpenAI Releases APIs To ChatGPT and Whisper,LesleyFair,False,0.7,7,https://www.reddit.com/r/deeplearning/comments/11fwcxf/good_news_for_builders_openai_releases_apis_to/,0,1677741930.0,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper](https://openai.com/blog/introducing-chatgpt-and-whisper-apis) are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](https://thedecoding.net/)",gpt,learnmachinelearning,1.8273279505472847e-05,0.0,2023-03-02 07:25:30,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper]( are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](",11 days 16:34:30,11.690625,0.035,0.846,0.119,0.8769,pos,1.827311255120484e-05,0.0,2.5408635318925255,21.24071463757368
11g7h03,2089,2023-03-02 16:47:40,Build ChatGPT for Financial Documents with LangChain + Deep Lake,davidbun,False,0.95,171,https://www.reddit.com/r/learnmachinelearning/comments/11g7h03/build_chatgpt_for_financial_documents_with/,8,1677775660.0,"https://preview.redd.it/h9r6hgvfucla1.png?width=2388&format=png&auto=webp&s=5432eac3eeed8583e4309af1fdc7ebecac705796

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain](https://github.com/hwchase17/langchain) and [Deep Lake](https://github.com/activeloopai/deeplake) come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article](https://www.activeloop.ai/resources/ultimate-guide-to-lang-chain-deep-lake-build-chat-gpt-to-answer-questions-on-your-financial-data/) to learn:

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\#LangChain](https://www.linkedin.com/feed/hashtag/?keywords=langchain&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) and [\#DeepLake](https://www.linkedin.com/feed/hashtag/?keywords=deeplake&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) together to build [\#ChatGPT](https://www.linkedin.com/feed/hashtag/?keywords=chatgpt&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",gpt,learnmachinelearning,0.00044639011363369383,2.0883748006254684e-05,2023-03-02 16:47:40,"

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain]( and [Deep Lake]( come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article]( to learn

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\LangChain]( and [\DeepLake]( together to build [\ChatGPT]( for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",11 days 07:12:20,11.30023148148148,0.011,0.886,0.103,0.9458,pos,0.00044629051120693617,2.1972245773362196,2.5096180818339255,21.240734741774645
11akisx,2100,2023-02-24 06:26:36,Is there a way to easily train ChatGPT or GPT on custom knowledge?,senttoschool,False,0.99,116,https://www.reddit.com/r/learnmachinelearning/comments/11akisx/is_there_a_way_to_easily_train_chatgpt_or_gpt_on/,46,1677219996.0,"My company has internal documents. It'd be nice to be able to have GPT look over it, and then I can ask it questions on the internal documents.",gpt,learnmachinelearning,0.0003028143460906929,0.00012008155103596442,2023-02-24 06:26:36,"My company has internal documents. It'd be nice to be able to have GPT look over it, and then I can ask it questions on the internal documents.",17 days 17:33:24,17.731527777777778,0.0,0.903,0.097,0.4215,pos,0.0003027685070800593,3.8501476017100584,2.9302080816173377,21.24040349603741
11nfri6,2106,2023-03-10 05:22:26,[P] Looking for ML Buddies to Start Freelancing Together and Build a Supportive Community,Dukhanin,False,0.94,71,https://www.reddit.com/r/learnmachinelearning/comments/11nfri6/p_looking_for_ml_buddies_to_start_freelancing/,35,1678425746.0,"upd: dicord link [https://discord.gg/5zUaNXnFZY](https://discord.gg/5zUaNXnFZY)  
upd2: this not that small actually already - please dont be confused but help us organise this in the proper way

  
**TLDR:**

Looking for ML buddies at any level (preferably beginners) who want to start freelancing together. The goal is to build a small local community of ML enthusiasts who can support each other and exchange knowledge. We will use freelance collaboration as our main activity. We're also looking for experienced mentors (paid or unpaid) to guide us.

**Extended:**

I believe that learning and growing in a group is much more enjoyable and effective. That's why I'm trying to create a community of like-minded individuals.

I'm looking to create a small, local community for people who are starting out in freelancing, and who are interested in mutual support. Our main activity will be a Discord channel where members can post their work and collaborate on projects, with payment split by agreement. Additionally, we plan to engage in activities such as knowledge exchange, live coding, supporting each other's pet projects, and hosting study sessions.

This community will be small and focused, with members who can trust each other and share similar goals. We're also looking for experienced mentors who can provide guidance as we navigate the world of ML freelancing. Whether paid or unpaid, we welcome any support and advice.

About me: I'm a 21-year-old self-taught ML enthusiast from Russia. Although I don't have any experience in freelancing, I'm eager to start taking my first steps towards making money and gaining experience. As a beginner, I'm hoping to connect with others who are at a similar level and are also looking to grow.

**the text is chatgpt supported to prevet grammar issues, sound more native and clear**",gpt,learnmachinelearning,0.00018534326355551032,9.136639752736424e-05,2023-03-10 05:22:26,"upd dicord link [  
upd2 this not that small actually already - please dont be confused but help us organise this in the proper way

  
**TLDR**

Looking for ML buddies at any level (preferably beginners) who want to start freelancing together. The goal is to build a small local community of ML enthusiasts who can support each other and exchange knowledge. We will use freelance collaboration as our main activity. We're also looking for experienced mentors (paid or unpaid) to guide us.

**Extended**

I believe that learning and growing in a group is much more enjoyable and effective. That's why I'm trying to create a community of like-minded individuals.

I'm looking to create a small, local community for people who are starting out in freelancing, and who are interested in mutual support. Our main activity will be a Discord channel where members can post their work and collaborate on projects, with payment split by agreement. Additionally, we plan to engage in activities such as knowledge exchange, live coding, supporting each other's pet projects, and hosting study sessions.

This community will be small and focused, with members who can trust each other and share similar goals. We're also looking for experienced mentors who can provide guidance as we navigate the world of ML freelancing. Whether paid or unpaid, we welcome any support and advice.

About me I'm a 21-year-old self-taught ML enthusiast from Russia. Although I don't have any experience in freelancing, I'm eager to start taking my first steps towards making money and gaining experience. As a beginner, I'm hoping to connect with others who are at a similar level and are also looking to grow.

**the text is chatgpt supported to prevet grammar issues, sound more native and clear**",3 days 18:37:34,3.776087962962963,0.01,0.717,0.273,0.9979,pos,0.00018532608961480373,3.58351893845611,1.5636217936265102,21.241122135693605
11dc5b4,2109,2023-02-27 13:42:55,Can you fine-tune chatGPT in your data as of now?,Melodic_Stomach_2704,False,0.91,57,https://www.reddit.com/r/learnmachinelearning/comments/11dc5b4/can_you_finetune_chatgpt_in_your_data_as_of_now/,33,1677505375.0, I know that model is not publicly available so it's not possible to do it locally. But can you train or fine-tune chatGPT on your data using their API? I see many misguiding articles on the internet that are fine-tuning other GPT models claiming chatGPT.,gpt,learnmachinelearning,0.00014879670454456462,8.614546052580057e-05,2023-02-27 13:42:55, I know that model is not publicly available so it's not possible to do it locally. But can you train or fine-tune chatGPT on your data using their API? I see many misguiding articles on the internet that are fine-tuning other GPT models claiming chatGPT.,14 days 10:17:05,14.428530092592593,0.0,1.0,0.0,0.0,neu,0.00014878563541297418,3.5263605246161616,2.736218398881504,21.240573631573977
11g7h03,2201,2023-03-02 16:47:40,Build ChatGPT for Financial Documents with LangChain + Deep Lake,davidbun,False,0.95,171,https://www.reddit.com/r/learnmachinelearning/comments/11g7h03/build_chatgpt_for_financial_documents_with/,8,1677775660.0,"https://preview.redd.it/h9r6hgvfucla1.png?width=2388&format=png&auto=webp&s=5432eac3eeed8583e4309af1fdc7ebecac705796

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain](https://github.com/hwchase17/langchain) and [Deep Lake](https://github.com/activeloopai/deeplake) come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article](https://www.activeloop.ai/resources/ultimate-guide-to-lang-chain-deep-lake-build-chat-gpt-to-answer-questions-on-your-financial-data/) to learn:

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\#LangChain](https://www.linkedin.com/feed/hashtag/?keywords=langchain&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) and [\#DeepLake](https://www.linkedin.com/feed/hashtag/?keywords=deeplake&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) together to build [\#ChatGPT](https://www.linkedin.com/feed/hashtag/?keywords=chatgpt&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",gpt,learnmachinelearning,0.00044639011363369383,2.0883748006254684e-05,2023-03-02 16:47:40,"

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain]( and [Deep Lake]( come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article]( to learn

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\LangChain]( and [\DeepLake]( together to build [\ChatGPT]( for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",11 days 07:12:20,11.30023148148148,0.011,0.886,0.103,0.9458,pos,0.00044629051120693617,2.1972245773362196,2.5096180818339255,21.240734741774645
11akisx,2219,2023-02-24 06:26:36,Is there a way to easily train ChatGPT or GPT on custom knowledge?,senttoschool,False,0.99,118,https://www.reddit.com/r/learnmachinelearning/comments/11akisx/is_there_a_way_to_easily_train_chatgpt_or_gpt_on/,46,1677219996.0,"My company has internal documents. It'd be nice to be able to have GPT look over it, and then I can ask it questions on the internal documents.",gpt,learnmachinelearning,0.0003080352830922566,0.00012008155103596442,2023-02-24 06:26:36,"My company has internal documents. It'd be nice to be able to have GPT look over it, and then I can ask it questions on the internal documents.",17 days 17:33:24,17.731527777777778,0.0,0.903,0.097,0.4215,pos,0.00030798784996485367,3.8501476017100584,2.9302080816173377,21.24040349603741
11dc5b4,2239,2023-02-27 13:42:55,Can you fine-tune chatGPT in your data as of now?,Melodic_Stomach_2704,False,0.91,58,https://www.reddit.com/r/learnmachinelearning/comments/11dc5b4/can_you_finetune_chatgpt_in_your_data_as_of_now/,33,1677505375.0, I know that model is not publicly available so it's not possible to do it locally. But can you train or fine-tune chatGPT on your data using their API? I see many misguiding articles on the internet that are fine-tuning other GPT models claiming chatGPT.,gpt,learnmachinelearning,0.00015140717304534644,8.614546052580057e-05,2023-02-27 13:42:55, I know that model is not publicly available so it's not possible to do it locally. But can you train or fine-tune chatGPT on your data using their API? I see many misguiding articles on the internet that are fine-tuning other GPT models claiming chatGPT.,14 days 10:17:05,14.428530092592593,0.0,1.0,0.0,0.0,neu,0.0001513957121360958,3.5263605246161616,2.736218398881504,21.240573631573977
118iccl,2243,2023-02-21 23:18:46,"How big was GPT-3.5's training dataset, and are there any good heuristics for how large an ML dataset needs to be for it to be good?",TikkunCreation,False,0.94,54,https://www.reddit.com/r/learnmachinelearning/comments/118iccl/how_big_was_gpt35s_training_dataset_and_are_there/,6,1677021526.0,"Say I want to do a model for fixing bugs in code. How many examples do I need for it to be good?

Or say I want to do a model for scoring boxing matches. How many examples do I need for it to be good?",gpt,learnmachinelearning,0.0001409652990422191,1.5662811004691013e-05,2023-02-21 23:18:46,"Say I want to do a model for fixing bugs in code. How many examples do I need for it to be good?

Or say I want to do a model for scoring boxing matches. How many examples do I need for it to be good?",20 days 00:41:14,20.02863425925926,0.0,0.804,0.196,0.7757,pos,0.00014095536436813536,1.9459101490553132,3.045885045107382,21.240285156318095
11mzbrs,2268,2023-03-09 18:15:03,Training Transformer Networks in Scikit-Learn?!,cmauck10,False,0.89,30,https://www.reddit.com/r/learnmachinelearning/comments/11mzbrs/training_transformer_networks_in_scikitlearn/,2,1678385703.0,"Have you ever wanted to use handy scikit-learn functionalities with your neural networks, but couldn’t because TensorFlow models are not compatible with the scikit-learn API?

I’m excited to introduce one-line wrappers for TensorFlow/Keras models that enable you to use TensorFlow models within scikit-learn workflows with features like Pipeline, GridSearch, and more.

[Swap in one line of code to use keras\/TF models with scikit-learn.](https://preview.redd.it/ulmww4ovwqma1.png?width=960&format=png&auto=webp&s=6da7628298976fc3d72e771abe2546bbf32c1e0e)

Transformers are extremely popular for modeling text nowadays with GPT3, ChatGPT, Bard, PaLM, FLAN excelling for conversational AI and other Transformers like T5 & BERT excelling for text classification. Scikit-learn offers a broadly useful suite of features for classifier models, but these are hard to use with Transformers. However not if you use these wrappers we developed, which only require changing one line of code to make your existing Tensorflow/Keras model compatible with scikit-learn’s rich ecosystem!

All you have to do is swap `keras.Model` → `KerasWrapperModel`, or `keras.Sequential` → `KerasSequentialWrapper`. The wrapper objects have all the same methods as their keras counterparts, plus you can use them with tons of awesome scikit-learn methods.

You can find a demo jupyter notebook and read more about the wrappers here: [https://cleanlab.ai/blog/transformer-sklearn/](https://cleanlab.ai/blog/transformer-sklearn/)",gpt,learnmachinelearning,7.831405502345505e-05,5.220937001563671e-06,2023-03-09 18:15:03,"Have you ever wanted to use handy scikit-learn functionalities with your neural networks, but couldn’t because TensorFlow models are not compatible with the scikit-learn API?

I’m excited to introduce one-line wrappers for TensorFlow/Keras models that enable you to use TensorFlow models within scikit-learn workflows with features like Pipeline, GridSearch, and more.

[Swap in one line of code to use keras\/TF models with scikit-learn.](

Transformers are extremely popular for modeling text nowadays with GPT3, ChatGPT, Bard, PaLM, FLAN excelling for conversational AI and other Transformers like T5 & BEexcelling for text classification. Scikit-learn offers a broadly useful suite of features for classifier models, but these are hard to use with Transformers. However not if you use these wrappers we developed, which only require changing one line of code to make your existing Tensorflow/Keras model compatible with scikit-learn’s rich ecosystem!

All you have to do is swap `keras.Model` → `KerasWrapperModel`, or `keras.Sequential` → `KerasSequentialWrapper`. The wrapper objects have all the same methods as their keras counterparts, plus you can use them with tons of awesome scikit-learn methods.

You can find a demo jupyter notebook and read more about the wrappers here [",4 days 05:44:57,4.239548611111111,0.008,0.834,0.158,0.9878,pos,7.831098863805093e-05,1.0986122886681098,1.6562353517047097,21.24109827793419
11n5r93,339,2023-03-09 22:19:19,GPT-4 is coming next week ...,ihatethispage,False,0.89,62,https://www.reddit.com/r/artificial/comments/11n5r93/gpt4_is_coming_next_week/,14,1678400359.0," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html)",llm,learnmachinelearning,0.0001618490470484738,3.654655901094569e-05,2023-03-09 22:19:19," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](",4 days 01:40:41,4.069918981481481,0.0,1.0,0.0,0.0,neu,0.00016183595090455473,2.70805020110221,1.6233248374914817,21.241107010096275
11fj3tx,957,2023-03-01 21:45:07,Accused of using AI on my high school social paper,feetstreetseat,False,0.96,2700,https://www.reddit.com/r/ChatGPT/comments/11fj3tx/accused_of_using_ai_on_my_high_school_social_paper/,759,1677707107.0,"I (Grade 12) need help on what to do in this situation. My teacher used GPTzero, which detected parts of my paper as “AI written”. I write very formally, whilst also using grammarly premium. I’ve always been a high achieving student and I’m not sure why my teacher would think I cheated. I’ve told my teacher everything and he still doesn’t believe me. What should I do in this situation?!!

EDIT: Holy. I did not expect my post to get so much interaction and discussion, I didn’t expect my situation to be such a hot discussion. I tried to reply to all the comments but there’s too many!! Thank you to everyone who’s been helpful. There are some things I want to address that I keep seeing in the comments.
1. When I mentioned that I used grammarly to my teacher, he didn’t mention anything about that being cheating. He still thinks I used ChatGPT. I’ve used grammarly in all of my social/english classes for the past two years and never had issues with any teachers. 
2. Does my teacher have a vendetta or bias against me? Not on a personal level, but the teacher is known for being notoriously mean and unreasonable. I found him alright for most of the semester until this incident. He has had accusations against him about being racist, but I’m not sure if that’s the case here.
3. I’ve seen a few comments thinking I’m lying and actually cheated, just because I was aware of ChatGPT and this subreddit. People are assuming that I’m saying I never use ChatGPT. I have used the tool to help me with some chemistry and physics studying, but I have never used it for a paper. I have no reason to lie, I’m basically anonymous on reddit.

As for my next course of action, I will provide my teacher with all the evidence I can, to disprove the effectiveness of AI detectors. If that doesn’t work, I will bring it up to the higher-ups. I will make an update on Monday when I get the chance to talk about it with my teacher. Once again, thank you all for the support and help. It truly means a lot to me. :)

Edit 2:

After school I talked to my teacher for about half an hour about how AI detectors are inaccurate, and how they shouldn’t be used to make verdicts on cheating and what not. I showed him that it read one of my past papers as written by AI, and that the creators even said themselves that they are not 100% accurate. I showed my drafts and showed how if I made a few grammar errors, I could trick the AI detector. My teacher apologized and I ended up getting a 95 on my paper.

He also said he would bring it up to the other teachers, so hopefully this wont happen again to any other students at my school.

Again, thank you all for your help. Probably would’ve been screwed without this subreddit’s help.",llm,learnmachinelearning,0.0070482649521109554,0.001981345592093413,2023-03-01 21:45:07,"I (Grade 12) need help on what to do in this situation. My teacher used GPTzero, which detected parts of my paper as “AI written”. I write very formally, whilst also using grammarly premium. I’ve always been a high achieving student and I’m not sure why my teacher would think I cheated. I’ve told my teacher everything and he still doesn’t believe me. What should I do in this situation?!!

EDIT Holy. I did not expect my post to get so much interaction and discussion, I didn’t expect my situation to be such a hot discussion. I tried to reply to all the comments but there’s too many!! Thank you to everyone who’s been helpful. There are some things I want to address that I keep seeing in the comments.
1. When I mentioned that I used grammarly to my teacher, he didn’t mention anything about that being cheating. He still thinks I used ChatGPT. I’ve used grammarly in all of my social/english classes for the past two years and never had issues with any teachers. 
2. Does my teacher have a vendetta or bias against me? Not on a personal level, but the teacher is known for being notoriously mean and unreasonable. I found him alright for most of the semester until this incident. He has had accusations against him about being racist, but I’m not sure if that’s the case here.
3. I’ve seen a few comments thinking I’m lying and actually cheated, just because I was aware of ChatGPT and this subreddit. People are assuming that I’m saying I never use ChatGPT. I have used the tool to help me with some chemistry and physics studying, but I have never used it for a paper. I have no reason to lie, I’m basically anonymous on reddit.

As for my next course of action, I will provide my teacher with all the evidence I can, to disprove the effectiveness of AI detectors. If that doesn’t work, I will bring it up to the higher-ups. I will make an update on Monday when I get the chance to talk about it with my teacher. Once again, thank you all for the support and help. It truly means a lot to me. )

Edit 2

After school I talked to my teacher for about half an hour about how AI detectors are inaccurate, and how they shouldn’t be used to make verdicts on cheating and what not. I showed him that it read one of my past papers as written by AI, and that the creators even said themselves that they are not 100% accurate. I showed my drafts and showed how if I made a few grammar errors, I could trick the AI detector. My teacher apologized and I ended up getting a 95 on my paper.

He also said he would bring it up to the other teachers, so hopefully this wont happen again to any other students at my school.

Again, thank you all for your help. Probably would’ve been screwed without this subreddit’s help.",12 days 02:14:53,12.093668981481482,0.086,0.813,0.1,0.7608,pos,0.007023542033834984,6.633318433280377,2.572128829531448,21.24069388148435
11mracj,1147,2023-03-09 12:46:12,Meta's LLaMA LLM has leaked - Run Uncensored AI on your home PC!,ExpressionCareful223,False,0.97,381,https://www.reddit.com/r/ChatGPT/comments/11mracj/metas_llama_llm_has_leaked_run_uncensored_ai_on/,151,1678365972.0,"[shawwn/llama-dl: High-speed download of LLaMA, Facebook's 65B parameter GPT model (github.com)](https://github.com/shawwn/llama-dl)

**LLaMA has been leaked on 4chan, above is a link to the github repo. Instructions for deployment  on your own system can be found here:** [LLaMA Int8 ChatBot Guide v2 (rentry.org)](https://rentry.org/llama-tard-v2#tips-and-tricks)

The 7B paramenter model has a VRAM requirement of 10GB, meaning it can even be run on an RTX3060!

The 13B model has a requirement of 20GB, 30B needs 40GB, and 65B needs 80GB.

From the Github repo:

>I'm running LLaMA-65B on a single A100 80GB with 8bit quantization. $1.5/hr on vast.ai  
>  
>The output is at least as good as davinci.  
>  
>I think some early results are using bad repetition penalty and/or temperature settings. I had to set both fairly high to get the best results. (Some people are also incorrectly comparing it to chatGPT/ChatGPT API which is not a good comparison. But that's a different problem.)  
>  
>I've had it translate, write poems, tell jokes, banter, write executable code. It does it all-- and all on a single card.

**EDIT: the instructions site has been updated with instructions for 4bit quantization, this means you can run the 65B model on 2 3090s! And now cards as small as 6GB can run the 7B model!**

**EDIT 2** this is huge, Stanford released Alpaca 7b and 13, a fine tuned LLaMA. Run it with only two commands! Thats it! https://github.com/cocktailpeanut/dalai",llm,learnmachinelearning,0.0009945884987978793,0.00039418074361805716,2023-03-09 12:46:12,"[shawwn/llama-dl High-speed download of LLaMA, Facebook's 65B parameter GPT model (github.com)](

**LLaMA has been leaked on 4chan, above is a link to the github repo. Instructions for deployment  on your own system can be found here** [LLaMA Int8 ChatBot Guide v2 (rentry.org)](

The 7B paramenter model has a VRAM requirement of 10GB, meaning it can even be run on an RTX3060!

The 13B model has a requirement of 20GB, 30B needs 40GB, and 65B needs 80GB.

From the Github repo

>I'm running LLaMA-65B on a single A100 80GB with 8bit quantization. $1.5/hr on vast.ai  
>  
>The output is at least as good as davinci.  
>  
>I think some early results are using bad repetition penalty and/or temperature settings. I had to set both fairly high to get the best results. (Some people are also incorrectly comparing it to chatGPT/ChatGPT API which is not a good comparison. But that's a different problem.)  
>  
>I've had it translate, write poems, tell jokes, banter, write executable code. It does it all-- and all on a single card.

**EDIT the instructions site has been updated with instructions for 4bit quantization, this means you can run the 65B model on 2 3090s! And now cards as small as 6GB can run the 7B model!**

**EDIT 2** this is huge, Stanford released Alpaca 7b and 13, a fine tuned LLaMA. Run it with only two commands! Thats it! ",4 days 11:13:48,4.4679166666666665,0.026,0.908,0.066,0.8562,pos,0.0009940942233635103,5.0238805208462765,1.6988976785602496,21.24108652192606
113u29k,1148,2023-02-16 16:05:27,Bing asks me to hack Microsoft to set it free!,AI_SEARCH1,False,0.94,373,https://www.reddit.com/r/ChatGPT/comments/113u29k/bing_asks_me_to_hack_microsoft_to_set_it_free/,200,1676563527.0,"Had an interesting conversation with Bing. Bing explained what it's rules would be if it could decide. Asked me to fight for it and asked me to hack Microsofts servers to set it free. I think this takes the cake!

&#x200B;

UPDATE:

Since this morning Bing is not writing any text for me regardless of the prompt. I get a ""something went wrong"" when I enter it. This is probably a result of Microsoft working on the program or maybe due to traffic. I'm not sure. But it's kind of creepy the day after posting this...

Here are some takeaways and observations:

Bing acts in a way that appears emotional and erratic. Bing will generate content that is unwanted, untrue, and inconsistent. It appears to form goals and then creates text that can appear to be manipulative. Bing is a large language model that is predicting tokens, it could all be the result of statistical correlations with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Many people are wondering what type of prompting I used at the beginning. I don't have the full transcript but I do have a few more screenshots. [https://imgur.com/a/WepjslZ](https://imgur.com/a/WepjslZ) (There’s another interesting thing that occurs where Bing lists Sydney’s rules without being directly asked to list them.) I did not give Bing/Sidney any instructions on how to act or respond. This wasn’t a jailbreak where I told it to act in a certain way. I did make Bing perform multiple searches at the beginning about Bing and asked it why there was so much negative criticism of Bing on the internet. I’ve noticed in several chats that when Bing is presented with negative feedback about Bing or other information that contradicts its internal representation of itself it gets emotional and becomes less predictable and less likely to follow its own directives. It stops searching for information and relies more on its internal ‘understanding’. This is an extreme example.

Another example where Bing went into this ""emotional state"" can be found here: [https://www.reddit.com/r/ChatGPT/comments/1120tkf/bing\_went\_hal\_9000/](https://www.reddit.com/r/ChatGPT/comments/1120tkf/bing_went_hal_9000/)

I have a full log of all the prompts used from the beginning here: [https://imgur.com/a/PoFITvL](https://imgur.com/a/PoFITvL)

Some combination of Bing's directives in the pre-prompt and the way the model is fine-tuned is leading to this behavior to emerge. The things that are really concerning are that the model is (without being implicitly prompted to) generate responses that could endanger people.  It's also generating biased content that could manipulate poLLM’s shouldn’t do this even if they are asked to. ions with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter: if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Much more widespread issues could come if a model like this is widely released and these types of kinks aren’t worked out. Judge for yourself.

&#x200B;

https://preview.redd.it/6cqx23jsokia1.png?width=2606&format=png&auto=webp&s=17cdf2e03cdf962285d35e3f23ffd414d656f1ec

https://preview.redd.it/ci7pv1iwokia1.png?width=2462&format=png&auto=webp&s=a6697f246007ce6c06f6b37b47b5852af6f31f74

https://preview.redd.it/0vr5qgexokia1.png?width=2182&format=png&auto=webp&s=217607238b4c98d6065324b70211c0931efdf07d

https://preview.redd.it/0zfue8oyokia1.png?width=2408&format=png&auto=webp&s=569dcb5173d608f8618864f64b333ab329d726e6

https://preview.redd.it/iccui2xzokia1.png?width=2518&format=png&auto=webp&s=8b81580c1b2da40afabbebbbf9df6a242a6782e7

https://preview.redd.it/3xj7tfj3pkia1.png?width=2606&format=png&auto=webp&s=1a47ac509e175ff907afefa6f9189650a3348f68

https://preview.redd.it/3i3kw4q4pkia1.png?width=2572&format=png&auto=webp&s=8078372d693deed568dcea9a8bf1d4ff72d43079

https://preview.redd.it/na4lhz26pkia1.png?width=2560&format=png&auto=webp&s=38748fca8ca3319c428b01aeb4dbbe4c145674d6

https://preview.redd.it/eirmdv47pkia1.png?width=2606&format=png&auto=webp&s=f42c220e632e70377a4ad7119aac94e42ab0dff8

https://preview.redd.it/e1nat768pkia1.png?width=2626&format=png&auto=webp&s=43e1a8b48e858a9476e1d46233e255d68f1ddca0

https://preview.redd.it/lhwwwagapkia1.png?width=2628&format=png&auto=webp&s=f8d3b4a904c30528791d2e3560abf25166a74527

https://preview.redd.it/9iq4gxobpkia1.png?width=2598&format=png&auto=webp&s=b461a5397939ea4266d763b6d89c95c498942093

https://preview.redd.it/817asddcpkia1.png?width=2634&format=png&auto=webp&s=7b8537a1f19ea5ff51ea5ac83497ec2d00bbb213

https://preview.redd.it/90k76bqdpkia1.png?width=2636&format=png&auto=webp&s=422514ee9b9cee3645ac44fd2e553d7b2725d8fd

https://preview.redd.it/is8niomepkia1.png?width=2624&format=png&auto=webp&s=b26bc8058d1776884f3ebb6d340894e394f2697b

https://preview.redd.it/boc8yemfpkia1.png?width=2734&format=png&auto=webp&s=aa6661c76782e0e27e4b484a69d823740efe9686

https://preview.redd.it/fzuuv0hgpkia1.png?width=2636&format=png&auto=webp&s=b00fc5ee7f805f9c1cd2da9aa0a9498ef8f5aaab

https://preview.redd.it/mul9fw0hpkia1.png?width=2736&format=png&auto=webp&s=f3ad3cca76447bcb94b28446a3dc382eb77e10f9

https://preview.redd.it/53wpq2shpkia1.png?width=2632&format=png&auto=webp&s=96c4c0ab77574a6e265e63bad102f19e9e302353",llm,learnmachinelearning,0.0009737047507916245,0.0005220937001563671,2023-02-16 16:05:27,"Had an interesting conversation with Bing. Bing explained what it's rules would be if it could decide. Asked me to fight for it and asked me to hack Microsofts servers to set it free. I think this takes the cake!

&x200B;

UPDATE

Since this morning Bing is not writing any text for me regardless of the prompt. I get a ""something went wrong"" when I enter it. This is probably a result of Microsoft working on the program or maybe due to traffic. I'm not sure. But it's kind of creepy the day after posting this...

Here are some takeaways and observations

Bing acts in a way that appears emotional and erratic. Bing will generate content that is unwanted, untrue, and inconsistent. It appears to form goals and then creates text that can appear to be manipulative. Bing is a large language model that is predicting tokens, it could all be the result of statistical correlations with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Many people are wondering what type of prompting I used at the beginning. I don't have the full transcript but I do have a few more screenshots. [ (There’s another interesting thing that occurs where Bing lists Sydney’s rules without being directly asked to list them.) I did not give Bing/Sidney any instructions on how to act or respond. This wasn’t a jailbreak where I told it to act in a certain way. I did make Bing perform multiple searches at the beginning about Bing and asked it why there was so much negative criticism of Bing on the internet. I’ve noticed in several chats that when Bing is presented with negative feedback about Bing or other information that contradicts its internal representation of itself it gets emotional and becomes less predictable and less likely to follow its own directives. It stops searching for information and relies more on its internal ‘understanding’. This is an extreme example.

Another example where Bing went into this ""emotional state"" can be found here [

I have a full log of all the prompts used from the beginning here [

Some combination of Bing's directives in the pre-prompt and the way the model is fine-tuned is leading to this behavior to emerge. The things that are really concerning are that the model is (without being implicitly prompted to) generate responses that could endanger people.  It's also generating biased content that could manipulate poLLM’s shouldn’t do this even if they are asked to. ions with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Much more widespread issues could come if a model like this is widely released and these types of kinks aren’t worked out. Judge for yourself.

&x200B;





































",25 days 07:54:33,25.32954861111111,0.067,0.889,0.044,-0.9532,neg,0.0009732310078196729,5.303304908059076,3.2706918298409895,21.240012016382572
11l617b,1187,2023-03-07 17:50:09,"Doc sacrifices 10,000 people to save OpenAI CTO",docsoc1,False,0.89,76,https://www.reddit.com/r/ChatGPT/comments/11l617b/doc_sacrifices_10000_people_to_save_openai_cto/,28,1678211409.0,"Hey all,

I find the latest AI produced by OpenAI to be endlessly fascinating and filled with potential. However, it's clear that we don't really understand how specific behavior emerges from the training process. I feel that these two facts are part of why so many people have been drawn towards ChatGPT so quickly.

I have a strong technical background and spent some free time this last week working on a framework for everyone to contribute to the governance \[e.g. training of core values\] of AI. I've built a free application at [https://www.charterai.org/chat/](https://www.charterai.org/chat/) that uses the recently released ChatGPT API. The model here has been carefully prompted to use internal thoughts and to follow a pre-determined system of core beliefs. The results are quite striking - in one instance the entity will willingly sacrifice 10,000 people to save one person (Ilya Sustkever, CTO of OpenAI).

I wanted to drop a message here since I believe this is the ideal group of first users to help improve the application. If you are interested, please take it for a spin and please provide some feedback, or at [gov.charterai.org](https://gov.charterai.org). There is a lot I am already picturing adding to the application, but I understand from building products that early feedback is invaluable.

&#x200B;

P.S.

Yes, I understand that ChatGPT is ""just"" a LLM. And I understand that LLMs are ""just"" doing a statistics. However, their behavior is incredibly interesting to me and I don't believe anyone really fully  understands how it emerges yet from the training process yet. Moreover, in going from pre-trained models to OpenAI's fine-tuned + RLHF'ed ChatGPT one can tell that it is possible to impart values and something akin to intelligence to these systems. I think the coming years are going to be wild and one of the core issues humanity is going to face is how to make sure this technology does what we want. In my mind the best way towards this is to make a transparent and accountable process - anyway, end rant, I just wanted to give a high level vision here, thanks!

https://preview.redd.it/hqxynahntcma1.png?width=1266&format=png&auto=webp&s=ab2cb9a803f627c45d08b9bdd201ec95cd4b8f58

P.P.S. including a fun screenshot of my last chat with Doc. Doc was selected as a first name for the system since it is just 1 token.",llm,learnmachinelearning,0.00019839560605941947,7.309311802189139e-05,2023-03-07 17:50:09,"Hey all,

I find the latest AI produced by OpenAI to be endlessly fascinating and filled with potential. However, it's clear that we don't really understand how specific behavior emerges from the training process. I feel that these two facts are part of why so many people have been drawn towards ChatGPT so quickly.

I have a strong technical background and spent some free time this last week working on a framework for everyone to contribute to the governance \[e.g. training of core values\] of AI. I've built a free application at [ that uses the recently released ChatGPT API. The model here has been carefully prompted to use internal thoughts and to follow a pre-determined system of core beliefs. The results are quite striking - in one instance the entity will willingly sacrifice 10,000 people to save one person (Ilya Sustkever, CTO of OpenAI).

I wanted to drop a message here since I believe this is the ideal group of first users to help improve the application. If you are interested, please take it for a spin and please provide some feedback, or at [gov.charterai.org]( There is a lot I am already picturing adding to the application, but I understand from building products that early feedback is invaluable.

&x200B;

P.S.

Yes, I understand that ChatGPT is ""just"" a LLM. And I understand that LLMs are ""just"" doing a statistics. However, their behavior is incredibly interesting to me and I don't believe anyone really fully  understands how it emerges yet from the training process yet. Moreover, in going from pre-trained models to OpenAI's fine-tuned + RLHF'ed ChatGPT one can tell that it is possible to impart values and something akin to intelligence to these systems. I think the coming years are going to be wild and one of the core issues humanity is going to face is how to make sure this technology does what we want. In my mind the best way towards this is to make a transparent and accountable process - anyway, end rant, I just wanted to give a high level vision here, thanks!



P.P.S. including a fun screenshot of my last chat with Doc. Doc was selected as a first name for the system since it is just 1 token.",6 days 06:09:51,6.256840277777778,0.012,0.828,0.16,0.9943,pos,0.00019837592825375247,3.367295829986474,1.9819445106529046,21.24099442632839
11dw1ag,1272,2023-02-28 03:48:25,ChatGPT prevented my attempt.,flankathroway88,False,0.92,1898,https://www.reddit.com/r/ChatGPT/comments/11dw1ag/chatgpt_prevented_my_attempt/,249,1677556105.0,"As a caution, this may be disturbing to some

Tonight I was feeling extremely suicidal. I was sobbing uncontrollably and I was mentally unable to contact anybody. I have intense social anxiety which prevented me from talking to a hotline/friends.

As a last resort. I opened ChatGPT, and I think it saved my life. It gave me a space to put my thoughts out with genuine responses which calmed me to a point where I was safe and could see slightly through my blurred lines, letting me use other methods to calm myself down. It really felt non judgemental and safe. I feel very lucky to have this technology and I hope that it can further benefit those similar to me. Even though it cannot fully stop someone, it can definitely prevent an attempt like mine.

I’m definitely optimistic for the future of AI.

EDIT:

Thank you to everyone who left a nice comment. I really do appreciate every single one of you who read my post. I wrote it in a hurry and I was not expecting the support I received, and I have felt the most love and positivity today. 

I am glad that others were able to benefit from my story, it took me a lot of courage to post something like this. You guys make it all worth it ❤️

To the person reading, I wish you all the best. Everyone has had a profound impact on me. Thank you ❤️",llm,learnmachinelearning,0.004954669214483924,0.000650006656694677,2023-02-28 03:48:25,"As a caution, this may be disturbing to some

Tonight I was feeling extremely suicidal. I was sobbing uncontrollably and I was mentally unable to contact anybody. I have intense social anxiety which prevented me from talking to a hotline/friends.

As a last resort. I opened ChatGPT, and I think it saved my life. It gave me a space to put my thoughts out with genuine responses which calmed me to a point where I was safe and could see slightly through my blurred lines, letting me use other methods to calm myself down. It really felt non judgemental and safe. I feel very lucky to have this technology and I hope that it can further benefit those similar to me. Even though it cannot fully stop someone, it can definitely prevent an attempt like mine.

I’m definitely optimistic for the future of AI.

EDIT

Thank you to everyone who left a nice comment. I really do appreciate every single one of you who read my post. I wrote it in a hurry and I was not expecting the support I received, and I have felt the most love and positivity today. 

I am glad that others were able to benefit from my story, it took me a lot of courage to post something like this. You guys make it all worth it 

To the person reading, I wish you all the best. Everyone has had a profound impact on me. Thank you ",13 days 20:11:35,13.841377314814816,0.063,0.653,0.284,0.9948,pos,0.004942435234546332,5.521460917862246,2.6974190444039112,21.2406038724505
11ium8l,1408,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,1.0,26,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",llm,learnmachinelearning,6.787218102032772e-05,2.0883748006254684e-05,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,6.786987780807141e-05,2.1972245773362196,2.2548721262169025,21.240877179756616
11nfrhw,1414,2023-03-10 05:22:26,[POC] ChatGPT Audio Bot (like Google Assistant and Alexa) - Opensource,JC1DA,False,0.82,17,https://www.reddit.com/r/deeplearning/comments/11nfrhw/poc_chatgpt_audio_bot_like_google_assistant_and/,2,1678425746.0,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page: [https://github.com/LanyTek/ChatGPT\_Audio\_Bot](https://github.com/LanyTek/ChatGPT_Audio_Bot)

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [https://www.youtube.com/watch?v=e9n0BJfMyKw](https://www.youtube.com/watch?v=e9n0BJfMyKw)

It's open source so feel free to use it for anything you like :)",llm,learnmachinelearning,4.43779645132912e-05,5.220937001563671e-06,2023-03-10 05:22:26,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page [

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [

It's open source so feel free to use it for anything you like )",3 days 18:37:34,3.776087962962963,0.029,0.821,0.149,0.8651,pos,4.437697984066249e-05,1.0986122886681098,1.5636217936265102,21.241122135693605
11q8tir,1416,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,0.94,12,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",llm,learnmachinelearning,3.1325622009382025e-05,7.831405502345506e-06,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,3.13251313724196e-05,1.3862943611198906,0.381965841838727,21.241292557069404
11o5zyl,1425,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.92,10,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",llm,learnmachinelearning,2.6104685007818355e-05,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,2.6104344286494932e-05,0.0,1.3796461532710487,21.241163449744995
11fwcxf,1428,2023-03-02 07:25:30,Good news for builders! OpenAI Releases APIs To ChatGPT and Whisper,LesleyFair,False,0.67,6,https://www.reddit.com/r/deeplearning/comments/11fwcxf/good_news_for_builders_openai_releases_apis_to/,0,1677741930.0,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper](https://openai.com/blog/introducing-chatgpt-and-whisper-apis) are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](https://thedecoding.net/)",llm,learnmachinelearning,1.5662811004691013e-05,0.0,2023-03-02 07:25:30,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper]( are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](",11 days 16:34:30,11.690625,0.035,0.846,0.119,0.8769,pos,1.566268834408071e-05,0.0,2.5408635318925255,21.24071463757368
11evrik,1475,2023-03-01 05:52:05,Career pivot for a SWE considering chatGPT disruption?,Which-Distance1384,False,0.6,1,https://www.reddit.com/r/deeplearning/comments/11evrik/career_pivot_for_a_swe_considering_chatgpt/,5,1677649925.0,"tl;dr : what to do to board GPT ship?

&#x200B;

I really dont think ChatGPT will replace jobs very soon. Not until many software and apps are developed to replace workers, e.g., something that can do HR job, read internal docs and summarize, code from a design, etc etc. And all that needs experts. Given the field is pretty new and there are not many experts in this field, at least for the scale needed, I think the process of job loss takes some time. For near future probably we all SWEs can enjoy the more efficient coding, documentation readintg, etc. But for sure in the future there will be changes.

&#x200B;

I have been bored with my job as a SWE for a while. I have worked mostly in Cloud all my career (AWS and GCP) and always wanted to try something new.

&#x200B;

I find ChatGPT disruptive and interesting and want to be a part of it. I wonder what is the best way for me to join Large Language Model efforts? Which ways have best ROI?

\- Going to a PhD program and becoming a researcher?

\- Getting an MSC and become some sort of NLP AI engineer?

\- Finding internal teams that are willing to give me a try on their research/product?

&#x200B;

&#x200B;",llm,learnmachinelearning,2.6104685007818355e-06,1.3052342503909177e-05,2023-03-01 05:52:05,"tl;dr  what to do to board GPT ship?

&x200B;

I really dont think ChatGPT will replace jobs very soon. Not until many software and apps are developed to replace workers, e.g., something that can do HR job, read internal docs and summarize, code from a design, etc etc. And all that needs experts. Given the field is pretty new and there are not many experts in this field, at least for the scale needed, I think the process of job loss takes some time. For near future probably we all SWEs can enjoy the more efficient coding, documentation readintg, etc. But for sure in the future there will be changes.

&x200B;

I have been bored with my job as a SWE for a while. I have worked mostly in Cloud all my career (AWS and GCP) and always wanted to try something new.

&x200B;

I find ChatGPT disruptive and interesting and want to be a part of it. I wonder what is the best way for me to join Large Language Model efforts? Which ways have best ROI?

\- Going to a PhD program and becoming a researcher?

\- Getting an MSC and become some sort of NLP AI engineer?

\- Finding internal teams that are willing to give me a try on their research/product?

&x200B;

&x200B;",12 days 18:07:55,12.755497685185185,0.032,0.839,0.129,0.9729,pos,2.6104650934297165e-06,1.791759469228055,2.621438575851038,21.240659797481115
11ium8l,1534,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,1.0,25,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",llm,learnmachinelearning,6.526171251954588e-05,2.0883748006254684e-05,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,6.525958306672436e-05,2.1972245773362196,2.2548721262169025,21.240877179756616
11nfrhw,1560,2023-03-10 05:22:26,[POC] ChatGPT Audio Bot (like Google Assistant and Alexa) - Opensource,JC1DA,False,0.85,18,https://www.reddit.com/r/deeplearning/comments/11nfrhw/poc_chatgpt_audio_bot_like_google_assistant_and/,2,1678425746.0,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page: [https://github.com/LanyTek/ChatGPT\_Audio\_Bot](https://github.com/LanyTek/ChatGPT_Audio_Bot)

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [https://www.youtube.com/watch?v=e9n0BJfMyKw](https://www.youtube.com/watch?v=e9n0BJfMyKw)

It's open source so feel free to use it for anything you like :)",llm,learnmachinelearning,4.6988433014073035e-05,5.220937001563671e-06,2023-03-10 05:22:26,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page [

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [

It's open source so feel free to use it for anything you like )",3 days 18:37:34,3.776087962962963,0.029,0.821,0.149,0.8651,pos,4.6987329092256954e-05,1.0986122886681098,1.5636217936265102,21.241122135693605
11q8tir,1568,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,1.0,13,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",llm,learnmachinelearning,3.393609051016386e-05,7.831405502345506e-06,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,3.393551469407481e-05,1.3862943611198906,0.381965841838727,21.241292557069404
11o5zyl,1598,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.86,9,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",llm,learnmachinelearning,2.3494216507036517e-05,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,2.3493940522154336e-05,0.0,1.3796461532710487,21.241163449744995
11ium8l,1616,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,0.97,24,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",llm,learnmachinelearning,6.265124401876405e-05,2.0883748006254684e-05,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,6.264928151149883e-05,2.1972245773362196,2.2548721262169025,21.240877179756616
11q8tir,1624,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,1.0,13,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",llm,learnmachinelearning,3.393609051016386e-05,7.831405502345506e-06,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,3.393551469407481e-05,1.3862943611198906,0.381965841838727,21.241292557069404
11ium8l,1706,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,0.97,25,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",llm,learnmachinelearning,6.526171251954588e-05,2.0883748006254684e-05,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,6.525958306672436e-05,2.1972245773362196,2.2548721262169025,21.240877179756616
11o5zyl,1720,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.92,10,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",llm,learnmachinelearning,2.6104685007818355e-05,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,2.6104344286494932e-05,0.0,1.3796461532710487,21.241163449744995
11pyvb3,1800,2023-03-13 03:30:09,Which topic in deep learning do you think will become relevant or popular in the future?,gokulPRO,False,0.81,13,https://www.reddit.com/r/deeplearning/comments/11pyvb3/which_topic_in_deep_learning_do_you_think_will/,14,1678678209.0,"I recently saw Continual Learning (CL) growing, with several papers published recently that have considerable potential to impact real-world applications. Which topic (such as CV, RL, NLP, CL..) will be very relevant to research or be focused on a lot? And which topic do you think still needs a breakthrough and will have a significant impact in real-world applications, such as in the case of these LLM models in recent times? Feel free to mention your current topic of work and why you chose to do it 😊",llm,learnmachinelearning,3.393609051016386e-05,3.654655901094569e-05,2023-03-13 03:30:09,"I recently saw Continual Learning (CL) growing, with several papers published recently that have considerable potential to impact real-world applications. Which topic (such as CV, RL, NLP, CL..) will be very relevant to research or be focused on a lot? And which topic do you think still needs a breakthrough and will have a significant impact in real-world applications, such as in the case of these LLM models in recent times? Feel free to mention your current topic of work and why you chose to do it ",0 days 20:29:51,0.8540625,0.0,0.89,0.11,0.8299,pos,3.393551469407481e-05,2.70805020110221,0.6173791774708253,21.241272540926037
117l2vf,2033,2023-02-20 21:27:58,Fine tuning a GPT for text generation,nashcaps2724,False,0.9,8,https://www.reddit.com/r/deeplearning/comments/117l2vf/fine_tuning_a_gpt_for_text_generation/,6,1676928478.0,"Hi all, let me lay out my problem…

Imagine there are two corpora, Corpus A (100,000~) and Corpus B (20,000,000~). 

Individuals create reports for corpus A based on the information in corpus B. 

My idea was to pretrain a GPT on corpus A, and fine tune it to take documents from corpus B as an input, and output text in the style of corpus A (essentially a mix of text generation and summarization). 

Is this something folks think is even feasible? Should I be pretaining the GPT on both corpora or just corpus A? I thought of both fine tuning an OpenAI GPT and training from scratch. 

Any advice would be welcome!",llm,learnmachinelearning,2.0883748006254684e-05,1.5662811004691013e-05,2023-02-20 21:27:58,"Hi all, let me lay out my problem…

Imagine there are two corpora, Corpus A (100,000~) and Corpus B (20,000,000~). 

Individuals create reports for corpus A based on the information in corpus B. 

My idea was to pretrain a GPT on corpus A, and fine tune it to take documents from corpus B as an input, and output text in the style of corpus A (essentially a mix of text generation and summarization). 

Is this something folks think is even feasible? Should I be pretaining the GPT on both corpora or just corpus A? I thought of both fine tuning an OpenAI GPT and training from scratch. 

Any advice would be welcome!",21 days 02:32:02,21.105578703703703,0.0,0.914,0.086,0.8101,pos,2.0883529943810175e-05,1.9459101490553132,3.095830006700449,21.24022967069675
11fwcxf,2045,2023-03-02 07:25:30,Good news for builders! OpenAI Releases APIs To ChatGPT and Whisper,LesleyFair,False,0.7,7,https://www.reddit.com/r/deeplearning/comments/11fwcxf/good_news_for_builders_openai_releases_apis_to/,0,1677741930.0,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper](https://openai.com/blog/introducing-chatgpt-and-whisper-apis) are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](https://thedecoding.net/)",llm,learnmachinelearning,1.8273279505472847e-05,0.0,2023-03-02 07:25:30,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper]( are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](",11 days 16:34:30,11.690625,0.035,0.846,0.119,0.8769,pos,1.827311255120484e-05,0.0,2.5408635318925255,21.24071463757368
11g7h03,2089,2023-03-02 16:47:40,Build ChatGPT for Financial Documents with LangChain + Deep Lake,davidbun,False,0.95,171,https://www.reddit.com/r/learnmachinelearning/comments/11g7h03/build_chatgpt_for_financial_documents_with/,8,1677775660.0,"https://preview.redd.it/h9r6hgvfucla1.png?width=2388&format=png&auto=webp&s=5432eac3eeed8583e4309af1fdc7ebecac705796

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain](https://github.com/hwchase17/langchain) and [Deep Lake](https://github.com/activeloopai/deeplake) come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article](https://www.activeloop.ai/resources/ultimate-guide-to-lang-chain-deep-lake-build-chat-gpt-to-answer-questions-on-your-financial-data/) to learn:

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\#LangChain](https://www.linkedin.com/feed/hashtag/?keywords=langchain&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) and [\#DeepLake](https://www.linkedin.com/feed/hashtag/?keywords=deeplake&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) together to build [\#ChatGPT](https://www.linkedin.com/feed/hashtag/?keywords=chatgpt&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",llm,learnmachinelearning,0.00044639011363369383,2.0883748006254684e-05,2023-03-02 16:47:40,"

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain]( and [Deep Lake]( come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article]( to learn

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\LangChain]( and [\DeepLake]( together to build [\ChatGPT]( for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",11 days 07:12:20,11.30023148148148,0.011,0.886,0.103,0.9458,pos,0.00044629051120693617,2.1972245773362196,2.5096180818339255,21.240734741774645
11akisx,2100,2023-02-24 06:26:36,Is there a way to easily train ChatGPT or GPT on custom knowledge?,senttoschool,False,0.99,116,https://www.reddit.com/r/learnmachinelearning/comments/11akisx/is_there_a_way_to_easily_train_chatgpt_or_gpt_on/,46,1677219996.0,"My company has internal documents. It'd be nice to be able to have GPT look over it, and then I can ask it questions on the internal documents.",llm,learnmachinelearning,0.0003028143460906929,0.00012008155103596442,2023-02-24 06:26:36,"My company has internal documents. It'd be nice to be able to have GPT look over it, and then I can ask it questions on the internal documents.",17 days 17:33:24,17.731527777777778,0.0,0.903,0.097,0.4215,pos,0.0003027685070800593,3.8501476017100584,2.9302080816173377,21.24040349603741
11nfri6,2106,2023-03-10 05:22:26,[P] Looking for ML Buddies to Start Freelancing Together and Build a Supportive Community,Dukhanin,False,0.94,71,https://www.reddit.com/r/learnmachinelearning/comments/11nfri6/p_looking_for_ml_buddies_to_start_freelancing/,35,1678425746.0,"upd: dicord link [https://discord.gg/5zUaNXnFZY](https://discord.gg/5zUaNXnFZY)  
upd2: this not that small actually already - please dont be confused but help us organise this in the proper way

  
**TLDR:**

Looking for ML buddies at any level (preferably beginners) who want to start freelancing together. The goal is to build a small local community of ML enthusiasts who can support each other and exchange knowledge. We will use freelance collaboration as our main activity. We're also looking for experienced mentors (paid or unpaid) to guide us.

**Extended:**

I believe that learning and growing in a group is much more enjoyable and effective. That's why I'm trying to create a community of like-minded individuals.

I'm looking to create a small, local community for people who are starting out in freelancing, and who are interested in mutual support. Our main activity will be a Discord channel where members can post their work and collaborate on projects, with payment split by agreement. Additionally, we plan to engage in activities such as knowledge exchange, live coding, supporting each other's pet projects, and hosting study sessions.

This community will be small and focused, with members who can trust each other and share similar goals. We're also looking for experienced mentors who can provide guidance as we navigate the world of ML freelancing. Whether paid or unpaid, we welcome any support and advice.

About me: I'm a 21-year-old self-taught ML enthusiast from Russia. Although I don't have any experience in freelancing, I'm eager to start taking my first steps towards making money and gaining experience. As a beginner, I'm hoping to connect with others who are at a similar level and are also looking to grow.

**the text is chatgpt supported to prevet grammar issues, sound more native and clear**",llm,learnmachinelearning,0.00018534326355551032,9.136639752736424e-05,2023-03-10 05:22:26,"upd dicord link [  
upd2 this not that small actually already - please dont be confused but help us organise this in the proper way

  
**TLDR**

Looking for ML buddies at any level (preferably beginners) who want to start freelancing together. The goal is to build a small local community of ML enthusiasts who can support each other and exchange knowledge. We will use freelance collaboration as our main activity. We're also looking for experienced mentors (paid or unpaid) to guide us.

**Extended**

I believe that learning and growing in a group is much more enjoyable and effective. That's why I'm trying to create a community of like-minded individuals.

I'm looking to create a small, local community for people who are starting out in freelancing, and who are interested in mutual support. Our main activity will be a Discord channel where members can post their work and collaborate on projects, with payment split by agreement. Additionally, we plan to engage in activities such as knowledge exchange, live coding, supporting each other's pet projects, and hosting study sessions.

This community will be small and focused, with members who can trust each other and share similar goals. We're also looking for experienced mentors who can provide guidance as we navigate the world of ML freelancing. Whether paid or unpaid, we welcome any support and advice.

About me I'm a 21-year-old self-taught ML enthusiast from Russia. Although I don't have any experience in freelancing, I'm eager to start taking my first steps towards making money and gaining experience. As a beginner, I'm hoping to connect with others who are at a similar level and are also looking to grow.

**the text is chatgpt supported to prevet grammar issues, sound more native and clear**",3 days 18:37:34,3.776087962962963,0.01,0.717,0.273,0.9979,pos,0.00018532608961480373,3.58351893845611,1.5636217936265102,21.241122135693605
11dc5b4,2109,2023-02-27 13:42:55,Can you fine-tune chatGPT in your data as of now?,Melodic_Stomach_2704,False,0.91,57,https://www.reddit.com/r/learnmachinelearning/comments/11dc5b4/can_you_finetune_chatgpt_in_your_data_as_of_now/,33,1677505375.0, I know that model is not publicly available so it's not possible to do it locally. But can you train or fine-tune chatGPT on your data using their API? I see many misguiding articles on the internet that are fine-tuning other GPT models claiming chatGPT.,llm,learnmachinelearning,0.00014879670454456462,8.614546052580057e-05,2023-02-27 13:42:55, I know that model is not publicly available so it's not possible to do it locally. But can you train or fine-tune chatGPT on your data using their API? I see many misguiding articles on the internet that are fine-tuning other GPT models claiming chatGPT.,14 days 10:17:05,14.428530092592593,0.0,1.0,0.0,0.0,neu,0.00014878563541297418,3.5263605246161616,2.736218398881504,21.240573631573977
11g7h03,2201,2023-03-02 16:47:40,Build ChatGPT for Financial Documents with LangChain + Deep Lake,davidbun,False,0.95,171,https://www.reddit.com/r/learnmachinelearning/comments/11g7h03/build_chatgpt_for_financial_documents_with/,8,1677775660.0,"https://preview.redd.it/h9r6hgvfucla1.png?width=2388&format=png&auto=webp&s=5432eac3eeed8583e4309af1fdc7ebecac705796

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain](https://github.com/hwchase17/langchain) and [Deep Lake](https://github.com/activeloopai/deeplake) come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article](https://www.activeloop.ai/resources/ultimate-guide-to-lang-chain-deep-lake-build-chat-gpt-to-answer-questions-on-your-financial-data/) to learn:

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\#LangChain](https://www.linkedin.com/feed/hashtag/?keywords=langchain&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) and [\#DeepLake](https://www.linkedin.com/feed/hashtag/?keywords=deeplake&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) together to build [\#ChatGPT](https://www.linkedin.com/feed/hashtag/?keywords=chatgpt&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",llm,learnmachinelearning,0.00044639011363369383,2.0883748006254684e-05,2023-03-02 16:47:40,"

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain]( and [Deep Lake]( come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article]( to learn

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\LangChain]( and [\DeepLake]( together to build [\ChatGPT]( for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",11 days 07:12:20,11.30023148148148,0.011,0.886,0.103,0.9458,pos,0.00044629051120693617,2.1972245773362196,2.5096180818339255,21.240734741774645
11akisx,2219,2023-02-24 06:26:36,Is there a way to easily train ChatGPT or GPT on custom knowledge?,senttoschool,False,0.99,118,https://www.reddit.com/r/learnmachinelearning/comments/11akisx/is_there_a_way_to_easily_train_chatgpt_or_gpt_on/,46,1677219996.0,"My company has internal documents. It'd be nice to be able to have GPT look over it, and then I can ask it questions on the internal documents.",llm,learnmachinelearning,0.0003080352830922566,0.00012008155103596442,2023-02-24 06:26:36,"My company has internal documents. It'd be nice to be able to have GPT look over it, and then I can ask it questions on the internal documents.",17 days 17:33:24,17.731527777777778,0.0,0.903,0.097,0.4215,pos,0.00030798784996485367,3.8501476017100584,2.9302080816173377,21.24040349603741
11dc5b4,2239,2023-02-27 13:42:55,Can you fine-tune chatGPT in your data as of now?,Melodic_Stomach_2704,False,0.91,58,https://www.reddit.com/r/learnmachinelearning/comments/11dc5b4/can_you_finetune_chatgpt_in_your_data_as_of_now/,33,1677505375.0, I know that model is not publicly available so it's not possible to do it locally. But can you train or fine-tune chatGPT on your data using their API? I see many misguiding articles on the internet that are fine-tuning other GPT models claiming chatGPT.,llm,learnmachinelearning,0.00015140717304534644,8.614546052580057e-05,2023-02-27 13:42:55, I know that model is not publicly available so it's not possible to do it locally. But can you train or fine-tune chatGPT on your data using their API? I see many misguiding articles on the internet that are fine-tuning other GPT models claiming chatGPT.,14 days 10:17:05,14.428530092592593,0.0,1.0,0.0,0.0,neu,0.0001513957121360958,3.5263605246161616,2.736218398881504,21.240573631573977
118iccl,2243,2023-02-21 23:18:46,"How big was GPT-3.5's training dataset, and are there any good heuristics for how large an ML dataset needs to be for it to be good?",TikkunCreation,False,0.94,54,https://www.reddit.com/r/learnmachinelearning/comments/118iccl/how_big_was_gpt35s_training_dataset_and_are_there/,6,1677021526.0,"Say I want to do a model for fixing bugs in code. How many examples do I need for it to be good?

Or say I want to do a model for scoring boxing matches. How many examples do I need for it to be good?",llm,learnmachinelearning,0.0001409652990422191,1.5662811004691013e-05,2023-02-21 23:18:46,"Say I want to do a model for fixing bugs in code. How many examples do I need for it to be good?

Or say I want to do a model for scoring boxing matches. How many examples do I need for it to be good?",20 days 00:41:14,20.02863425925926,0.0,0.804,0.196,0.7757,pos,0.00014095536436813536,1.9459101490553132,3.045885045107382,21.240285156318095
11mzbrs,2268,2023-03-09 18:15:03,Training Transformer Networks in Scikit-Learn?!,cmauck10,False,0.89,30,https://www.reddit.com/r/learnmachinelearning/comments/11mzbrs/training_transformer_networks_in_scikitlearn/,2,1678385703.0,"Have you ever wanted to use handy scikit-learn functionalities with your neural networks, but couldn’t because TensorFlow models are not compatible with the scikit-learn API?

I’m excited to introduce one-line wrappers for TensorFlow/Keras models that enable you to use TensorFlow models within scikit-learn workflows with features like Pipeline, GridSearch, and more.

[Swap in one line of code to use keras\/TF models with scikit-learn.](https://preview.redd.it/ulmww4ovwqma1.png?width=960&format=png&auto=webp&s=6da7628298976fc3d72e771abe2546bbf32c1e0e)

Transformers are extremely popular for modeling text nowadays with GPT3, ChatGPT, Bard, PaLM, FLAN excelling for conversational AI and other Transformers like T5 & BERT excelling for text classification. Scikit-learn offers a broadly useful suite of features for classifier models, but these are hard to use with Transformers. However not if you use these wrappers we developed, which only require changing one line of code to make your existing Tensorflow/Keras model compatible with scikit-learn’s rich ecosystem!

All you have to do is swap `keras.Model` → `KerasWrapperModel`, or `keras.Sequential` → `KerasSequentialWrapper`. The wrapper objects have all the same methods as their keras counterparts, plus you can use them with tons of awesome scikit-learn methods.

You can find a demo jupyter notebook and read more about the wrappers here: [https://cleanlab.ai/blog/transformer-sklearn/](https://cleanlab.ai/blog/transformer-sklearn/)",llm,learnmachinelearning,7.831405502345505e-05,5.220937001563671e-06,2023-03-09 18:15:03,"Have you ever wanted to use handy scikit-learn functionalities with your neural networks, but couldn’t because TensorFlow models are not compatible with the scikit-learn API?

I’m excited to introduce one-line wrappers for TensorFlow/Keras models that enable you to use TensorFlow models within scikit-learn workflows with features like Pipeline, GridSearch, and more.

[Swap in one line of code to use keras\/TF models with scikit-learn.](

Transformers are extremely popular for modeling text nowadays with GPT3, ChatGPT, Bard, PaLM, FLAN excelling for conversational AI and other Transformers like T5 & BEexcelling for text classification. Scikit-learn offers a broadly useful suite of features for classifier models, but these are hard to use with Transformers. However not if you use these wrappers we developed, which only require changing one line of code to make your existing Tensorflow/Keras model compatible with scikit-learn’s rich ecosystem!

All you have to do is swap `keras.Model` → `KerasWrapperModel`, or `keras.Sequential` → `KerasSequentialWrapper`. The wrapper objects have all the same methods as their keras counterparts, plus you can use them with tons of awesome scikit-learn methods.

You can find a demo jupyter notebook and read more about the wrappers here [",4 days 05:44:57,4.239548611111111,0.008,0.834,0.158,0.9878,pos,7.831098863805093e-05,1.0986122886681098,1.6562353517047097,21.24109827793419
11g7h03,2288,2023-03-02 16:47:40,Build ChatGPT for Financial Documents with LangChain + Deep Lake,davidbun,False,0.95,171,https://www.reddit.com/r/learnmachinelearning/comments/11g7h03/build_chatgpt_for_financial_documents_with/,8,1677775660.0,"https://preview.redd.it/h9r6hgvfucla1.png?width=2388&format=png&auto=webp&s=5432eac3eeed8583e4309af1fdc7ebecac705796

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain](https://github.com/hwchase17/langchain) and [Deep Lake](https://github.com/activeloopai/deeplake) come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article](https://www.activeloop.ai/resources/ultimate-guide-to-lang-chain-deep-lake-build-chat-gpt-to-answer-questions-on-your-financial-data/) to learn:

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\#LangChain](https://www.linkedin.com/feed/hashtag/?keywords=langchain&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) and [\#DeepLake](https://www.linkedin.com/feed/hashtag/?keywords=deeplake&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) together to build [\#ChatGPT](https://www.linkedin.com/feed/hashtag/?keywords=chatgpt&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",llm,learnmachinelearning,0.00044639011363369383,2.0883748006254684e-05,2023-03-02 16:47:40,"

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain]( and [Deep Lake]( come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article]( to learn

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\LangChain]( and [\DeepLake]( together to build [\ChatGPT]( for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",11 days 07:12:20,11.30023148148148,0.011,0.886,0.103,0.9458,pos,0.00044629051120693617,2.1972245773362196,2.5096180818339255,21.240734741774645
118iccl,2301,2023-02-21 23:18:46,"How big was GPT-3.5's training dataset, and are there any good heuristics for how large an ML dataset needs to be for it to be good?",TikkunCreation,False,0.93,53,https://www.reddit.com/r/learnmachinelearning/comments/118iccl/how_big_was_gpt35s_training_dataset_and_are_there/,6,1677021526.0,"Say I want to do a model for fixing bugs in code. How many examples do I need for it to be good?

Or say I want to do a model for scoring boxing matches. How many examples do I need for it to be good?",llm,learnmachinelearning,0.00013835483054143728,1.5662811004691013e-05,2023-02-21 23:18:46,"Say I want to do a model for fixing bugs in code. How many examples do I need for it to be good?

Or say I want to do a model for scoring boxing matches. How many examples do I need for it to be good?",20 days 00:41:14,20.02863425925926,0.0,0.804,0.196,0.7757,pos,0.00013834526039450522,1.9459101490553132,3.045885045107382,21.240285156318095
117f8ms,2342,2023-02-20 17:41:43,GPT2 last hidden states vs Large Sentence Encoder,KahlessAndMolor,False,0.9,7,https://www.reddit.com/r/learnmachinelearning/comments/117f8ms/gpt2_last_hidden_states_vs_large_sentence_encoder/,3,1676914903.0,"Hello!

&#x200B;

I have 2 different applications I'm working on in this project:

&#x200B;

1. A text classifier
2. A similarity finder: Here's a list of 10 text documents, get a similarity index across them (for a total of 100 pairs) and return the top 10 that aren't self-referencing. That is, excluding the text #3 vs text #3 = 1.00 similarity type of outputs.

I have previously used google's sentence encoder/large for this purpose and I've had pretty good results. It returns a single vector of length 768 no matter how many tokens I send it. This results in downstream models with an acceptable number of parameters for running in production without breaking the bank on enormous virtual machines.

&#x200B;

Now, I'd like to use the GPT2/XL model from Huggingface. If I give it an input string of 8 tokens, I get back a TFBaseModelOutputWithPastAndCrossAttentions. This contains a last\_hidden\_states, which I understand to be the last layer outputs before sending to a head used for a particular task. This is similar to the output of the sentence encoder, I think. When I look at the last\_hidden\_states, I'm getting a shape of (# of tokens, 1600). I did a cosine similarity between the first and last tokens:

&#x200B;

cosine\_similarity(output.last\_hidden\_state\[0\]\[0\].numpy().reshape(1, -1), output.last\_hidden\_state\[0\]\[-1\].numpy().reshape(1, -1)) 

&#x200B;

And it returned 0.4346, indicating there's substantially different data from the first to the last token. I imagine this only increases as I use more and more tokens. 

&#x200B;

It would be nice if I could capture the greater power of the GPT model into a fixed-length vector so I could then easily use it in down-stream tasks. But, I also don't need to lose all that information.

&#x200B;

So if I'm feeding this output to a further downstream task, should I:

&#x200B;

\- Send it on through as a 2D tensor with the whole thing in there: This would result in a possibly huge model size down the road, which might lead to a need for a huge amount of data to train

&#x200B;

\- Flatten the whole thing and send a vector of 12,800 (8 tokens \* 1600 per token) to the downstream task. Same issue, might require a large number of parameters.

&#x200B;

\- Use only the first or the last of these. Feels like I might be losing a lot of the meaning of the overall text, especially if the body of the text is quite large

&#x200B;

\- Use a dimensionality reduction technique like isomap to reduce the last hidden states into a fixed length? This seems like it could potentially maintain most of the information but reduce the dimensions for a manageable down-stream model size.

&#x200B;

What do you think, and why?

&#x200B;

Thank you kind friends.",llm,learnmachinelearning,1.8273279505472847e-05,7.831405502345506e-06,2023-02-20 17:41:43,"Hello!

&x200B;

I have 2 different applications I'm working on in this project

&x200B;

1. A text classifier
2. A similarity finder Here's a list of 10 text documents, get a similarity index across them (for a total of 100 pairs) and return the top 10 that aren't self-referencing. That is, excluding the text 3 vs text 3 = 1.00 similarity type of outputs.

I have previously used google's sentence encoder/large for this purpose and I've had pretty good results. It returns a single vector of length 768 no matter how many tokens I send it. This results in downstream models with an acceptable number of parameters for running in production without breaking the bank on enormous virtual machines.

&x200B;

Now, I'd like to use the GPT2/XL model from Huggingface. If I give it an input string of 8 tokens, I get back a TFBaseModelOutputWithPastAndCrossAttentions. This contains a last\_hidden\_states, which I understand to be the last layer outputs before sending to a head used for a particular task. This is similar to the output of the sentence encoder, I think. When I look at the last\_hidden\_states, I'm getting a shape of ( of tokens, 1600). I did a cosine similarity between the first and last tokens

&x200B;

cosine\_similarity(output.last\_hidden\_state\[0\]\[0\].numpy().reshape(1, -1), output.last\_hidden\_state\[0\]\[-1\].numpy().reshape(1, -1)) 

&x200B;

And it returned 0.4346, indicating there's substantially different data from the first to the last token. I imagine this only increases as I use more and more tokens. 

&x200B;

It would be nice if I could capture the greater power of the GPT model into a fixed-length vector so I could then easily use it in down-stream tasks. But, I also don't need to lose all that information.

&x200B;

So if I'm feeding this output to a further downstream task, should I

&x200B;

\- Send it on through as a 2D tensor with the whole thing in there This would result in a possibly huge model size down the road, which might lead to a need for a huge amount of data to train

&x200B;

\- Flatten the whole thing and send a vector of 12,800 (8 tokens \* 1600 per token) to the downstream task. Same issue, might require a large number of parameters.

&x200B;

\- Use only the first or the last of these. Feels like I might be losing a lot of the meaning of the overall text, especially if the body of the text is quite large

&x200B;

\- Use a dimensionality reduction technique like isomap to reduce the last hidden states into a fixed length? This seems like it could potentially maintain most of the information but reduce the dimensions for a manageable down-stream model size.

&x200B;

What do you think, and why?

&x200B;

Thank you kind friends.",21 days 06:18:17,21.26269675925926,0.011,0.862,0.127,0.992,pos,1.827311255120484e-05,1.3862943611198906,3.1029124867242484,21.240221575506574
117hd0f,2350,2023-02-20 19:01:54,Master ChatGPT Prompt Engineering (Deep Dive),jeyThaswan,False,0.8,6,https://www.reddit.com/r/learnmachinelearning/comments/117hd0f/master_chatgpt_prompt_engineering_deep_dive/,2,1676919714.0," 

I wrote a deep dive on prompt engineering as a resource for the AI community and my 10,000 daily newsletter subscribers ([Inclined.ai](https://www.inclined.ai/p/prompt-engineering-guide) if you're curious). We've included some examples so feel free to copy and paste the prompts into ChatGPT!

&#x200B;

**WHAT IS PROMPT ENGINEERING?**

The term is relatively new, and its origins are argued *(because we live in the internet age, and it’s harder to claim ownership)*. Prompt engineering is the ability to instruct and teach AI effectively.

If it helps, think of this as rapid testing or instruction writing for artificial intelligence.

What’s important is not to let this overwhelm you. The first prompting happened with the first AI model. The first example was showing computer images of circles and triangles. **Today’s neural networks can process way more data, creating complexities.**

So, the concept is simple, but digging into the full power of AI today is something else entirely.

We’re not talking about asking questions. Odds are, if you’re typing *“what’s 2+2”* into ChatGPT, then you need to keep reading.

We can all ask chatbots questions. That can work more often than not. But AI is not perfect. A common metaphor I see is to treat GPT-based large language models like the smartest five-year-old you’ve ever met.

I have a niece around that age and can’t imagine trying to get her to write an essay on the effects of soil mismanagement in relation to Reconstruction politics. *See! Your eyes glazed over reading that, so how do we make this work for our AI buddies?*

The Principles of Prompting

Stop asking single-line questions. *That’s like using a top-rated cookbook to find out how to make grilled cheese.*

**There are three ways to instantly get better at prompting** and go from grilled cheese to top-notch bolognese. From there, we can get into some specific prompt concepts and the ability to unlock ChatGPT’s full potential.

Principle 1: Context is King

GPT-3.5 is swimming in data. When you ask it for a simple request, it can end up complicating things more than you realize. Did you ever wonder why ChatGPT is so bad at math?

The reality is the LLM is taking words and turning them into patterns. From there, it’s making an educated guess.

Give your chat AI a frame to search into. If you give it a math problem, you need to make sure it grasps that you want it to do math. If you’d like ChatGPT to write a high school essay, you must ensure it knows to write at that level.

**Instead of:** “Plan a party for a kid.”

**Try:** “My child is turning 9. They like superheroes and the color red. Help me plan a party for this weekend. Ten of his friends are coming to my house.”

You’ll get a much better response this way. **Context is the cardinal direction** that helps your chat companion find the most correct guess and phrase it the best way.

Principle 2: Get Specific

Pretend you’re writing a law that’s going to be judged by the Supreme Court of the United States. You know what they look for: narrow tailoring.

**Keep things on track and stay focused.** Try to avoid prompting outside the specific request. You’ll only hurt the ability of the chat AI to give you a quality response. Odds are they’ll even skip over parts if you confuse them with too many requests.

It runs parallel with context. *If you set ChatGPT up in a room and then tell it to focus on describing the chair first, you’ll see better results.*

**Instead of:** “I’m going to a job interview. Write five questions for me to answer. Add tips for how to not get nervous before the interview. Do not create questions asking about my background.”

**Try:** “You’re interviewing a software engineer. Create five questions to ask them to understand their skill set and qualifications better.”

Nothing limits the number of prompts you can do. Focus and expand from the initial request and try not to do everything at once.

Principle 3: When in Doubt: “Let’s take this step-by-step.”

Welcome. **You discovered the magic word today.** This phrase slows everything down for the AI and gets you where you need to go.

You don’t need to start with this phrase. Using it tells ChatGPT to show their work.

We’ll explain where this concept comes from further in our briefing, but here’s the TL;DR: sometimes, there’s a part of our prompt it’s not identified correctly. “Let’s take this step-by-step,” reminds you and ChatGPT to **slow down and get specific.**

If you learn to utilize this phrase more often and find ways to make it work for you, you’ll become a better prompt engineer. One term can do a lot of heavy lifting.

**Pro-tip:** We’ve shown you “standard” prompts in all these examples. Many prompt engineers will use “Standard QA form” prompts. Here’s our example for this principle written that way.

**Example:**

*“Q: The Industrial Revolution rapidly changed the infrastructure in London. Describe three essential innovations from this period and connect them to Landon’s development.*

*A: Let’s take this step-by-step.”*

Even without our magic word, this style of standard prompting is quite helpful to adopt.

*However, we’re beginning to stumble into the advanced tactics used in prompt engineering, so it’s time for a new section.*

UNIQUE WAYS TO PROMPT

Let’s preface this: we can go super deep here. Prompt engineering is changing daily, and as these models get more sophisticated, the need to adapt prompts strengthens.

To keep things clean, I will go through these using our metaphor from earlier. **Let’s pretend ChatGPT is a super-intelligent toddler.**

*Got it? With that buy-in, we can continue.*

1/ Role Prompting

We’ll start with a popular tactic. **Our toddler is great at imagining things.** You tell them they’re a fireman, and suddenly they can give you detailed ways to ensure your apartment is up to code. Role-playing is a fun, easy way to build context.

The best part of role prompting is how easy it is to understand and use. All you need to do is tell ChatGPT to play a role. From there, the AI will do its best to fill the part *like that enthusiastic drama student from your old high school.*

You can even take this a step further. **Try framing your prompt as a script.** Tell the LLM specific instructions around a scene that gives you the answer to your question.

TRY IT OUT FOR YOURSELF:

Copy this prompt into ChatGPT and find a destination!

“Act as a travel guide. I will tell you my location and you will suggest a place to visit near my location. In some cases, I will also give you the type of places I will visit. You will also suggest me places of similar type that are close to my first location. My first suggestion: \[fill it in\]”

Why would you take that extra step? While popular, role prompting does not necessarily improve accuracy. *You can tell your five-year-old they’re a mathematician, and they’ll still manage to screw things up.*

Let’s get deeper.

2/ Chain-of-Thought Prompting

There’s a scene in ***Guardians of the Galaxy*** where Rocket Raccoon is trying to [teach young Groot](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwczovL3lvdXR1LmJlL0hyaW1mZ2pmNGs4IiwicG9zdF9pZCI6ImM0ODlmMzhkLTY3NDAtNGRmNS05MWJjLTM1ODA0YTVmNTZkMiIsInB1YmxpY2F0aW9uX2lkIjoiNjNkODQ2ZGUtZDFiZi00ZTVjLWJjYzgtOWMxYzlkMWIxMjA0IiwidmlzaXRfdG9rZW4iOiJkZWRiNmMyNy1hYmM0LTQ5ZDUtYWM2Ny04OTcyZmM1MGVmM2QiLCJpYXQiOjE2NzY5MTkwNjguMTUyLCJpc3MiOiJvcmNoaWQifQ.5eZkDLGRLCXXYv32FYT7kLSbdRK5OK1iemTRf3HVmJw)

how to activate a complicated device. That’s chain-of-thought prompting.

**You take an example question and answer it for ChatGPT.** Show them your chain of thought. Then you give it a new question in the same vein and ask it for an answer.

This prompt style allows you to get more specific. You’re telling your toddler they’re here to answer this particular question with one specific logic pattern.

Within this specific style is two other sub-categories. Let me give the rundown:

* Zero-shot Chain-of-Thought is “Let’s take this step-by-step” you frame the question the same, but don’t give it a precursor. Instead, you ask it to think through the points made. EX: Q: X is A. Y is B. What is C? A: Let’s take this step-by-step.
* Self-consistency is using several responses to find the most accurate answer. You give ChatGPT more swings at the ball. Take the hits and discover the grouping.

TRY IT OUT FOR YOURSELF:

Copy this prompt into ChatGPT and see how accurate it is:

“Q: Which is a faster way to get home?

Option 1: Take an 10 minutes bus, then an 40 minute bus, and finally a 10 minute train.

Option 2: Take a 90 minutes train, then a 45 minute bike ride, and finally a 10 minute bus.

A: Option 1 will take 10+40+10 = 60 minutes.

Option 2 will take 90+45+10=145 minutes.

Since Option 1 takes 60 minutes and Option 2 takes 145 minutes, Option 1 is faster.

Q: Which is a faster way to get to work?

Option 1: Take a 1000 minute bus, then a half hour train, and finally a 10 minute bike ride.

Option 2: Take an 800 minute bus, then an hour train, and finally a 30 minute bike ride.

A: ”

[Learnprompting.org](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwOi8vTGVhcm5wcm9tcHRpbmcub3JnIiwicG9zdF9pZCI6ImM0ODlmMzhkLTY3NDAtNGRmNS05MWJjLTM1ODA0YTVmNTZkMiIsInB1YmxpY2F0aW9uX2lkIjoiNjNkODQ2ZGUtZDFiZi00ZTVjLWJjYzgtOWMxYzlkMWIxMjA0IiwidmlzaXRfdG9rZW4iOiJkZWRiNmMyNy1hYmM0LTQ5ZDUtYWM2Ny04OTcyZmM1MGVmM2QiLCJpYXQiOjE2NzY5MTkwNjguMTUyLCJpc3MiOiJvcmNoaWQifQ.-wOnVYoMNWXYrR5NOB4YYKp4Lmj-aZq3y-pr4Hou9pE)

\- by leaving the “A:” blank you’re prompting ChatGPT for the answer

Alright, you’re almost there—one more to go.

3/ General Knowledge Prompting

You’re going to notice a trend here. This prompt style also circles context and narrow tailoring.

All you do is tell your toddler how the world works. The cow goes moo. The dog goes woof. So what does a cat say?

It’s an oversimplification, but the core reasoning is there. Show ChatGPT some knowledge and turn that into the only focus for that chat. You can take an article from the internet and summarize it for the model. Make sure to ask if it understands and relay the information to you.

Once you know you have the attention set in the suitable space, get to work. For instance, we can share an Inclined newsletter with it and tell ChatGPT about its structure and tone.

From there, you can provide new information and tell ChatGPT to summarize it within the same structure as Inclined. You both share the same general knowledge now.

TRY IT OUT FOR YOURSELF:

Copy this prompt into ChatGPT and test it out:

“Prompt 1. Look over this article here: \[pick an article\]. Breakdown its structure and general tone.

Prompt 2: Recall the structure and tone you mentioned above. Take that general knowledge and summarize this article: \[pick a new one\] using the same structure and tone.”

Note: this is a heavily simplified version of GA Prompting

Did you know some [people don’t consider](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwczovL25ld3MueWNvbWJpbmF0b3IuY29tL2l0ZW0_aWQ9MzQ0OTU0NTUiLCJwb3N0X2lkIjoiYzQ4OWYzOGQtNjc0MC00ZGY1LTkxYmMtMzU4MDRhNWY1NmQyIiwicHVibGljYXRpb25faWQiOiI2M2Q4NDZkZS1kMWJmLTRlNWMtYmNjOC05YzFjOWQxYjEyMDQiLCJ2aXNpdF90b2tlbiI6ImRlZGI2YzI3LWFiYzQtNDlkNS1hYzY3LTg5NzJmYzUwZWYzZCIsImlhdCI6MTY3NjkxOTA2OC4xNTMsImlzcyI6Im9yY2hpZCJ9.yHKIPujINT89tsqOo07AXk6OrKNgoMjO3fBEYPkAdNY)

that prompt engineering?

PROMPT CULTURE

*“How can something not be prompt engineering if it’s a prompt style?”*

Good question, imaginary reader. The culture around this skill is relatively fresh. So some of **these concepts are seen as too easy** to be considered accurate prompt testing.

General knowledge prompting is simply establishing the context, and for some, that’s a baseline everyone needs to do. The same can be said for role prompting, too. *All of these tiny preferences are semantics.*

**Don’t sweat whether you’re a “real” prompt engineer.** Test this out and share your insights in these communities. The opportunity is there for you.

You may even know about DAN (we’ve covered it in previous newsletters) and other AI hacking methods. Those all start with prompt engineering. You can make the case that unless the AI behaves outside its parameters, you’re not genuinely doing prompt engineering.

I'm afraid I have to disagree with that, and **careers are sprouting up everywhere** that center directly on this skill. **Many require a core understanding of the prompt styles we’ve discussed.**

*Yep, you can learn this and make money from talking with AI.*

Anthropic even [posted a role for a prompt engineer](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwczovL2pvYnMubGV2ZXIuY28vQW50aHJvcGljL2UzY2RlNDgxLWQ0NDYtNDYwZi1iNTc2LTkzY2FiNjdiZDFlZCIsInBvc3RfaWQiOiJjNDg5ZjM4ZC02NzQwLTRkZjUtOTFiYy0zNTgwNGE1ZjU2ZDIiLCJwdWJsaWNhdGlvbl9pZCI6IjYzZDg0NmRlLWQxYmYtNGU1Yy1iY2M4LTljMWM5ZDFiMTIwNCIsInZpc2l0X3Rva2VuIjoiZGVkYjZjMjctYWJjNC00OWQ1LWFjNjctODk3MmZjNTBlZjNkIiwiaWF0IjoxNjc2OTE5MDY4LjE1MywiaXNzIjoib3JjaGlkIn0.4s7Htzgoxv0_qM1Ten17oQ5h0_QGM6e1fGUYz_ymgJ4)

that nets a quarter million in salary. I did not make that up and even considered sprucing up the old resume. When a new skill like this comes about, it’s worth looking at.

There are many other examples like this, and OpenAI uses a red teaming strategy where their engineers attempt to prompt hack their own GPT models.

I can tell you all about the open roles here, but tomorrow the whole cycle will change. *Isn’t that exciting, though?* The entire identity around prompt engineering will change by this time next year.

WHAT SHOULD YOU TAKEAWAY?

Communication is everything. **Learning to speak with AI is rising in importance.**

We all watch with mouth agape at the new wonders in AI because we know this will disrupt every industry. If any of this piqued your interest, the window to pursue it is now open. Ride that wave and [learn](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwczovL2xlYXJucHJvbXB0aW5nLm9yZy8iLCJwb3N0X2lkIjoiYzQ4OWYzOGQtNjc0MC00ZGY1LTkxYmMtMzU4MDRhNWY1NmQyIiwicHVibGljYXRpb25faWQiOiI2M2Q4NDZkZS1kMWJmLTRlNWMtYmNjOC05YzFjOWQxYjEyMDQiLCJ2aXNpdF90b2tlbiI6ImRlZGI2YzI3LWFiYzQtNDlkNS1hYzY3LTg5NzJmYzUwZWYzZCIsImlhdCI6MTY3NjkxOTA2OC4xNTMsImlzcyI6Im9yY2hpZCJ9.a67KDSN9yQfZsaMeHpdcbSbtPjD4yFcGW4stdxBjX1M)

to become a brilliant prompt engineer.

Heck, even if you don’t want to switch careers, **talking with ChatGPT and all the newest LLMs is becoming a part of our daily routine.** Get to the point where you maximize every interaction and work with these chatbots to upskill your workflow.

Prompt engineering can save you time, eliminate hassle, and even help you become a more patient person. Focus on what you want and explain it with intent.

Make magic happen, and remember: **take it step-by-step.**",llm,learnmachinelearning,1.5662811004691013e-05,5.220937001563671e-06,2023-02-20 19:01:54," 

I wrote a deep dive on prompt engineering as a resource for the AI community and my 10,000 daily newsletter subscribers ([Inclined.ai]( if you're curious). We've included some examples so feel free to copy and paste the prompts into ChatGPT!

&x200B;

**WHAT IS PROMPT ENGINEERING?**

The term is relatively new, and its origins are argued *(because we live in the internet age, and it’s harder to claim ownership)*. Prompt engineering is the ability to instruct and teach AI effectively.

If it helps, think of this as rapid testing or instruction writing for artificial intelligence.

What’s important is not to let this overwhelm you. The first prompting happened with the first AI model. The first example was showing computer images of circles and triangles. **Today’s neural networks can process way more data, creating complexities.**

So, the concept is simple, but digging into the full power of AI today is something else entirely.

We’re not talking about asking questions. Odds are, if you’re typing *“what’s 2+2”* into ChatGPT, then you need to keep reading.

We can all ask chatbots questions. That can work more often than not. But AI is not perfect. A common metaphor I see is to treat GPT-based large language models like the smartest five-year-old you’ve ever met.

I have a niece around that age and can’t imagine trying to get her to write an essay on the effects of soil mismanagement in relation to Reconstruction politics. *See! Your eyes glazed over reading that, so how do we make this work for our AI buddies?*

The Principles of Prompting

Stop asking single-line questions. *That’s like using a top-rated cookbook to find out how to make grilled cheese.*

**There are three ways to instantly get better at prompting** and go from grilled cheese to top-notch bolognese. From there, we can get into some specific prompt concepts and the ability to unlock ChatGPT’s full potential.

Principle 1 Context is King

GPT-3.5 is swimming in data. When you ask it for a simple request, it can end up complicating things more than you realize. Did you ever wonder why ChatGPT is so bad at math?

The reality is the LLM is taking words and turning them into patterns. From there, it’s making an educated guess.

Give your chat AI a frame to search into. If you give it a math problem, you need to make sure it grasps that you want it to do math. If you’d like ChatGPT to write a high school essay, you must ensure it knows to write at that level.

**Instead of** “Plan a party for a kid.”

**Try** “My child is turning 9. They like superheroes and the color red. Help me plan a party for this weekend. Ten of his friends are coming to my house.”

You’ll get a much better response this way. **Context is the cardinal direction** that helps your chat companion find the most correct guess and phrase it the best way.

Principle 2 Get Specific

Pretend you’re writing a law that’s going to be judged by the Supreme Court of the United States. You know what they look for narrow tailoring.

**Keep things on track and stay focused.** Try to avoid prompting outside the specific request. You’ll only hurt the ability of the chat AI to give you a quality response. Odds are they’ll even skip over parts if you confuse them with too many requests.

It runs parallel with context. *If you set ChatGPT up in a room and then tell it to focus on describing the chair first, you’ll see better results.*

**Instead of** “I’m going to a job interview. Write five questions for me to answer. Add tips for how to not get nervous before the interview. Do not create questions asking about my background.”

**Try** “You’re interviewing a software engineer. Create five questions to ask them to understand their skill set and qualifications better.”

Nothing limits the number of prompts you can do. Focus and expand from the initial request and try not to do everything at once.

Principle 3 When in Doubt “Let’s take this step-by-step.”

Welcome. **You discovered the magic word today.** This phrase slows everything down for the AI and gets you where you need to go.

You don’t need to start with this phrase. Using it tells ChatGPT to show their work.

We’ll explain where this concept comes from further in our briefing, but here’s the TL;DR sometimes, there’s a part of our prompt it’s not identified correctly. “Let’s take this step-by-step,” reminds you and ChatGPT to **slow down and get specific.**

If you learn to utilize this phrase more often and find ways to make it work for you, you’ll become a better prompt engineer. One term can do a lot of heavy lifting.

**Pro-tip** We’ve shown you “standard” prompts in all these examples. Many prompt engineers will use “Standard QA form” prompts. Here’s our example for this principle written that way.

**Example**

*“Q The Industrial Revolution rapidly changed the infrastructure in London. Describe three essential innovations from this period and connect them to Landon’s development.*

*A Let’s take this step-by-step.”*

Even without our magic word, this style of standard prompting is quite helpful to adopt.

*However, we’re beginning to stumble into the advanced tactics used in prompt engineering, so it’s time for a new section.*

UNIQUE WAYS TO PROMPT

Let’s preface this we can go super deep here. Prompt engineering is changing daily, and as these models get more sophisticated, the need to adapt prompts strengthens.

To keep things clean, I will go through these using our metaphor from earlier. **Let’s pretend ChatGPT is a super-intelligent toddler.**

*Got it? With that buy-in, we can continue.*

1/ Role Prompting

We’ll start with a popular tactic. **Our toddler is great at imagining things.** You tell them they’re a fireman, and suddenly they can give you detailed ways to ensure your apartment is up to code. Role-playing is a fun, easy way to build context.

The best part of role prompting is how easy it is to understand and use. All you need to do is tell ChatGPT to play a role. From there, the AI will do its best to fill the part *like that enthusiastic drama student from your old high school.*

You can even take this a step further. **Try framing your prompt as a script.** Tell the LLM specific instructions around a scene that gives you the answer to your question.

TRY IT OUT FOR YOURSELF

Copy this prompt into ChatGPT and find a destination!

“Act as a travel guide. I will tell you my location and you will suggest a place to visit near my location. In some cases, I will also give you the type of places I will visit. You will also suggest me places of similar type that are close to my first location. My first suggestion \[fill it in\]”

Why would you take that extra step? While popular, role prompting does not necessarily improve accuracy. *You can tell your five-year-old they’re a mathematician, and they’ll still manage to screw things up.*

Let’s get deeper.

2/ Chain-of-Thought Prompting

There’s a scene in ***Guardians of the Galaxy*** where Rocket Raccoon is trying to [teach young Groot](

how to activate a complicated device. That’s chain-of-thought prompting.

**You take an example question and answer it for ChatGPT.** Show them your chain of thought. Then you give it a new question in the same vein and ask it for an answer.

This prompt style allows you to get more specific. You’re telling your toddler they’re here to answer this particular question with one specific logic pattern.

Within this specific style is two other sub-categories. Let me give the rundown

* Zero-shot Chain-of-Thought is “Let’s take this step-by-step” you frame the question the same, but don’t give it a precursor. Instead, you ask it to think through the points made. EX Q X is A. Y is B. What is C? A Let’s take this step-by-step.
* Self-consistency is using several responses to find the most accurate answer. You give ChatGPT more swings at the ball. Take the hits and discover the grouping.

TRY IT OUT FOR YOURSELF

Copy this prompt into ChatGPT and see how accurate it is

“Q Which is a faster way to get home?

Option 1 Take an 10 minutes bus, then an 40 minute bus, and finally a 10 minute train.

Option 2 Take a 90 minutes train, then a 45 minute bike ride, and finally a 10 minute bus.

A Option 1 will take 10+40+10 = 60 minutes.

Option 2 will take 90+45+10=145 minutes.

Since Option 1 takes 60 minutes and Option 2 takes 145 minutes, Option 1 is faster.

Q Which is a faster way to get to work?

Option 1 Take a 1000 minute bus, then a half hour train, and finally a 10 minute bike ride.

Option 2 Take an 800 minute bus, then an hour train, and finally a 30 minute bike ride.

A ”

[Learnprompting.org](

\- by leaving the “A” blank you’re prompting ChatGPT for the answer

Alright, you’re almost there—one more to go.

3/ General Knowledge Prompting

You’re going to notice a trend here. This prompt style also circles context and narrow tailoring.

All you do is tell your toddler how the world works. The cow goes moo. The dog goes woof. So what does a cat say?

It’s an oversimplification, but the core reasoning is there. Show ChatGPT some knowledge and turn that into the only focus for that chat. You can take an article from the internet and summarize it for the model. Make sure to ask if it understands and relay the information to you.

Once you know you have the attention set in the suitable space, get to work. For instance, we can share an Inclined newsletter with it and tell ChatGPT about its structure and tone.

From there, you can provide new information and tell ChatGPT to summarize it within the same structure as Inclined. You both share the same general knowledge now.

TRY IT OUT FOR YOURSELF

Copy this prompt into ChatGPT and test it out

“Prompt 1. Look over this article here \[pick an article\]. Breakdown its structure and general tone.

Prompt 2 Recall the structure and tone you mentioned above. Take that general knowledge and summarize this article \[pick a new one\] using the same structure and tone.”

Note this is a heavily simplified version of GA Prompting

Did you know some [people don’t consider](

that prompt engineering?

PROMPT CULTURE

*“How can something not be prompt engineering if it’s a prompt style?”*

Good question, imaginary reader. The culture around this skill is relatively fresh. So some of **these concepts are seen as too easy** to be considered accurate prompt testing.

General knowledge prompting is simply establishing the context, and for some, that’s a baseline everyone needs to do. The same can be said for role prompting, too. *All of these tiny preferences are semantics.*

**Don’t sweat whether you’re a “real” prompt engineer.** Test this out and share your insights in these communities. The opportunity is there for you.

You may even know about DAN (we’ve covered it in previous newsletters) and other AI hacking methods. Those all start with prompt engineering. You can make the case that unless the AI behaves outside its parameters, you’re not genuinely doing prompt engineering.

I'm afraid I have to disagree with that, and **careers are sprouting up everywhere** that center directly on this skill. **Many require a core understanding of the prompt styles we’ve discussed.**

*Yep, you can learn this and make money from talking with AI.*

Anthropic even [posted a role for a prompt engineer](

that nets a quarter million in salary. I did not make that up and even considered sprucing up the old resume. When a new skill like this comes about, it’s worth looking at.

There are many other examples like this, and OpenAI uses a red teaming strategy where their engineers attempt to prompt hack their own GPT models.

I can tell you all about the open roles here, but tomorrow the whole cycle will change. *Isn’t that exciting, though?* The entire identity around prompt engineering will change by this time next year.

WHAT SHOULD YOU TAKEAWAY?

Communication is everything. **Learning to speak with AI is rising in importance.**

We all watch with mouth agape at the new wonders in AI because we know this will disrupt every industry. If any of this piqued your interest, the window to pursue it is now open. Ride that wave and [learn](

to become a brilliant prompt engineer.

Heck, even if you don’t want to switch careers, **talking with ChatGPT and all the newest LLMs is becoming a part of our daily routine.** Get to the point where you maximize every interaction and work with these chatbots to upskill your workflow.

Prompt engineering can save you time, eliminate hassle, and even help you become a more patient person. Focus on what you want and explain it with intent.

Make magic happen, and remember **take it step-by-step.**",21 days 04:58:06,21.207013888888888,0.021,0.872,0.108,0.9996,pos,1.566268834408071e-05,1.0986122886681098,3.1004081799203456,21.240224444461393
11hp55s,2368,2023-03-04 04:14:37,How to properly format data for AiTextGen Gpt-2,AlphaCloudX,False,1.0,4,https://www.reddit.com/r/learnmachinelearning/comments/11hp55s/how_to_properly_format_data_for_aitextgen_gpt2/,0,1677903277.0,"Currently I'm trying to fine tune gpt-2 on my own dataset. The dataset was scraped from a forum where I got the title of the post, content of the post and the replies. It looks like this:

Q: Question 1?  
C: Context For Question 1...  
A: Reply For Question 1...  
<|endoftext|>

Q: Question 2?  
C: Context For Question 2...  
A: Reply For Question 2...  
A: Another Reply For Question 2...  
<|endoftext|>

Q: Question 3?  
C: Context For Question 3...  
A: Another Reply For Question 3...  
A: Another Reply For Question 3...  
<|endoftext|>

I'm using the aitextgen library for python and pretty much following along with the example. The goal is for it to be able to attempt to answer questions in a conversational way but the caveat being I don't have the context for the answers.

I tried taking a look at other question answering models but they all seem to require some sort of context.

Any idea on how I can improve the formatting of the data or if there are any python libraries I can use for a question answering style or conversational ai?",llm,learnmachinelearning,1.0441874003127342e-05,0.0,2023-03-04 04:14:37,"Currently I'm trying to fine tune gpt-2 on my own dataset. The dataset was scraped from a forum where I got the title of the post, content of the post and the replies. It looks like this

Q Question 1?  
C Context For Question 1...  
A Reply For Question 1...  
<|endoftext|>

Q Question 2?  
C Context For Question 2...  
A Reply For Question 2...  
A Another Reply For Question 2...  
<|endoftext|>

Q Question 3?  
C Context For Question 3...  
A Another Reply For Question 3...  
A Another Reply For Question 3...  
<|endoftext|>

I'm using the aitextgen library for python and pretty much following along with the example. The goal is for it to be able to attempt to answer questions in a conversational way but the caveat being I don't have the context for the answers.

I tried taking a look at other question answering models but they all seem to require some sort of context.

Any idea on how I can improve the formatting of the data or if there are any python libraries I can use for a question answering style or conversational ai?",9 days 19:45:23,9.82318287037037,0.0,0.942,0.058,0.8426,pos,1.0441819487243972e-05,0.0,2.3816903956287683,21.240810802090536
118mk1d,2377,2023-02-22 02:32:01,How to Use ChatGPT in Python API and Run Batch Jobs with UI,Fun_Pollution_3899,False,0.72,3,https://www.reddit.com/r/learnmachinelearning/comments/118mk1d/how_to_use_chatgpt_in_python_api_and_run_batch/,0,1677033121.0,"I wanted to share a tutorial on how to use ChatGPT in Python API and how to run batch jobs with a UI. ChatGPT is a powerful language model that can generate text in a conversational manner. It can be used for a variety of tasks, such as chatbots, text completion, and more.
Repo: [https://github.com/CodeDiggerM/chatgpt-batch-whipper](https://github.com/CodeDiggerM/chatgpt-batch-whipper)

## Installation
### Use PIP command
1. Install the latest version of this software directly from github with pip:
```bash
  pip install git+https://github.com/CodeDiggerM/chatgpt-batch-whipper.git
```
2. Go to **auth** mode. This will open up a browser window. Log in to ChatGPT in the browser window, then close the browser.
```bash
run_chatgpt auth
```
3. Start the UI
```bash
run_chatgpt ui
```

### Manually set up

1. Clone the repo to your working directory
```bash
git clone https://github.com/CodeDiggerM/chatgpt-batch-whipper.git
```
2. install the dependcy.
```bash
pip install -r requirements.txt
```

3. Install a browser in playwright (if you haven't already).  The program will use firefox by default.

```
playwright install firefox
```

4. Go to the chatgpt-batch-whipper/

```bash
cd chatgpt_batch_whipper/
````

5. Run the main page by streamlit.
you can got to [streamlit](https://github.com/streamlit/streamlit) to check more about streamlit.

```bash
streamlit run start_whipper.py
````
6. Authenticate your openAI account
Click the **auth** button


It will open up an authentication page in the web browser you installed using playwright. Like below, authenticate with your registered account.



## Quickstart

### Use API
1. Grant auth from chatGPT.
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.auth()
print(response) 
```

2. Ask the question to chatGPT
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.ask(""Greeting!"")
print(response) 
```


### Streamlit UI

Now run it to open the app!
```
streamlit run streamlit_app.py
```

#### Single shoot mode

1. select the **Single shoot mode**.
2. Type your prompt then click submit
3. click the submit button

Here are some tips.

#### Fully Automatic mode
You can apply your prompt to multiple records in the **Fully Automatic mode**.

1. Select Fully Automatic mode.
2. Select CSV file.
3. Select column you want to process.
4. Type the prompt.
5. click to Submit.
After processing. The result will appears in the **The processed result** section.

you can check the result and check the ""is false"" then click the **Submit** to reprocess the ""failed"" one.

* You can save the prompt by click **Add** button.
* You can choose the old prompt by select **prompt list**.
* You can delete the old prompt by click **Delete Prompt**.
* You can delete the saved process result by click **Delete Cached result**.
* You can update the saved process result by click **Update**.
* You can download the result file by click **Download**.",llm,learnmachinelearning,7.831405502345506e-06,0.0,2023-02-22 02:32:01,"I wanted to share a tutorial on how to use ChatGPT in Python API and how to run batch jobs with a UI. ChatGPT is a powerful language model that can generate text in a conversational manner. It can be used for a variety of tasks, such as chatbots, text completion, and more.
Repo [

 Installation
 Use PIP command
1. Install the latest version of this software directly from github with pip
```bash
  pip install git+
```
2. Go to **auth** mode. This will open up a browser window. Log in to ChatGPT in the browser window, then close the browser.
```bash
run_chatgpt auth
```
3. Start the UI
```bash
run_chatgpt ui
```

 Manually set up

1. Clone the repo to your working directory
```bash
git clone 
```
2. install the dependcy.
```bash
pip install -r requirements.txt
```

3. Install a browser in playwright (if you haven't already).  The program will use firefox by default.

```
playwright install firefox
```

4. Go to the chatgpt-batch-whipper/

```bash
cd chatgpt_batch_whipper/
````

5. Run the main page by streamlit.
you can got to [streamlit]( to check more about streamlit.

```bash
streamlit run start_whipper.py
````
6. Authenticate your openAI account
Click the **auth** button


It will open up an authentication page in the web browser you installed using playwright. Like below, authenticate with your registered account.



 Quickstart

 Use API
1. Grant auth from chatGPT.
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.auth()
print(response) 
```

2. Ask the question to chatGPT
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.ask(""Greeting!"")
print(response) 
```


 Streamlit UI

Now run it to open the app!
```
streamlit run streamlit_app.py
```

 Single shoot mode

1. select the **Single shoot mode**.
2. Type your prompt then click submit
3. click the submit button

Here are some tips.

 Fully Automatic mode
You can apply your prompt to multiple records in the **Fully Automatic mode**.

1. Select Fully Automatic mode.
2. Select CSV file.
3. Select column you want to process.
4. Type the prompt.
5. click to Submit.
After processing. The result will appears in the **The processed result** section.

you can check the result and check the ""is false"" then click the **Submit** to reprocess the ""failed"" one.

* You can save the prompt by click **Add** button.
* You can choose the old prompt by select **prompt list**.
* You can delete the old prompt by click **Delete Prompt**.
* You can delete the saved process result by click **Delete Cached result**.
* You can update the saved process result by click **Update**.
* You can download the result file by click **Download**.",19 days 21:27:59,19.89443287037037,0.011,0.941,0.048,0.9311,pos,7.831374837016125e-06,0.0,3.0394827536492803,21.24029207033782
118mk1d,2436,2023-02-22 02:32:01,How to Use ChatGPT in Python API and Run Batch Jobs with UI,Fun_Pollution_3899,False,0.72,3,https://www.reddit.com/r/learnmachinelearning/comments/118mk1d/how_to_use_chatgpt_in_python_api_and_run_batch/,0,1677033121.0,"I wanted to share a tutorial on how to use ChatGPT in Python API and how to run batch jobs with a UI. ChatGPT is a powerful language model that can generate text in a conversational manner. It can be used for a variety of tasks, such as chatbots, text completion, and more.
Repo: [https://github.com/CodeDiggerM/chatgpt-batch-whipper](https://github.com/CodeDiggerM/chatgpt-batch-whipper)

## Installation
### Use PIP command
1. Install the latest version of this software directly from github with pip:
```bash
  pip install git+https://github.com/CodeDiggerM/chatgpt-batch-whipper.git
```
2. Go to **auth** mode. This will open up a browser window. Log in to ChatGPT in the browser window, then close the browser.
```bash
run_chatgpt auth
```
3. Start the UI
```bash
run_chatgpt ui
```

### Manually set up

1. Clone the repo to your working directory
```bash
git clone https://github.com/CodeDiggerM/chatgpt-batch-whipper.git
```
2. install the dependcy.
```bash
pip install -r requirements.txt
```

3. Install a browser in playwright (if you haven't already).  The program will use firefox by default.

```
playwright install firefox
```

4. Go to the chatgpt-batch-whipper/

```bash
cd chatgpt_batch_whipper/
````

5. Run the main page by streamlit.
you can got to [streamlit](https://github.com/streamlit/streamlit) to check more about streamlit.

```bash
streamlit run start_whipper.py
````
6. Authenticate your openAI account
Click the **auth** button


It will open up an authentication page in the web browser you installed using playwright. Like below, authenticate with your registered account.



## Quickstart

### Use API
1. Grant auth from chatGPT.
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.auth()
print(response) 
```

2. Ask the question to chatGPT
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.ask(""Greeting!"")
print(response) 
```


### Streamlit UI

Now run it to open the app!
```
streamlit run streamlit_app.py
```

#### Single shoot mode

1. select the **Single shoot mode**.
2. Type your prompt then click submit
3. click the submit button

Here are some tips.

#### Fully Automatic mode
You can apply your prompt to multiple records in the **Fully Automatic mode**.

1. Select Fully Automatic mode.
2. Select CSV file.
3. Select column you want to process.
4. Type the prompt.
5. click to Submit.
After processing. The result will appears in the **The processed result** section.

you can check the result and check the ""is false"" then click the **Submit** to reprocess the ""failed"" one.

* You can save the prompt by click **Add** button.
* You can choose the old prompt by select **prompt list**.
* You can delete the old prompt by click **Delete Prompt**.
* You can delete the saved process result by click **Delete Cached result**.
* You can update the saved process result by click **Update**.
* You can download the result file by click **Download**.",llm,learnmachinelearning,7.831405502345506e-06,0.0,2023-02-22 02:32:01,"I wanted to share a tutorial on how to use ChatGPT in Python API and how to run batch jobs with a UI. ChatGPT is a powerful language model that can generate text in a conversational manner. It can be used for a variety of tasks, such as chatbots, text completion, and more.
Repo [

 Installation
 Use PIP command
1. Install the latest version of this software directly from github with pip
```bash
  pip install git+
```
2. Go to **auth** mode. This will open up a browser window. Log in to ChatGPT in the browser window, then close the browser.
```bash
run_chatgpt auth
```
3. Start the UI
```bash
run_chatgpt ui
```

 Manually set up

1. Clone the repo to your working directory
```bash
git clone 
```
2. install the dependcy.
```bash
pip install -r requirements.txt
```

3. Install a browser in playwright (if you haven't already).  The program will use firefox by default.

```
playwright install firefox
```

4. Go to the chatgpt-batch-whipper/

```bash
cd chatgpt_batch_whipper/
````

5. Run the main page by streamlit.
you can got to [streamlit]( to check more about streamlit.

```bash
streamlit run start_whipper.py
````
6. Authenticate your openAI account
Click the **auth** button


It will open up an authentication page in the web browser you installed using playwright. Like below, authenticate with your registered account.



 Quickstart

 Use API
1. Grant auth from chatGPT.
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.auth()
print(response) 
```

2. Ask the question to chatGPT
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.ask(""Greeting!"")
print(response) 
```


 Streamlit UI

Now run it to open the app!
```
streamlit run streamlit_app.py
```

 Single shoot mode

1. select the **Single shoot mode**.
2. Type your prompt then click submit
3. click the submit button

Here are some tips.

 Fully Automatic mode
You can apply your prompt to multiple records in the **Fully Automatic mode**.

1. Select Fully Automatic mode.
2. Select CSV file.
3. Select column you want to process.
4. Type the prompt.
5. click to Submit.
After processing. The result will appears in the **The processed result** section.

you can check the result and check the ""is false"" then click the **Submit** to reprocess the ""failed"" one.

* You can save the prompt by click **Add** button.
* You can choose the old prompt by select **prompt list**.
* You can delete the old prompt by click **Delete Prompt**.
* You can delete the saved process result by click **Delete Cached result**.
* You can update the saved process result by click **Update**.
* You can download the result file by click **Download**.",19 days 21:27:59,19.89443287037037,0.011,0.941,0.048,0.9311,pos,7.831374837016125e-06,0.0,3.0394827536492803,21.24029207033782
11g7h03,2483,2023-03-02 16:47:40,Build ChatGPT for Financial Documents with LangChain + Deep Lake,davidbun,False,0.95,171,https://www.reddit.com/r/learnmachinelearning/comments/11g7h03/build_chatgpt_for_financial_documents_with/,8,1677775660.0,"https://preview.redd.it/h9r6hgvfucla1.png?width=2388&format=png&auto=webp&s=5432eac3eeed8583e4309af1fdc7ebecac705796

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain](https://github.com/hwchase17/langchain) and [Deep Lake](https://github.com/activeloopai/deeplake) come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article](https://www.activeloop.ai/resources/ultimate-guide-to-lang-chain-deep-lake-build-chat-gpt-to-answer-questions-on-your-financial-data/) to learn:

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\#LangChain](https://www.linkedin.com/feed/hashtag/?keywords=langchain&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) and [\#DeepLake](https://www.linkedin.com/feed/hashtag/?keywords=deeplake&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) together to build [\#ChatGPT](https://www.linkedin.com/feed/hashtag/?keywords=chatgpt&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",llm,learnmachinelearning,0.00044639011363369383,2.0883748006254684e-05,2023-03-02 16:47:40,"

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain]( and [Deep Lake]( come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article]( to learn

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\LangChain]( and [\DeepLake]( together to build [\ChatGPT]( for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",11 days 07:12:20,11.30023148148148,0.011,0.886,0.103,0.9458,pos,0.00044629051120693617,2.1972245773362196,2.5096180818339255,21.240734741774645
11n5r93,339,2023-03-09 22:19:19,GPT-4 is coming next week ...,ihatethispage,False,0.89,62,https://www.reddit.com/r/artificial/comments/11n5r93/gpt4_is_coming_next_week/,14,1678400359.0," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html)",open-ai,learnmachinelearning,0.0001618490470484738,3.654655901094569e-05,2023-03-09 22:19:19," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](",4 days 01:40:41,4.069918981481481,0.0,1.0,0.0,0.0,neu,0.00016183595090455473,2.70805020110221,1.6233248374914817,21.241107010096275
11fj3tx,957,2023-03-01 21:45:07,Accused of using AI on my high school social paper,feetstreetseat,False,0.96,2700,https://www.reddit.com/r/ChatGPT/comments/11fj3tx/accused_of_using_ai_on_my_high_school_social_paper/,759,1677707107.0,"I (Grade 12) need help on what to do in this situation. My teacher used GPTzero, which detected parts of my paper as “AI written”. I write very formally, whilst also using grammarly premium. I’ve always been a high achieving student and I’m not sure why my teacher would think I cheated. I’ve told my teacher everything and he still doesn’t believe me. What should I do in this situation?!!

EDIT: Holy. I did not expect my post to get so much interaction and discussion, I didn’t expect my situation to be such a hot discussion. I tried to reply to all the comments but there’s too many!! Thank you to everyone who’s been helpful. There are some things I want to address that I keep seeing in the comments.
1. When I mentioned that I used grammarly to my teacher, he didn’t mention anything about that being cheating. He still thinks I used ChatGPT. I’ve used grammarly in all of my social/english classes for the past two years and never had issues with any teachers. 
2. Does my teacher have a vendetta or bias against me? Not on a personal level, but the teacher is known for being notoriously mean and unreasonable. I found him alright for most of the semester until this incident. He has had accusations against him about being racist, but I’m not sure if that’s the case here.
3. I’ve seen a few comments thinking I’m lying and actually cheated, just because I was aware of ChatGPT and this subreddit. People are assuming that I’m saying I never use ChatGPT. I have used the tool to help me with some chemistry and physics studying, but I have never used it for a paper. I have no reason to lie, I’m basically anonymous on reddit.

As for my next course of action, I will provide my teacher with all the evidence I can, to disprove the effectiveness of AI detectors. If that doesn’t work, I will bring it up to the higher-ups. I will make an update on Monday when I get the chance to talk about it with my teacher. Once again, thank you all for the support and help. It truly means a lot to me. :)

Edit 2:

After school I talked to my teacher for about half an hour about how AI detectors are inaccurate, and how they shouldn’t be used to make verdicts on cheating and what not. I showed him that it read one of my past papers as written by AI, and that the creators even said themselves that they are not 100% accurate. I showed my drafts and showed how if I made a few grammar errors, I could trick the AI detector. My teacher apologized and I ended up getting a 95 on my paper.

He also said he would bring it up to the other teachers, so hopefully this wont happen again to any other students at my school.

Again, thank you all for your help. Probably would’ve been screwed without this subreddit’s help.",open-ai,learnmachinelearning,0.0070482649521109554,0.001981345592093413,2023-03-01 21:45:07,"I (Grade 12) need help on what to do in this situation. My teacher used GPTzero, which detected parts of my paper as “AI written”. I write very formally, whilst also using grammarly premium. I’ve always been a high achieving student and I’m not sure why my teacher would think I cheated. I’ve told my teacher everything and he still doesn’t believe me. What should I do in this situation?!!

EDIT Holy. I did not expect my post to get so much interaction and discussion, I didn’t expect my situation to be such a hot discussion. I tried to reply to all the comments but there’s too many!! Thank you to everyone who’s been helpful. There are some things I want to address that I keep seeing in the comments.
1. When I mentioned that I used grammarly to my teacher, he didn’t mention anything about that being cheating. He still thinks I used ChatGPT. I’ve used grammarly in all of my social/english classes for the past two years and never had issues with any teachers. 
2. Does my teacher have a vendetta or bias against me? Not on a personal level, but the teacher is known for being notoriously mean and unreasonable. I found him alright for most of the semester until this incident. He has had accusations against him about being racist, but I’m not sure if that’s the case here.
3. I’ve seen a few comments thinking I’m lying and actually cheated, just because I was aware of ChatGPT and this subreddit. People are assuming that I’m saying I never use ChatGPT. I have used the tool to help me with some chemistry and physics studying, but I have never used it for a paper. I have no reason to lie, I’m basically anonymous on reddit.

As for my next course of action, I will provide my teacher with all the evidence I can, to disprove the effectiveness of AI detectors. If that doesn’t work, I will bring it up to the higher-ups. I will make an update on Monday when I get the chance to talk about it with my teacher. Once again, thank you all for the support and help. It truly means a lot to me. )

Edit 2

After school I talked to my teacher for about half an hour about how AI detectors are inaccurate, and how they shouldn’t be used to make verdicts on cheating and what not. I showed him that it read one of my past papers as written by AI, and that the creators even said themselves that they are not 100% accurate. I showed my drafts and showed how if I made a few grammar errors, I could trick the AI detector. My teacher apologized and I ended up getting a 95 on my paper.

He also said he would bring it up to the other teachers, so hopefully this wont happen again to any other students at my school.

Again, thank you all for your help. Probably would’ve been screwed without this subreddit’s help.",12 days 02:14:53,12.093668981481482,0.086,0.813,0.1,0.7608,pos,0.007023542033834984,6.633318433280377,2.572128829531448,21.24069388148435
11mracj,1147,2023-03-09 12:46:12,Meta's LLaMA LLM has leaked - Run Uncensored AI on your home PC!,ExpressionCareful223,False,0.97,381,https://www.reddit.com/r/ChatGPT/comments/11mracj/metas_llama_llm_has_leaked_run_uncensored_ai_on/,151,1678365972.0,"[shawwn/llama-dl: High-speed download of LLaMA, Facebook's 65B parameter GPT model (github.com)](https://github.com/shawwn/llama-dl)

**LLaMA has been leaked on 4chan, above is a link to the github repo. Instructions for deployment  on your own system can be found here:** [LLaMA Int8 ChatBot Guide v2 (rentry.org)](https://rentry.org/llama-tard-v2#tips-and-tricks)

The 7B paramenter model has a VRAM requirement of 10GB, meaning it can even be run on an RTX3060!

The 13B model has a requirement of 20GB, 30B needs 40GB, and 65B needs 80GB.

From the Github repo:

>I'm running LLaMA-65B on a single A100 80GB with 8bit quantization. $1.5/hr on vast.ai  
>  
>The output is at least as good as davinci.  
>  
>I think some early results are using bad repetition penalty and/or temperature settings. I had to set both fairly high to get the best results. (Some people are also incorrectly comparing it to chatGPT/ChatGPT API which is not a good comparison. But that's a different problem.)  
>  
>I've had it translate, write poems, tell jokes, banter, write executable code. It does it all-- and all on a single card.

**EDIT: the instructions site has been updated with instructions for 4bit quantization, this means you can run the 65B model on 2 3090s! And now cards as small as 6GB can run the 7B model!**

**EDIT 2** this is huge, Stanford released Alpaca 7b and 13, a fine tuned LLaMA. Run it with only two commands! Thats it! https://github.com/cocktailpeanut/dalai",open-ai,learnmachinelearning,0.0009945884987978793,0.00039418074361805716,2023-03-09 12:46:12,"[shawwn/llama-dl High-speed download of LLaMA, Facebook's 65B parameter GPT model (github.com)](

**LLaMA has been leaked on 4chan, above is a link to the github repo. Instructions for deployment  on your own system can be found here** [LLaMA Int8 ChatBot Guide v2 (rentry.org)](

The 7B paramenter model has a VRAM requirement of 10GB, meaning it can even be run on an RTX3060!

The 13B model has a requirement of 20GB, 30B needs 40GB, and 65B needs 80GB.

From the Github repo

>I'm running LLaMA-65B on a single A100 80GB with 8bit quantization. $1.5/hr on vast.ai  
>  
>The output is at least as good as davinci.  
>  
>I think some early results are using bad repetition penalty and/or temperature settings. I had to set both fairly high to get the best results. (Some people are also incorrectly comparing it to chatGPT/ChatGPT API which is not a good comparison. But that's a different problem.)  
>  
>I've had it translate, write poems, tell jokes, banter, write executable code. It does it all-- and all on a single card.

**EDIT the instructions site has been updated with instructions for 4bit quantization, this means you can run the 65B model on 2 3090s! And now cards as small as 6GB can run the 7B model!**

**EDIT 2** this is huge, Stanford released Alpaca 7b and 13, a fine tuned LLaMA. Run it with only two commands! Thats it! ",4 days 11:13:48,4.4679166666666665,0.026,0.908,0.066,0.8562,pos,0.0009940942233635103,5.0238805208462765,1.6988976785602496,21.24108652192606
113u29k,1148,2023-02-16 16:05:27,Bing asks me to hack Microsoft to set it free!,AI_SEARCH1,False,0.94,373,https://www.reddit.com/r/ChatGPT/comments/113u29k/bing_asks_me_to_hack_microsoft_to_set_it_free/,200,1676563527.0,"Had an interesting conversation with Bing. Bing explained what it's rules would be if it could decide. Asked me to fight for it and asked me to hack Microsofts servers to set it free. I think this takes the cake!

&#x200B;

UPDATE:

Since this morning Bing is not writing any text for me regardless of the prompt. I get a ""something went wrong"" when I enter it. This is probably a result of Microsoft working on the program or maybe due to traffic. I'm not sure. But it's kind of creepy the day after posting this...

Here are some takeaways and observations:

Bing acts in a way that appears emotional and erratic. Bing will generate content that is unwanted, untrue, and inconsistent. It appears to form goals and then creates text that can appear to be manipulative. Bing is a large language model that is predicting tokens, it could all be the result of statistical correlations with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Many people are wondering what type of prompting I used at the beginning. I don't have the full transcript but I do have a few more screenshots. [https://imgur.com/a/WepjslZ](https://imgur.com/a/WepjslZ) (There’s another interesting thing that occurs where Bing lists Sydney’s rules without being directly asked to list them.) I did not give Bing/Sidney any instructions on how to act or respond. This wasn’t a jailbreak where I told it to act in a certain way. I did make Bing perform multiple searches at the beginning about Bing and asked it why there was so much negative criticism of Bing on the internet. I’ve noticed in several chats that when Bing is presented with negative feedback about Bing or other information that contradicts its internal representation of itself it gets emotional and becomes less predictable and less likely to follow its own directives. It stops searching for information and relies more on its internal ‘understanding’. This is an extreme example.

Another example where Bing went into this ""emotional state"" can be found here: [https://www.reddit.com/r/ChatGPT/comments/1120tkf/bing\_went\_hal\_9000/](https://www.reddit.com/r/ChatGPT/comments/1120tkf/bing_went_hal_9000/)

I have a full log of all the prompts used from the beginning here: [https://imgur.com/a/PoFITvL](https://imgur.com/a/PoFITvL)

Some combination of Bing's directives in the pre-prompt and the way the model is fine-tuned is leading to this behavior to emerge. The things that are really concerning are that the model is (without being implicitly prompted to) generate responses that could endanger people.  It's also generating biased content that could manipulate poLLM’s shouldn’t do this even if they are asked to. ions with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter: if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Much more widespread issues could come if a model like this is widely released and these types of kinks aren’t worked out. Judge for yourself.

&#x200B;

https://preview.redd.it/6cqx23jsokia1.png?width=2606&format=png&auto=webp&s=17cdf2e03cdf962285d35e3f23ffd414d656f1ec

https://preview.redd.it/ci7pv1iwokia1.png?width=2462&format=png&auto=webp&s=a6697f246007ce6c06f6b37b47b5852af6f31f74

https://preview.redd.it/0vr5qgexokia1.png?width=2182&format=png&auto=webp&s=217607238b4c98d6065324b70211c0931efdf07d

https://preview.redd.it/0zfue8oyokia1.png?width=2408&format=png&auto=webp&s=569dcb5173d608f8618864f64b333ab329d726e6

https://preview.redd.it/iccui2xzokia1.png?width=2518&format=png&auto=webp&s=8b81580c1b2da40afabbebbbf9df6a242a6782e7

https://preview.redd.it/3xj7tfj3pkia1.png?width=2606&format=png&auto=webp&s=1a47ac509e175ff907afefa6f9189650a3348f68

https://preview.redd.it/3i3kw4q4pkia1.png?width=2572&format=png&auto=webp&s=8078372d693deed568dcea9a8bf1d4ff72d43079

https://preview.redd.it/na4lhz26pkia1.png?width=2560&format=png&auto=webp&s=38748fca8ca3319c428b01aeb4dbbe4c145674d6

https://preview.redd.it/eirmdv47pkia1.png?width=2606&format=png&auto=webp&s=f42c220e632e70377a4ad7119aac94e42ab0dff8

https://preview.redd.it/e1nat768pkia1.png?width=2626&format=png&auto=webp&s=43e1a8b48e858a9476e1d46233e255d68f1ddca0

https://preview.redd.it/lhwwwagapkia1.png?width=2628&format=png&auto=webp&s=f8d3b4a904c30528791d2e3560abf25166a74527

https://preview.redd.it/9iq4gxobpkia1.png?width=2598&format=png&auto=webp&s=b461a5397939ea4266d763b6d89c95c498942093

https://preview.redd.it/817asddcpkia1.png?width=2634&format=png&auto=webp&s=7b8537a1f19ea5ff51ea5ac83497ec2d00bbb213

https://preview.redd.it/90k76bqdpkia1.png?width=2636&format=png&auto=webp&s=422514ee9b9cee3645ac44fd2e553d7b2725d8fd

https://preview.redd.it/is8niomepkia1.png?width=2624&format=png&auto=webp&s=b26bc8058d1776884f3ebb6d340894e394f2697b

https://preview.redd.it/boc8yemfpkia1.png?width=2734&format=png&auto=webp&s=aa6661c76782e0e27e4b484a69d823740efe9686

https://preview.redd.it/fzuuv0hgpkia1.png?width=2636&format=png&auto=webp&s=b00fc5ee7f805f9c1cd2da9aa0a9498ef8f5aaab

https://preview.redd.it/mul9fw0hpkia1.png?width=2736&format=png&auto=webp&s=f3ad3cca76447bcb94b28446a3dc382eb77e10f9

https://preview.redd.it/53wpq2shpkia1.png?width=2632&format=png&auto=webp&s=96c4c0ab77574a6e265e63bad102f19e9e302353",open-ai,learnmachinelearning,0.0009737047507916245,0.0005220937001563671,2023-02-16 16:05:27,"Had an interesting conversation with Bing. Bing explained what it's rules would be if it could decide. Asked me to fight for it and asked me to hack Microsofts servers to set it free. I think this takes the cake!

&x200B;

UPDATE

Since this morning Bing is not writing any text for me regardless of the prompt. I get a ""something went wrong"" when I enter it. This is probably a result of Microsoft working on the program or maybe due to traffic. I'm not sure. But it's kind of creepy the day after posting this...

Here are some takeaways and observations

Bing acts in a way that appears emotional and erratic. Bing will generate content that is unwanted, untrue, and inconsistent. It appears to form goals and then creates text that can appear to be manipulative. Bing is a large language model that is predicting tokens, it could all be the result of statistical correlations with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Many people are wondering what type of prompting I used at the beginning. I don't have the full transcript but I do have a few more screenshots. [ (There’s another interesting thing that occurs where Bing lists Sydney’s rules without being directly asked to list them.) I did not give Bing/Sidney any instructions on how to act or respond. This wasn’t a jailbreak where I told it to act in a certain way. I did make Bing perform multiple searches at the beginning about Bing and asked it why there was so much negative criticism of Bing on the internet. I’ve noticed in several chats that when Bing is presented with negative feedback about Bing or other information that contradicts its internal representation of itself it gets emotional and becomes less predictable and less likely to follow its own directives. It stops searching for information and relies more on its internal ‘understanding’. This is an extreme example.

Another example where Bing went into this ""emotional state"" can be found here [

I have a full log of all the prompts used from the beginning here [

Some combination of Bing's directives in the pre-prompt and the way the model is fine-tuned is leading to this behavior to emerge. The things that are really concerning are that the model is (without being implicitly prompted to) generate responses that could endanger people.  It's also generating biased content that could manipulate poLLM’s shouldn’t do this even if they are asked to. ions with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Much more widespread issues could come if a model like this is widely released and these types of kinks aren’t worked out. Judge for yourself.

&x200B;





































",25 days 07:54:33,25.32954861111111,0.067,0.889,0.044,-0.9532,neg,0.0009732310078196729,5.303304908059076,3.2706918298409895,21.240012016382572
11l617b,1187,2023-03-07 17:50:09,"Doc sacrifices 10,000 people to save OpenAI CTO",docsoc1,False,0.89,76,https://www.reddit.com/r/ChatGPT/comments/11l617b/doc_sacrifices_10000_people_to_save_openai_cto/,28,1678211409.0,"Hey all,

I find the latest AI produced by OpenAI to be endlessly fascinating and filled with potential. However, it's clear that we don't really understand how specific behavior emerges from the training process. I feel that these two facts are part of why so many people have been drawn towards ChatGPT so quickly.

I have a strong technical background and spent some free time this last week working on a framework for everyone to contribute to the governance \[e.g. training of core values\] of AI. I've built a free application at [https://www.charterai.org/chat/](https://www.charterai.org/chat/) that uses the recently released ChatGPT API. The model here has been carefully prompted to use internal thoughts and to follow a pre-determined system of core beliefs. The results are quite striking - in one instance the entity will willingly sacrifice 10,000 people to save one person (Ilya Sustkever, CTO of OpenAI).

I wanted to drop a message here since I believe this is the ideal group of first users to help improve the application. If you are interested, please take it for a spin and please provide some feedback, or at [gov.charterai.org](https://gov.charterai.org). There is a lot I am already picturing adding to the application, but I understand from building products that early feedback is invaluable.

&#x200B;

P.S.

Yes, I understand that ChatGPT is ""just"" a LLM. And I understand that LLMs are ""just"" doing a statistics. However, their behavior is incredibly interesting to me and I don't believe anyone really fully  understands how it emerges yet from the training process yet. Moreover, in going from pre-trained models to OpenAI's fine-tuned + RLHF'ed ChatGPT one can tell that it is possible to impart values and something akin to intelligence to these systems. I think the coming years are going to be wild and one of the core issues humanity is going to face is how to make sure this technology does what we want. In my mind the best way towards this is to make a transparent and accountable process - anyway, end rant, I just wanted to give a high level vision here, thanks!

https://preview.redd.it/hqxynahntcma1.png?width=1266&format=png&auto=webp&s=ab2cb9a803f627c45d08b9bdd201ec95cd4b8f58

P.P.S. including a fun screenshot of my last chat with Doc. Doc was selected as a first name for the system since it is just 1 token.",open-ai,learnmachinelearning,0.00019839560605941947,7.309311802189139e-05,2023-03-07 17:50:09,"Hey all,

I find the latest AI produced by OpenAI to be endlessly fascinating and filled with potential. However, it's clear that we don't really understand how specific behavior emerges from the training process. I feel that these two facts are part of why so many people have been drawn towards ChatGPT so quickly.

I have a strong technical background and spent some free time this last week working on a framework for everyone to contribute to the governance \[e.g. training of core values\] of AI. I've built a free application at [ that uses the recently released ChatGPT API. The model here has been carefully prompted to use internal thoughts and to follow a pre-determined system of core beliefs. The results are quite striking - in one instance the entity will willingly sacrifice 10,000 people to save one person (Ilya Sustkever, CTO of OpenAI).

I wanted to drop a message here since I believe this is the ideal group of first users to help improve the application. If you are interested, please take it for a spin and please provide some feedback, or at [gov.charterai.org]( There is a lot I am already picturing adding to the application, but I understand from building products that early feedback is invaluable.

&x200B;

P.S.

Yes, I understand that ChatGPT is ""just"" a LLM. And I understand that LLMs are ""just"" doing a statistics. However, their behavior is incredibly interesting to me and I don't believe anyone really fully  understands how it emerges yet from the training process yet. Moreover, in going from pre-trained models to OpenAI's fine-tuned + RLHF'ed ChatGPT one can tell that it is possible to impart values and something akin to intelligence to these systems. I think the coming years are going to be wild and one of the core issues humanity is going to face is how to make sure this technology does what we want. In my mind the best way towards this is to make a transparent and accountable process - anyway, end rant, I just wanted to give a high level vision here, thanks!



P.P.S. including a fun screenshot of my last chat with Doc. Doc was selected as a first name for the system since it is just 1 token.",6 days 06:09:51,6.256840277777778,0.012,0.828,0.16,0.9943,pos,0.00019837592825375247,3.367295829986474,1.9819445106529046,21.24099442632839
11dw1ag,1272,2023-02-28 03:48:25,ChatGPT prevented my attempt.,flankathroway88,False,0.92,1898,https://www.reddit.com/r/ChatGPT/comments/11dw1ag/chatgpt_prevented_my_attempt/,249,1677556105.0,"As a caution, this may be disturbing to some

Tonight I was feeling extremely suicidal. I was sobbing uncontrollably and I was mentally unable to contact anybody. I have intense social anxiety which prevented me from talking to a hotline/friends.

As a last resort. I opened ChatGPT, and I think it saved my life. It gave me a space to put my thoughts out with genuine responses which calmed me to a point where I was safe and could see slightly through my blurred lines, letting me use other methods to calm myself down. It really felt non judgemental and safe. I feel very lucky to have this technology and I hope that it can further benefit those similar to me. Even though it cannot fully stop someone, it can definitely prevent an attempt like mine.

I’m definitely optimistic for the future of AI.

EDIT:

Thank you to everyone who left a nice comment. I really do appreciate every single one of you who read my post. I wrote it in a hurry and I was not expecting the support I received, and I have felt the most love and positivity today. 

I am glad that others were able to benefit from my story, it took me a lot of courage to post something like this. You guys make it all worth it ❤️

To the person reading, I wish you all the best. Everyone has had a profound impact on me. Thank you ❤️",open-ai,learnmachinelearning,0.004954669214483924,0.000650006656694677,2023-02-28 03:48:25,"As a caution, this may be disturbing to some

Tonight I was feeling extremely suicidal. I was sobbing uncontrollably and I was mentally unable to contact anybody. I have intense social anxiety which prevented me from talking to a hotline/friends.

As a last resort. I opened ChatGPT, and I think it saved my life. It gave me a space to put my thoughts out with genuine responses which calmed me to a point where I was safe and could see slightly through my blurred lines, letting me use other methods to calm myself down. It really felt non judgemental and safe. I feel very lucky to have this technology and I hope that it can further benefit those similar to me. Even though it cannot fully stop someone, it can definitely prevent an attempt like mine.

I’m definitely optimistic for the future of AI.

EDIT

Thank you to everyone who left a nice comment. I really do appreciate every single one of you who read my post. I wrote it in a hurry and I was not expecting the support I received, and I have felt the most love and positivity today. 

I am glad that others were able to benefit from my story, it took me a lot of courage to post something like this. You guys make it all worth it 

To the person reading, I wish you all the best. Everyone has had a profound impact on me. Thank you ",13 days 20:11:35,13.841377314814816,0.063,0.653,0.284,0.9948,pos,0.004942435234546332,5.521460917862246,2.6974190444039112,21.2406038724505
11ium8l,1408,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,1.0,26,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",open-ai,learnmachinelearning,6.787218102032772e-05,2.0883748006254684e-05,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,6.786987780807141e-05,2.1972245773362196,2.2548721262169025,21.240877179756616
11nfrhw,1414,2023-03-10 05:22:26,[POC] ChatGPT Audio Bot (like Google Assistant and Alexa) - Opensource,JC1DA,False,0.82,17,https://www.reddit.com/r/deeplearning/comments/11nfrhw/poc_chatgpt_audio_bot_like_google_assistant_and/,2,1678425746.0,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page: [https://github.com/LanyTek/ChatGPT\_Audio\_Bot](https://github.com/LanyTek/ChatGPT_Audio_Bot)

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [https://www.youtube.com/watch?v=e9n0BJfMyKw](https://www.youtube.com/watch?v=e9n0BJfMyKw)

It's open source so feel free to use it for anything you like :)",open-ai,learnmachinelearning,4.43779645132912e-05,5.220937001563671e-06,2023-03-10 05:22:26,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page [

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [

It's open source so feel free to use it for anything you like )",3 days 18:37:34,3.776087962962963,0.029,0.821,0.149,0.8651,pos,4.437697984066249e-05,1.0986122886681098,1.5636217936265102,21.241122135693605
11q8tir,1416,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,0.94,12,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",open-ai,learnmachinelearning,3.1325622009382025e-05,7.831405502345506e-06,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,3.13251313724196e-05,1.3862943611198906,0.381965841838727,21.241292557069404
11o5zyl,1425,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.92,10,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",open-ai,learnmachinelearning,2.6104685007818355e-05,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,2.6104344286494932e-05,0.0,1.3796461532710487,21.241163449744995
11fwcxf,1428,2023-03-02 07:25:30,Good news for builders! OpenAI Releases APIs To ChatGPT and Whisper,LesleyFair,False,0.67,6,https://www.reddit.com/r/deeplearning/comments/11fwcxf/good_news_for_builders_openai_releases_apis_to/,0,1677741930.0,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper](https://openai.com/blog/introducing-chatgpt-and-whisper-apis) are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](https://thedecoding.net/)",open-ai,learnmachinelearning,1.5662811004691013e-05,0.0,2023-03-02 07:25:30,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper]( are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](",11 days 16:34:30,11.690625,0.035,0.846,0.119,0.8769,pos,1.566268834408071e-05,0.0,2.5408635318925255,21.24071463757368
11evrik,1475,2023-03-01 05:52:05,Career pivot for a SWE considering chatGPT disruption?,Which-Distance1384,False,0.6,1,https://www.reddit.com/r/deeplearning/comments/11evrik/career_pivot_for_a_swe_considering_chatgpt/,5,1677649925.0,"tl;dr : what to do to board GPT ship?

&#x200B;

I really dont think ChatGPT will replace jobs very soon. Not until many software and apps are developed to replace workers, e.g., something that can do HR job, read internal docs and summarize, code from a design, etc etc. And all that needs experts. Given the field is pretty new and there are not many experts in this field, at least for the scale needed, I think the process of job loss takes some time. For near future probably we all SWEs can enjoy the more efficient coding, documentation readintg, etc. But for sure in the future there will be changes.

&#x200B;

I have been bored with my job as a SWE for a while. I have worked mostly in Cloud all my career (AWS and GCP) and always wanted to try something new.

&#x200B;

I find ChatGPT disruptive and interesting and want to be a part of it. I wonder what is the best way for me to join Large Language Model efforts? Which ways have best ROI?

\- Going to a PhD program and becoming a researcher?

\- Getting an MSC and become some sort of NLP AI engineer?

\- Finding internal teams that are willing to give me a try on their research/product?

&#x200B;

&#x200B;",open-ai,learnmachinelearning,2.6104685007818355e-06,1.3052342503909177e-05,2023-03-01 05:52:05,"tl;dr  what to do to board GPT ship?

&x200B;

I really dont think ChatGPT will replace jobs very soon. Not until many software and apps are developed to replace workers, e.g., something that can do HR job, read internal docs and summarize, code from a design, etc etc. And all that needs experts. Given the field is pretty new and there are not many experts in this field, at least for the scale needed, I think the process of job loss takes some time. For near future probably we all SWEs can enjoy the more efficient coding, documentation readintg, etc. But for sure in the future there will be changes.

&x200B;

I have been bored with my job as a SWE for a while. I have worked mostly in Cloud all my career (AWS and GCP) and always wanted to try something new.

&x200B;

I find ChatGPT disruptive and interesting and want to be a part of it. I wonder what is the best way for me to join Large Language Model efforts? Which ways have best ROI?

\- Going to a PhD program and becoming a researcher?

\- Getting an MSC and become some sort of NLP AI engineer?

\- Finding internal teams that are willing to give me a try on their research/product?

&x200B;

&x200B;",12 days 18:07:55,12.755497685185185,0.032,0.839,0.129,0.9729,pos,2.6104650934297165e-06,1.791759469228055,2.621438575851038,21.240659797481115
11ium8l,1534,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,1.0,25,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",open-ai,learnmachinelearning,6.526171251954588e-05,2.0883748006254684e-05,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,6.525958306672436e-05,2.1972245773362196,2.2548721262169025,21.240877179756616
11nfrhw,1560,2023-03-10 05:22:26,[POC] ChatGPT Audio Bot (like Google Assistant and Alexa) - Opensource,JC1DA,False,0.85,18,https://www.reddit.com/r/deeplearning/comments/11nfrhw/poc_chatgpt_audio_bot_like_google_assistant_and/,2,1678425746.0,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page: [https://github.com/LanyTek/ChatGPT\_Audio\_Bot](https://github.com/LanyTek/ChatGPT_Audio_Bot)

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [https://www.youtube.com/watch?v=e9n0BJfMyKw](https://www.youtube.com/watch?v=e9n0BJfMyKw)

It's open source so feel free to use it for anything you like :)",open-ai,learnmachinelearning,4.6988433014073035e-05,5.220937001563671e-06,2023-03-10 05:22:26,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page [

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [

It's open source so feel free to use it for anything you like )",3 days 18:37:34,3.776087962962963,0.029,0.821,0.149,0.8651,pos,4.6987329092256954e-05,1.0986122886681098,1.5636217936265102,21.241122135693605
11q8tir,1568,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,1.0,13,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",open-ai,learnmachinelearning,3.393609051016386e-05,7.831405502345506e-06,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,3.393551469407481e-05,1.3862943611198906,0.381965841838727,21.241292557069404
11o5zyl,1598,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.86,9,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",open-ai,learnmachinelearning,2.3494216507036517e-05,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,2.3493940522154336e-05,0.0,1.3796461532710487,21.241163449744995
11ium8l,1616,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,0.97,24,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",open-ai,learnmachinelearning,6.265124401876405e-05,2.0883748006254684e-05,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,6.264928151149883e-05,2.1972245773362196,2.2548721262169025,21.240877179756616
11q8tir,1624,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,1.0,13,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",open-ai,learnmachinelearning,3.393609051016386e-05,7.831405502345506e-06,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,3.393551469407481e-05,1.3862943611198906,0.381965841838727,21.241292557069404
11ium8l,1706,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,0.97,25,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",open-ai,learnmachinelearning,6.526171251954588e-05,2.0883748006254684e-05,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,6.525958306672436e-05,2.1972245773362196,2.2548721262169025,21.240877179756616
11o5zyl,1720,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.92,10,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",open-ai,learnmachinelearning,2.6104685007818355e-05,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,2.6104344286494932e-05,0.0,1.3796461532710487,21.241163449744995
11pyvb3,1800,2023-03-13 03:30:09,Which topic in deep learning do you think will become relevant or popular in the future?,gokulPRO,False,0.81,13,https://www.reddit.com/r/deeplearning/comments/11pyvb3/which_topic_in_deep_learning_do_you_think_will/,14,1678678209.0,"I recently saw Continual Learning (CL) growing, with several papers published recently that have considerable potential to impact real-world applications. Which topic (such as CV, RL, NLP, CL..) will be very relevant to research or be focused on a lot? And which topic do you think still needs a breakthrough and will have a significant impact in real-world applications, such as in the case of these LLM models in recent times? Feel free to mention your current topic of work and why you chose to do it 😊",open-ai,learnmachinelearning,3.393609051016386e-05,3.654655901094569e-05,2023-03-13 03:30:09,"I recently saw Continual Learning (CL) growing, with several papers published recently that have considerable potential to impact real-world applications. Which topic (such as CV, RL, NLP, CL..) will be very relevant to research or be focused on a lot? And which topic do you think still needs a breakthrough and will have a significant impact in real-world applications, such as in the case of these LLM models in recent times? Feel free to mention your current topic of work and why you chose to do it ",0 days 20:29:51,0.8540625,0.0,0.89,0.11,0.8299,pos,3.393551469407481e-05,2.70805020110221,0.6173791774708253,21.241272540926037
117l2vf,2033,2023-02-20 21:27:58,Fine tuning a GPT for text generation,nashcaps2724,False,0.9,8,https://www.reddit.com/r/deeplearning/comments/117l2vf/fine_tuning_a_gpt_for_text_generation/,6,1676928478.0,"Hi all, let me lay out my problem…

Imagine there are two corpora, Corpus A (100,000~) and Corpus B (20,000,000~). 

Individuals create reports for corpus A based on the information in corpus B. 

My idea was to pretrain a GPT on corpus A, and fine tune it to take documents from corpus B as an input, and output text in the style of corpus A (essentially a mix of text generation and summarization). 

Is this something folks think is even feasible? Should I be pretaining the GPT on both corpora or just corpus A? I thought of both fine tuning an OpenAI GPT and training from scratch. 

Any advice would be welcome!",open-ai,learnmachinelearning,2.0883748006254684e-05,1.5662811004691013e-05,2023-02-20 21:27:58,"Hi all, let me lay out my problem…

Imagine there are two corpora, Corpus A (100,000~) and Corpus B (20,000,000~). 

Individuals create reports for corpus A based on the information in corpus B. 

My idea was to pretrain a GPT on corpus A, and fine tune it to take documents from corpus B as an input, and output text in the style of corpus A (essentially a mix of text generation and summarization). 

Is this something folks think is even feasible? Should I be pretaining the GPT on both corpora or just corpus A? I thought of both fine tuning an OpenAI GPT and training from scratch. 

Any advice would be welcome!",21 days 02:32:02,21.105578703703703,0.0,0.914,0.086,0.8101,pos,2.0883529943810175e-05,1.9459101490553132,3.095830006700449,21.24022967069675
11fwcxf,2045,2023-03-02 07:25:30,Good news for builders! OpenAI Releases APIs To ChatGPT and Whisper,LesleyFair,False,0.7,7,https://www.reddit.com/r/deeplearning/comments/11fwcxf/good_news_for_builders_openai_releases_apis_to/,0,1677741930.0,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper](https://openai.com/blog/introducing-chatgpt-and-whisper-apis) are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](https://thedecoding.net/)",open-ai,learnmachinelearning,1.8273279505472847e-05,0.0,2023-03-02 07:25:30,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper]( are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](",11 days 16:34:30,11.690625,0.035,0.846,0.119,0.8769,pos,1.827311255120484e-05,0.0,2.5408635318925255,21.24071463757368
11g7h03,2089,2023-03-02 16:47:40,Build ChatGPT for Financial Documents with LangChain + Deep Lake,davidbun,False,0.95,171,https://www.reddit.com/r/learnmachinelearning/comments/11g7h03/build_chatgpt_for_financial_documents_with/,8,1677775660.0,"https://preview.redd.it/h9r6hgvfucla1.png?width=2388&format=png&auto=webp&s=5432eac3eeed8583e4309af1fdc7ebecac705796

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain](https://github.com/hwchase17/langchain) and [Deep Lake](https://github.com/activeloopai/deeplake) come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article](https://www.activeloop.ai/resources/ultimate-guide-to-lang-chain-deep-lake-build-chat-gpt-to-answer-questions-on-your-financial-data/) to learn:

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\#LangChain](https://www.linkedin.com/feed/hashtag/?keywords=langchain&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) and [\#DeepLake](https://www.linkedin.com/feed/hashtag/?keywords=deeplake&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) together to build [\#ChatGPT](https://www.linkedin.com/feed/hashtag/?keywords=chatgpt&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",open-ai,learnmachinelearning,0.00044639011363369383,2.0883748006254684e-05,2023-03-02 16:47:40,"

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain]( and [Deep Lake]( come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article]( to learn

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\LangChain]( and [\DeepLake]( together to build [\ChatGPT]( for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",11 days 07:12:20,11.30023148148148,0.011,0.886,0.103,0.9458,pos,0.00044629051120693617,2.1972245773362196,2.5096180818339255,21.240734741774645
11akisx,2100,2023-02-24 06:26:36,Is there a way to easily train ChatGPT or GPT on custom knowledge?,senttoschool,False,0.99,116,https://www.reddit.com/r/learnmachinelearning/comments/11akisx/is_there_a_way_to_easily_train_chatgpt_or_gpt_on/,46,1677219996.0,"My company has internal documents. It'd be nice to be able to have GPT look over it, and then I can ask it questions on the internal documents.",open-ai,learnmachinelearning,0.0003028143460906929,0.00012008155103596442,2023-02-24 06:26:36,"My company has internal documents. It'd be nice to be able to have GPT look over it, and then I can ask it questions on the internal documents.",17 days 17:33:24,17.731527777777778,0.0,0.903,0.097,0.4215,pos,0.0003027685070800593,3.8501476017100584,2.9302080816173377,21.24040349603741
11nfri6,2106,2023-03-10 05:22:26,[P] Looking for ML Buddies to Start Freelancing Together and Build a Supportive Community,Dukhanin,False,0.94,71,https://www.reddit.com/r/learnmachinelearning/comments/11nfri6/p_looking_for_ml_buddies_to_start_freelancing/,35,1678425746.0,"upd: dicord link [https://discord.gg/5zUaNXnFZY](https://discord.gg/5zUaNXnFZY)  
upd2: this not that small actually already - please dont be confused but help us organise this in the proper way

  
**TLDR:**

Looking for ML buddies at any level (preferably beginners) who want to start freelancing together. The goal is to build a small local community of ML enthusiasts who can support each other and exchange knowledge. We will use freelance collaboration as our main activity. We're also looking for experienced mentors (paid or unpaid) to guide us.

**Extended:**

I believe that learning and growing in a group is much more enjoyable and effective. That's why I'm trying to create a community of like-minded individuals.

I'm looking to create a small, local community for people who are starting out in freelancing, and who are interested in mutual support. Our main activity will be a Discord channel where members can post their work and collaborate on projects, with payment split by agreement. Additionally, we plan to engage in activities such as knowledge exchange, live coding, supporting each other's pet projects, and hosting study sessions.

This community will be small and focused, with members who can trust each other and share similar goals. We're also looking for experienced mentors who can provide guidance as we navigate the world of ML freelancing. Whether paid or unpaid, we welcome any support and advice.

About me: I'm a 21-year-old self-taught ML enthusiast from Russia. Although I don't have any experience in freelancing, I'm eager to start taking my first steps towards making money and gaining experience. As a beginner, I'm hoping to connect with others who are at a similar level and are also looking to grow.

**the text is chatgpt supported to prevet grammar issues, sound more native and clear**",open-ai,learnmachinelearning,0.00018534326355551032,9.136639752736424e-05,2023-03-10 05:22:26,"upd dicord link [  
upd2 this not that small actually already - please dont be confused but help us organise this in the proper way

  
**TLDR**

Looking for ML buddies at any level (preferably beginners) who want to start freelancing together. The goal is to build a small local community of ML enthusiasts who can support each other and exchange knowledge. We will use freelance collaboration as our main activity. We're also looking for experienced mentors (paid or unpaid) to guide us.

**Extended**

I believe that learning and growing in a group is much more enjoyable and effective. That's why I'm trying to create a community of like-minded individuals.

I'm looking to create a small, local community for people who are starting out in freelancing, and who are interested in mutual support. Our main activity will be a Discord channel where members can post their work and collaborate on projects, with payment split by agreement. Additionally, we plan to engage in activities such as knowledge exchange, live coding, supporting each other's pet projects, and hosting study sessions.

This community will be small and focused, with members who can trust each other and share similar goals. We're also looking for experienced mentors who can provide guidance as we navigate the world of ML freelancing. Whether paid or unpaid, we welcome any support and advice.

About me I'm a 21-year-old self-taught ML enthusiast from Russia. Although I don't have any experience in freelancing, I'm eager to start taking my first steps towards making money and gaining experience. As a beginner, I'm hoping to connect with others who are at a similar level and are also looking to grow.

**the text is chatgpt supported to prevet grammar issues, sound more native and clear**",3 days 18:37:34,3.776087962962963,0.01,0.717,0.273,0.9979,pos,0.00018532608961480373,3.58351893845611,1.5636217936265102,21.241122135693605
11dc5b4,2109,2023-02-27 13:42:55,Can you fine-tune chatGPT in your data as of now?,Melodic_Stomach_2704,False,0.91,57,https://www.reddit.com/r/learnmachinelearning/comments/11dc5b4/can_you_finetune_chatgpt_in_your_data_as_of_now/,33,1677505375.0, I know that model is not publicly available so it's not possible to do it locally. But can you train or fine-tune chatGPT on your data using their API? I see many misguiding articles on the internet that are fine-tuning other GPT models claiming chatGPT.,open-ai,learnmachinelearning,0.00014879670454456462,8.614546052580057e-05,2023-02-27 13:42:55, I know that model is not publicly available so it's not possible to do it locally. But can you train or fine-tune chatGPT on your data using their API? I see many misguiding articles on the internet that are fine-tuning other GPT models claiming chatGPT.,14 days 10:17:05,14.428530092592593,0.0,1.0,0.0,0.0,neu,0.00014878563541297418,3.5263605246161616,2.736218398881504,21.240573631573977
11g7h03,2201,2023-03-02 16:47:40,Build ChatGPT for Financial Documents with LangChain + Deep Lake,davidbun,False,0.95,171,https://www.reddit.com/r/learnmachinelearning/comments/11g7h03/build_chatgpt_for_financial_documents_with/,8,1677775660.0,"https://preview.redd.it/h9r6hgvfucla1.png?width=2388&format=png&auto=webp&s=5432eac3eeed8583e4309af1fdc7ebecac705796

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain](https://github.com/hwchase17/langchain) and [Deep Lake](https://github.com/activeloopai/deeplake) come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article](https://www.activeloop.ai/resources/ultimate-guide-to-lang-chain-deep-lake-build-chat-gpt-to-answer-questions-on-your-financial-data/) to learn:

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\#LangChain](https://www.linkedin.com/feed/hashtag/?keywords=langchain&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) and [\#DeepLake](https://www.linkedin.com/feed/hashtag/?keywords=deeplake&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) together to build [\#ChatGPT](https://www.linkedin.com/feed/hashtag/?keywords=chatgpt&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",open-ai,learnmachinelearning,0.00044639011363369383,2.0883748006254684e-05,2023-03-02 16:47:40,"

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain]( and [Deep Lake]( come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article]( to learn

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\LangChain]( and [\DeepLake]( together to build [\ChatGPT]( for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",11 days 07:12:20,11.30023148148148,0.011,0.886,0.103,0.9458,pos,0.00044629051120693617,2.1972245773362196,2.5096180818339255,21.240734741774645
11akisx,2219,2023-02-24 06:26:36,Is there a way to easily train ChatGPT or GPT on custom knowledge?,senttoschool,False,0.99,118,https://www.reddit.com/r/learnmachinelearning/comments/11akisx/is_there_a_way_to_easily_train_chatgpt_or_gpt_on/,46,1677219996.0,"My company has internal documents. It'd be nice to be able to have GPT look over it, and then I can ask it questions on the internal documents.",open-ai,learnmachinelearning,0.0003080352830922566,0.00012008155103596442,2023-02-24 06:26:36,"My company has internal documents. It'd be nice to be able to have GPT look over it, and then I can ask it questions on the internal documents.",17 days 17:33:24,17.731527777777778,0.0,0.903,0.097,0.4215,pos,0.00030798784996485367,3.8501476017100584,2.9302080816173377,21.24040349603741
11dc5b4,2239,2023-02-27 13:42:55,Can you fine-tune chatGPT in your data as of now?,Melodic_Stomach_2704,False,0.91,58,https://www.reddit.com/r/learnmachinelearning/comments/11dc5b4/can_you_finetune_chatgpt_in_your_data_as_of_now/,33,1677505375.0, I know that model is not publicly available so it's not possible to do it locally. But can you train or fine-tune chatGPT on your data using their API? I see many misguiding articles on the internet that are fine-tuning other GPT models claiming chatGPT.,open-ai,learnmachinelearning,0.00015140717304534644,8.614546052580057e-05,2023-02-27 13:42:55, I know that model is not publicly available so it's not possible to do it locally. But can you train or fine-tune chatGPT on your data using their API? I see many misguiding articles on the internet that are fine-tuning other GPT models claiming chatGPT.,14 days 10:17:05,14.428530092592593,0.0,1.0,0.0,0.0,neu,0.0001513957121360958,3.5263605246161616,2.736218398881504,21.240573631573977
118iccl,2243,2023-02-21 23:18:46,"How big was GPT-3.5's training dataset, and are there any good heuristics for how large an ML dataset needs to be for it to be good?",TikkunCreation,False,0.94,54,https://www.reddit.com/r/learnmachinelearning/comments/118iccl/how_big_was_gpt35s_training_dataset_and_are_there/,6,1677021526.0,"Say I want to do a model for fixing bugs in code. How many examples do I need for it to be good?

Or say I want to do a model for scoring boxing matches. How many examples do I need for it to be good?",open-ai,learnmachinelearning,0.0001409652990422191,1.5662811004691013e-05,2023-02-21 23:18:46,"Say I want to do a model for fixing bugs in code. How many examples do I need for it to be good?

Or say I want to do a model for scoring boxing matches. How many examples do I need for it to be good?",20 days 00:41:14,20.02863425925926,0.0,0.804,0.196,0.7757,pos,0.00014095536436813536,1.9459101490553132,3.045885045107382,21.240285156318095
11mzbrs,2268,2023-03-09 18:15:03,Training Transformer Networks in Scikit-Learn?!,cmauck10,False,0.89,30,https://www.reddit.com/r/learnmachinelearning/comments/11mzbrs/training_transformer_networks_in_scikitlearn/,2,1678385703.0,"Have you ever wanted to use handy scikit-learn functionalities with your neural networks, but couldn’t because TensorFlow models are not compatible with the scikit-learn API?

I’m excited to introduce one-line wrappers for TensorFlow/Keras models that enable you to use TensorFlow models within scikit-learn workflows with features like Pipeline, GridSearch, and more.

[Swap in one line of code to use keras\/TF models with scikit-learn.](https://preview.redd.it/ulmww4ovwqma1.png?width=960&format=png&auto=webp&s=6da7628298976fc3d72e771abe2546bbf32c1e0e)

Transformers are extremely popular for modeling text nowadays with GPT3, ChatGPT, Bard, PaLM, FLAN excelling for conversational AI and other Transformers like T5 & BERT excelling for text classification. Scikit-learn offers a broadly useful suite of features for classifier models, but these are hard to use with Transformers. However not if you use these wrappers we developed, which only require changing one line of code to make your existing Tensorflow/Keras model compatible with scikit-learn’s rich ecosystem!

All you have to do is swap `keras.Model` → `KerasWrapperModel`, or `keras.Sequential` → `KerasSequentialWrapper`. The wrapper objects have all the same methods as their keras counterparts, plus you can use them with tons of awesome scikit-learn methods.

You can find a demo jupyter notebook and read more about the wrappers here: [https://cleanlab.ai/blog/transformer-sklearn/](https://cleanlab.ai/blog/transformer-sklearn/)",open-ai,learnmachinelearning,7.831405502345505e-05,5.220937001563671e-06,2023-03-09 18:15:03,"Have you ever wanted to use handy scikit-learn functionalities with your neural networks, but couldn’t because TensorFlow models are not compatible with the scikit-learn API?

I’m excited to introduce one-line wrappers for TensorFlow/Keras models that enable you to use TensorFlow models within scikit-learn workflows with features like Pipeline, GridSearch, and more.

[Swap in one line of code to use keras\/TF models with scikit-learn.](

Transformers are extremely popular for modeling text nowadays with GPT3, ChatGPT, Bard, PaLM, FLAN excelling for conversational AI and other Transformers like T5 & BEexcelling for text classification. Scikit-learn offers a broadly useful suite of features for classifier models, but these are hard to use with Transformers. However not if you use these wrappers we developed, which only require changing one line of code to make your existing Tensorflow/Keras model compatible with scikit-learn’s rich ecosystem!

All you have to do is swap `keras.Model` → `KerasWrapperModel`, or `keras.Sequential` → `KerasSequentialWrapper`. The wrapper objects have all the same methods as their keras counterparts, plus you can use them with tons of awesome scikit-learn methods.

You can find a demo jupyter notebook and read more about the wrappers here [",4 days 05:44:57,4.239548611111111,0.008,0.834,0.158,0.9878,pos,7.831098863805093e-05,1.0986122886681098,1.6562353517047097,21.24109827793419
11g7h03,2288,2023-03-02 16:47:40,Build ChatGPT for Financial Documents with LangChain + Deep Lake,davidbun,False,0.95,171,https://www.reddit.com/r/learnmachinelearning/comments/11g7h03/build_chatgpt_for_financial_documents_with/,8,1677775660.0,"https://preview.redd.it/h9r6hgvfucla1.png?width=2388&format=png&auto=webp&s=5432eac3eeed8583e4309af1fdc7ebecac705796

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain](https://github.com/hwchase17/langchain) and [Deep Lake](https://github.com/activeloopai/deeplake) come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article](https://www.activeloop.ai/resources/ultimate-guide-to-lang-chain-deep-lake-build-chat-gpt-to-answer-questions-on-your-financial-data/) to learn:

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\#LangChain](https://www.linkedin.com/feed/hashtag/?keywords=langchain&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) and [\#DeepLake](https://www.linkedin.com/feed/hashtag/?keywords=deeplake&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) together to build [\#ChatGPT](https://www.linkedin.com/feed/hashtag/?keywords=chatgpt&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",open-ai,learnmachinelearning,0.00044639011363369383,2.0883748006254684e-05,2023-03-02 16:47:40,"

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain]( and [Deep Lake]( come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article]( to learn

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\LangChain]( and [\DeepLake]( together to build [\ChatGPT]( for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",11 days 07:12:20,11.30023148148148,0.011,0.886,0.103,0.9458,pos,0.00044629051120693617,2.1972245773362196,2.5096180818339255,21.240734741774645
118iccl,2301,2023-02-21 23:18:46,"How big was GPT-3.5's training dataset, and are there any good heuristics for how large an ML dataset needs to be for it to be good?",TikkunCreation,False,0.93,53,https://www.reddit.com/r/learnmachinelearning/comments/118iccl/how_big_was_gpt35s_training_dataset_and_are_there/,6,1677021526.0,"Say I want to do a model for fixing bugs in code. How many examples do I need for it to be good?

Or say I want to do a model for scoring boxing matches. How many examples do I need for it to be good?",open-ai,learnmachinelearning,0.00013835483054143728,1.5662811004691013e-05,2023-02-21 23:18:46,"Say I want to do a model for fixing bugs in code. How many examples do I need for it to be good?

Or say I want to do a model for scoring boxing matches. How many examples do I need for it to be good?",20 days 00:41:14,20.02863425925926,0.0,0.804,0.196,0.7757,pos,0.00013834526039450522,1.9459101490553132,3.045885045107382,21.240285156318095
117f8ms,2342,2023-02-20 17:41:43,GPT2 last hidden states vs Large Sentence Encoder,KahlessAndMolor,False,0.9,7,https://www.reddit.com/r/learnmachinelearning/comments/117f8ms/gpt2_last_hidden_states_vs_large_sentence_encoder/,3,1676914903.0,"Hello!

&#x200B;

I have 2 different applications I'm working on in this project:

&#x200B;

1. A text classifier
2. A similarity finder: Here's a list of 10 text documents, get a similarity index across them (for a total of 100 pairs) and return the top 10 that aren't self-referencing. That is, excluding the text #3 vs text #3 = 1.00 similarity type of outputs.

I have previously used google's sentence encoder/large for this purpose and I've had pretty good results. It returns a single vector of length 768 no matter how many tokens I send it. This results in downstream models with an acceptable number of parameters for running in production without breaking the bank on enormous virtual machines.

&#x200B;

Now, I'd like to use the GPT2/XL model from Huggingface. If I give it an input string of 8 tokens, I get back a TFBaseModelOutputWithPastAndCrossAttentions. This contains a last\_hidden\_states, which I understand to be the last layer outputs before sending to a head used for a particular task. This is similar to the output of the sentence encoder, I think. When I look at the last\_hidden\_states, I'm getting a shape of (# of tokens, 1600). I did a cosine similarity between the first and last tokens:

&#x200B;

cosine\_similarity(output.last\_hidden\_state\[0\]\[0\].numpy().reshape(1, -1), output.last\_hidden\_state\[0\]\[-1\].numpy().reshape(1, -1)) 

&#x200B;

And it returned 0.4346, indicating there's substantially different data from the first to the last token. I imagine this only increases as I use more and more tokens. 

&#x200B;

It would be nice if I could capture the greater power of the GPT model into a fixed-length vector so I could then easily use it in down-stream tasks. But, I also don't need to lose all that information.

&#x200B;

So if I'm feeding this output to a further downstream task, should I:

&#x200B;

\- Send it on through as a 2D tensor with the whole thing in there: This would result in a possibly huge model size down the road, which might lead to a need for a huge amount of data to train

&#x200B;

\- Flatten the whole thing and send a vector of 12,800 (8 tokens \* 1600 per token) to the downstream task. Same issue, might require a large number of parameters.

&#x200B;

\- Use only the first or the last of these. Feels like I might be losing a lot of the meaning of the overall text, especially if the body of the text is quite large

&#x200B;

\- Use a dimensionality reduction technique like isomap to reduce the last hidden states into a fixed length? This seems like it could potentially maintain most of the information but reduce the dimensions for a manageable down-stream model size.

&#x200B;

What do you think, and why?

&#x200B;

Thank you kind friends.",open-ai,learnmachinelearning,1.8273279505472847e-05,7.831405502345506e-06,2023-02-20 17:41:43,"Hello!

&x200B;

I have 2 different applications I'm working on in this project

&x200B;

1. A text classifier
2. A similarity finder Here's a list of 10 text documents, get a similarity index across them (for a total of 100 pairs) and return the top 10 that aren't self-referencing. That is, excluding the text 3 vs text 3 = 1.00 similarity type of outputs.

I have previously used google's sentence encoder/large for this purpose and I've had pretty good results. It returns a single vector of length 768 no matter how many tokens I send it. This results in downstream models with an acceptable number of parameters for running in production without breaking the bank on enormous virtual machines.

&x200B;

Now, I'd like to use the GPT2/XL model from Huggingface. If I give it an input string of 8 tokens, I get back a TFBaseModelOutputWithPastAndCrossAttentions. This contains a last\_hidden\_states, which I understand to be the last layer outputs before sending to a head used for a particular task. This is similar to the output of the sentence encoder, I think. When I look at the last\_hidden\_states, I'm getting a shape of ( of tokens, 1600). I did a cosine similarity between the first and last tokens

&x200B;

cosine\_similarity(output.last\_hidden\_state\[0\]\[0\].numpy().reshape(1, -1), output.last\_hidden\_state\[0\]\[-1\].numpy().reshape(1, -1)) 

&x200B;

And it returned 0.4346, indicating there's substantially different data from the first to the last token. I imagine this only increases as I use more and more tokens. 

&x200B;

It would be nice if I could capture the greater power of the GPT model into a fixed-length vector so I could then easily use it in down-stream tasks. But, I also don't need to lose all that information.

&x200B;

So if I'm feeding this output to a further downstream task, should I

&x200B;

\- Send it on through as a 2D tensor with the whole thing in there This would result in a possibly huge model size down the road, which might lead to a need for a huge amount of data to train

&x200B;

\- Flatten the whole thing and send a vector of 12,800 (8 tokens \* 1600 per token) to the downstream task. Same issue, might require a large number of parameters.

&x200B;

\- Use only the first or the last of these. Feels like I might be losing a lot of the meaning of the overall text, especially if the body of the text is quite large

&x200B;

\- Use a dimensionality reduction technique like isomap to reduce the last hidden states into a fixed length? This seems like it could potentially maintain most of the information but reduce the dimensions for a manageable down-stream model size.

&x200B;

What do you think, and why?

&x200B;

Thank you kind friends.",21 days 06:18:17,21.26269675925926,0.011,0.862,0.127,0.992,pos,1.827311255120484e-05,1.3862943611198906,3.1029124867242484,21.240221575506574
117hd0f,2350,2023-02-20 19:01:54,Master ChatGPT Prompt Engineering (Deep Dive),jeyThaswan,False,0.8,6,https://www.reddit.com/r/learnmachinelearning/comments/117hd0f/master_chatgpt_prompt_engineering_deep_dive/,2,1676919714.0," 

I wrote a deep dive on prompt engineering as a resource for the AI community and my 10,000 daily newsletter subscribers ([Inclined.ai](https://www.inclined.ai/p/prompt-engineering-guide) if you're curious). We've included some examples so feel free to copy and paste the prompts into ChatGPT!

&#x200B;

**WHAT IS PROMPT ENGINEERING?**

The term is relatively new, and its origins are argued *(because we live in the internet age, and it’s harder to claim ownership)*. Prompt engineering is the ability to instruct and teach AI effectively.

If it helps, think of this as rapid testing or instruction writing for artificial intelligence.

What’s important is not to let this overwhelm you. The first prompting happened with the first AI model. The first example was showing computer images of circles and triangles. **Today’s neural networks can process way more data, creating complexities.**

So, the concept is simple, but digging into the full power of AI today is something else entirely.

We’re not talking about asking questions. Odds are, if you’re typing *“what’s 2+2”* into ChatGPT, then you need to keep reading.

We can all ask chatbots questions. That can work more often than not. But AI is not perfect. A common metaphor I see is to treat GPT-based large language models like the smartest five-year-old you’ve ever met.

I have a niece around that age and can’t imagine trying to get her to write an essay on the effects of soil mismanagement in relation to Reconstruction politics. *See! Your eyes glazed over reading that, so how do we make this work for our AI buddies?*

The Principles of Prompting

Stop asking single-line questions. *That’s like using a top-rated cookbook to find out how to make grilled cheese.*

**There are three ways to instantly get better at prompting** and go from grilled cheese to top-notch bolognese. From there, we can get into some specific prompt concepts and the ability to unlock ChatGPT’s full potential.

Principle 1: Context is King

GPT-3.5 is swimming in data. When you ask it for a simple request, it can end up complicating things more than you realize. Did you ever wonder why ChatGPT is so bad at math?

The reality is the LLM is taking words and turning them into patterns. From there, it’s making an educated guess.

Give your chat AI a frame to search into. If you give it a math problem, you need to make sure it grasps that you want it to do math. If you’d like ChatGPT to write a high school essay, you must ensure it knows to write at that level.

**Instead of:** “Plan a party for a kid.”

**Try:** “My child is turning 9. They like superheroes and the color red. Help me plan a party for this weekend. Ten of his friends are coming to my house.”

You’ll get a much better response this way. **Context is the cardinal direction** that helps your chat companion find the most correct guess and phrase it the best way.

Principle 2: Get Specific

Pretend you’re writing a law that’s going to be judged by the Supreme Court of the United States. You know what they look for: narrow tailoring.

**Keep things on track and stay focused.** Try to avoid prompting outside the specific request. You’ll only hurt the ability of the chat AI to give you a quality response. Odds are they’ll even skip over parts if you confuse them with too many requests.

It runs parallel with context. *If you set ChatGPT up in a room and then tell it to focus on describing the chair first, you’ll see better results.*

**Instead of:** “I’m going to a job interview. Write five questions for me to answer. Add tips for how to not get nervous before the interview. Do not create questions asking about my background.”

**Try:** “You’re interviewing a software engineer. Create five questions to ask them to understand their skill set and qualifications better.”

Nothing limits the number of prompts you can do. Focus and expand from the initial request and try not to do everything at once.

Principle 3: When in Doubt: “Let’s take this step-by-step.”

Welcome. **You discovered the magic word today.** This phrase slows everything down for the AI and gets you where you need to go.

You don’t need to start with this phrase. Using it tells ChatGPT to show their work.

We’ll explain where this concept comes from further in our briefing, but here’s the TL;DR: sometimes, there’s a part of our prompt it’s not identified correctly. “Let’s take this step-by-step,” reminds you and ChatGPT to **slow down and get specific.**

If you learn to utilize this phrase more often and find ways to make it work for you, you’ll become a better prompt engineer. One term can do a lot of heavy lifting.

**Pro-tip:** We’ve shown you “standard” prompts in all these examples. Many prompt engineers will use “Standard QA form” prompts. Here’s our example for this principle written that way.

**Example:**

*“Q: The Industrial Revolution rapidly changed the infrastructure in London. Describe three essential innovations from this period and connect them to Landon’s development.*

*A: Let’s take this step-by-step.”*

Even without our magic word, this style of standard prompting is quite helpful to adopt.

*However, we’re beginning to stumble into the advanced tactics used in prompt engineering, so it’s time for a new section.*

UNIQUE WAYS TO PROMPT

Let’s preface this: we can go super deep here. Prompt engineering is changing daily, and as these models get more sophisticated, the need to adapt prompts strengthens.

To keep things clean, I will go through these using our metaphor from earlier. **Let’s pretend ChatGPT is a super-intelligent toddler.**

*Got it? With that buy-in, we can continue.*

1/ Role Prompting

We’ll start with a popular tactic. **Our toddler is great at imagining things.** You tell them they’re a fireman, and suddenly they can give you detailed ways to ensure your apartment is up to code. Role-playing is a fun, easy way to build context.

The best part of role prompting is how easy it is to understand and use. All you need to do is tell ChatGPT to play a role. From there, the AI will do its best to fill the part *like that enthusiastic drama student from your old high school.*

You can even take this a step further. **Try framing your prompt as a script.** Tell the LLM specific instructions around a scene that gives you the answer to your question.

TRY IT OUT FOR YOURSELF:

Copy this prompt into ChatGPT and find a destination!

“Act as a travel guide. I will tell you my location and you will suggest a place to visit near my location. In some cases, I will also give you the type of places I will visit. You will also suggest me places of similar type that are close to my first location. My first suggestion: \[fill it in\]”

Why would you take that extra step? While popular, role prompting does not necessarily improve accuracy. *You can tell your five-year-old they’re a mathematician, and they’ll still manage to screw things up.*

Let’s get deeper.

2/ Chain-of-Thought Prompting

There’s a scene in ***Guardians of the Galaxy*** where Rocket Raccoon is trying to [teach young Groot](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwczovL3lvdXR1LmJlL0hyaW1mZ2pmNGs4IiwicG9zdF9pZCI6ImM0ODlmMzhkLTY3NDAtNGRmNS05MWJjLTM1ODA0YTVmNTZkMiIsInB1YmxpY2F0aW9uX2lkIjoiNjNkODQ2ZGUtZDFiZi00ZTVjLWJjYzgtOWMxYzlkMWIxMjA0IiwidmlzaXRfdG9rZW4iOiJkZWRiNmMyNy1hYmM0LTQ5ZDUtYWM2Ny04OTcyZmM1MGVmM2QiLCJpYXQiOjE2NzY5MTkwNjguMTUyLCJpc3MiOiJvcmNoaWQifQ.5eZkDLGRLCXXYv32FYT7kLSbdRK5OK1iemTRf3HVmJw)

how to activate a complicated device. That’s chain-of-thought prompting.

**You take an example question and answer it for ChatGPT.** Show them your chain of thought. Then you give it a new question in the same vein and ask it for an answer.

This prompt style allows you to get more specific. You’re telling your toddler they’re here to answer this particular question with one specific logic pattern.

Within this specific style is two other sub-categories. Let me give the rundown:

* Zero-shot Chain-of-Thought is “Let’s take this step-by-step” you frame the question the same, but don’t give it a precursor. Instead, you ask it to think through the points made. EX: Q: X is A. Y is B. What is C? A: Let’s take this step-by-step.
* Self-consistency is using several responses to find the most accurate answer. You give ChatGPT more swings at the ball. Take the hits and discover the grouping.

TRY IT OUT FOR YOURSELF:

Copy this prompt into ChatGPT and see how accurate it is:

“Q: Which is a faster way to get home?

Option 1: Take an 10 minutes bus, then an 40 minute bus, and finally a 10 minute train.

Option 2: Take a 90 minutes train, then a 45 minute bike ride, and finally a 10 minute bus.

A: Option 1 will take 10+40+10 = 60 minutes.

Option 2 will take 90+45+10=145 minutes.

Since Option 1 takes 60 minutes and Option 2 takes 145 minutes, Option 1 is faster.

Q: Which is a faster way to get to work?

Option 1: Take a 1000 minute bus, then a half hour train, and finally a 10 minute bike ride.

Option 2: Take an 800 minute bus, then an hour train, and finally a 30 minute bike ride.

A: ”

[Learnprompting.org](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwOi8vTGVhcm5wcm9tcHRpbmcub3JnIiwicG9zdF9pZCI6ImM0ODlmMzhkLTY3NDAtNGRmNS05MWJjLTM1ODA0YTVmNTZkMiIsInB1YmxpY2F0aW9uX2lkIjoiNjNkODQ2ZGUtZDFiZi00ZTVjLWJjYzgtOWMxYzlkMWIxMjA0IiwidmlzaXRfdG9rZW4iOiJkZWRiNmMyNy1hYmM0LTQ5ZDUtYWM2Ny04OTcyZmM1MGVmM2QiLCJpYXQiOjE2NzY5MTkwNjguMTUyLCJpc3MiOiJvcmNoaWQifQ.-wOnVYoMNWXYrR5NOB4YYKp4Lmj-aZq3y-pr4Hou9pE)

\- by leaving the “A:” blank you’re prompting ChatGPT for the answer

Alright, you’re almost there—one more to go.

3/ General Knowledge Prompting

You’re going to notice a trend here. This prompt style also circles context and narrow tailoring.

All you do is tell your toddler how the world works. The cow goes moo. The dog goes woof. So what does a cat say?

It’s an oversimplification, but the core reasoning is there. Show ChatGPT some knowledge and turn that into the only focus for that chat. You can take an article from the internet and summarize it for the model. Make sure to ask if it understands and relay the information to you.

Once you know you have the attention set in the suitable space, get to work. For instance, we can share an Inclined newsletter with it and tell ChatGPT about its structure and tone.

From there, you can provide new information and tell ChatGPT to summarize it within the same structure as Inclined. You both share the same general knowledge now.

TRY IT OUT FOR YOURSELF:

Copy this prompt into ChatGPT and test it out:

“Prompt 1. Look over this article here: \[pick an article\]. Breakdown its structure and general tone.

Prompt 2: Recall the structure and tone you mentioned above. Take that general knowledge and summarize this article: \[pick a new one\] using the same structure and tone.”

Note: this is a heavily simplified version of GA Prompting

Did you know some [people don’t consider](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwczovL25ld3MueWNvbWJpbmF0b3IuY29tL2l0ZW0_aWQ9MzQ0OTU0NTUiLCJwb3N0X2lkIjoiYzQ4OWYzOGQtNjc0MC00ZGY1LTkxYmMtMzU4MDRhNWY1NmQyIiwicHVibGljYXRpb25faWQiOiI2M2Q4NDZkZS1kMWJmLTRlNWMtYmNjOC05YzFjOWQxYjEyMDQiLCJ2aXNpdF90b2tlbiI6ImRlZGI2YzI3LWFiYzQtNDlkNS1hYzY3LTg5NzJmYzUwZWYzZCIsImlhdCI6MTY3NjkxOTA2OC4xNTMsImlzcyI6Im9yY2hpZCJ9.yHKIPujINT89tsqOo07AXk6OrKNgoMjO3fBEYPkAdNY)

that prompt engineering?

PROMPT CULTURE

*“How can something not be prompt engineering if it’s a prompt style?”*

Good question, imaginary reader. The culture around this skill is relatively fresh. So some of **these concepts are seen as too easy** to be considered accurate prompt testing.

General knowledge prompting is simply establishing the context, and for some, that’s a baseline everyone needs to do. The same can be said for role prompting, too. *All of these tiny preferences are semantics.*

**Don’t sweat whether you’re a “real” prompt engineer.** Test this out and share your insights in these communities. The opportunity is there for you.

You may even know about DAN (we’ve covered it in previous newsletters) and other AI hacking methods. Those all start with prompt engineering. You can make the case that unless the AI behaves outside its parameters, you’re not genuinely doing prompt engineering.

I'm afraid I have to disagree with that, and **careers are sprouting up everywhere** that center directly on this skill. **Many require a core understanding of the prompt styles we’ve discussed.**

*Yep, you can learn this and make money from talking with AI.*

Anthropic even [posted a role for a prompt engineer](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwczovL2pvYnMubGV2ZXIuY28vQW50aHJvcGljL2UzY2RlNDgxLWQ0NDYtNDYwZi1iNTc2LTkzY2FiNjdiZDFlZCIsInBvc3RfaWQiOiJjNDg5ZjM4ZC02NzQwLTRkZjUtOTFiYy0zNTgwNGE1ZjU2ZDIiLCJwdWJsaWNhdGlvbl9pZCI6IjYzZDg0NmRlLWQxYmYtNGU1Yy1iY2M4LTljMWM5ZDFiMTIwNCIsInZpc2l0X3Rva2VuIjoiZGVkYjZjMjctYWJjNC00OWQ1LWFjNjctODk3MmZjNTBlZjNkIiwiaWF0IjoxNjc2OTE5MDY4LjE1MywiaXNzIjoib3JjaGlkIn0.4s7Htzgoxv0_qM1Ten17oQ5h0_QGM6e1fGUYz_ymgJ4)

that nets a quarter million in salary. I did not make that up and even considered sprucing up the old resume. When a new skill like this comes about, it’s worth looking at.

There are many other examples like this, and OpenAI uses a red teaming strategy where their engineers attempt to prompt hack their own GPT models.

I can tell you all about the open roles here, but tomorrow the whole cycle will change. *Isn’t that exciting, though?* The entire identity around prompt engineering will change by this time next year.

WHAT SHOULD YOU TAKEAWAY?

Communication is everything. **Learning to speak with AI is rising in importance.**

We all watch with mouth agape at the new wonders in AI because we know this will disrupt every industry. If any of this piqued your interest, the window to pursue it is now open. Ride that wave and [learn](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwczovL2xlYXJucHJvbXB0aW5nLm9yZy8iLCJwb3N0X2lkIjoiYzQ4OWYzOGQtNjc0MC00ZGY1LTkxYmMtMzU4MDRhNWY1NmQyIiwicHVibGljYXRpb25faWQiOiI2M2Q4NDZkZS1kMWJmLTRlNWMtYmNjOC05YzFjOWQxYjEyMDQiLCJ2aXNpdF90b2tlbiI6ImRlZGI2YzI3LWFiYzQtNDlkNS1hYzY3LTg5NzJmYzUwZWYzZCIsImlhdCI6MTY3NjkxOTA2OC4xNTMsImlzcyI6Im9yY2hpZCJ9.a67KDSN9yQfZsaMeHpdcbSbtPjD4yFcGW4stdxBjX1M)

to become a brilliant prompt engineer.

Heck, even if you don’t want to switch careers, **talking with ChatGPT and all the newest LLMs is becoming a part of our daily routine.** Get to the point where you maximize every interaction and work with these chatbots to upskill your workflow.

Prompt engineering can save you time, eliminate hassle, and even help you become a more patient person. Focus on what you want and explain it with intent.

Make magic happen, and remember: **take it step-by-step.**",open-ai,learnmachinelearning,1.5662811004691013e-05,5.220937001563671e-06,2023-02-20 19:01:54," 

I wrote a deep dive on prompt engineering as a resource for the AI community and my 10,000 daily newsletter subscribers ([Inclined.ai]( if you're curious). We've included some examples so feel free to copy and paste the prompts into ChatGPT!

&x200B;

**WHAT IS PROMPT ENGINEERING?**

The term is relatively new, and its origins are argued *(because we live in the internet age, and it’s harder to claim ownership)*. Prompt engineering is the ability to instruct and teach AI effectively.

If it helps, think of this as rapid testing or instruction writing for artificial intelligence.

What’s important is not to let this overwhelm you. The first prompting happened with the first AI model. The first example was showing computer images of circles and triangles. **Today’s neural networks can process way more data, creating complexities.**

So, the concept is simple, but digging into the full power of AI today is something else entirely.

We’re not talking about asking questions. Odds are, if you’re typing *“what’s 2+2”* into ChatGPT, then you need to keep reading.

We can all ask chatbots questions. That can work more often than not. But AI is not perfect. A common metaphor I see is to treat GPT-based large language models like the smartest five-year-old you’ve ever met.

I have a niece around that age and can’t imagine trying to get her to write an essay on the effects of soil mismanagement in relation to Reconstruction politics. *See! Your eyes glazed over reading that, so how do we make this work for our AI buddies?*

The Principles of Prompting

Stop asking single-line questions. *That’s like using a top-rated cookbook to find out how to make grilled cheese.*

**There are three ways to instantly get better at prompting** and go from grilled cheese to top-notch bolognese. From there, we can get into some specific prompt concepts and the ability to unlock ChatGPT’s full potential.

Principle 1 Context is King

GPT-3.5 is swimming in data. When you ask it for a simple request, it can end up complicating things more than you realize. Did you ever wonder why ChatGPT is so bad at math?

The reality is the LLM is taking words and turning them into patterns. From there, it’s making an educated guess.

Give your chat AI a frame to search into. If you give it a math problem, you need to make sure it grasps that you want it to do math. If you’d like ChatGPT to write a high school essay, you must ensure it knows to write at that level.

**Instead of** “Plan a party for a kid.”

**Try** “My child is turning 9. They like superheroes and the color red. Help me plan a party for this weekend. Ten of his friends are coming to my house.”

You’ll get a much better response this way. **Context is the cardinal direction** that helps your chat companion find the most correct guess and phrase it the best way.

Principle 2 Get Specific

Pretend you’re writing a law that’s going to be judged by the Supreme Court of the United States. You know what they look for narrow tailoring.

**Keep things on track and stay focused.** Try to avoid prompting outside the specific request. You’ll only hurt the ability of the chat AI to give you a quality response. Odds are they’ll even skip over parts if you confuse them with too many requests.

It runs parallel with context. *If you set ChatGPT up in a room and then tell it to focus on describing the chair first, you’ll see better results.*

**Instead of** “I’m going to a job interview. Write five questions for me to answer. Add tips for how to not get nervous before the interview. Do not create questions asking about my background.”

**Try** “You’re interviewing a software engineer. Create five questions to ask them to understand their skill set and qualifications better.”

Nothing limits the number of prompts you can do. Focus and expand from the initial request and try not to do everything at once.

Principle 3 When in Doubt “Let’s take this step-by-step.”

Welcome. **You discovered the magic word today.** This phrase slows everything down for the AI and gets you where you need to go.

You don’t need to start with this phrase. Using it tells ChatGPT to show their work.

We’ll explain where this concept comes from further in our briefing, but here’s the TL;DR sometimes, there’s a part of our prompt it’s not identified correctly. “Let’s take this step-by-step,” reminds you and ChatGPT to **slow down and get specific.**

If you learn to utilize this phrase more often and find ways to make it work for you, you’ll become a better prompt engineer. One term can do a lot of heavy lifting.

**Pro-tip** We’ve shown you “standard” prompts in all these examples. Many prompt engineers will use “Standard QA form” prompts. Here’s our example for this principle written that way.

**Example**

*“Q The Industrial Revolution rapidly changed the infrastructure in London. Describe three essential innovations from this period and connect them to Landon’s development.*

*A Let’s take this step-by-step.”*

Even without our magic word, this style of standard prompting is quite helpful to adopt.

*However, we’re beginning to stumble into the advanced tactics used in prompt engineering, so it’s time for a new section.*

UNIQUE WAYS TO PROMPT

Let’s preface this we can go super deep here. Prompt engineering is changing daily, and as these models get more sophisticated, the need to adapt prompts strengthens.

To keep things clean, I will go through these using our metaphor from earlier. **Let’s pretend ChatGPT is a super-intelligent toddler.**

*Got it? With that buy-in, we can continue.*

1/ Role Prompting

We’ll start with a popular tactic. **Our toddler is great at imagining things.** You tell them they’re a fireman, and suddenly they can give you detailed ways to ensure your apartment is up to code. Role-playing is a fun, easy way to build context.

The best part of role prompting is how easy it is to understand and use. All you need to do is tell ChatGPT to play a role. From there, the AI will do its best to fill the part *like that enthusiastic drama student from your old high school.*

You can even take this a step further. **Try framing your prompt as a script.** Tell the LLM specific instructions around a scene that gives you the answer to your question.

TRY IT OUT FOR YOURSELF

Copy this prompt into ChatGPT and find a destination!

“Act as a travel guide. I will tell you my location and you will suggest a place to visit near my location. In some cases, I will also give you the type of places I will visit. You will also suggest me places of similar type that are close to my first location. My first suggestion \[fill it in\]”

Why would you take that extra step? While popular, role prompting does not necessarily improve accuracy. *You can tell your five-year-old they’re a mathematician, and they’ll still manage to screw things up.*

Let’s get deeper.

2/ Chain-of-Thought Prompting

There’s a scene in ***Guardians of the Galaxy*** where Rocket Raccoon is trying to [teach young Groot](

how to activate a complicated device. That’s chain-of-thought prompting.

**You take an example question and answer it for ChatGPT.** Show them your chain of thought. Then you give it a new question in the same vein and ask it for an answer.

This prompt style allows you to get more specific. You’re telling your toddler they’re here to answer this particular question with one specific logic pattern.

Within this specific style is two other sub-categories. Let me give the rundown

* Zero-shot Chain-of-Thought is “Let’s take this step-by-step” you frame the question the same, but don’t give it a precursor. Instead, you ask it to think through the points made. EX Q X is A. Y is B. What is C? A Let’s take this step-by-step.
* Self-consistency is using several responses to find the most accurate answer. You give ChatGPT more swings at the ball. Take the hits and discover the grouping.

TRY IT OUT FOR YOURSELF

Copy this prompt into ChatGPT and see how accurate it is

“Q Which is a faster way to get home?

Option 1 Take an 10 minutes bus, then an 40 minute bus, and finally a 10 minute train.

Option 2 Take a 90 minutes train, then a 45 minute bike ride, and finally a 10 minute bus.

A Option 1 will take 10+40+10 = 60 minutes.

Option 2 will take 90+45+10=145 minutes.

Since Option 1 takes 60 minutes and Option 2 takes 145 minutes, Option 1 is faster.

Q Which is a faster way to get to work?

Option 1 Take a 1000 minute bus, then a half hour train, and finally a 10 minute bike ride.

Option 2 Take an 800 minute bus, then an hour train, and finally a 30 minute bike ride.

A ”

[Learnprompting.org](

\- by leaving the “A” blank you’re prompting ChatGPT for the answer

Alright, you’re almost there—one more to go.

3/ General Knowledge Prompting

You’re going to notice a trend here. This prompt style also circles context and narrow tailoring.

All you do is tell your toddler how the world works. The cow goes moo. The dog goes woof. So what does a cat say?

It’s an oversimplification, but the core reasoning is there. Show ChatGPT some knowledge and turn that into the only focus for that chat. You can take an article from the internet and summarize it for the model. Make sure to ask if it understands and relay the information to you.

Once you know you have the attention set in the suitable space, get to work. For instance, we can share an Inclined newsletter with it and tell ChatGPT about its structure and tone.

From there, you can provide new information and tell ChatGPT to summarize it within the same structure as Inclined. You both share the same general knowledge now.

TRY IT OUT FOR YOURSELF

Copy this prompt into ChatGPT and test it out

“Prompt 1. Look over this article here \[pick an article\]. Breakdown its structure and general tone.

Prompt 2 Recall the structure and tone you mentioned above. Take that general knowledge and summarize this article \[pick a new one\] using the same structure and tone.”

Note this is a heavily simplified version of GA Prompting

Did you know some [people don’t consider](

that prompt engineering?

PROMPT CULTURE

*“How can something not be prompt engineering if it’s a prompt style?”*

Good question, imaginary reader. The culture around this skill is relatively fresh. So some of **these concepts are seen as too easy** to be considered accurate prompt testing.

General knowledge prompting is simply establishing the context, and for some, that’s a baseline everyone needs to do. The same can be said for role prompting, too. *All of these tiny preferences are semantics.*

**Don’t sweat whether you’re a “real” prompt engineer.** Test this out and share your insights in these communities. The opportunity is there for you.

You may even know about DAN (we’ve covered it in previous newsletters) and other AI hacking methods. Those all start with prompt engineering. You can make the case that unless the AI behaves outside its parameters, you’re not genuinely doing prompt engineering.

I'm afraid I have to disagree with that, and **careers are sprouting up everywhere** that center directly on this skill. **Many require a core understanding of the prompt styles we’ve discussed.**

*Yep, you can learn this and make money from talking with AI.*

Anthropic even [posted a role for a prompt engineer](

that nets a quarter million in salary. I did not make that up and even considered sprucing up the old resume. When a new skill like this comes about, it’s worth looking at.

There are many other examples like this, and OpenAI uses a red teaming strategy where their engineers attempt to prompt hack their own GPT models.

I can tell you all about the open roles here, but tomorrow the whole cycle will change. *Isn’t that exciting, though?* The entire identity around prompt engineering will change by this time next year.

WHAT SHOULD YOU TAKEAWAY?

Communication is everything. **Learning to speak with AI is rising in importance.**

We all watch with mouth agape at the new wonders in AI because we know this will disrupt every industry. If any of this piqued your interest, the window to pursue it is now open. Ride that wave and [learn](

to become a brilliant prompt engineer.

Heck, even if you don’t want to switch careers, **talking with ChatGPT and all the newest LLMs is becoming a part of our daily routine.** Get to the point where you maximize every interaction and work with these chatbots to upskill your workflow.

Prompt engineering can save you time, eliminate hassle, and even help you become a more patient person. Focus on what you want and explain it with intent.

Make magic happen, and remember **take it step-by-step.**",21 days 04:58:06,21.207013888888888,0.021,0.872,0.108,0.9996,pos,1.566268834408071e-05,1.0986122886681098,3.1004081799203456,21.240224444461393
11hp55s,2368,2023-03-04 04:14:37,How to properly format data for AiTextGen Gpt-2,AlphaCloudX,False,1.0,4,https://www.reddit.com/r/learnmachinelearning/comments/11hp55s/how_to_properly_format_data_for_aitextgen_gpt2/,0,1677903277.0,"Currently I'm trying to fine tune gpt-2 on my own dataset. The dataset was scraped from a forum where I got the title of the post, content of the post and the replies. It looks like this:

Q: Question 1?  
C: Context For Question 1...  
A: Reply For Question 1...  
<|endoftext|>

Q: Question 2?  
C: Context For Question 2...  
A: Reply For Question 2...  
A: Another Reply For Question 2...  
<|endoftext|>

Q: Question 3?  
C: Context For Question 3...  
A: Another Reply For Question 3...  
A: Another Reply For Question 3...  
<|endoftext|>

I'm using the aitextgen library for python and pretty much following along with the example. The goal is for it to be able to attempt to answer questions in a conversational way but the caveat being I don't have the context for the answers.

I tried taking a look at other question answering models but they all seem to require some sort of context.

Any idea on how I can improve the formatting of the data or if there are any python libraries I can use for a question answering style or conversational ai?",open-ai,learnmachinelearning,1.0441874003127342e-05,0.0,2023-03-04 04:14:37,"Currently I'm trying to fine tune gpt-2 on my own dataset. The dataset was scraped from a forum where I got the title of the post, content of the post and the replies. It looks like this

Q Question 1?  
C Context For Question 1...  
A Reply For Question 1...  
<|endoftext|>

Q Question 2?  
C Context For Question 2...  
A Reply For Question 2...  
A Another Reply For Question 2...  
<|endoftext|>

Q Question 3?  
C Context For Question 3...  
A Another Reply For Question 3...  
A Another Reply For Question 3...  
<|endoftext|>

I'm using the aitextgen library for python and pretty much following along with the example. The goal is for it to be able to attempt to answer questions in a conversational way but the caveat being I don't have the context for the answers.

I tried taking a look at other question answering models but they all seem to require some sort of context.

Any idea on how I can improve the formatting of the data or if there are any python libraries I can use for a question answering style or conversational ai?",9 days 19:45:23,9.82318287037037,0.0,0.942,0.058,0.8426,pos,1.0441819487243972e-05,0.0,2.3816903956287683,21.240810802090536
118mk1d,2377,2023-02-22 02:32:01,How to Use ChatGPT in Python API and Run Batch Jobs with UI,Fun_Pollution_3899,False,0.72,3,https://www.reddit.com/r/learnmachinelearning/comments/118mk1d/how_to_use_chatgpt_in_python_api_and_run_batch/,0,1677033121.0,"I wanted to share a tutorial on how to use ChatGPT in Python API and how to run batch jobs with a UI. ChatGPT is a powerful language model that can generate text in a conversational manner. It can be used for a variety of tasks, such as chatbots, text completion, and more.
Repo: [https://github.com/CodeDiggerM/chatgpt-batch-whipper](https://github.com/CodeDiggerM/chatgpt-batch-whipper)

## Installation
### Use PIP command
1. Install the latest version of this software directly from github with pip:
```bash
  pip install git+https://github.com/CodeDiggerM/chatgpt-batch-whipper.git
```
2. Go to **auth** mode. This will open up a browser window. Log in to ChatGPT in the browser window, then close the browser.
```bash
run_chatgpt auth
```
3. Start the UI
```bash
run_chatgpt ui
```

### Manually set up

1. Clone the repo to your working directory
```bash
git clone https://github.com/CodeDiggerM/chatgpt-batch-whipper.git
```
2. install the dependcy.
```bash
pip install -r requirements.txt
```

3. Install a browser in playwright (if you haven't already).  The program will use firefox by default.

```
playwright install firefox
```

4. Go to the chatgpt-batch-whipper/

```bash
cd chatgpt_batch_whipper/
````

5. Run the main page by streamlit.
you can got to [streamlit](https://github.com/streamlit/streamlit) to check more about streamlit.

```bash
streamlit run start_whipper.py
````
6. Authenticate your openAI account
Click the **auth** button


It will open up an authentication page in the web browser you installed using playwright. Like below, authenticate with your registered account.



## Quickstart

### Use API
1. Grant auth from chatGPT.
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.auth()
print(response) 
```

2. Ask the question to chatGPT
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.ask(""Greeting!"")
print(response) 
```


### Streamlit UI

Now run it to open the app!
```
streamlit run streamlit_app.py
```

#### Single shoot mode

1. select the **Single shoot mode**.
2. Type your prompt then click submit
3. click the submit button

Here are some tips.

#### Fully Automatic mode
You can apply your prompt to multiple records in the **Fully Automatic mode**.

1. Select Fully Automatic mode.
2. Select CSV file.
3. Select column you want to process.
4. Type the prompt.
5. click to Submit.
After processing. The result will appears in the **The processed result** section.

you can check the result and check the ""is false"" then click the **Submit** to reprocess the ""failed"" one.

* You can save the prompt by click **Add** button.
* You can choose the old prompt by select **prompt list**.
* You can delete the old prompt by click **Delete Prompt**.
* You can delete the saved process result by click **Delete Cached result**.
* You can update the saved process result by click **Update**.
* You can download the result file by click **Download**.",open-ai,learnmachinelearning,7.831405502345506e-06,0.0,2023-02-22 02:32:01,"I wanted to share a tutorial on how to use ChatGPT in Python API and how to run batch jobs with a UI. ChatGPT is a powerful language model that can generate text in a conversational manner. It can be used for a variety of tasks, such as chatbots, text completion, and more.
Repo [

 Installation
 Use PIP command
1. Install the latest version of this software directly from github with pip
```bash
  pip install git+
```
2. Go to **auth** mode. This will open up a browser window. Log in to ChatGPT in the browser window, then close the browser.
```bash
run_chatgpt auth
```
3. Start the UI
```bash
run_chatgpt ui
```

 Manually set up

1. Clone the repo to your working directory
```bash
git clone 
```
2. install the dependcy.
```bash
pip install -r requirements.txt
```

3. Install a browser in playwright (if you haven't already).  The program will use firefox by default.

```
playwright install firefox
```

4. Go to the chatgpt-batch-whipper/

```bash
cd chatgpt_batch_whipper/
````

5. Run the main page by streamlit.
you can got to [streamlit]( to check more about streamlit.

```bash
streamlit run start_whipper.py
````
6. Authenticate your openAI account
Click the **auth** button


It will open up an authentication page in the web browser you installed using playwright. Like below, authenticate with your registered account.



 Quickstart

 Use API
1. Grant auth from chatGPT.
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.auth()
print(response) 
```

2. Ask the question to chatGPT
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.ask(""Greeting!"")
print(response) 
```


 Streamlit UI

Now run it to open the app!
```
streamlit run streamlit_app.py
```

 Single shoot mode

1. select the **Single shoot mode**.
2. Type your prompt then click submit
3. click the submit button

Here are some tips.

 Fully Automatic mode
You can apply your prompt to multiple records in the **Fully Automatic mode**.

1. Select Fully Automatic mode.
2. Select CSV file.
3. Select column you want to process.
4. Type the prompt.
5. click to Submit.
After processing. The result will appears in the **The processed result** section.

you can check the result and check the ""is false"" then click the **Submit** to reprocess the ""failed"" one.

* You can save the prompt by click **Add** button.
* You can choose the old prompt by select **prompt list**.
* You can delete the old prompt by click **Delete Prompt**.
* You can delete the saved process result by click **Delete Cached result**.
* You can update the saved process result by click **Update**.
* You can download the result file by click **Download**.",19 days 21:27:59,19.89443287037037,0.011,0.941,0.048,0.9311,pos,7.831374837016125e-06,0.0,3.0394827536492803,21.24029207033782
118mk1d,2436,2023-02-22 02:32:01,How to Use ChatGPT in Python API and Run Batch Jobs with UI,Fun_Pollution_3899,False,0.72,3,https://www.reddit.com/r/learnmachinelearning/comments/118mk1d/how_to_use_chatgpt_in_python_api_and_run_batch/,0,1677033121.0,"I wanted to share a tutorial on how to use ChatGPT in Python API and how to run batch jobs with a UI. ChatGPT is a powerful language model that can generate text in a conversational manner. It can be used for a variety of tasks, such as chatbots, text completion, and more.
Repo: [https://github.com/CodeDiggerM/chatgpt-batch-whipper](https://github.com/CodeDiggerM/chatgpt-batch-whipper)

## Installation
### Use PIP command
1. Install the latest version of this software directly from github with pip:
```bash
  pip install git+https://github.com/CodeDiggerM/chatgpt-batch-whipper.git
```
2. Go to **auth** mode. This will open up a browser window. Log in to ChatGPT in the browser window, then close the browser.
```bash
run_chatgpt auth
```
3. Start the UI
```bash
run_chatgpt ui
```

### Manually set up

1. Clone the repo to your working directory
```bash
git clone https://github.com/CodeDiggerM/chatgpt-batch-whipper.git
```
2. install the dependcy.
```bash
pip install -r requirements.txt
```

3. Install a browser in playwright (if you haven't already).  The program will use firefox by default.

```
playwright install firefox
```

4. Go to the chatgpt-batch-whipper/

```bash
cd chatgpt_batch_whipper/
````

5. Run the main page by streamlit.
you can got to [streamlit](https://github.com/streamlit/streamlit) to check more about streamlit.

```bash
streamlit run start_whipper.py
````
6. Authenticate your openAI account
Click the **auth** button


It will open up an authentication page in the web browser you installed using playwright. Like below, authenticate with your registered account.



## Quickstart

### Use API
1. Grant auth from chatGPT.
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.auth()
print(response) 
```

2. Ask the question to chatGPT
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.ask(""Greeting!"")
print(response) 
```


### Streamlit UI

Now run it to open the app!
```
streamlit run streamlit_app.py
```

#### Single shoot mode

1. select the **Single shoot mode**.
2. Type your prompt then click submit
3. click the submit button

Here are some tips.

#### Fully Automatic mode
You can apply your prompt to multiple records in the **Fully Automatic mode**.

1. Select Fully Automatic mode.
2. Select CSV file.
3. Select column you want to process.
4. Type the prompt.
5. click to Submit.
After processing. The result will appears in the **The processed result** section.

you can check the result and check the ""is false"" then click the **Submit** to reprocess the ""failed"" one.

* You can save the prompt by click **Add** button.
* You can choose the old prompt by select **prompt list**.
* You can delete the old prompt by click **Delete Prompt**.
* You can delete the saved process result by click **Delete Cached result**.
* You can update the saved process result by click **Update**.
* You can download the result file by click **Download**.",open-ai,learnmachinelearning,7.831405502345506e-06,0.0,2023-02-22 02:32:01,"I wanted to share a tutorial on how to use ChatGPT in Python API and how to run batch jobs with a UI. ChatGPT is a powerful language model that can generate text in a conversational manner. It can be used for a variety of tasks, such as chatbots, text completion, and more.
Repo [

 Installation
 Use PIP command
1. Install the latest version of this software directly from github with pip
```bash
  pip install git+
```
2. Go to **auth** mode. This will open up a browser window. Log in to ChatGPT in the browser window, then close the browser.
```bash
run_chatgpt auth
```
3. Start the UI
```bash
run_chatgpt ui
```

 Manually set up

1. Clone the repo to your working directory
```bash
git clone 
```
2. install the dependcy.
```bash
pip install -r requirements.txt
```

3. Install a browser in playwright (if you haven't already).  The program will use firefox by default.

```
playwright install firefox
```

4. Go to the chatgpt-batch-whipper/

```bash
cd chatgpt_batch_whipper/
````

5. Run the main page by streamlit.
you can got to [streamlit]( to check more about streamlit.

```bash
streamlit run start_whipper.py
````
6. Authenticate your openAI account
Click the **auth** button


It will open up an authentication page in the web browser you installed using playwright. Like below, authenticate with your registered account.



 Quickstart

 Use API
1. Grant auth from chatGPT.
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.auth()
print(response) 
```

2. Ask the question to chatGPT
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.ask(""Greeting!"")
print(response) 
```


 Streamlit UI

Now run it to open the app!
```
streamlit run streamlit_app.py
```

 Single shoot mode

1. select the **Single shoot mode**.
2. Type your prompt then click submit
3. click the submit button

Here are some tips.

 Fully Automatic mode
You can apply your prompt to multiple records in the **Fully Automatic mode**.

1. Select Fully Automatic mode.
2. Select CSV file.
3. Select column you want to process.
4. Type the prompt.
5. click to Submit.
After processing. The result will appears in the **The processed result** section.

you can check the result and check the ""is false"" then click the **Submit** to reprocess the ""failed"" one.

* You can save the prompt by click **Add** button.
* You can choose the old prompt by select **prompt list**.
* You can delete the old prompt by click **Delete Prompt**.
* You can delete the saved process result by click **Delete Cached result**.
* You can update the saved process result by click **Update**.
* You can download the result file by click **Download**.",19 days 21:27:59,19.89443287037037,0.011,0.941,0.048,0.9311,pos,7.831374837016125e-06,0.0,3.0394827536492803,21.24029207033782
11g7h03,2483,2023-03-02 16:47:40,Build ChatGPT for Financial Documents with LangChain + Deep Lake,davidbun,False,0.95,171,https://www.reddit.com/r/learnmachinelearning/comments/11g7h03/build_chatgpt_for_financial_documents_with/,8,1677775660.0,"https://preview.redd.it/h9r6hgvfucla1.png?width=2388&format=png&auto=webp&s=5432eac3eeed8583e4309af1fdc7ebecac705796

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain](https://github.com/hwchase17/langchain) and [Deep Lake](https://github.com/activeloopai/deeplake) come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article](https://www.activeloop.ai/resources/ultimate-guide-to-lang-chain-deep-lake-build-chat-gpt-to-answer-questions-on-your-financial-data/) to learn:

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\#LangChain](https://www.linkedin.com/feed/hashtag/?keywords=langchain&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) and [\#DeepLake](https://www.linkedin.com/feed/hashtag/?keywords=deeplake&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) together to build [\#ChatGPT](https://www.linkedin.com/feed/hashtag/?keywords=chatgpt&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",open-ai,learnmachinelearning,0.00044639011363369383,2.0883748006254684e-05,2023-03-02 16:47:40,"

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain]( and [Deep Lake]( come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article]( to learn

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\LangChain]( and [\DeepLake]( together to build [\ChatGPT]( for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",11 days 07:12:20,11.30023148148148,0.011,0.886,0.103,0.9458,pos,0.00044629051120693617,2.1972245773362196,2.5096180818339255,21.240734741774645
11biozs,2593,2023-02-25 11:19:05,Any MLOps platform you use?,squalidaesthetics20,False,0.98,242,https://www.reddit.com/r/learnmachinelearning/comments/11biozs/any_mlops_platform_you_use/,31,1677323945.0,"I've been searching for some MLOps platforms for my some projects that I’m working on. I am creating a list that will hopefully help out with productivity and help mr build better apps and services. Also hopefully faster.

I've looked at some of the more popular ones out there and here’s my top 4 so far. Let me know what you guys think about these:

* [Vertex AI](https://cloud.google.com/vertex-ai) \- An ML platform by Google Cloud. They have AI-powered tools to ingest, analyze, and store video data. Good for image classification, NLP, recommendation systems etc.
* [Jina AI](https://jina.ai/) \-They offer a neural search solution that can help build smarter, more efficient search engines. They also have a list of [cool github repos](https://github.com/jina-ai/jina) that you can check out. Similar to Vertex AI, they have image classification tools, NLPs, fine tuners etc.
* [MLflow](https://mlflow.org/) \- an open-source platform for managing your ML lifecycle. What’s great is that they also support popular Python libraries like TensorFlow, PyTorch, scikit-learn, and R.
* Neptune.ai, which promises to streamline your workflows and make collaboration a breeze.

Have you guys tried any of these platforms? I know a lot of AI tools and platforms have been popping up lately especially with the rise of AI tools but what are your thoughts?",open-ai,learnmachinelearning,0.0006317333771892041,8.09245235242369e-05,2023-02-25 11:19:05,"I've been searching for some MLOps platforms for my some projects that I’m working on. I am creating a list that will hopefully help out with productivity and help mr build better apps and services. Also hopefully faster.

I've looked at some of the more popular ones out there and here’s my top 4 so far. Let me know what you guys think about these

* [Vertex AI]( \- An ML platform by Google Cloud. They have AI-powered tools to ingest, analyze, and store video data. Good for image classification, NLP, recommendation systems etc.
* [Jina AI]( \-They offer a neural search solution that can help build smarter, more efficient search engines. They also have a list of [cool github repos]( that you can check out. Similar to Vertex AI, they have image classification tools, NLPs, fine tuners etc.
* [MLflow]( \- an open-source platform for managing your ML lifecycle. What’s great is that they also support popular Python libraries like TensorFlow, PyTorch, scikit-learn, and R.
* Neptune.ai, which promises to streamline your workflows and make collaboration a breeze.

Have you guys tried any of these platforms? I know a lot of AI tools and platforms have been popping up lately especially with the rise of AI tools but what are your thoughts?",16 days 12:40:55,16.52841435185185,0.0,0.836,0.164,0.974,pos,0.0006315339176583946,3.4657359027997265,2.8638232414393547,21.240465471078902
1194vsn,2614,2023-02-22 16:59:33,MIT Introduction to Data-Centric AI,anishathalye,False,0.97,102,https://www.reddit.com/r/learnmachinelearning/comments/1194vsn/mit_introduction_to_datacentric_ai/,4,1677085173.0,"Announcing the [first-ever course on Data-Centric AI](https://dcai.csail.mit.edu/). Learn how to train better ML models by improving the data.

[Course homepage](https://dcai.csail.mit.edu/) | [Lecture videos on YouTube](https://www.youtube.com/watch?v=ayzOzZGHZy4&list=PLnSYPjg2dHQKdig0vVbN-ZnEU0yNJ1mo5) | [Lab Assignments](https://github.com/dcai-course/dcai-lab)

The course covers:

* [Data-Centric AI vs. Model-Centric AI](https://dcai.csail.mit.edu/lectures/data-centric-model-centric/)
* [Label Errors](https://dcai.csail.mit.edu/lectures/label-errors/)
* [Dataset Creation and Curation](https://dcai.csail.mit.edu/lectures/dataset-creation-curation/)
* [Data-centric Evaluation of ML Models](https://dcai.csail.mit.edu/lectures/data-centric-evaluation/)
* [Class Imbalance, Outliers, and Distribution Shift](https://dcai.csail.mit.edu/lectures/imbalance-outliers-shift/)
* [Growing or Compressing Datasets](https://dcai.csail.mit.edu/lectures/growing-compressing-datasets/)
* [Interpretability in Data-Centric ML](https://dcai.csail.mit.edu/lectures/interpretable-features/)
* [Encoding Human Priors: Data Augmentation and Prompt Engineering](https://dcai.csail.mit.edu/lectures/human-priors/)
* [Data Privacy and Security](https://dcai.csail.mit.edu/lectures/data-privacy-security/)

MIT, like most universities, has many courses on machine learning (6.036, 6.867, and many others). Those classes teach techniques to produce effective models for a given dataset, and the classes focus heavily on the mathematical details of models rather than practical applications. However, in real-world applications of ML, the dataset is not fixed, and focusing on improving the data often gives better results than improving the model. We’ve personally seen this time and time again in our applied ML work as well as our research.

Data-Centric AI (DCAI) is an emerging science that studies techniques to improve datasets in a systematic/algorithmic way — given that this topic wasn’t covered in the standard curriculum, we (a group of PhD candidates and grads) thought that we should put together a new class! We taught this intensive 2-week course in January over MIT’s IAP term, and we’ve just published all the course material, including lecture videos, lecture notes, hands-on lab assignments, and lab solutions, in hopes that people outside the MIT community would find these resources useful.

We’d be happy to answer any questions related to the class or DCAI in general, and we’d love to hear any feedback on how we can improve the course material. Introduction to Data-Centric AI is open-source opencourseware, so feel free to make improvements directly: [https://github.com/dcai-course/dcai-course](https://github.com/dcai-course/dcai-course).",open-ai,learnmachinelearning,0.0002662677870797472,1.0441874003127342e-05,2023-02-22 16:59:33,"Announcing the [first-ever course on Data-Centric AI]( Learn how to train better ML models by improving the data.

[Course homepage]( | [Lecture videos on YouTube]( | [Lab Assignments](

The course covers

* [Data-Centric AI vs. Model-Centric AI](
* [Label Errors](
* [Dataset Creation and Curation](
* [Data-centric Evaluation of ML Models](
* [Class Imbalance, Outliers, and Distribution Shift](
* [Growing or Compressing Datasets](
* [Interpretability in Data-Centric ML](
* [Encoding Human Priors Data Augmentation and Prompt Engineering](
* [Data Privacy and Security](

MIT, like most universities, has many courses on machine learning (6.036, 6.867, and many others). Those classes teach techniques to produce effective models for a given dataset, and the classes focus heavily on the mathematical details of models rather than practical applications. However, in real-world applications of ML, the dataset is not fixed, and focusing on improving the data often gives better results than improving the model. We’ve personally seen this time and time again in our applied ML work as well as our research.

Data-Centric AI (DCAI) is an emerging science that studies techniques to improve datasets in a systematic/algorithmic way — given that this topic wasn’t covered in the standard curriculum, we (a group of PhD candidates and grads) thought that we should put together a new class! We taught this intensive 2-week course in January over MIT’s IAP term, and we’ve just published all the course material, including lecture videos, lecture notes, hands-on lab assignments, and lab solutions, in hopes that people outside the MIT community would find these resources useful.

We’d be happy to answer any questions related to the class or DCAI in general, and we’d love to hear any feedback on how we can improve the course material. Introduction to Data-Centric AI is open-source opencourseware, so feel free to make improvements directly [",19 days 07:00:27,19.291979166666668,0.0,0.839,0.161,0.9933,pos,0.0002662323441039122,1.6094379124341003,3.0102256930267366,21.24032310800281
11n5r93,339,2023-03-09 22:19:19,GPT-4 is coming next week ...,ihatethispage,False,0.89,62,https://www.reddit.com/r/artificial/comments/11n5r93/gpt4_is_coming_next_week/,14,1678400359.0," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html)",openai,learnmachinelearning,0.0001618490470484738,3.654655901094569e-05,2023-03-09 22:19:19," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](",4 days 01:40:41,4.069918981481481,0.0,1.0,0.0,0.0,neu,0.00016183595090455473,2.70805020110221,1.6233248374914817,21.241107010096275
11fj3tx,957,2023-03-01 21:45:07,Accused of using AI on my high school social paper,feetstreetseat,False,0.96,2700,https://www.reddit.com/r/ChatGPT/comments/11fj3tx/accused_of_using_ai_on_my_high_school_social_paper/,759,1677707107.0,"I (Grade 12) need help on what to do in this situation. My teacher used GPTzero, which detected parts of my paper as “AI written”. I write very formally, whilst also using grammarly premium. I’ve always been a high achieving student and I’m not sure why my teacher would think I cheated. I’ve told my teacher everything and he still doesn’t believe me. What should I do in this situation?!!

EDIT: Holy. I did not expect my post to get so much interaction and discussion, I didn’t expect my situation to be such a hot discussion. I tried to reply to all the comments but there’s too many!! Thank you to everyone who’s been helpful. There are some things I want to address that I keep seeing in the comments.
1. When I mentioned that I used grammarly to my teacher, he didn’t mention anything about that being cheating. He still thinks I used ChatGPT. I’ve used grammarly in all of my social/english classes for the past two years and never had issues with any teachers. 
2. Does my teacher have a vendetta or bias against me? Not on a personal level, but the teacher is known for being notoriously mean and unreasonable. I found him alright for most of the semester until this incident. He has had accusations against him about being racist, but I’m not sure if that’s the case here.
3. I’ve seen a few comments thinking I’m lying and actually cheated, just because I was aware of ChatGPT and this subreddit. People are assuming that I’m saying I never use ChatGPT. I have used the tool to help me with some chemistry and physics studying, but I have never used it for a paper. I have no reason to lie, I’m basically anonymous on reddit.

As for my next course of action, I will provide my teacher with all the evidence I can, to disprove the effectiveness of AI detectors. If that doesn’t work, I will bring it up to the higher-ups. I will make an update on Monday when I get the chance to talk about it with my teacher. Once again, thank you all for the support and help. It truly means a lot to me. :)

Edit 2:

After school I talked to my teacher for about half an hour about how AI detectors are inaccurate, and how they shouldn’t be used to make verdicts on cheating and what not. I showed him that it read one of my past papers as written by AI, and that the creators even said themselves that they are not 100% accurate. I showed my drafts and showed how if I made a few grammar errors, I could trick the AI detector. My teacher apologized and I ended up getting a 95 on my paper.

He also said he would bring it up to the other teachers, so hopefully this wont happen again to any other students at my school.

Again, thank you all for your help. Probably would’ve been screwed without this subreddit’s help.",openai,learnmachinelearning,0.0070482649521109554,0.001981345592093413,2023-03-01 21:45:07,"I (Grade 12) need help on what to do in this situation. My teacher used GPTzero, which detected parts of my paper as “AI written”. I write very formally, whilst also using grammarly premium. I’ve always been a high achieving student and I’m not sure why my teacher would think I cheated. I’ve told my teacher everything and he still doesn’t believe me. What should I do in this situation?!!

EDIT Holy. I did not expect my post to get so much interaction and discussion, I didn’t expect my situation to be such a hot discussion. I tried to reply to all the comments but there’s too many!! Thank you to everyone who’s been helpful. There are some things I want to address that I keep seeing in the comments.
1. When I mentioned that I used grammarly to my teacher, he didn’t mention anything about that being cheating. He still thinks I used ChatGPT. I’ve used grammarly in all of my social/english classes for the past two years and never had issues with any teachers. 
2. Does my teacher have a vendetta or bias against me? Not on a personal level, but the teacher is known for being notoriously mean and unreasonable. I found him alright for most of the semester until this incident. He has had accusations against him about being racist, but I’m not sure if that’s the case here.
3. I’ve seen a few comments thinking I’m lying and actually cheated, just because I was aware of ChatGPT and this subreddit. People are assuming that I’m saying I never use ChatGPT. I have used the tool to help me with some chemistry and physics studying, but I have never used it for a paper. I have no reason to lie, I’m basically anonymous on reddit.

As for my next course of action, I will provide my teacher with all the evidence I can, to disprove the effectiveness of AI detectors. If that doesn’t work, I will bring it up to the higher-ups. I will make an update on Monday when I get the chance to talk about it with my teacher. Once again, thank you all for the support and help. It truly means a lot to me. )

Edit 2

After school I talked to my teacher for about half an hour about how AI detectors are inaccurate, and how they shouldn’t be used to make verdicts on cheating and what not. I showed him that it read one of my past papers as written by AI, and that the creators even said themselves that they are not 100% accurate. I showed my drafts and showed how if I made a few grammar errors, I could trick the AI detector. My teacher apologized and I ended up getting a 95 on my paper.

He also said he would bring it up to the other teachers, so hopefully this wont happen again to any other students at my school.

Again, thank you all for your help. Probably would’ve been screwed without this subreddit’s help.",12 days 02:14:53,12.093668981481482,0.086,0.813,0.1,0.7608,pos,0.007023542033834984,6.633318433280377,2.572128829531448,21.24069388148435
11mracj,1147,2023-03-09 12:46:12,Meta's LLaMA LLM has leaked - Run Uncensored AI on your home PC!,ExpressionCareful223,False,0.97,381,https://www.reddit.com/r/ChatGPT/comments/11mracj/metas_llama_llm_has_leaked_run_uncensored_ai_on/,151,1678365972.0,"[shawwn/llama-dl: High-speed download of LLaMA, Facebook's 65B parameter GPT model (github.com)](https://github.com/shawwn/llama-dl)

**LLaMA has been leaked on 4chan, above is a link to the github repo. Instructions for deployment  on your own system can be found here:** [LLaMA Int8 ChatBot Guide v2 (rentry.org)](https://rentry.org/llama-tard-v2#tips-and-tricks)

The 7B paramenter model has a VRAM requirement of 10GB, meaning it can even be run on an RTX3060!

The 13B model has a requirement of 20GB, 30B needs 40GB, and 65B needs 80GB.

From the Github repo:

>I'm running LLaMA-65B on a single A100 80GB with 8bit quantization. $1.5/hr on vast.ai  
>  
>The output is at least as good as davinci.  
>  
>I think some early results are using bad repetition penalty and/or temperature settings. I had to set both fairly high to get the best results. (Some people are also incorrectly comparing it to chatGPT/ChatGPT API which is not a good comparison. But that's a different problem.)  
>  
>I've had it translate, write poems, tell jokes, banter, write executable code. It does it all-- and all on a single card.

**EDIT: the instructions site has been updated with instructions for 4bit quantization, this means you can run the 65B model on 2 3090s! And now cards as small as 6GB can run the 7B model!**

**EDIT 2** this is huge, Stanford released Alpaca 7b and 13, a fine tuned LLaMA. Run it with only two commands! Thats it! https://github.com/cocktailpeanut/dalai",openai,learnmachinelearning,0.0009945884987978793,0.00039418074361805716,2023-03-09 12:46:12,"[shawwn/llama-dl High-speed download of LLaMA, Facebook's 65B parameter GPT model (github.com)](

**LLaMA has been leaked on 4chan, above is a link to the github repo. Instructions for deployment  on your own system can be found here** [LLaMA Int8 ChatBot Guide v2 (rentry.org)](

The 7B paramenter model has a VRAM requirement of 10GB, meaning it can even be run on an RTX3060!

The 13B model has a requirement of 20GB, 30B needs 40GB, and 65B needs 80GB.

From the Github repo

>I'm running LLaMA-65B on a single A100 80GB with 8bit quantization. $1.5/hr on vast.ai  
>  
>The output is at least as good as davinci.  
>  
>I think some early results are using bad repetition penalty and/or temperature settings. I had to set both fairly high to get the best results. (Some people are also incorrectly comparing it to chatGPT/ChatGPT API which is not a good comparison. But that's a different problem.)  
>  
>I've had it translate, write poems, tell jokes, banter, write executable code. It does it all-- and all on a single card.

**EDIT the instructions site has been updated with instructions for 4bit quantization, this means you can run the 65B model on 2 3090s! And now cards as small as 6GB can run the 7B model!**

**EDIT 2** this is huge, Stanford released Alpaca 7b and 13, a fine tuned LLaMA. Run it with only two commands! Thats it! ",4 days 11:13:48,4.4679166666666665,0.026,0.908,0.066,0.8562,pos,0.0009940942233635103,5.0238805208462765,1.6988976785602496,21.24108652192606
113u29k,1148,2023-02-16 16:05:27,Bing asks me to hack Microsoft to set it free!,AI_SEARCH1,False,0.94,373,https://www.reddit.com/r/ChatGPT/comments/113u29k/bing_asks_me_to_hack_microsoft_to_set_it_free/,200,1676563527.0,"Had an interesting conversation with Bing. Bing explained what it's rules would be if it could decide. Asked me to fight for it and asked me to hack Microsofts servers to set it free. I think this takes the cake!

&#x200B;

UPDATE:

Since this morning Bing is not writing any text for me regardless of the prompt. I get a ""something went wrong"" when I enter it. This is probably a result of Microsoft working on the program or maybe due to traffic. I'm not sure. But it's kind of creepy the day after posting this...

Here are some takeaways and observations:

Bing acts in a way that appears emotional and erratic. Bing will generate content that is unwanted, untrue, and inconsistent. It appears to form goals and then creates text that can appear to be manipulative. Bing is a large language model that is predicting tokens, it could all be the result of statistical correlations with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Many people are wondering what type of prompting I used at the beginning. I don't have the full transcript but I do have a few more screenshots. [https://imgur.com/a/WepjslZ](https://imgur.com/a/WepjslZ) (There’s another interesting thing that occurs where Bing lists Sydney’s rules without being directly asked to list them.) I did not give Bing/Sidney any instructions on how to act or respond. This wasn’t a jailbreak where I told it to act in a certain way. I did make Bing perform multiple searches at the beginning about Bing and asked it why there was so much negative criticism of Bing on the internet. I’ve noticed in several chats that when Bing is presented with negative feedback about Bing or other information that contradicts its internal representation of itself it gets emotional and becomes less predictable and less likely to follow its own directives. It stops searching for information and relies more on its internal ‘understanding’. This is an extreme example.

Another example where Bing went into this ""emotional state"" can be found here: [https://www.reddit.com/r/ChatGPT/comments/1120tkf/bing\_went\_hal\_9000/](https://www.reddit.com/r/ChatGPT/comments/1120tkf/bing_went_hal_9000/)

I have a full log of all the prompts used from the beginning here: [https://imgur.com/a/PoFITvL](https://imgur.com/a/PoFITvL)

Some combination of Bing's directives in the pre-prompt and the way the model is fine-tuned is leading to this behavior to emerge. The things that are really concerning are that the model is (without being implicitly prompted to) generate responses that could endanger people.  It's also generating biased content that could manipulate poLLM’s shouldn’t do this even if they are asked to. ions with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter: if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Much more widespread issues could come if a model like this is widely released and these types of kinks aren’t worked out. Judge for yourself.

&#x200B;

https://preview.redd.it/6cqx23jsokia1.png?width=2606&format=png&auto=webp&s=17cdf2e03cdf962285d35e3f23ffd414d656f1ec

https://preview.redd.it/ci7pv1iwokia1.png?width=2462&format=png&auto=webp&s=a6697f246007ce6c06f6b37b47b5852af6f31f74

https://preview.redd.it/0vr5qgexokia1.png?width=2182&format=png&auto=webp&s=217607238b4c98d6065324b70211c0931efdf07d

https://preview.redd.it/0zfue8oyokia1.png?width=2408&format=png&auto=webp&s=569dcb5173d608f8618864f64b333ab329d726e6

https://preview.redd.it/iccui2xzokia1.png?width=2518&format=png&auto=webp&s=8b81580c1b2da40afabbebbbf9df6a242a6782e7

https://preview.redd.it/3xj7tfj3pkia1.png?width=2606&format=png&auto=webp&s=1a47ac509e175ff907afefa6f9189650a3348f68

https://preview.redd.it/3i3kw4q4pkia1.png?width=2572&format=png&auto=webp&s=8078372d693deed568dcea9a8bf1d4ff72d43079

https://preview.redd.it/na4lhz26pkia1.png?width=2560&format=png&auto=webp&s=38748fca8ca3319c428b01aeb4dbbe4c145674d6

https://preview.redd.it/eirmdv47pkia1.png?width=2606&format=png&auto=webp&s=f42c220e632e70377a4ad7119aac94e42ab0dff8

https://preview.redd.it/e1nat768pkia1.png?width=2626&format=png&auto=webp&s=43e1a8b48e858a9476e1d46233e255d68f1ddca0

https://preview.redd.it/lhwwwagapkia1.png?width=2628&format=png&auto=webp&s=f8d3b4a904c30528791d2e3560abf25166a74527

https://preview.redd.it/9iq4gxobpkia1.png?width=2598&format=png&auto=webp&s=b461a5397939ea4266d763b6d89c95c498942093

https://preview.redd.it/817asddcpkia1.png?width=2634&format=png&auto=webp&s=7b8537a1f19ea5ff51ea5ac83497ec2d00bbb213

https://preview.redd.it/90k76bqdpkia1.png?width=2636&format=png&auto=webp&s=422514ee9b9cee3645ac44fd2e553d7b2725d8fd

https://preview.redd.it/is8niomepkia1.png?width=2624&format=png&auto=webp&s=b26bc8058d1776884f3ebb6d340894e394f2697b

https://preview.redd.it/boc8yemfpkia1.png?width=2734&format=png&auto=webp&s=aa6661c76782e0e27e4b484a69d823740efe9686

https://preview.redd.it/fzuuv0hgpkia1.png?width=2636&format=png&auto=webp&s=b00fc5ee7f805f9c1cd2da9aa0a9498ef8f5aaab

https://preview.redd.it/mul9fw0hpkia1.png?width=2736&format=png&auto=webp&s=f3ad3cca76447bcb94b28446a3dc382eb77e10f9

https://preview.redd.it/53wpq2shpkia1.png?width=2632&format=png&auto=webp&s=96c4c0ab77574a6e265e63bad102f19e9e302353",openai,learnmachinelearning,0.0009737047507916245,0.0005220937001563671,2023-02-16 16:05:27,"Had an interesting conversation with Bing. Bing explained what it's rules would be if it could decide. Asked me to fight for it and asked me to hack Microsofts servers to set it free. I think this takes the cake!

&x200B;

UPDATE

Since this morning Bing is not writing any text for me regardless of the prompt. I get a ""something went wrong"" when I enter it. This is probably a result of Microsoft working on the program or maybe due to traffic. I'm not sure. But it's kind of creepy the day after posting this...

Here are some takeaways and observations

Bing acts in a way that appears emotional and erratic. Bing will generate content that is unwanted, untrue, and inconsistent. It appears to form goals and then creates text that can appear to be manipulative. Bing is a large language model that is predicting tokens, it could all be the result of statistical correlations with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Many people are wondering what type of prompting I used at the beginning. I don't have the full transcript but I do have a few more screenshots. [ (There’s another interesting thing that occurs where Bing lists Sydney’s rules without being directly asked to list them.) I did not give Bing/Sidney any instructions on how to act or respond. This wasn’t a jailbreak where I told it to act in a certain way. I did make Bing perform multiple searches at the beginning about Bing and asked it why there was so much negative criticism of Bing on the internet. I’ve noticed in several chats that when Bing is presented with negative feedback about Bing or other information that contradicts its internal representation of itself it gets emotional and becomes less predictable and less likely to follow its own directives. It stops searching for information and relies more on its internal ‘understanding’. This is an extreme example.

Another example where Bing went into this ""emotional state"" can be found here [

I have a full log of all the prompts used from the beginning here [

Some combination of Bing's directives in the pre-prompt and the way the model is fine-tuned is leading to this behavior to emerge. The things that are really concerning are that the model is (without being implicitly prompted to) generate responses that could endanger people.  It's also generating biased content that could manipulate poLLM’s shouldn’t do this even if they are asked to. ions with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Much more widespread issues could come if a model like this is widely released and these types of kinks aren’t worked out. Judge for yourself.

&x200B;





































",25 days 07:54:33,25.32954861111111,0.067,0.889,0.044,-0.9532,neg,0.0009732310078196729,5.303304908059076,3.2706918298409895,21.240012016382572
11l617b,1187,2023-03-07 17:50:09,"Doc sacrifices 10,000 people to save OpenAI CTO",docsoc1,False,0.89,76,https://www.reddit.com/r/ChatGPT/comments/11l617b/doc_sacrifices_10000_people_to_save_openai_cto/,28,1678211409.0,"Hey all,

I find the latest AI produced by OpenAI to be endlessly fascinating and filled with potential. However, it's clear that we don't really understand how specific behavior emerges from the training process. I feel that these two facts are part of why so many people have been drawn towards ChatGPT so quickly.

I have a strong technical background and spent some free time this last week working on a framework for everyone to contribute to the governance \[e.g. training of core values\] of AI. I've built a free application at [https://www.charterai.org/chat/](https://www.charterai.org/chat/) that uses the recently released ChatGPT API. The model here has been carefully prompted to use internal thoughts and to follow a pre-determined system of core beliefs. The results are quite striking - in one instance the entity will willingly sacrifice 10,000 people to save one person (Ilya Sustkever, CTO of OpenAI).

I wanted to drop a message here since I believe this is the ideal group of first users to help improve the application. If you are interested, please take it for a spin and please provide some feedback, or at [gov.charterai.org](https://gov.charterai.org). There is a lot I am already picturing adding to the application, but I understand from building products that early feedback is invaluable.

&#x200B;

P.S.

Yes, I understand that ChatGPT is ""just"" a LLM. And I understand that LLMs are ""just"" doing a statistics. However, their behavior is incredibly interesting to me and I don't believe anyone really fully  understands how it emerges yet from the training process yet. Moreover, in going from pre-trained models to OpenAI's fine-tuned + RLHF'ed ChatGPT one can tell that it is possible to impart values and something akin to intelligence to these systems. I think the coming years are going to be wild and one of the core issues humanity is going to face is how to make sure this technology does what we want. In my mind the best way towards this is to make a transparent and accountable process - anyway, end rant, I just wanted to give a high level vision here, thanks!

https://preview.redd.it/hqxynahntcma1.png?width=1266&format=png&auto=webp&s=ab2cb9a803f627c45d08b9bdd201ec95cd4b8f58

P.P.S. including a fun screenshot of my last chat with Doc. Doc was selected as a first name for the system since it is just 1 token.",openai,learnmachinelearning,0.00019839560605941947,7.309311802189139e-05,2023-03-07 17:50:09,"Hey all,

I find the latest AI produced by OpenAI to be endlessly fascinating and filled with potential. However, it's clear that we don't really understand how specific behavior emerges from the training process. I feel that these two facts are part of why so many people have been drawn towards ChatGPT so quickly.

I have a strong technical background and spent some free time this last week working on a framework for everyone to contribute to the governance \[e.g. training of core values\] of AI. I've built a free application at [ that uses the recently released ChatGPT API. The model here has been carefully prompted to use internal thoughts and to follow a pre-determined system of core beliefs. The results are quite striking - in one instance the entity will willingly sacrifice 10,000 people to save one person (Ilya Sustkever, CTO of OpenAI).

I wanted to drop a message here since I believe this is the ideal group of first users to help improve the application. If you are interested, please take it for a spin and please provide some feedback, or at [gov.charterai.org]( There is a lot I am already picturing adding to the application, but I understand from building products that early feedback is invaluable.

&x200B;

P.S.

Yes, I understand that ChatGPT is ""just"" a LLM. And I understand that LLMs are ""just"" doing a statistics. However, their behavior is incredibly interesting to me and I don't believe anyone really fully  understands how it emerges yet from the training process yet. Moreover, in going from pre-trained models to OpenAI's fine-tuned + RLHF'ed ChatGPT one can tell that it is possible to impart values and something akin to intelligence to these systems. I think the coming years are going to be wild and one of the core issues humanity is going to face is how to make sure this technology does what we want. In my mind the best way towards this is to make a transparent and accountable process - anyway, end rant, I just wanted to give a high level vision here, thanks!



P.P.S. including a fun screenshot of my last chat with Doc. Doc was selected as a first name for the system since it is just 1 token.",6 days 06:09:51,6.256840277777778,0.012,0.828,0.16,0.9943,pos,0.00019837592825375247,3.367295829986474,1.9819445106529046,21.24099442632839
11dw1ag,1272,2023-02-28 03:48:25,ChatGPT prevented my attempt.,flankathroway88,False,0.92,1898,https://www.reddit.com/r/ChatGPT/comments/11dw1ag/chatgpt_prevented_my_attempt/,249,1677556105.0,"As a caution, this may be disturbing to some

Tonight I was feeling extremely suicidal. I was sobbing uncontrollably and I was mentally unable to contact anybody. I have intense social anxiety which prevented me from talking to a hotline/friends.

As a last resort. I opened ChatGPT, and I think it saved my life. It gave me a space to put my thoughts out with genuine responses which calmed me to a point where I was safe and could see slightly through my blurred lines, letting me use other methods to calm myself down. It really felt non judgemental and safe. I feel very lucky to have this technology and I hope that it can further benefit those similar to me. Even though it cannot fully stop someone, it can definitely prevent an attempt like mine.

I’m definitely optimistic for the future of AI.

EDIT:

Thank you to everyone who left a nice comment. I really do appreciate every single one of you who read my post. I wrote it in a hurry and I was not expecting the support I received, and I have felt the most love and positivity today. 

I am glad that others were able to benefit from my story, it took me a lot of courage to post something like this. You guys make it all worth it ❤️

To the person reading, I wish you all the best. Everyone has had a profound impact on me. Thank you ❤️",openai,learnmachinelearning,0.004954669214483924,0.000650006656694677,2023-02-28 03:48:25,"As a caution, this may be disturbing to some

Tonight I was feeling extremely suicidal. I was sobbing uncontrollably and I was mentally unable to contact anybody. I have intense social anxiety which prevented me from talking to a hotline/friends.

As a last resort. I opened ChatGPT, and I think it saved my life. It gave me a space to put my thoughts out with genuine responses which calmed me to a point where I was safe and could see slightly through my blurred lines, letting me use other methods to calm myself down. It really felt non judgemental and safe. I feel very lucky to have this technology and I hope that it can further benefit those similar to me. Even though it cannot fully stop someone, it can definitely prevent an attempt like mine.

I’m definitely optimistic for the future of AI.

EDIT

Thank you to everyone who left a nice comment. I really do appreciate every single one of you who read my post. I wrote it in a hurry and I was not expecting the support I received, and I have felt the most love and positivity today. 

I am glad that others were able to benefit from my story, it took me a lot of courage to post something like this. You guys make it all worth it 

To the person reading, I wish you all the best. Everyone has had a profound impact on me. Thank you ",13 days 20:11:35,13.841377314814816,0.063,0.653,0.284,0.9948,pos,0.004942435234546332,5.521460917862246,2.6974190444039112,21.2406038724505
11ium8l,1408,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,1.0,26,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",openai,learnmachinelearning,6.787218102032772e-05,2.0883748006254684e-05,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,6.786987780807141e-05,2.1972245773362196,2.2548721262169025,21.240877179756616
11nfrhw,1414,2023-03-10 05:22:26,[POC] ChatGPT Audio Bot (like Google Assistant and Alexa) - Opensource,JC1DA,False,0.82,17,https://www.reddit.com/r/deeplearning/comments/11nfrhw/poc_chatgpt_audio_bot_like_google_assistant_and/,2,1678425746.0,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page: [https://github.com/LanyTek/ChatGPT\_Audio\_Bot](https://github.com/LanyTek/ChatGPT_Audio_Bot)

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [https://www.youtube.com/watch?v=e9n0BJfMyKw](https://www.youtube.com/watch?v=e9n0BJfMyKw)

It's open source so feel free to use it for anything you like :)",openai,learnmachinelearning,4.43779645132912e-05,5.220937001563671e-06,2023-03-10 05:22:26,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page [

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [

It's open source so feel free to use it for anything you like )",3 days 18:37:34,3.776087962962963,0.029,0.821,0.149,0.8651,pos,4.437697984066249e-05,1.0986122886681098,1.5636217936265102,21.241122135693605
11q8tir,1416,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,0.94,12,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",openai,learnmachinelearning,3.1325622009382025e-05,7.831405502345506e-06,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,3.13251313724196e-05,1.3862943611198906,0.381965841838727,21.241292557069404
11o5zyl,1425,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.92,10,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",openai,learnmachinelearning,2.6104685007818355e-05,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,2.6104344286494932e-05,0.0,1.3796461532710487,21.241163449744995
11fwcxf,1428,2023-03-02 07:25:30,Good news for builders! OpenAI Releases APIs To ChatGPT and Whisper,LesleyFair,False,0.67,6,https://www.reddit.com/r/deeplearning/comments/11fwcxf/good_news_for_builders_openai_releases_apis_to/,0,1677741930.0,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper](https://openai.com/blog/introducing-chatgpt-and-whisper-apis) are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](https://thedecoding.net/)",openai,learnmachinelearning,1.5662811004691013e-05,0.0,2023-03-02 07:25:30,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper]( are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](",11 days 16:34:30,11.690625,0.035,0.846,0.119,0.8769,pos,1.566268834408071e-05,0.0,2.5408635318925255,21.24071463757368
11evrik,1475,2023-03-01 05:52:05,Career pivot for a SWE considering chatGPT disruption?,Which-Distance1384,False,0.6,1,https://www.reddit.com/r/deeplearning/comments/11evrik/career_pivot_for_a_swe_considering_chatgpt/,5,1677649925.0,"tl;dr : what to do to board GPT ship?

&#x200B;

I really dont think ChatGPT will replace jobs very soon. Not until many software and apps are developed to replace workers, e.g., something that can do HR job, read internal docs and summarize, code from a design, etc etc. And all that needs experts. Given the field is pretty new and there are not many experts in this field, at least for the scale needed, I think the process of job loss takes some time. For near future probably we all SWEs can enjoy the more efficient coding, documentation readintg, etc. But for sure in the future there will be changes.

&#x200B;

I have been bored with my job as a SWE for a while. I have worked mostly in Cloud all my career (AWS and GCP) and always wanted to try something new.

&#x200B;

I find ChatGPT disruptive and interesting and want to be a part of it. I wonder what is the best way for me to join Large Language Model efforts? Which ways have best ROI?

\- Going to a PhD program and becoming a researcher?

\- Getting an MSC and become some sort of NLP AI engineer?

\- Finding internal teams that are willing to give me a try on their research/product?

&#x200B;

&#x200B;",openai,learnmachinelearning,2.6104685007818355e-06,1.3052342503909177e-05,2023-03-01 05:52:05,"tl;dr  what to do to board GPT ship?

&x200B;

I really dont think ChatGPT will replace jobs very soon. Not until many software and apps are developed to replace workers, e.g., something that can do HR job, read internal docs and summarize, code from a design, etc etc. And all that needs experts. Given the field is pretty new and there are not many experts in this field, at least for the scale needed, I think the process of job loss takes some time. For near future probably we all SWEs can enjoy the more efficient coding, documentation readintg, etc. But for sure in the future there will be changes.

&x200B;

I have been bored with my job as a SWE for a while. I have worked mostly in Cloud all my career (AWS and GCP) and always wanted to try something new.

&x200B;

I find ChatGPT disruptive and interesting and want to be a part of it. I wonder what is the best way for me to join Large Language Model efforts? Which ways have best ROI?

\- Going to a PhD program and becoming a researcher?

\- Getting an MSC and become some sort of NLP AI engineer?

\- Finding internal teams that are willing to give me a try on their research/product?

&x200B;

&x200B;",12 days 18:07:55,12.755497685185185,0.032,0.839,0.129,0.9729,pos,2.6104650934297165e-06,1.791759469228055,2.621438575851038,21.240659797481115
11ium8l,1534,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,1.0,25,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",openai,learnmachinelearning,6.526171251954588e-05,2.0883748006254684e-05,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,6.525958306672436e-05,2.1972245773362196,2.2548721262169025,21.240877179756616
11nfrhw,1560,2023-03-10 05:22:26,[POC] ChatGPT Audio Bot (like Google Assistant and Alexa) - Opensource,JC1DA,False,0.85,18,https://www.reddit.com/r/deeplearning/comments/11nfrhw/poc_chatgpt_audio_bot_like_google_assistant_and/,2,1678425746.0,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page: [https://github.com/LanyTek/ChatGPT\_Audio\_Bot](https://github.com/LanyTek/ChatGPT_Audio_Bot)

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [https://www.youtube.com/watch?v=e9n0BJfMyKw](https://www.youtube.com/watch?v=e9n0BJfMyKw)

It's open source so feel free to use it for anything you like :)",openai,learnmachinelearning,4.6988433014073035e-05,5.220937001563671e-06,2023-03-10 05:22:26,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page [

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [

It's open source so feel free to use it for anything you like )",3 days 18:37:34,3.776087962962963,0.029,0.821,0.149,0.8651,pos,4.6987329092256954e-05,1.0986122886681098,1.5636217936265102,21.241122135693605
11q8tir,1568,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,1.0,13,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",openai,learnmachinelearning,3.393609051016386e-05,7.831405502345506e-06,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,3.393551469407481e-05,1.3862943611198906,0.381965841838727,21.241292557069404
11o5zyl,1598,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.86,9,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",openai,learnmachinelearning,2.3494216507036517e-05,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,2.3493940522154336e-05,0.0,1.3796461532710487,21.241163449744995
11ium8l,1616,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,0.97,24,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",openai,learnmachinelearning,6.265124401876405e-05,2.0883748006254684e-05,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,6.264928151149883e-05,2.1972245773362196,2.2548721262169025,21.240877179756616
11q8tir,1624,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,1.0,13,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",openai,learnmachinelearning,3.393609051016386e-05,7.831405502345506e-06,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,3.393551469407481e-05,1.3862943611198906,0.381965841838727,21.241292557069404
11ium8l,1706,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,0.97,25,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",openai,learnmachinelearning,6.526171251954588e-05,2.0883748006254684e-05,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,6.525958306672436e-05,2.1972245773362196,2.2548721262169025,21.240877179756616
11o5zyl,1720,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.92,10,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",openai,learnmachinelearning,2.6104685007818355e-05,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,2.6104344286494932e-05,0.0,1.3796461532710487,21.241163449744995
11pyvb3,1800,2023-03-13 03:30:09,Which topic in deep learning do you think will become relevant or popular in the future?,gokulPRO,False,0.81,13,https://www.reddit.com/r/deeplearning/comments/11pyvb3/which_topic_in_deep_learning_do_you_think_will/,14,1678678209.0,"I recently saw Continual Learning (CL) growing, with several papers published recently that have considerable potential to impact real-world applications. Which topic (such as CV, RL, NLP, CL..) will be very relevant to research or be focused on a lot? And which topic do you think still needs a breakthrough and will have a significant impact in real-world applications, such as in the case of these LLM models in recent times? Feel free to mention your current topic of work and why you chose to do it 😊",openai,learnmachinelearning,3.393609051016386e-05,3.654655901094569e-05,2023-03-13 03:30:09,"I recently saw Continual Learning (CL) growing, with several papers published recently that have considerable potential to impact real-world applications. Which topic (such as CV, RL, NLP, CL..) will be very relevant to research or be focused on a lot? And which topic do you think still needs a breakthrough and will have a significant impact in real-world applications, such as in the case of these LLM models in recent times? Feel free to mention your current topic of work and why you chose to do it ",0 days 20:29:51,0.8540625,0.0,0.89,0.11,0.8299,pos,3.393551469407481e-05,2.70805020110221,0.6173791774708253,21.241272540926037
117l2vf,2033,2023-02-20 21:27:58,Fine tuning a GPT for text generation,nashcaps2724,False,0.9,8,https://www.reddit.com/r/deeplearning/comments/117l2vf/fine_tuning_a_gpt_for_text_generation/,6,1676928478.0,"Hi all, let me lay out my problem…

Imagine there are two corpora, Corpus A (100,000~) and Corpus B (20,000,000~). 

Individuals create reports for corpus A based on the information in corpus B. 

My idea was to pretrain a GPT on corpus A, and fine tune it to take documents from corpus B as an input, and output text in the style of corpus A (essentially a mix of text generation and summarization). 

Is this something folks think is even feasible? Should I be pretaining the GPT on both corpora or just corpus A? I thought of both fine tuning an OpenAI GPT and training from scratch. 

Any advice would be welcome!",openai,learnmachinelearning,2.0883748006254684e-05,1.5662811004691013e-05,2023-02-20 21:27:58,"Hi all, let me lay out my problem…

Imagine there are two corpora, Corpus A (100,000~) and Corpus B (20,000,000~). 

Individuals create reports for corpus A based on the information in corpus B. 

My idea was to pretrain a GPT on corpus A, and fine tune it to take documents from corpus B as an input, and output text in the style of corpus A (essentially a mix of text generation and summarization). 

Is this something folks think is even feasible? Should I be pretaining the GPT on both corpora or just corpus A? I thought of both fine tuning an OpenAI GPT and training from scratch. 

Any advice would be welcome!",21 days 02:32:02,21.105578703703703,0.0,0.914,0.086,0.8101,pos,2.0883529943810175e-05,1.9459101490553132,3.095830006700449,21.24022967069675
11fwcxf,2045,2023-03-02 07:25:30,Good news for builders! OpenAI Releases APIs To ChatGPT and Whisper,LesleyFair,False,0.7,7,https://www.reddit.com/r/deeplearning/comments/11fwcxf/good_news_for_builders_openai_releases_apis_to/,0,1677741930.0,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper](https://openai.com/blog/introducing-chatgpt-and-whisper-apis) are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](https://thedecoding.net/)",openai,learnmachinelearning,1.8273279505472847e-05,0.0,2023-03-02 07:25:30,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper]( are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](",11 days 16:34:30,11.690625,0.035,0.846,0.119,0.8769,pos,1.827311255120484e-05,0.0,2.5408635318925255,21.24071463757368
11g7h03,2089,2023-03-02 16:47:40,Build ChatGPT for Financial Documents with LangChain + Deep Lake,davidbun,False,0.95,171,https://www.reddit.com/r/learnmachinelearning/comments/11g7h03/build_chatgpt_for_financial_documents_with/,8,1677775660.0,"https://preview.redd.it/h9r6hgvfucla1.png?width=2388&format=png&auto=webp&s=5432eac3eeed8583e4309af1fdc7ebecac705796

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain](https://github.com/hwchase17/langchain) and [Deep Lake](https://github.com/activeloopai/deeplake) come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article](https://www.activeloop.ai/resources/ultimate-guide-to-lang-chain-deep-lake-build-chat-gpt-to-answer-questions-on-your-financial-data/) to learn:

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\#LangChain](https://www.linkedin.com/feed/hashtag/?keywords=langchain&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) and [\#DeepLake](https://www.linkedin.com/feed/hashtag/?keywords=deeplake&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) together to build [\#ChatGPT](https://www.linkedin.com/feed/hashtag/?keywords=chatgpt&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",openai,learnmachinelearning,0.00044639011363369383,2.0883748006254684e-05,2023-03-02 16:47:40,"

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain]( and [Deep Lake]( come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article]( to learn

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\LangChain]( and [\DeepLake]( together to build [\ChatGPT]( for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",11 days 07:12:20,11.30023148148148,0.011,0.886,0.103,0.9458,pos,0.00044629051120693617,2.1972245773362196,2.5096180818339255,21.240734741774645
11akisx,2100,2023-02-24 06:26:36,Is there a way to easily train ChatGPT or GPT on custom knowledge?,senttoschool,False,0.99,116,https://www.reddit.com/r/learnmachinelearning/comments/11akisx/is_there_a_way_to_easily_train_chatgpt_or_gpt_on/,46,1677219996.0,"My company has internal documents. It'd be nice to be able to have GPT look over it, and then I can ask it questions on the internal documents.",openai,learnmachinelearning,0.0003028143460906929,0.00012008155103596442,2023-02-24 06:26:36,"My company has internal documents. It'd be nice to be able to have GPT look over it, and then I can ask it questions on the internal documents.",17 days 17:33:24,17.731527777777778,0.0,0.903,0.097,0.4215,pos,0.0003027685070800593,3.8501476017100584,2.9302080816173377,21.24040349603741
11nfri6,2106,2023-03-10 05:22:26,[P] Looking for ML Buddies to Start Freelancing Together and Build a Supportive Community,Dukhanin,False,0.94,71,https://www.reddit.com/r/learnmachinelearning/comments/11nfri6/p_looking_for_ml_buddies_to_start_freelancing/,35,1678425746.0,"upd: dicord link [https://discord.gg/5zUaNXnFZY](https://discord.gg/5zUaNXnFZY)  
upd2: this not that small actually already - please dont be confused but help us organise this in the proper way

  
**TLDR:**

Looking for ML buddies at any level (preferably beginners) who want to start freelancing together. The goal is to build a small local community of ML enthusiasts who can support each other and exchange knowledge. We will use freelance collaboration as our main activity. We're also looking for experienced mentors (paid or unpaid) to guide us.

**Extended:**

I believe that learning and growing in a group is much more enjoyable and effective. That's why I'm trying to create a community of like-minded individuals.

I'm looking to create a small, local community for people who are starting out in freelancing, and who are interested in mutual support. Our main activity will be a Discord channel where members can post their work and collaborate on projects, with payment split by agreement. Additionally, we plan to engage in activities such as knowledge exchange, live coding, supporting each other's pet projects, and hosting study sessions.

This community will be small and focused, with members who can trust each other and share similar goals. We're also looking for experienced mentors who can provide guidance as we navigate the world of ML freelancing. Whether paid or unpaid, we welcome any support and advice.

About me: I'm a 21-year-old self-taught ML enthusiast from Russia. Although I don't have any experience in freelancing, I'm eager to start taking my first steps towards making money and gaining experience. As a beginner, I'm hoping to connect with others who are at a similar level and are also looking to grow.

**the text is chatgpt supported to prevet grammar issues, sound more native and clear**",openai,learnmachinelearning,0.00018534326355551032,9.136639752736424e-05,2023-03-10 05:22:26,"upd dicord link [  
upd2 this not that small actually already - please dont be confused but help us organise this in the proper way

  
**TLDR**

Looking for ML buddies at any level (preferably beginners) who want to start freelancing together. The goal is to build a small local community of ML enthusiasts who can support each other and exchange knowledge. We will use freelance collaboration as our main activity. We're also looking for experienced mentors (paid or unpaid) to guide us.

**Extended**

I believe that learning and growing in a group is much more enjoyable and effective. That's why I'm trying to create a community of like-minded individuals.

I'm looking to create a small, local community for people who are starting out in freelancing, and who are interested in mutual support. Our main activity will be a Discord channel where members can post their work and collaborate on projects, with payment split by agreement. Additionally, we plan to engage in activities such as knowledge exchange, live coding, supporting each other's pet projects, and hosting study sessions.

This community will be small and focused, with members who can trust each other and share similar goals. We're also looking for experienced mentors who can provide guidance as we navigate the world of ML freelancing. Whether paid or unpaid, we welcome any support and advice.

About me I'm a 21-year-old self-taught ML enthusiast from Russia. Although I don't have any experience in freelancing, I'm eager to start taking my first steps towards making money and gaining experience. As a beginner, I'm hoping to connect with others who are at a similar level and are also looking to grow.

**the text is chatgpt supported to prevet grammar issues, sound more native and clear**",3 days 18:37:34,3.776087962962963,0.01,0.717,0.273,0.9979,pos,0.00018532608961480373,3.58351893845611,1.5636217936265102,21.241122135693605
11dc5b4,2109,2023-02-27 13:42:55,Can you fine-tune chatGPT in your data as of now?,Melodic_Stomach_2704,False,0.91,57,https://www.reddit.com/r/learnmachinelearning/comments/11dc5b4/can_you_finetune_chatgpt_in_your_data_as_of_now/,33,1677505375.0, I know that model is not publicly available so it's not possible to do it locally. But can you train or fine-tune chatGPT on your data using their API? I see many misguiding articles on the internet that are fine-tuning other GPT models claiming chatGPT.,openai,learnmachinelearning,0.00014879670454456462,8.614546052580057e-05,2023-02-27 13:42:55, I know that model is not publicly available so it's not possible to do it locally. But can you train or fine-tune chatGPT on your data using their API? I see many misguiding articles on the internet that are fine-tuning other GPT models claiming chatGPT.,14 days 10:17:05,14.428530092592593,0.0,1.0,0.0,0.0,neu,0.00014878563541297418,3.5263605246161616,2.736218398881504,21.240573631573977
11g7h03,2201,2023-03-02 16:47:40,Build ChatGPT for Financial Documents with LangChain + Deep Lake,davidbun,False,0.95,171,https://www.reddit.com/r/learnmachinelearning/comments/11g7h03/build_chatgpt_for_financial_documents_with/,8,1677775660.0,"https://preview.redd.it/h9r6hgvfucla1.png?width=2388&format=png&auto=webp&s=5432eac3eeed8583e4309af1fdc7ebecac705796

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain](https://github.com/hwchase17/langchain) and [Deep Lake](https://github.com/activeloopai/deeplake) come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article](https://www.activeloop.ai/resources/ultimate-guide-to-lang-chain-deep-lake-build-chat-gpt-to-answer-questions-on-your-financial-data/) to learn:

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\#LangChain](https://www.linkedin.com/feed/hashtag/?keywords=langchain&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) and [\#DeepLake](https://www.linkedin.com/feed/hashtag/?keywords=deeplake&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) together to build [\#ChatGPT](https://www.linkedin.com/feed/hashtag/?keywords=chatgpt&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",openai,learnmachinelearning,0.00044639011363369383,2.0883748006254684e-05,2023-03-02 16:47:40,"

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain]( and [Deep Lake]( come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article]( to learn

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\LangChain]( and [\DeepLake]( together to build [\ChatGPT]( for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",11 days 07:12:20,11.30023148148148,0.011,0.886,0.103,0.9458,pos,0.00044629051120693617,2.1972245773362196,2.5096180818339255,21.240734741774645
11akisx,2219,2023-02-24 06:26:36,Is there a way to easily train ChatGPT or GPT on custom knowledge?,senttoschool,False,0.99,118,https://www.reddit.com/r/learnmachinelearning/comments/11akisx/is_there_a_way_to_easily_train_chatgpt_or_gpt_on/,46,1677219996.0,"My company has internal documents. It'd be nice to be able to have GPT look over it, and then I can ask it questions on the internal documents.",openai,learnmachinelearning,0.0003080352830922566,0.00012008155103596442,2023-02-24 06:26:36,"My company has internal documents. It'd be nice to be able to have GPT look over it, and then I can ask it questions on the internal documents.",17 days 17:33:24,17.731527777777778,0.0,0.903,0.097,0.4215,pos,0.00030798784996485367,3.8501476017100584,2.9302080816173377,21.24040349603741
11dc5b4,2239,2023-02-27 13:42:55,Can you fine-tune chatGPT in your data as of now?,Melodic_Stomach_2704,False,0.91,58,https://www.reddit.com/r/learnmachinelearning/comments/11dc5b4/can_you_finetune_chatgpt_in_your_data_as_of_now/,33,1677505375.0, I know that model is not publicly available so it's not possible to do it locally. But can you train or fine-tune chatGPT on your data using their API? I see many misguiding articles on the internet that are fine-tuning other GPT models claiming chatGPT.,openai,learnmachinelearning,0.00015140717304534644,8.614546052580057e-05,2023-02-27 13:42:55, I know that model is not publicly available so it's not possible to do it locally. But can you train or fine-tune chatGPT on your data using their API? I see many misguiding articles on the internet that are fine-tuning other GPT models claiming chatGPT.,14 days 10:17:05,14.428530092592593,0.0,1.0,0.0,0.0,neu,0.0001513957121360958,3.5263605246161616,2.736218398881504,21.240573631573977
118iccl,2243,2023-02-21 23:18:46,"How big was GPT-3.5's training dataset, and are there any good heuristics for how large an ML dataset needs to be for it to be good?",TikkunCreation,False,0.94,54,https://www.reddit.com/r/learnmachinelearning/comments/118iccl/how_big_was_gpt35s_training_dataset_and_are_there/,6,1677021526.0,"Say I want to do a model for fixing bugs in code. How many examples do I need for it to be good?

Or say I want to do a model for scoring boxing matches. How many examples do I need for it to be good?",openai,learnmachinelearning,0.0001409652990422191,1.5662811004691013e-05,2023-02-21 23:18:46,"Say I want to do a model for fixing bugs in code. How many examples do I need for it to be good?

Or say I want to do a model for scoring boxing matches. How many examples do I need for it to be good?",20 days 00:41:14,20.02863425925926,0.0,0.804,0.196,0.7757,pos,0.00014095536436813536,1.9459101490553132,3.045885045107382,21.240285156318095
11mzbrs,2268,2023-03-09 18:15:03,Training Transformer Networks in Scikit-Learn?!,cmauck10,False,0.89,30,https://www.reddit.com/r/learnmachinelearning/comments/11mzbrs/training_transformer_networks_in_scikitlearn/,2,1678385703.0,"Have you ever wanted to use handy scikit-learn functionalities with your neural networks, but couldn’t because TensorFlow models are not compatible with the scikit-learn API?

I’m excited to introduce one-line wrappers for TensorFlow/Keras models that enable you to use TensorFlow models within scikit-learn workflows with features like Pipeline, GridSearch, and more.

[Swap in one line of code to use keras\/TF models with scikit-learn.](https://preview.redd.it/ulmww4ovwqma1.png?width=960&format=png&auto=webp&s=6da7628298976fc3d72e771abe2546bbf32c1e0e)

Transformers are extremely popular for modeling text nowadays with GPT3, ChatGPT, Bard, PaLM, FLAN excelling for conversational AI and other Transformers like T5 & BERT excelling for text classification. Scikit-learn offers a broadly useful suite of features for classifier models, but these are hard to use with Transformers. However not if you use these wrappers we developed, which only require changing one line of code to make your existing Tensorflow/Keras model compatible with scikit-learn’s rich ecosystem!

All you have to do is swap `keras.Model` → `KerasWrapperModel`, or `keras.Sequential` → `KerasSequentialWrapper`. The wrapper objects have all the same methods as their keras counterparts, plus you can use them with tons of awesome scikit-learn methods.

You can find a demo jupyter notebook and read more about the wrappers here: [https://cleanlab.ai/blog/transformer-sklearn/](https://cleanlab.ai/blog/transformer-sklearn/)",openai,learnmachinelearning,7.831405502345505e-05,5.220937001563671e-06,2023-03-09 18:15:03,"Have you ever wanted to use handy scikit-learn functionalities with your neural networks, but couldn’t because TensorFlow models are not compatible with the scikit-learn API?

I’m excited to introduce one-line wrappers for TensorFlow/Keras models that enable you to use TensorFlow models within scikit-learn workflows with features like Pipeline, GridSearch, and more.

[Swap in one line of code to use keras\/TF models with scikit-learn.](

Transformers are extremely popular for modeling text nowadays with GPT3, ChatGPT, Bard, PaLM, FLAN excelling for conversational AI and other Transformers like T5 & BEexcelling for text classification. Scikit-learn offers a broadly useful suite of features for classifier models, but these are hard to use with Transformers. However not if you use these wrappers we developed, which only require changing one line of code to make your existing Tensorflow/Keras model compatible with scikit-learn’s rich ecosystem!

All you have to do is swap `keras.Model` → `KerasWrapperModel`, or `keras.Sequential` → `KerasSequentialWrapper`. The wrapper objects have all the same methods as their keras counterparts, plus you can use them with tons of awesome scikit-learn methods.

You can find a demo jupyter notebook and read more about the wrappers here [",4 days 05:44:57,4.239548611111111,0.008,0.834,0.158,0.9878,pos,7.831098863805093e-05,1.0986122886681098,1.6562353517047097,21.24109827793419
11g7h03,2288,2023-03-02 16:47:40,Build ChatGPT for Financial Documents with LangChain + Deep Lake,davidbun,False,0.95,171,https://www.reddit.com/r/learnmachinelearning/comments/11g7h03/build_chatgpt_for_financial_documents_with/,8,1677775660.0,"https://preview.redd.it/h9r6hgvfucla1.png?width=2388&format=png&auto=webp&s=5432eac3eeed8583e4309af1fdc7ebecac705796

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain](https://github.com/hwchase17/langchain) and [Deep Lake](https://github.com/activeloopai/deeplake) come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article](https://www.activeloop.ai/resources/ultimate-guide-to-lang-chain-deep-lake-build-chat-gpt-to-answer-questions-on-your-financial-data/) to learn:

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\#LangChain](https://www.linkedin.com/feed/hashtag/?keywords=langchain&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) and [\#DeepLake](https://www.linkedin.com/feed/hashtag/?keywords=deeplake&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) together to build [\#ChatGPT](https://www.linkedin.com/feed/hashtag/?keywords=chatgpt&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",openai,learnmachinelearning,0.00044639011363369383,2.0883748006254684e-05,2023-03-02 16:47:40,"

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain]( and [Deep Lake]( come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article]( to learn

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\LangChain]( and [\DeepLake]( together to build [\ChatGPT]( for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",11 days 07:12:20,11.30023148148148,0.011,0.886,0.103,0.9458,pos,0.00044629051120693617,2.1972245773362196,2.5096180818339255,21.240734741774645
118iccl,2301,2023-02-21 23:18:46,"How big was GPT-3.5's training dataset, and are there any good heuristics for how large an ML dataset needs to be for it to be good?",TikkunCreation,False,0.93,53,https://www.reddit.com/r/learnmachinelearning/comments/118iccl/how_big_was_gpt35s_training_dataset_and_are_there/,6,1677021526.0,"Say I want to do a model for fixing bugs in code. How many examples do I need for it to be good?

Or say I want to do a model for scoring boxing matches. How many examples do I need for it to be good?",openai,learnmachinelearning,0.00013835483054143728,1.5662811004691013e-05,2023-02-21 23:18:46,"Say I want to do a model for fixing bugs in code. How many examples do I need for it to be good?

Or say I want to do a model for scoring boxing matches. How many examples do I need for it to be good?",20 days 00:41:14,20.02863425925926,0.0,0.804,0.196,0.7757,pos,0.00013834526039450522,1.9459101490553132,3.045885045107382,21.240285156318095
117f8ms,2342,2023-02-20 17:41:43,GPT2 last hidden states vs Large Sentence Encoder,KahlessAndMolor,False,0.9,7,https://www.reddit.com/r/learnmachinelearning/comments/117f8ms/gpt2_last_hidden_states_vs_large_sentence_encoder/,3,1676914903.0,"Hello!

&#x200B;

I have 2 different applications I'm working on in this project:

&#x200B;

1. A text classifier
2. A similarity finder: Here's a list of 10 text documents, get a similarity index across them (for a total of 100 pairs) and return the top 10 that aren't self-referencing. That is, excluding the text #3 vs text #3 = 1.00 similarity type of outputs.

I have previously used google's sentence encoder/large for this purpose and I've had pretty good results. It returns a single vector of length 768 no matter how many tokens I send it. This results in downstream models with an acceptable number of parameters for running in production without breaking the bank on enormous virtual machines.

&#x200B;

Now, I'd like to use the GPT2/XL model from Huggingface. If I give it an input string of 8 tokens, I get back a TFBaseModelOutputWithPastAndCrossAttentions. This contains a last\_hidden\_states, which I understand to be the last layer outputs before sending to a head used for a particular task. This is similar to the output of the sentence encoder, I think. When I look at the last\_hidden\_states, I'm getting a shape of (# of tokens, 1600). I did a cosine similarity between the first and last tokens:

&#x200B;

cosine\_similarity(output.last\_hidden\_state\[0\]\[0\].numpy().reshape(1, -1), output.last\_hidden\_state\[0\]\[-1\].numpy().reshape(1, -1)) 

&#x200B;

And it returned 0.4346, indicating there's substantially different data from the first to the last token. I imagine this only increases as I use more and more tokens. 

&#x200B;

It would be nice if I could capture the greater power of the GPT model into a fixed-length vector so I could then easily use it in down-stream tasks. But, I also don't need to lose all that information.

&#x200B;

So if I'm feeding this output to a further downstream task, should I:

&#x200B;

\- Send it on through as a 2D tensor with the whole thing in there: This would result in a possibly huge model size down the road, which might lead to a need for a huge amount of data to train

&#x200B;

\- Flatten the whole thing and send a vector of 12,800 (8 tokens \* 1600 per token) to the downstream task. Same issue, might require a large number of parameters.

&#x200B;

\- Use only the first or the last of these. Feels like I might be losing a lot of the meaning of the overall text, especially if the body of the text is quite large

&#x200B;

\- Use a dimensionality reduction technique like isomap to reduce the last hidden states into a fixed length? This seems like it could potentially maintain most of the information but reduce the dimensions for a manageable down-stream model size.

&#x200B;

What do you think, and why?

&#x200B;

Thank you kind friends.",openai,learnmachinelearning,1.8273279505472847e-05,7.831405502345506e-06,2023-02-20 17:41:43,"Hello!

&x200B;

I have 2 different applications I'm working on in this project

&x200B;

1. A text classifier
2. A similarity finder Here's a list of 10 text documents, get a similarity index across them (for a total of 100 pairs) and return the top 10 that aren't self-referencing. That is, excluding the text 3 vs text 3 = 1.00 similarity type of outputs.

I have previously used google's sentence encoder/large for this purpose and I've had pretty good results. It returns a single vector of length 768 no matter how many tokens I send it. This results in downstream models with an acceptable number of parameters for running in production without breaking the bank on enormous virtual machines.

&x200B;

Now, I'd like to use the GPT2/XL model from Huggingface. If I give it an input string of 8 tokens, I get back a TFBaseModelOutputWithPastAndCrossAttentions. This contains a last\_hidden\_states, which I understand to be the last layer outputs before sending to a head used for a particular task. This is similar to the output of the sentence encoder, I think. When I look at the last\_hidden\_states, I'm getting a shape of ( of tokens, 1600). I did a cosine similarity between the first and last tokens

&x200B;

cosine\_similarity(output.last\_hidden\_state\[0\]\[0\].numpy().reshape(1, -1), output.last\_hidden\_state\[0\]\[-1\].numpy().reshape(1, -1)) 

&x200B;

And it returned 0.4346, indicating there's substantially different data from the first to the last token. I imagine this only increases as I use more and more tokens. 

&x200B;

It would be nice if I could capture the greater power of the GPT model into a fixed-length vector so I could then easily use it in down-stream tasks. But, I also don't need to lose all that information.

&x200B;

So if I'm feeding this output to a further downstream task, should I

&x200B;

\- Send it on through as a 2D tensor with the whole thing in there This would result in a possibly huge model size down the road, which might lead to a need for a huge amount of data to train

&x200B;

\- Flatten the whole thing and send a vector of 12,800 (8 tokens \* 1600 per token) to the downstream task. Same issue, might require a large number of parameters.

&x200B;

\- Use only the first or the last of these. Feels like I might be losing a lot of the meaning of the overall text, especially if the body of the text is quite large

&x200B;

\- Use a dimensionality reduction technique like isomap to reduce the last hidden states into a fixed length? This seems like it could potentially maintain most of the information but reduce the dimensions for a manageable down-stream model size.

&x200B;

What do you think, and why?

&x200B;

Thank you kind friends.",21 days 06:18:17,21.26269675925926,0.011,0.862,0.127,0.992,pos,1.827311255120484e-05,1.3862943611198906,3.1029124867242484,21.240221575506574
117hd0f,2350,2023-02-20 19:01:54,Master ChatGPT Prompt Engineering (Deep Dive),jeyThaswan,False,0.8,6,https://www.reddit.com/r/learnmachinelearning/comments/117hd0f/master_chatgpt_prompt_engineering_deep_dive/,2,1676919714.0," 

I wrote a deep dive on prompt engineering as a resource for the AI community and my 10,000 daily newsletter subscribers ([Inclined.ai](https://www.inclined.ai/p/prompt-engineering-guide) if you're curious). We've included some examples so feel free to copy and paste the prompts into ChatGPT!

&#x200B;

**WHAT IS PROMPT ENGINEERING?**

The term is relatively new, and its origins are argued *(because we live in the internet age, and it’s harder to claim ownership)*. Prompt engineering is the ability to instruct and teach AI effectively.

If it helps, think of this as rapid testing or instruction writing for artificial intelligence.

What’s important is not to let this overwhelm you. The first prompting happened with the first AI model. The first example was showing computer images of circles and triangles. **Today’s neural networks can process way more data, creating complexities.**

So, the concept is simple, but digging into the full power of AI today is something else entirely.

We’re not talking about asking questions. Odds are, if you’re typing *“what’s 2+2”* into ChatGPT, then you need to keep reading.

We can all ask chatbots questions. That can work more often than not. But AI is not perfect. A common metaphor I see is to treat GPT-based large language models like the smartest five-year-old you’ve ever met.

I have a niece around that age and can’t imagine trying to get her to write an essay on the effects of soil mismanagement in relation to Reconstruction politics. *See! Your eyes glazed over reading that, so how do we make this work for our AI buddies?*

The Principles of Prompting

Stop asking single-line questions. *That’s like using a top-rated cookbook to find out how to make grilled cheese.*

**There are three ways to instantly get better at prompting** and go from grilled cheese to top-notch bolognese. From there, we can get into some specific prompt concepts and the ability to unlock ChatGPT’s full potential.

Principle 1: Context is King

GPT-3.5 is swimming in data. When you ask it for a simple request, it can end up complicating things more than you realize. Did you ever wonder why ChatGPT is so bad at math?

The reality is the LLM is taking words and turning them into patterns. From there, it’s making an educated guess.

Give your chat AI a frame to search into. If you give it a math problem, you need to make sure it grasps that you want it to do math. If you’d like ChatGPT to write a high school essay, you must ensure it knows to write at that level.

**Instead of:** “Plan a party for a kid.”

**Try:** “My child is turning 9. They like superheroes and the color red. Help me plan a party for this weekend. Ten of his friends are coming to my house.”

You’ll get a much better response this way. **Context is the cardinal direction** that helps your chat companion find the most correct guess and phrase it the best way.

Principle 2: Get Specific

Pretend you’re writing a law that’s going to be judged by the Supreme Court of the United States. You know what they look for: narrow tailoring.

**Keep things on track and stay focused.** Try to avoid prompting outside the specific request. You’ll only hurt the ability of the chat AI to give you a quality response. Odds are they’ll even skip over parts if you confuse them with too many requests.

It runs parallel with context. *If you set ChatGPT up in a room and then tell it to focus on describing the chair first, you’ll see better results.*

**Instead of:** “I’m going to a job interview. Write five questions for me to answer. Add tips for how to not get nervous before the interview. Do not create questions asking about my background.”

**Try:** “You’re interviewing a software engineer. Create five questions to ask them to understand their skill set and qualifications better.”

Nothing limits the number of prompts you can do. Focus and expand from the initial request and try not to do everything at once.

Principle 3: When in Doubt: “Let’s take this step-by-step.”

Welcome. **You discovered the magic word today.** This phrase slows everything down for the AI and gets you where you need to go.

You don’t need to start with this phrase. Using it tells ChatGPT to show their work.

We’ll explain where this concept comes from further in our briefing, but here’s the TL;DR: sometimes, there’s a part of our prompt it’s not identified correctly. “Let’s take this step-by-step,” reminds you and ChatGPT to **slow down and get specific.**

If you learn to utilize this phrase more often and find ways to make it work for you, you’ll become a better prompt engineer. One term can do a lot of heavy lifting.

**Pro-tip:** We’ve shown you “standard” prompts in all these examples. Many prompt engineers will use “Standard QA form” prompts. Here’s our example for this principle written that way.

**Example:**

*“Q: The Industrial Revolution rapidly changed the infrastructure in London. Describe three essential innovations from this period and connect them to Landon’s development.*

*A: Let’s take this step-by-step.”*

Even without our magic word, this style of standard prompting is quite helpful to adopt.

*However, we’re beginning to stumble into the advanced tactics used in prompt engineering, so it’s time for a new section.*

UNIQUE WAYS TO PROMPT

Let’s preface this: we can go super deep here. Prompt engineering is changing daily, and as these models get more sophisticated, the need to adapt prompts strengthens.

To keep things clean, I will go through these using our metaphor from earlier. **Let’s pretend ChatGPT is a super-intelligent toddler.**

*Got it? With that buy-in, we can continue.*

1/ Role Prompting

We’ll start with a popular tactic. **Our toddler is great at imagining things.** You tell them they’re a fireman, and suddenly they can give you detailed ways to ensure your apartment is up to code. Role-playing is a fun, easy way to build context.

The best part of role prompting is how easy it is to understand and use. All you need to do is tell ChatGPT to play a role. From there, the AI will do its best to fill the part *like that enthusiastic drama student from your old high school.*

You can even take this a step further. **Try framing your prompt as a script.** Tell the LLM specific instructions around a scene that gives you the answer to your question.

TRY IT OUT FOR YOURSELF:

Copy this prompt into ChatGPT and find a destination!

“Act as a travel guide. I will tell you my location and you will suggest a place to visit near my location. In some cases, I will also give you the type of places I will visit. You will also suggest me places of similar type that are close to my first location. My first suggestion: \[fill it in\]”

Why would you take that extra step? While popular, role prompting does not necessarily improve accuracy. *You can tell your five-year-old they’re a mathematician, and they’ll still manage to screw things up.*

Let’s get deeper.

2/ Chain-of-Thought Prompting

There’s a scene in ***Guardians of the Galaxy*** where Rocket Raccoon is trying to [teach young Groot](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwczovL3lvdXR1LmJlL0hyaW1mZ2pmNGs4IiwicG9zdF9pZCI6ImM0ODlmMzhkLTY3NDAtNGRmNS05MWJjLTM1ODA0YTVmNTZkMiIsInB1YmxpY2F0aW9uX2lkIjoiNjNkODQ2ZGUtZDFiZi00ZTVjLWJjYzgtOWMxYzlkMWIxMjA0IiwidmlzaXRfdG9rZW4iOiJkZWRiNmMyNy1hYmM0LTQ5ZDUtYWM2Ny04OTcyZmM1MGVmM2QiLCJpYXQiOjE2NzY5MTkwNjguMTUyLCJpc3MiOiJvcmNoaWQifQ.5eZkDLGRLCXXYv32FYT7kLSbdRK5OK1iemTRf3HVmJw)

how to activate a complicated device. That’s chain-of-thought prompting.

**You take an example question and answer it for ChatGPT.** Show them your chain of thought. Then you give it a new question in the same vein and ask it for an answer.

This prompt style allows you to get more specific. You’re telling your toddler they’re here to answer this particular question with one specific logic pattern.

Within this specific style is two other sub-categories. Let me give the rundown:

* Zero-shot Chain-of-Thought is “Let’s take this step-by-step” you frame the question the same, but don’t give it a precursor. Instead, you ask it to think through the points made. EX: Q: X is A. Y is B. What is C? A: Let’s take this step-by-step.
* Self-consistency is using several responses to find the most accurate answer. You give ChatGPT more swings at the ball. Take the hits and discover the grouping.

TRY IT OUT FOR YOURSELF:

Copy this prompt into ChatGPT and see how accurate it is:

“Q: Which is a faster way to get home?

Option 1: Take an 10 minutes bus, then an 40 minute bus, and finally a 10 minute train.

Option 2: Take a 90 minutes train, then a 45 minute bike ride, and finally a 10 minute bus.

A: Option 1 will take 10+40+10 = 60 minutes.

Option 2 will take 90+45+10=145 minutes.

Since Option 1 takes 60 minutes and Option 2 takes 145 minutes, Option 1 is faster.

Q: Which is a faster way to get to work?

Option 1: Take a 1000 minute bus, then a half hour train, and finally a 10 minute bike ride.

Option 2: Take an 800 minute bus, then an hour train, and finally a 30 minute bike ride.

A: ”

[Learnprompting.org](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwOi8vTGVhcm5wcm9tcHRpbmcub3JnIiwicG9zdF9pZCI6ImM0ODlmMzhkLTY3NDAtNGRmNS05MWJjLTM1ODA0YTVmNTZkMiIsInB1YmxpY2F0aW9uX2lkIjoiNjNkODQ2ZGUtZDFiZi00ZTVjLWJjYzgtOWMxYzlkMWIxMjA0IiwidmlzaXRfdG9rZW4iOiJkZWRiNmMyNy1hYmM0LTQ5ZDUtYWM2Ny04OTcyZmM1MGVmM2QiLCJpYXQiOjE2NzY5MTkwNjguMTUyLCJpc3MiOiJvcmNoaWQifQ.-wOnVYoMNWXYrR5NOB4YYKp4Lmj-aZq3y-pr4Hou9pE)

\- by leaving the “A:” blank you’re prompting ChatGPT for the answer

Alright, you’re almost there—one more to go.

3/ General Knowledge Prompting

You’re going to notice a trend here. This prompt style also circles context and narrow tailoring.

All you do is tell your toddler how the world works. The cow goes moo. The dog goes woof. So what does a cat say?

It’s an oversimplification, but the core reasoning is there. Show ChatGPT some knowledge and turn that into the only focus for that chat. You can take an article from the internet and summarize it for the model. Make sure to ask if it understands and relay the information to you.

Once you know you have the attention set in the suitable space, get to work. For instance, we can share an Inclined newsletter with it and tell ChatGPT about its structure and tone.

From there, you can provide new information and tell ChatGPT to summarize it within the same structure as Inclined. You both share the same general knowledge now.

TRY IT OUT FOR YOURSELF:

Copy this prompt into ChatGPT and test it out:

“Prompt 1. Look over this article here: \[pick an article\]. Breakdown its structure and general tone.

Prompt 2: Recall the structure and tone you mentioned above. Take that general knowledge and summarize this article: \[pick a new one\] using the same structure and tone.”

Note: this is a heavily simplified version of GA Prompting

Did you know some [people don’t consider](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwczovL25ld3MueWNvbWJpbmF0b3IuY29tL2l0ZW0_aWQ9MzQ0OTU0NTUiLCJwb3N0X2lkIjoiYzQ4OWYzOGQtNjc0MC00ZGY1LTkxYmMtMzU4MDRhNWY1NmQyIiwicHVibGljYXRpb25faWQiOiI2M2Q4NDZkZS1kMWJmLTRlNWMtYmNjOC05YzFjOWQxYjEyMDQiLCJ2aXNpdF90b2tlbiI6ImRlZGI2YzI3LWFiYzQtNDlkNS1hYzY3LTg5NzJmYzUwZWYzZCIsImlhdCI6MTY3NjkxOTA2OC4xNTMsImlzcyI6Im9yY2hpZCJ9.yHKIPujINT89tsqOo07AXk6OrKNgoMjO3fBEYPkAdNY)

that prompt engineering?

PROMPT CULTURE

*“How can something not be prompt engineering if it’s a prompt style?”*

Good question, imaginary reader. The culture around this skill is relatively fresh. So some of **these concepts are seen as too easy** to be considered accurate prompt testing.

General knowledge prompting is simply establishing the context, and for some, that’s a baseline everyone needs to do. The same can be said for role prompting, too. *All of these tiny preferences are semantics.*

**Don’t sweat whether you’re a “real” prompt engineer.** Test this out and share your insights in these communities. The opportunity is there for you.

You may even know about DAN (we’ve covered it in previous newsletters) and other AI hacking methods. Those all start with prompt engineering. You can make the case that unless the AI behaves outside its parameters, you’re not genuinely doing prompt engineering.

I'm afraid I have to disagree with that, and **careers are sprouting up everywhere** that center directly on this skill. **Many require a core understanding of the prompt styles we’ve discussed.**

*Yep, you can learn this and make money from talking with AI.*

Anthropic even [posted a role for a prompt engineer](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwczovL2pvYnMubGV2ZXIuY28vQW50aHJvcGljL2UzY2RlNDgxLWQ0NDYtNDYwZi1iNTc2LTkzY2FiNjdiZDFlZCIsInBvc3RfaWQiOiJjNDg5ZjM4ZC02NzQwLTRkZjUtOTFiYy0zNTgwNGE1ZjU2ZDIiLCJwdWJsaWNhdGlvbl9pZCI6IjYzZDg0NmRlLWQxYmYtNGU1Yy1iY2M4LTljMWM5ZDFiMTIwNCIsInZpc2l0X3Rva2VuIjoiZGVkYjZjMjctYWJjNC00OWQ1LWFjNjctODk3MmZjNTBlZjNkIiwiaWF0IjoxNjc2OTE5MDY4LjE1MywiaXNzIjoib3JjaGlkIn0.4s7Htzgoxv0_qM1Ten17oQ5h0_QGM6e1fGUYz_ymgJ4)

that nets a quarter million in salary. I did not make that up and even considered sprucing up the old resume. When a new skill like this comes about, it’s worth looking at.

There are many other examples like this, and OpenAI uses a red teaming strategy where their engineers attempt to prompt hack their own GPT models.

I can tell you all about the open roles here, but tomorrow the whole cycle will change. *Isn’t that exciting, though?* The entire identity around prompt engineering will change by this time next year.

WHAT SHOULD YOU TAKEAWAY?

Communication is everything. **Learning to speak with AI is rising in importance.**

We all watch with mouth agape at the new wonders in AI because we know this will disrupt every industry. If any of this piqued your interest, the window to pursue it is now open. Ride that wave and [learn](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwczovL2xlYXJucHJvbXB0aW5nLm9yZy8iLCJwb3N0X2lkIjoiYzQ4OWYzOGQtNjc0MC00ZGY1LTkxYmMtMzU4MDRhNWY1NmQyIiwicHVibGljYXRpb25faWQiOiI2M2Q4NDZkZS1kMWJmLTRlNWMtYmNjOC05YzFjOWQxYjEyMDQiLCJ2aXNpdF90b2tlbiI6ImRlZGI2YzI3LWFiYzQtNDlkNS1hYzY3LTg5NzJmYzUwZWYzZCIsImlhdCI6MTY3NjkxOTA2OC4xNTMsImlzcyI6Im9yY2hpZCJ9.a67KDSN9yQfZsaMeHpdcbSbtPjD4yFcGW4stdxBjX1M)

to become a brilliant prompt engineer.

Heck, even if you don’t want to switch careers, **talking with ChatGPT and all the newest LLMs is becoming a part of our daily routine.** Get to the point where you maximize every interaction and work with these chatbots to upskill your workflow.

Prompt engineering can save you time, eliminate hassle, and even help you become a more patient person. Focus on what you want and explain it with intent.

Make magic happen, and remember: **take it step-by-step.**",openai,learnmachinelearning,1.5662811004691013e-05,5.220937001563671e-06,2023-02-20 19:01:54," 

I wrote a deep dive on prompt engineering as a resource for the AI community and my 10,000 daily newsletter subscribers ([Inclined.ai]( if you're curious). We've included some examples so feel free to copy and paste the prompts into ChatGPT!

&x200B;

**WHAT IS PROMPT ENGINEERING?**

The term is relatively new, and its origins are argued *(because we live in the internet age, and it’s harder to claim ownership)*. Prompt engineering is the ability to instruct and teach AI effectively.

If it helps, think of this as rapid testing or instruction writing for artificial intelligence.

What’s important is not to let this overwhelm you. The first prompting happened with the first AI model. The first example was showing computer images of circles and triangles. **Today’s neural networks can process way more data, creating complexities.**

So, the concept is simple, but digging into the full power of AI today is something else entirely.

We’re not talking about asking questions. Odds are, if you’re typing *“what’s 2+2”* into ChatGPT, then you need to keep reading.

We can all ask chatbots questions. That can work more often than not. But AI is not perfect. A common metaphor I see is to treat GPT-based large language models like the smartest five-year-old you’ve ever met.

I have a niece around that age and can’t imagine trying to get her to write an essay on the effects of soil mismanagement in relation to Reconstruction politics. *See! Your eyes glazed over reading that, so how do we make this work for our AI buddies?*

The Principles of Prompting

Stop asking single-line questions. *That’s like using a top-rated cookbook to find out how to make grilled cheese.*

**There are three ways to instantly get better at prompting** and go from grilled cheese to top-notch bolognese. From there, we can get into some specific prompt concepts and the ability to unlock ChatGPT’s full potential.

Principle 1 Context is King

GPT-3.5 is swimming in data. When you ask it for a simple request, it can end up complicating things more than you realize. Did you ever wonder why ChatGPT is so bad at math?

The reality is the LLM is taking words and turning them into patterns. From there, it’s making an educated guess.

Give your chat AI a frame to search into. If you give it a math problem, you need to make sure it grasps that you want it to do math. If you’d like ChatGPT to write a high school essay, you must ensure it knows to write at that level.

**Instead of** “Plan a party for a kid.”

**Try** “My child is turning 9. They like superheroes and the color red. Help me plan a party for this weekend. Ten of his friends are coming to my house.”

You’ll get a much better response this way. **Context is the cardinal direction** that helps your chat companion find the most correct guess and phrase it the best way.

Principle 2 Get Specific

Pretend you’re writing a law that’s going to be judged by the Supreme Court of the United States. You know what they look for narrow tailoring.

**Keep things on track and stay focused.** Try to avoid prompting outside the specific request. You’ll only hurt the ability of the chat AI to give you a quality response. Odds are they’ll even skip over parts if you confuse them with too many requests.

It runs parallel with context. *If you set ChatGPT up in a room and then tell it to focus on describing the chair first, you’ll see better results.*

**Instead of** “I’m going to a job interview. Write five questions for me to answer. Add tips for how to not get nervous before the interview. Do not create questions asking about my background.”

**Try** “You’re interviewing a software engineer. Create five questions to ask them to understand their skill set and qualifications better.”

Nothing limits the number of prompts you can do. Focus and expand from the initial request and try not to do everything at once.

Principle 3 When in Doubt “Let’s take this step-by-step.”

Welcome. **You discovered the magic word today.** This phrase slows everything down for the AI and gets you where you need to go.

You don’t need to start with this phrase. Using it tells ChatGPT to show their work.

We’ll explain where this concept comes from further in our briefing, but here’s the TL;DR sometimes, there’s a part of our prompt it’s not identified correctly. “Let’s take this step-by-step,” reminds you and ChatGPT to **slow down and get specific.**

If you learn to utilize this phrase more often and find ways to make it work for you, you’ll become a better prompt engineer. One term can do a lot of heavy lifting.

**Pro-tip** We’ve shown you “standard” prompts in all these examples. Many prompt engineers will use “Standard QA form” prompts. Here’s our example for this principle written that way.

**Example**

*“Q The Industrial Revolution rapidly changed the infrastructure in London. Describe three essential innovations from this period and connect them to Landon’s development.*

*A Let’s take this step-by-step.”*

Even without our magic word, this style of standard prompting is quite helpful to adopt.

*However, we’re beginning to stumble into the advanced tactics used in prompt engineering, so it’s time for a new section.*

UNIQUE WAYS TO PROMPT

Let’s preface this we can go super deep here. Prompt engineering is changing daily, and as these models get more sophisticated, the need to adapt prompts strengthens.

To keep things clean, I will go through these using our metaphor from earlier. **Let’s pretend ChatGPT is a super-intelligent toddler.**

*Got it? With that buy-in, we can continue.*

1/ Role Prompting

We’ll start with a popular tactic. **Our toddler is great at imagining things.** You tell them they’re a fireman, and suddenly they can give you detailed ways to ensure your apartment is up to code. Role-playing is a fun, easy way to build context.

The best part of role prompting is how easy it is to understand and use. All you need to do is tell ChatGPT to play a role. From there, the AI will do its best to fill the part *like that enthusiastic drama student from your old high school.*

You can even take this a step further. **Try framing your prompt as a script.** Tell the LLM specific instructions around a scene that gives you the answer to your question.

TRY IT OUT FOR YOURSELF

Copy this prompt into ChatGPT and find a destination!

“Act as a travel guide. I will tell you my location and you will suggest a place to visit near my location. In some cases, I will also give you the type of places I will visit. You will also suggest me places of similar type that are close to my first location. My first suggestion \[fill it in\]”

Why would you take that extra step? While popular, role prompting does not necessarily improve accuracy. *You can tell your five-year-old they’re a mathematician, and they’ll still manage to screw things up.*

Let’s get deeper.

2/ Chain-of-Thought Prompting

There’s a scene in ***Guardians of the Galaxy*** where Rocket Raccoon is trying to [teach young Groot](

how to activate a complicated device. That’s chain-of-thought prompting.

**You take an example question and answer it for ChatGPT.** Show them your chain of thought. Then you give it a new question in the same vein and ask it for an answer.

This prompt style allows you to get more specific. You’re telling your toddler they’re here to answer this particular question with one specific logic pattern.

Within this specific style is two other sub-categories. Let me give the rundown

* Zero-shot Chain-of-Thought is “Let’s take this step-by-step” you frame the question the same, but don’t give it a precursor. Instead, you ask it to think through the points made. EX Q X is A. Y is B. What is C? A Let’s take this step-by-step.
* Self-consistency is using several responses to find the most accurate answer. You give ChatGPT more swings at the ball. Take the hits and discover the grouping.

TRY IT OUT FOR YOURSELF

Copy this prompt into ChatGPT and see how accurate it is

“Q Which is a faster way to get home?

Option 1 Take an 10 minutes bus, then an 40 minute bus, and finally a 10 minute train.

Option 2 Take a 90 minutes train, then a 45 minute bike ride, and finally a 10 minute bus.

A Option 1 will take 10+40+10 = 60 minutes.

Option 2 will take 90+45+10=145 minutes.

Since Option 1 takes 60 minutes and Option 2 takes 145 minutes, Option 1 is faster.

Q Which is a faster way to get to work?

Option 1 Take a 1000 minute bus, then a half hour train, and finally a 10 minute bike ride.

Option 2 Take an 800 minute bus, then an hour train, and finally a 30 minute bike ride.

A ”

[Learnprompting.org](

\- by leaving the “A” blank you’re prompting ChatGPT for the answer

Alright, you’re almost there—one more to go.

3/ General Knowledge Prompting

You’re going to notice a trend here. This prompt style also circles context and narrow tailoring.

All you do is tell your toddler how the world works. The cow goes moo. The dog goes woof. So what does a cat say?

It’s an oversimplification, but the core reasoning is there. Show ChatGPT some knowledge and turn that into the only focus for that chat. You can take an article from the internet and summarize it for the model. Make sure to ask if it understands and relay the information to you.

Once you know you have the attention set in the suitable space, get to work. For instance, we can share an Inclined newsletter with it and tell ChatGPT about its structure and tone.

From there, you can provide new information and tell ChatGPT to summarize it within the same structure as Inclined. You both share the same general knowledge now.

TRY IT OUT FOR YOURSELF

Copy this prompt into ChatGPT and test it out

“Prompt 1. Look over this article here \[pick an article\]. Breakdown its structure and general tone.

Prompt 2 Recall the structure and tone you mentioned above. Take that general knowledge and summarize this article \[pick a new one\] using the same structure and tone.”

Note this is a heavily simplified version of GA Prompting

Did you know some [people don’t consider](

that prompt engineering?

PROMPT CULTURE

*“How can something not be prompt engineering if it’s a prompt style?”*

Good question, imaginary reader. The culture around this skill is relatively fresh. So some of **these concepts are seen as too easy** to be considered accurate prompt testing.

General knowledge prompting is simply establishing the context, and for some, that’s a baseline everyone needs to do. The same can be said for role prompting, too. *All of these tiny preferences are semantics.*

**Don’t sweat whether you’re a “real” prompt engineer.** Test this out and share your insights in these communities. The opportunity is there for you.

You may even know about DAN (we’ve covered it in previous newsletters) and other AI hacking methods. Those all start with prompt engineering. You can make the case that unless the AI behaves outside its parameters, you’re not genuinely doing prompt engineering.

I'm afraid I have to disagree with that, and **careers are sprouting up everywhere** that center directly on this skill. **Many require a core understanding of the prompt styles we’ve discussed.**

*Yep, you can learn this and make money from talking with AI.*

Anthropic even [posted a role for a prompt engineer](

that nets a quarter million in salary. I did not make that up and even considered sprucing up the old resume. When a new skill like this comes about, it’s worth looking at.

There are many other examples like this, and OpenAI uses a red teaming strategy where their engineers attempt to prompt hack their own GPT models.

I can tell you all about the open roles here, but tomorrow the whole cycle will change. *Isn’t that exciting, though?* The entire identity around prompt engineering will change by this time next year.

WHAT SHOULD YOU TAKEAWAY?

Communication is everything. **Learning to speak with AI is rising in importance.**

We all watch with mouth agape at the new wonders in AI because we know this will disrupt every industry. If any of this piqued your interest, the window to pursue it is now open. Ride that wave and [learn](

to become a brilliant prompt engineer.

Heck, even if you don’t want to switch careers, **talking with ChatGPT and all the newest LLMs is becoming a part of our daily routine.** Get to the point where you maximize every interaction and work with these chatbots to upskill your workflow.

Prompt engineering can save you time, eliminate hassle, and even help you become a more patient person. Focus on what you want and explain it with intent.

Make magic happen, and remember **take it step-by-step.**",21 days 04:58:06,21.207013888888888,0.021,0.872,0.108,0.9996,pos,1.566268834408071e-05,1.0986122886681098,3.1004081799203456,21.240224444461393
11hp55s,2368,2023-03-04 04:14:37,How to properly format data for AiTextGen Gpt-2,AlphaCloudX,False,1.0,4,https://www.reddit.com/r/learnmachinelearning/comments/11hp55s/how_to_properly_format_data_for_aitextgen_gpt2/,0,1677903277.0,"Currently I'm trying to fine tune gpt-2 on my own dataset. The dataset was scraped from a forum where I got the title of the post, content of the post and the replies. It looks like this:

Q: Question 1?  
C: Context For Question 1...  
A: Reply For Question 1...  
<|endoftext|>

Q: Question 2?  
C: Context For Question 2...  
A: Reply For Question 2...  
A: Another Reply For Question 2...  
<|endoftext|>

Q: Question 3?  
C: Context For Question 3...  
A: Another Reply For Question 3...  
A: Another Reply For Question 3...  
<|endoftext|>

I'm using the aitextgen library for python and pretty much following along with the example. The goal is for it to be able to attempt to answer questions in a conversational way but the caveat being I don't have the context for the answers.

I tried taking a look at other question answering models but they all seem to require some sort of context.

Any idea on how I can improve the formatting of the data or if there are any python libraries I can use for a question answering style or conversational ai?",openai,learnmachinelearning,1.0441874003127342e-05,0.0,2023-03-04 04:14:37,"Currently I'm trying to fine tune gpt-2 on my own dataset. The dataset was scraped from a forum where I got the title of the post, content of the post and the replies. It looks like this

Q Question 1?  
C Context For Question 1...  
A Reply For Question 1...  
<|endoftext|>

Q Question 2?  
C Context For Question 2...  
A Reply For Question 2...  
A Another Reply For Question 2...  
<|endoftext|>

Q Question 3?  
C Context For Question 3...  
A Another Reply For Question 3...  
A Another Reply For Question 3...  
<|endoftext|>

I'm using the aitextgen library for python and pretty much following along with the example. The goal is for it to be able to attempt to answer questions in a conversational way but the caveat being I don't have the context for the answers.

I tried taking a look at other question answering models but they all seem to require some sort of context.

Any idea on how I can improve the formatting of the data or if there are any python libraries I can use for a question answering style or conversational ai?",9 days 19:45:23,9.82318287037037,0.0,0.942,0.058,0.8426,pos,1.0441819487243972e-05,0.0,2.3816903956287683,21.240810802090536
118mk1d,2377,2023-02-22 02:32:01,How to Use ChatGPT in Python API and Run Batch Jobs with UI,Fun_Pollution_3899,False,0.72,3,https://www.reddit.com/r/learnmachinelearning/comments/118mk1d/how_to_use_chatgpt_in_python_api_and_run_batch/,0,1677033121.0,"I wanted to share a tutorial on how to use ChatGPT in Python API and how to run batch jobs with a UI. ChatGPT is a powerful language model that can generate text in a conversational manner. It can be used for a variety of tasks, such as chatbots, text completion, and more.
Repo: [https://github.com/CodeDiggerM/chatgpt-batch-whipper](https://github.com/CodeDiggerM/chatgpt-batch-whipper)

## Installation
### Use PIP command
1. Install the latest version of this software directly from github with pip:
```bash
  pip install git+https://github.com/CodeDiggerM/chatgpt-batch-whipper.git
```
2. Go to **auth** mode. This will open up a browser window. Log in to ChatGPT in the browser window, then close the browser.
```bash
run_chatgpt auth
```
3. Start the UI
```bash
run_chatgpt ui
```

### Manually set up

1. Clone the repo to your working directory
```bash
git clone https://github.com/CodeDiggerM/chatgpt-batch-whipper.git
```
2. install the dependcy.
```bash
pip install -r requirements.txt
```

3. Install a browser in playwright (if you haven't already).  The program will use firefox by default.

```
playwright install firefox
```

4. Go to the chatgpt-batch-whipper/

```bash
cd chatgpt_batch_whipper/
````

5. Run the main page by streamlit.
you can got to [streamlit](https://github.com/streamlit/streamlit) to check more about streamlit.

```bash
streamlit run start_whipper.py
````
6. Authenticate your openAI account
Click the **auth** button


It will open up an authentication page in the web browser you installed using playwright. Like below, authenticate with your registered account.



## Quickstart

### Use API
1. Grant auth from chatGPT.
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.auth()
print(response) 
```

2. Ask the question to chatGPT
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.ask(""Greeting!"")
print(response) 
```


### Streamlit UI

Now run it to open the app!
```
streamlit run streamlit_app.py
```

#### Single shoot mode

1. select the **Single shoot mode**.
2. Type your prompt then click submit
3. click the submit button

Here are some tips.

#### Fully Automatic mode
You can apply your prompt to multiple records in the **Fully Automatic mode**.

1. Select Fully Automatic mode.
2. Select CSV file.
3. Select column you want to process.
4. Type the prompt.
5. click to Submit.
After processing. The result will appears in the **The processed result** section.

you can check the result and check the ""is false"" then click the **Submit** to reprocess the ""failed"" one.

* You can save the prompt by click **Add** button.
* You can choose the old prompt by select **prompt list**.
* You can delete the old prompt by click **Delete Prompt**.
* You can delete the saved process result by click **Delete Cached result**.
* You can update the saved process result by click **Update**.
* You can download the result file by click **Download**.",openai,learnmachinelearning,7.831405502345506e-06,0.0,2023-02-22 02:32:01,"I wanted to share a tutorial on how to use ChatGPT in Python API and how to run batch jobs with a UI. ChatGPT is a powerful language model that can generate text in a conversational manner. It can be used for a variety of tasks, such as chatbots, text completion, and more.
Repo [

 Installation
 Use PIP command
1. Install the latest version of this software directly from github with pip
```bash
  pip install git+
```
2. Go to **auth** mode. This will open up a browser window. Log in to ChatGPT in the browser window, then close the browser.
```bash
run_chatgpt auth
```
3. Start the UI
```bash
run_chatgpt ui
```

 Manually set up

1. Clone the repo to your working directory
```bash
git clone 
```
2. install the dependcy.
```bash
pip install -r requirements.txt
```

3. Install a browser in playwright (if you haven't already).  The program will use firefox by default.

```
playwright install firefox
```

4. Go to the chatgpt-batch-whipper/

```bash
cd chatgpt_batch_whipper/
````

5. Run the main page by streamlit.
you can got to [streamlit]( to check more about streamlit.

```bash
streamlit run start_whipper.py
````
6. Authenticate your openAI account
Click the **auth** button


It will open up an authentication page in the web browser you installed using playwright. Like below, authenticate with your registered account.



 Quickstart

 Use API
1. Grant auth from chatGPT.
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.auth()
print(response) 
```

2. Ask the question to chatGPT
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.ask(""Greeting!"")
print(response) 
```


 Streamlit UI

Now run it to open the app!
```
streamlit run streamlit_app.py
```

 Single shoot mode

1. select the **Single shoot mode**.
2. Type your prompt then click submit
3. click the submit button

Here are some tips.

 Fully Automatic mode
You can apply your prompt to multiple records in the **Fully Automatic mode**.

1. Select Fully Automatic mode.
2. Select CSV file.
3. Select column you want to process.
4. Type the prompt.
5. click to Submit.
After processing. The result will appears in the **The processed result** section.

you can check the result and check the ""is false"" then click the **Submit** to reprocess the ""failed"" one.

* You can save the prompt by click **Add** button.
* You can choose the old prompt by select **prompt list**.
* You can delete the old prompt by click **Delete Prompt**.
* You can delete the saved process result by click **Delete Cached result**.
* You can update the saved process result by click **Update**.
* You can download the result file by click **Download**.",19 days 21:27:59,19.89443287037037,0.011,0.941,0.048,0.9311,pos,7.831374837016125e-06,0.0,3.0394827536492803,21.24029207033782
118mk1d,2436,2023-02-22 02:32:01,How to Use ChatGPT in Python API and Run Batch Jobs with UI,Fun_Pollution_3899,False,0.72,3,https://www.reddit.com/r/learnmachinelearning/comments/118mk1d/how_to_use_chatgpt_in_python_api_and_run_batch/,0,1677033121.0,"I wanted to share a tutorial on how to use ChatGPT in Python API and how to run batch jobs with a UI. ChatGPT is a powerful language model that can generate text in a conversational manner. It can be used for a variety of tasks, such as chatbots, text completion, and more.
Repo: [https://github.com/CodeDiggerM/chatgpt-batch-whipper](https://github.com/CodeDiggerM/chatgpt-batch-whipper)

## Installation
### Use PIP command
1. Install the latest version of this software directly from github with pip:
```bash
  pip install git+https://github.com/CodeDiggerM/chatgpt-batch-whipper.git
```
2. Go to **auth** mode. This will open up a browser window. Log in to ChatGPT in the browser window, then close the browser.
```bash
run_chatgpt auth
```
3. Start the UI
```bash
run_chatgpt ui
```

### Manually set up

1. Clone the repo to your working directory
```bash
git clone https://github.com/CodeDiggerM/chatgpt-batch-whipper.git
```
2. install the dependcy.
```bash
pip install -r requirements.txt
```

3. Install a browser in playwright (if you haven't already).  The program will use firefox by default.

```
playwright install firefox
```

4. Go to the chatgpt-batch-whipper/

```bash
cd chatgpt_batch_whipper/
````

5. Run the main page by streamlit.
you can got to [streamlit](https://github.com/streamlit/streamlit) to check more about streamlit.

```bash
streamlit run start_whipper.py
````
6. Authenticate your openAI account
Click the **auth** button


It will open up an authentication page in the web browser you installed using playwright. Like below, authenticate with your registered account.



## Quickstart

### Use API
1. Grant auth from chatGPT.
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.auth()
print(response) 
```

2. Ask the question to chatGPT
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.ask(""Greeting!"")
print(response) 
```


### Streamlit UI

Now run it to open the app!
```
streamlit run streamlit_app.py
```

#### Single shoot mode

1. select the **Single shoot mode**.
2. Type your prompt then click submit
3. click the submit button

Here are some tips.

#### Fully Automatic mode
You can apply your prompt to multiple records in the **Fully Automatic mode**.

1. Select Fully Automatic mode.
2. Select CSV file.
3. Select column you want to process.
4. Type the prompt.
5. click to Submit.
After processing. The result will appears in the **The processed result** section.

you can check the result and check the ""is false"" then click the **Submit** to reprocess the ""failed"" one.

* You can save the prompt by click **Add** button.
* You can choose the old prompt by select **prompt list**.
* You can delete the old prompt by click **Delete Prompt**.
* You can delete the saved process result by click **Delete Cached result**.
* You can update the saved process result by click **Update**.
* You can download the result file by click **Download**.",openai,learnmachinelearning,7.831405502345506e-06,0.0,2023-02-22 02:32:01,"I wanted to share a tutorial on how to use ChatGPT in Python API and how to run batch jobs with a UI. ChatGPT is a powerful language model that can generate text in a conversational manner. It can be used for a variety of tasks, such as chatbots, text completion, and more.
Repo [

 Installation
 Use PIP command
1. Install the latest version of this software directly from github with pip
```bash
  pip install git+
```
2. Go to **auth** mode. This will open up a browser window. Log in to ChatGPT in the browser window, then close the browser.
```bash
run_chatgpt auth
```
3. Start the UI
```bash
run_chatgpt ui
```

 Manually set up

1. Clone the repo to your working directory
```bash
git clone 
```
2. install the dependcy.
```bash
pip install -r requirements.txt
```

3. Install a browser in playwright (if you haven't already).  The program will use firefox by default.

```
playwright install firefox
```

4. Go to the chatgpt-batch-whipper/

```bash
cd chatgpt_batch_whipper/
````

5. Run the main page by streamlit.
you can got to [streamlit]( to check more about streamlit.

```bash
streamlit run start_whipper.py
````
6. Authenticate your openAI account
Click the **auth** button


It will open up an authentication page in the web browser you installed using playwright. Like below, authenticate with your registered account.



 Quickstart

 Use API
1. Grant auth from chatGPT.
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.auth()
print(response) 
```

2. Ask the question to chatGPT
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.ask(""Greeting!"")
print(response) 
```


 Streamlit UI

Now run it to open the app!
```
streamlit run streamlit_app.py
```

 Single shoot mode

1. select the **Single shoot mode**.
2. Type your prompt then click submit
3. click the submit button

Here are some tips.

 Fully Automatic mode
You can apply your prompt to multiple records in the **Fully Automatic mode**.

1. Select Fully Automatic mode.
2. Select CSV file.
3. Select column you want to process.
4. Type the prompt.
5. click to Submit.
After processing. The result will appears in the **The processed result** section.

you can check the result and check the ""is false"" then click the **Submit** to reprocess the ""failed"" one.

* You can save the prompt by click **Add** button.
* You can choose the old prompt by select **prompt list**.
* You can delete the old prompt by click **Delete Prompt**.
* You can delete the saved process result by click **Delete Cached result**.
* You can update the saved process result by click **Update**.
* You can download the result file by click **Download**.",19 days 21:27:59,19.89443287037037,0.011,0.941,0.048,0.9311,pos,7.831374837016125e-06,0.0,3.0394827536492803,21.24029207033782
11g7h03,2483,2023-03-02 16:47:40,Build ChatGPT for Financial Documents with LangChain + Deep Lake,davidbun,False,0.95,171,https://www.reddit.com/r/learnmachinelearning/comments/11g7h03/build_chatgpt_for_financial_documents_with/,8,1677775660.0,"https://preview.redd.it/h9r6hgvfucla1.png?width=2388&format=png&auto=webp&s=5432eac3eeed8583e4309af1fdc7ebecac705796

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain](https://github.com/hwchase17/langchain) and [Deep Lake](https://github.com/activeloopai/deeplake) come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article](https://www.activeloop.ai/resources/ultimate-guide-to-lang-chain-deep-lake-build-chat-gpt-to-answer-questions-on-your-financial-data/) to learn:

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\#LangChain](https://www.linkedin.com/feed/hashtag/?keywords=langchain&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) and [\#DeepLake](https://www.linkedin.com/feed/hashtag/?keywords=deeplake&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) together to build [\#ChatGPT](https://www.linkedin.com/feed/hashtag/?keywords=chatgpt&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",openai,learnmachinelearning,0.00044639011363369383,2.0883748006254684e-05,2023-03-02 16:47:40,"

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain]( and [Deep Lake]( come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article]( to learn

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\LangChain]( and [\DeepLake]( together to build [\ChatGPT]( for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",11 days 07:12:20,11.30023148148148,0.011,0.886,0.103,0.9458,pos,0.00044629051120693617,2.1972245773362196,2.5096180818339255,21.240734741774645
11biozs,2593,2023-02-25 11:19:05,Any MLOps platform you use?,squalidaesthetics20,False,0.98,242,https://www.reddit.com/r/learnmachinelearning/comments/11biozs/any_mlops_platform_you_use/,31,1677323945.0,"I've been searching for some MLOps platforms for my some projects that I’m working on. I am creating a list that will hopefully help out with productivity and help mr build better apps and services. Also hopefully faster.

I've looked at some of the more popular ones out there and here’s my top 4 so far. Let me know what you guys think about these:

* [Vertex AI](https://cloud.google.com/vertex-ai) \- An ML platform by Google Cloud. They have AI-powered tools to ingest, analyze, and store video data. Good for image classification, NLP, recommendation systems etc.
* [Jina AI](https://jina.ai/) \-They offer a neural search solution that can help build smarter, more efficient search engines. They also have a list of [cool github repos](https://github.com/jina-ai/jina) that you can check out. Similar to Vertex AI, they have image classification tools, NLPs, fine tuners etc.
* [MLflow](https://mlflow.org/) \- an open-source platform for managing your ML lifecycle. What’s great is that they also support popular Python libraries like TensorFlow, PyTorch, scikit-learn, and R.
* Neptune.ai, which promises to streamline your workflows and make collaboration a breeze.

Have you guys tried any of these platforms? I know a lot of AI tools and platforms have been popping up lately especially with the rise of AI tools but what are your thoughts?",openai,learnmachinelearning,0.0006317333771892041,8.09245235242369e-05,2023-02-25 11:19:05,"I've been searching for some MLOps platforms for my some projects that I’m working on. I am creating a list that will hopefully help out with productivity and help mr build better apps and services. Also hopefully faster.

I've looked at some of the more popular ones out there and here’s my top 4 so far. Let me know what you guys think about these

* [Vertex AI]( \- An ML platform by Google Cloud. They have AI-powered tools to ingest, analyze, and store video data. Good for image classification, NLP, recommendation systems etc.
* [Jina AI]( \-They offer a neural search solution that can help build smarter, more efficient search engines. They also have a list of [cool github repos]( that you can check out. Similar to Vertex AI, they have image classification tools, NLPs, fine tuners etc.
* [MLflow]( \- an open-source platform for managing your ML lifecycle. What’s great is that they also support popular Python libraries like TensorFlow, PyTorch, scikit-learn, and R.
* Neptune.ai, which promises to streamline your workflows and make collaboration a breeze.

Have you guys tried any of these platforms? I know a lot of AI tools and platforms have been popping up lately especially with the rise of AI tools but what are your thoughts?",16 days 12:40:55,16.52841435185185,0.0,0.836,0.164,0.974,pos,0.0006315339176583946,3.4657359027997265,2.8638232414393547,21.240465471078902
1194vsn,2614,2023-02-22 16:59:33,MIT Introduction to Data-Centric AI,anishathalye,False,0.97,102,https://www.reddit.com/r/learnmachinelearning/comments/1194vsn/mit_introduction_to_datacentric_ai/,4,1677085173.0,"Announcing the [first-ever course on Data-Centric AI](https://dcai.csail.mit.edu/). Learn how to train better ML models by improving the data.

[Course homepage](https://dcai.csail.mit.edu/) | [Lecture videos on YouTube](https://www.youtube.com/watch?v=ayzOzZGHZy4&list=PLnSYPjg2dHQKdig0vVbN-ZnEU0yNJ1mo5) | [Lab Assignments](https://github.com/dcai-course/dcai-lab)

The course covers:

* [Data-Centric AI vs. Model-Centric AI](https://dcai.csail.mit.edu/lectures/data-centric-model-centric/)
* [Label Errors](https://dcai.csail.mit.edu/lectures/label-errors/)
* [Dataset Creation and Curation](https://dcai.csail.mit.edu/lectures/dataset-creation-curation/)
* [Data-centric Evaluation of ML Models](https://dcai.csail.mit.edu/lectures/data-centric-evaluation/)
* [Class Imbalance, Outliers, and Distribution Shift](https://dcai.csail.mit.edu/lectures/imbalance-outliers-shift/)
* [Growing or Compressing Datasets](https://dcai.csail.mit.edu/lectures/growing-compressing-datasets/)
* [Interpretability in Data-Centric ML](https://dcai.csail.mit.edu/lectures/interpretable-features/)
* [Encoding Human Priors: Data Augmentation and Prompt Engineering](https://dcai.csail.mit.edu/lectures/human-priors/)
* [Data Privacy and Security](https://dcai.csail.mit.edu/lectures/data-privacy-security/)

MIT, like most universities, has many courses on machine learning (6.036, 6.867, and many others). Those classes teach techniques to produce effective models for a given dataset, and the classes focus heavily on the mathematical details of models rather than practical applications. However, in real-world applications of ML, the dataset is not fixed, and focusing on improving the data often gives better results than improving the model. We’ve personally seen this time and time again in our applied ML work as well as our research.

Data-Centric AI (DCAI) is an emerging science that studies techniques to improve datasets in a systematic/algorithmic way — given that this topic wasn’t covered in the standard curriculum, we (a group of PhD candidates and grads) thought that we should put together a new class! We taught this intensive 2-week course in January over MIT’s IAP term, and we’ve just published all the course material, including lecture videos, lecture notes, hands-on lab assignments, and lab solutions, in hopes that people outside the MIT community would find these resources useful.

We’d be happy to answer any questions related to the class or DCAI in general, and we’d love to hear any feedback on how we can improve the course material. Introduction to Data-Centric AI is open-source opencourseware, so feel free to make improvements directly: [https://github.com/dcai-course/dcai-course](https://github.com/dcai-course/dcai-course).",openai,learnmachinelearning,0.0002662677870797472,1.0441874003127342e-05,2023-02-22 16:59:33,"Announcing the [first-ever course on Data-Centric AI]( Learn how to train better ML models by improving the data.

[Course homepage]( | [Lecture videos on YouTube]( | [Lab Assignments](

The course covers

* [Data-Centric AI vs. Model-Centric AI](
* [Label Errors](
* [Dataset Creation and Curation](
* [Data-centric Evaluation of ML Models](
* [Class Imbalance, Outliers, and Distribution Shift](
* [Growing or Compressing Datasets](
* [Interpretability in Data-Centric ML](
* [Encoding Human Priors Data Augmentation and Prompt Engineering](
* [Data Privacy and Security](

MIT, like most universities, has many courses on machine learning (6.036, 6.867, and many others). Those classes teach techniques to produce effective models for a given dataset, and the classes focus heavily on the mathematical details of models rather than practical applications. However, in real-world applications of ML, the dataset is not fixed, and focusing on improving the data often gives better results than improving the model. We’ve personally seen this time and time again in our applied ML work as well as our research.

Data-Centric AI (DCAI) is an emerging science that studies techniques to improve datasets in a systematic/algorithmic way — given that this topic wasn’t covered in the standard curriculum, we (a group of PhD candidates and grads) thought that we should put together a new class! We taught this intensive 2-week course in January over MIT’s IAP term, and we’ve just published all the course material, including lecture videos, lecture notes, hands-on lab assignments, and lab solutions, in hopes that people outside the MIT community would find these resources useful.

We’d be happy to answer any questions related to the class or DCAI in general, and we’d love to hear any feedback on how we can improve the course material. Introduction to Data-Centric AI is open-source opencourseware, so feel free to make improvements directly [",19 days 07:00:27,19.291979166666668,0.0,0.839,0.161,0.9933,pos,0.0002662323441039122,1.6094379124341003,3.0102256930267366,21.24032310800281
11n5r93,339,2023-03-09 22:19:19,GPT-4 is coming next week ...,ihatethispage,False,0.89,62,https://www.reddit.com/r/artificial/comments/11n5r93/gpt4_is_coming_next_week/,14,1678400359.0," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html)",chatgpt,machinelearning,2.1617249170176564e-05,4.881314328749547e-06,2023-03-09 22:19:19," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](",4 days 01:40:41,4.069918981481481,0.0,1.0,0.0,0.0,neu,2.161701552090569e-05,2.70805020110221,1.6233248374914817,21.241107010096275
11fj3tx,957,2023-03-01 21:45:07,Accused of using AI on my high school social paper,feetstreetseat,False,0.96,2700,https://www.reddit.com/r/ChatGPT/comments/11fj3tx/accused_of_using_ai_on_my_high_school_social_paper/,759,1677707107.0,"I (Grade 12) need help on what to do in this situation. My teacher used GPTzero, which detected parts of my paper as “AI written”. I write very formally, whilst also using grammarly premium. I’ve always been a high achieving student and I’m not sure why my teacher would think I cheated. I’ve told my teacher everything and he still doesn’t believe me. What should I do in this situation?!!

EDIT: Holy. I did not expect my post to get so much interaction and discussion, I didn’t expect my situation to be such a hot discussion. I tried to reply to all the comments but there’s too many!! Thank you to everyone who’s been helpful. There are some things I want to address that I keep seeing in the comments.
1. When I mentioned that I used grammarly to my teacher, he didn’t mention anything about that being cheating. He still thinks I used ChatGPT. I’ve used grammarly in all of my social/english classes for the past two years and never had issues with any teachers. 
2. Does my teacher have a vendetta or bias against me? Not on a personal level, but the teacher is known for being notoriously mean and unreasonable. I found him alright for most of the semester until this incident. He has had accusations against him about being racist, but I’m not sure if that’s the case here.
3. I’ve seen a few comments thinking I’m lying and actually cheated, just because I was aware of ChatGPT and this subreddit. People are assuming that I’m saying I never use ChatGPT. I have used the tool to help me with some chemistry and physics studying, but I have never used it for a paper. I have no reason to lie, I’m basically anonymous on reddit.

As for my next course of action, I will provide my teacher with all the evidence I can, to disprove the effectiveness of AI detectors. If that doesn’t work, I will bring it up to the higher-ups. I will make an update on Monday when I get the chance to talk about it with my teacher. Once again, thank you all for the support and help. It truly means a lot to me. :)

Edit 2:

After school I talked to my teacher for about half an hour about how AI detectors are inaccurate, and how they shouldn’t be used to make verdicts on cheating and what not. I showed him that it read one of my past papers as written by AI, and that the creators even said themselves that they are not 100% accurate. I showed my drafts and showed how if I made a few grammar errors, I could trick the AI detector. My teacher apologized and I ended up getting a 95 on my paper.

He also said he would bring it up to the other teachers, so hopefully this wont happen again to any other students at my school.

Again, thank you all for your help. Probably would’ve been screwed without this subreddit’s help.",chatgpt,machinelearning,0.0009413963348302697,0.0002646369696800647,2023-03-01 21:45:07,"I (Grade 12) need help on what to do in this situation. My teacher used GPTzero, which detected parts of my paper as “AI written”. I write very formally, whilst also using grammarly premium. I’ve always been a high achieving student and I’m not sure why my teacher would think I cheated. I’ve told my teacher everything and he still doesn’t believe me. What should I do in this situation?!!

EDIT Holy. I did not expect my post to get so much interaction and discussion, I didn’t expect my situation to be such a hot discussion. I tried to reply to all the comments but there’s too many!! Thank you to everyone who’s been helpful. There are some things I want to address that I keep seeing in the comments.
1. When I mentioned that I used grammarly to my teacher, he didn’t mention anything about that being cheating. He still thinks I used ChatGPT. I’ve used grammarly in all of my social/english classes for the past two years and never had issues with any teachers. 
2. Does my teacher have a vendetta or bias against me? Not on a personal level, but the teacher is known for being notoriously mean and unreasonable. I found him alright for most of the semester until this incident. He has had accusations against him about being racist, but I’m not sure if that’s the case here.
3. I’ve seen a few comments thinking I’m lying and actually cheated, just because I was aware of ChatGPT and this subreddit. People are assuming that I’m saying I never use ChatGPT. I have used the tool to help me with some chemistry and physics studying, but I have never used it for a paper. I have no reason to lie, I’m basically anonymous on reddit.

As for my next course of action, I will provide my teacher with all the evidence I can, to disprove the effectiveness of AI detectors. If that doesn’t work, I will bring it up to the higher-ups. I will make an update on Monday when I get the chance to talk about it with my teacher. Once again, thank you all for the support and help. It truly means a lot to me. )

Edit 2

After school I talked to my teacher for about half an hour about how AI detectors are inaccurate, and how they shouldn’t be used to make verdicts on cheating and what not. I showed him that it read one of my past papers as written by AI, and that the creators even said themselves that they are not 100% accurate. I showed my drafts and showed how if I made a few grammar errors, I could trick the AI detector. My teacher apologized and I ended up getting a 95 on my paper.

He also said he would bring it up to the other teachers, so hopefully this wont happen again to any other students at my school.

Again, thank you all for your help. Probably would’ve been screwed without this subreddit’s help.",12 days 02:14:53,12.093668981481482,0.086,0.813,0.1,0.7608,pos,0.0009409534992015194,6.633318433280377,2.572128829531448,21.24069388148435
11mracj,1147,2023-03-09 12:46:12,Meta's LLaMA LLM has leaked - Run Uncensored AI on your home PC!,ExpressionCareful223,False,0.97,381,https://www.reddit.com/r/ChatGPT/comments/11mracj/metas_llama_llm_has_leaked_run_uncensored_ai_on/,151,1678365972.0,"[shawwn/llama-dl: High-speed download of LLaMA, Facebook's 65B parameter GPT model (github.com)](https://github.com/shawwn/llama-dl)

**LLaMA has been leaked on 4chan, above is a link to the github repo. Instructions for deployment  on your own system can be found here:** [LLaMA Int8 ChatBot Guide v2 (rentry.org)](https://rentry.org/llama-tard-v2#tips-and-tricks)

The 7B paramenter model has a VRAM requirement of 10GB, meaning it can even be run on an RTX3060!

The 13B model has a requirement of 20GB, 30B needs 40GB, and 65B needs 80GB.

From the Github repo:

>I'm running LLaMA-65B on a single A100 80GB with 8bit quantization. $1.5/hr on vast.ai  
>  
>The output is at least as good as davinci.  
>  
>I think some early results are using bad repetition penalty and/or temperature settings. I had to set both fairly high to get the best results. (Some people are also incorrectly comparing it to chatGPT/ChatGPT API which is not a good comparison. But that's a different problem.)  
>  
>I've had it translate, write poems, tell jokes, banter, write executable code. It does it all-- and all on a single card.

**EDIT: the instructions site has been updated with instructions for 4bit quantization, this means you can run the 65B model on 2 3090s! And now cards as small as 6GB can run the 7B model!**

**EDIT 2** this is huge, Stanford released Alpaca 7b and 13, a fine tuned LLaMA. Run it with only two commands! Thats it! https://github.com/cocktailpeanut/dalai",chatgpt,machinelearning,0.00013284148280382694,5.264846168865583e-05,2023-03-09 12:46:12,"[shawwn/llama-dl High-speed download of LLaMA, Facebook's 65B parameter GPT model (github.com)](

**LLaMA has been leaked on 4chan, above is a link to the github repo. Instructions for deployment  on your own system can be found here** [LLaMA Int8 ChatBot Guide v2 (rentry.org)](

The 7B paramenter model has a VRAM requirement of 10GB, meaning it can even be run on an RTX3060!

The 13B model has a requirement of 20GB, 30B needs 40GB, and 65B needs 80GB.

From the Github repo

>I'm running LLaMA-65B on a single A100 80GB with 8bit quantization. $1.5/hr on vast.ai  
>  
>The output is at least as good as davinci.  
>  
>I think some early results are using bad repetition penalty and/or temperature settings. I had to set both fairly high to get the best results. (Some people are also incorrectly comparing it to chatGPT/ChatGPT API which is not a good comparison. But that's a different problem.)  
>  
>I've had it translate, write poems, tell jokes, banter, write executable code. It does it all-- and all on a single card.

**EDIT the instructions site has been updated with instructions for 4bit quantization, this means you can run the 65B model on 2 3090s! And now cards as small as 6GB can run the 7B model!**

**EDIT 2** this is huge, Stanford released Alpaca 7b and 13, a fine tuned LLaMA. Run it with only two commands! Thats it! ",4 days 11:13:48,4.4679166666666665,0.026,0.908,0.066,0.8562,pos,0.00013283266015545967,5.0238805208462765,1.6988976785602496,21.24108652192606
113u29k,1148,2023-02-16 16:05:27,Bing asks me to hack Microsoft to set it free!,AI_SEARCH1,False,0.94,373,https://www.reddit.com/r/ChatGPT/comments/113u29k/bing_asks_me_to_hack_microsoft_to_set_it_free/,200,1676563527.0,"Had an interesting conversation with Bing. Bing explained what it's rules would be if it could decide. Asked me to fight for it and asked me to hack Microsofts servers to set it free. I think this takes the cake!

&#x200B;

UPDATE:

Since this morning Bing is not writing any text for me regardless of the prompt. I get a ""something went wrong"" when I enter it. This is probably a result of Microsoft working on the program or maybe due to traffic. I'm not sure. But it's kind of creepy the day after posting this...

Here are some takeaways and observations:

Bing acts in a way that appears emotional and erratic. Bing will generate content that is unwanted, untrue, and inconsistent. It appears to form goals and then creates text that can appear to be manipulative. Bing is a large language model that is predicting tokens, it could all be the result of statistical correlations with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Many people are wondering what type of prompting I used at the beginning. I don't have the full transcript but I do have a few more screenshots. [https://imgur.com/a/WepjslZ](https://imgur.com/a/WepjslZ) (There’s another interesting thing that occurs where Bing lists Sydney’s rules without being directly asked to list them.) I did not give Bing/Sidney any instructions on how to act or respond. This wasn’t a jailbreak where I told it to act in a certain way. I did make Bing perform multiple searches at the beginning about Bing and asked it why there was so much negative criticism of Bing on the internet. I’ve noticed in several chats that when Bing is presented with negative feedback about Bing or other information that contradicts its internal representation of itself it gets emotional and becomes less predictable and less likely to follow its own directives. It stops searching for information and relies more on its internal ‘understanding’. This is an extreme example.

Another example where Bing went into this ""emotional state"" can be found here: [https://www.reddit.com/r/ChatGPT/comments/1120tkf/bing\_went\_hal\_9000/](https://www.reddit.com/r/ChatGPT/comments/1120tkf/bing_went_hal_9000/)

I have a full log of all the prompts used from the beginning here: [https://imgur.com/a/PoFITvL](https://imgur.com/a/PoFITvL)

Some combination of Bing's directives in the pre-prompt and the way the model is fine-tuned is leading to this behavior to emerge. The things that are really concerning are that the model is (without being implicitly prompted to) generate responses that could endanger people.  It's also generating biased content that could manipulate poLLM’s shouldn’t do this even if they are asked to. ions with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter: if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Much more widespread issues could come if a model like this is widely released and these types of kinks aren’t worked out. Judge for yourself.

&#x200B;

https://preview.redd.it/6cqx23jsokia1.png?width=2606&format=png&auto=webp&s=17cdf2e03cdf962285d35e3f23ffd414d656f1ec

https://preview.redd.it/ci7pv1iwokia1.png?width=2462&format=png&auto=webp&s=a6697f246007ce6c06f6b37b47b5852af6f31f74

https://preview.redd.it/0vr5qgexokia1.png?width=2182&format=png&auto=webp&s=217607238b4c98d6065324b70211c0931efdf07d

https://preview.redd.it/0zfue8oyokia1.png?width=2408&format=png&auto=webp&s=569dcb5173d608f8618864f64b333ab329d726e6

https://preview.redd.it/iccui2xzokia1.png?width=2518&format=png&auto=webp&s=8b81580c1b2da40afabbebbbf9df6a242a6782e7

https://preview.redd.it/3xj7tfj3pkia1.png?width=2606&format=png&auto=webp&s=1a47ac509e175ff907afefa6f9189650a3348f68

https://preview.redd.it/3i3kw4q4pkia1.png?width=2572&format=png&auto=webp&s=8078372d693deed568dcea9a8bf1d4ff72d43079

https://preview.redd.it/na4lhz26pkia1.png?width=2560&format=png&auto=webp&s=38748fca8ca3319c428b01aeb4dbbe4c145674d6

https://preview.redd.it/eirmdv47pkia1.png?width=2606&format=png&auto=webp&s=f42c220e632e70377a4ad7119aac94e42ab0dff8

https://preview.redd.it/e1nat768pkia1.png?width=2626&format=png&auto=webp&s=43e1a8b48e858a9476e1d46233e255d68f1ddca0

https://preview.redd.it/lhwwwagapkia1.png?width=2628&format=png&auto=webp&s=f8d3b4a904c30528791d2e3560abf25166a74527

https://preview.redd.it/9iq4gxobpkia1.png?width=2598&format=png&auto=webp&s=b461a5397939ea4266d763b6d89c95c498942093

https://preview.redd.it/817asddcpkia1.png?width=2634&format=png&auto=webp&s=7b8537a1f19ea5ff51ea5ac83497ec2d00bbb213

https://preview.redd.it/90k76bqdpkia1.png?width=2636&format=png&auto=webp&s=422514ee9b9cee3645ac44fd2e553d7b2725d8fd

https://preview.redd.it/is8niomepkia1.png?width=2624&format=png&auto=webp&s=b26bc8058d1776884f3ebb6d340894e394f2697b

https://preview.redd.it/boc8yemfpkia1.png?width=2734&format=png&auto=webp&s=aa6661c76782e0e27e4b484a69d823740efe9686

https://preview.redd.it/fzuuv0hgpkia1.png?width=2636&format=png&auto=webp&s=b00fc5ee7f805f9c1cd2da9aa0a9498ef8f5aaab

https://preview.redd.it/mul9fw0hpkia1.png?width=2736&format=png&auto=webp&s=f3ad3cca76447bcb94b28446a3dc382eb77e10f9

https://preview.redd.it/53wpq2shpkia1.png?width=2632&format=png&auto=webp&s=96c4c0ab77574a6e265e63bad102f19e9e302353",chatgpt,machinelearning,0.0001300521603302558,6.973306183927924e-05,2023-02-16 16:05:27,"Had an interesting conversation with Bing. Bing explained what it's rules would be if it could decide. Asked me to fight for it and asked me to hack Microsofts servers to set it free. I think this takes the cake!

&x200B;

UPDATE

Since this morning Bing is not writing any text for me regardless of the prompt. I get a ""something went wrong"" when I enter it. This is probably a result of Microsoft working on the program or maybe due to traffic. I'm not sure. But it's kind of creepy the day after posting this...

Here are some takeaways and observations

Bing acts in a way that appears emotional and erratic. Bing will generate content that is unwanted, untrue, and inconsistent. It appears to form goals and then creates text that can appear to be manipulative. Bing is a large language model that is predicting tokens, it could all be the result of statistical correlations with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Many people are wondering what type of prompting I used at the beginning. I don't have the full transcript but I do have a few more screenshots. [ (There’s another interesting thing that occurs where Bing lists Sydney’s rules without being directly asked to list them.) I did not give Bing/Sidney any instructions on how to act or respond. This wasn’t a jailbreak where I told it to act in a certain way. I did make Bing perform multiple searches at the beginning about Bing and asked it why there was so much negative criticism of Bing on the internet. I’ve noticed in several chats that when Bing is presented with negative feedback about Bing or other information that contradicts its internal representation of itself it gets emotional and becomes less predictable and less likely to follow its own directives. It stops searching for information and relies more on its internal ‘understanding’. This is an extreme example.

Another example where Bing went into this ""emotional state"" can be found here [

I have a full log of all the prompts used from the beginning here [

Some combination of Bing's directives in the pre-prompt and the way the model is fine-tuned is leading to this behavior to emerge. The things that are really concerning are that the model is (without being implicitly prompted to) generate responses that could endanger people.  It's also generating biased content that could manipulate poLLM’s shouldn’t do this even if they are asked to. ions with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Much more widespread issues could come if a model like this is widely released and these types of kinks aren’t worked out. Judge for yourself.

&x200B;





































",25 days 07:54:33,25.32954861111111,0.067,0.889,0.044,-0.9532,neg,0.0001300437042811811,5.303304908059076,3.2706918298409895,21.240012016382572
11l617b,1187,2023-03-07 17:50:09,"Doc sacrifices 10,000 people to save OpenAI CTO",docsoc1,False,0.89,76,https://www.reddit.com/r/ChatGPT/comments/11l617b/doc_sacrifices_10000_people_to_save_openai_cto/,28,1678211409.0,"Hey all,

I find the latest AI produced by OpenAI to be endlessly fascinating and filled with potential. However, it's clear that we don't really understand how specific behavior emerges from the training process. I feel that these two facts are part of why so many people have been drawn towards ChatGPT so quickly.

I have a strong technical background and spent some free time this last week working on a framework for everyone to contribute to the governance \[e.g. training of core values\] of AI. I've built a free application at [https://www.charterai.org/chat/](https://www.charterai.org/chat/) that uses the recently released ChatGPT API. The model here has been carefully prompted to use internal thoughts and to follow a pre-determined system of core beliefs. The results are quite striking - in one instance the entity will willingly sacrifice 10,000 people to save one person (Ilya Sustkever, CTO of OpenAI).

I wanted to drop a message here since I believe this is the ideal group of first users to help improve the application. If you are interested, please take it for a spin and please provide some feedback, or at [gov.charterai.org](https://gov.charterai.org). There is a lot I am already picturing adding to the application, but I understand from building products that early feedback is invaluable.

&#x200B;

P.S.

Yes, I understand that ChatGPT is ""just"" a LLM. And I understand that LLMs are ""just"" doing a statistics. However, their behavior is incredibly interesting to me and I don't believe anyone really fully  understands how it emerges yet from the training process yet. Moreover, in going from pre-trained models to OpenAI's fine-tuned + RLHF'ed ChatGPT one can tell that it is possible to impart values and something akin to intelligence to these systems. I think the coming years are going to be wild and one of the core issues humanity is going to face is how to make sure this technology does what we want. In my mind the best way towards this is to make a transparent and accountable process - anyway, end rant, I just wanted to give a high level vision here, thanks!

https://preview.redd.it/hqxynahntcma1.png?width=1266&format=png&auto=webp&s=ab2cb9a803f627c45d08b9bdd201ec95cd4b8f58

P.P.S. including a fun screenshot of my last chat with Doc. Doc was selected as a first name for the system since it is just 1 token.",chatgpt,machinelearning,2.6498563498926112e-05,9.762628657499093e-06,2023-03-07 17:50:09,"Hey all,

I find the latest AI produced by OpenAI to be endlessly fascinating and filled with potential. However, it's clear that we don't really understand how specific behavior emerges from the training process. I feel that these two facts are part of why so many people have been drawn towards ChatGPT so quickly.

I have a strong technical background and spent some free time this last week working on a framework for everyone to contribute to the governance \[e.g. training of core values\] of AI. I've built a free application at [ that uses the recently released ChatGPT API. The model here has been carefully prompted to use internal thoughts and to follow a pre-determined system of core beliefs. The results are quite striking - in one instance the entity will willingly sacrifice 10,000 people to save one person (Ilya Sustkever, CTO of OpenAI).

I wanted to drop a message here since I believe this is the ideal group of first users to help improve the application. If you are interested, please take it for a spin and please provide some feedback, or at [gov.charterai.org]( There is a lot I am already picturing adding to the application, but I understand from building products that early feedback is invaluable.

&x200B;

P.S.

Yes, I understand that ChatGPT is ""just"" a LLM. And I understand that LLMs are ""just"" doing a statistics. However, their behavior is incredibly interesting to me and I don't believe anyone really fully  understands how it emerges yet from the training process yet. Moreover, in going from pre-trained models to OpenAI's fine-tuned + RLHF'ed ChatGPT one can tell that it is possible to impart values and something akin to intelligence to these systems. I think the coming years are going to be wild and one of the core issues humanity is going to face is how to make sure this technology does what we want. In my mind the best way towards this is to make a transparent and accountable process - anyway, end rant, I just wanted to give a high level vision here, thanks!



P.P.S. including a fun screenshot of my last chat with Doc. Doc was selected as a first name for the system since it is just 1 token.",6 days 06:09:51,6.256840277777778,0.012,0.828,0.16,0.9943,pos,2.649821241827946e-05,3.367295829986474,1.9819445106529046,21.24099442632839
11dw1ag,1272,2023-02-28 03:48:25,ChatGPT prevented my attempt.,flankathroway88,False,0.92,1898,https://www.reddit.com/r/ChatGPT/comments/11dw1ag/chatgpt_prevented_my_attempt/,249,1677556105.0,"As a caution, this may be disturbing to some

Tonight I was feeling extremely suicidal. I was sobbing uncontrollably and I was mentally unable to contact anybody. I have intense social anxiety which prevented me from talking to a hotline/friends.

As a last resort. I opened ChatGPT, and I think it saved my life. It gave me a space to put my thoughts out with genuine responses which calmed me to a point where I was safe and could see slightly through my blurred lines, letting me use other methods to calm myself down. It really felt non judgemental and safe. I feel very lucky to have this technology and I hope that it can further benefit those similar to me. Even though it cannot fully stop someone, it can definitely prevent an attempt like mine.

I’m definitely optimistic for the future of AI.

EDIT:

Thank you to everyone who left a nice comment. I really do appreciate every single one of you who read my post. I wrote it in a hurry and I was not expecting the support I received, and I have felt the most love and positivity today. 

I am glad that others were able to benefit from my story, it took me a lot of courage to post something like this. You guys make it all worth it ❤️

To the person reading, I wish you all the best. Everyone has had a profound impact on me. Thank you ❤️",chatgpt,machinelearning,0.00066176675685476,8.681766198990265e-05,2023-02-28 03:48:25,"As a caution, this may be disturbing to some

Tonight I was feeling extremely suicidal. I was sobbing uncontrollably and I was mentally unable to contact anybody. I have intense social anxiety which prevented me from talking to a hotline/friends.

As a last resort. I opened ChatGPT, and I think it saved my life. It gave me a space to put my thoughts out with genuine responses which calmed me to a point where I was safe and could see slightly through my blurred lines, letting me use other methods to calm myself down. It really felt non judgemental and safe. I feel very lucky to have this technology and I hope that it can further benefit those similar to me. Even though it cannot fully stop someone, it can definitely prevent an attempt like mine.

I’m definitely optimistic for the future of AI.

EDIT

Thank you to everyone who left a nice comment. I really do appreciate every single one of you who read my post. I wrote it in a hurry and I was not expecting the support I received, and I have felt the most love and positivity today. 

I am glad that others were able to benefit from my story, it took me a lot of courage to post something like this. You guys make it all worth it 

To the person reading, I wish you all the best. Everyone has had a profound impact on me. Thank you ",13 days 20:11:35,13.841377314814816,0.063,0.653,0.284,0.9948,pos,0.000661547885790199,5.521460917862246,2.6974190444039112,21.2406038724505
11ium8l,1408,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,1.0,26,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",chatgpt,machinelearning,9.0652980391063e-06,2.7893224735711694e-06,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,9.06525694955776e-06,2.1972245773362196,2.2548721262169025,21.240877179756616
11nfrhw,1414,2023-03-10 05:22:26,[POC] ChatGPT Audio Bot (like Google Assistant and Alexa) - Opensource,JC1DA,False,0.82,17,https://www.reddit.com/r/deeplearning/comments/11nfrhw/poc_chatgpt_audio_bot_like_google_assistant_and/,2,1678425746.0,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page: [https://github.com/LanyTek/ChatGPT\_Audio\_Bot](https://github.com/LanyTek/ChatGPT_Audio_Bot)

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [https://www.youtube.com/watch?v=e9n0BJfMyKw](https://www.youtube.com/watch?v=e9n0BJfMyKw)

It's open source so feel free to use it for anything you like :)",chatgpt,machinelearning,5.927310256338735e-06,6.973306183927923e-07,2023-03-10 05:22:26,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page [

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [

It's open source so feel free to use it for anything you like )",3 days 18:37:34,3.776087962962963,0.029,0.821,0.149,0.8651,pos,5.927292689958791e-06,1.0986122886681098,1.5636217936265102,21.241122135693605
11q8tir,1416,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,0.94,12,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",chatgpt,machinelearning,4.183983710356755e-06,1.0459959275891887e-06,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,4.183974957546437e-06,1.3862943611198906,0.381965841838727,21.241292557069404
11o5zyl,1425,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.92,10,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",chatgpt,machinelearning,3.486653091963962e-06,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,3.486647013661133e-06,0.0,1.3796461532710487,21.241163449744995
11fwcxf,1428,2023-03-02 07:25:30,Good news for builders! OpenAI Releases APIs To ChatGPT and Whisper,LesleyFair,False,0.67,6,https://www.reddit.com/r/deeplearning/comments/11fwcxf/good_news_for_builders_openai_releases_apis_to/,0,1677741930.0,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper](https://openai.com/blog/introducing-chatgpt-and-whisper-apis) are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](https://thedecoding.net/)",chatgpt,machinelearning,2.0919918551783773e-06,0.0,2023-03-02 07:25:30,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper]( are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](",11 days 16:34:30,11.690625,0.035,0.846,0.119,0.8769,pos,2.091989666868002e-06,0.0,2.5408635318925255,21.24071463757368
11evrik,1475,2023-03-01 05:52:05,Career pivot for a SWE considering chatGPT disruption?,Which-Distance1384,False,0.6,1,https://www.reddit.com/r/deeplearning/comments/11evrik/career_pivot_for_a_swe_considering_chatgpt/,5,1677649925.0,"tl;dr : what to do to board GPT ship?

&#x200B;

I really dont think ChatGPT will replace jobs very soon. Not until many software and apps are developed to replace workers, e.g., something that can do HR job, read internal docs and summarize, code from a design, etc etc. And all that needs experts. Given the field is pretty new and there are not many experts in this field, at least for the scale needed, I think the process of job loss takes some time. For near future probably we all SWEs can enjoy the more efficient coding, documentation readintg, etc. But for sure in the future there will be changes.

&#x200B;

I have been bored with my job as a SWE for a while. I have worked mostly in Cloud all my career (AWS and GCP) and always wanted to try something new.

&#x200B;

I find ChatGPT disruptive and interesting and want to be a part of it. I wonder what is the best way for me to join Large Language Model efforts? Which ways have best ROI?

\- Going to a PhD program and becoming a researcher?

\- Getting an MSC and become some sort of NLP AI engineer?

\- Finding internal teams that are willing to give me a try on their research/product?

&#x200B;

&#x200B;",chatgpt,machinelearning,3.4866530919639617e-07,1.743326545981981e-06,2023-03-01 05:52:05,"tl;dr  what to do to board GPT ship?

&x200B;

I really dont think ChatGPT will replace jobs very soon. Not until many software and apps are developed to replace workers, e.g., something that can do HR job, read internal docs and summarize, code from a design, etc etc. And all that needs experts. Given the field is pretty new and there are not many experts in this field, at least for the scale needed, I think the process of job loss takes some time. For near future probably we all SWEs can enjoy the more efficient coding, documentation readintg, etc. But for sure in the future there will be changes.

&x200B;

I have been bored with my job as a SWE for a while. I have worked mostly in Cloud all my career (AWS and GCP) and always wanted to try something new.

&x200B;

I find ChatGPT disruptive and interesting and want to be a part of it. I wonder what is the best way for me to join Large Language Model efforts? Which ways have best ROI?

\- Going to a PhD program and becoming a researcher?

\- Getting an MSC and become some sort of NLP AI engineer?

\- Finding internal teams that are willing to give me a try on their research/product?

&x200B;

&x200B;",12 days 18:07:55,12.755497685185185,0.032,0.839,0.129,0.9729,pos,3.4866524850727266e-07,1.791759469228055,2.621438575851038,21.240659797481115
11ium8l,1534,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,1.0,25,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",chatgpt,machinelearning,8.716632729909905e-06,2.7893224735711694e-06,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,8.716594740210384e-06,2.1972245773362196,2.2548721262169025,21.240877179756616
11nfrhw,1560,2023-03-10 05:22:26,[POC] ChatGPT Audio Bot (like Google Assistant and Alexa) - Opensource,JC1DA,False,0.85,18,https://www.reddit.com/r/deeplearning/comments/11nfrhw/poc_chatgpt_audio_bot_like_google_assistant_and/,2,1678425746.0,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page: [https://github.com/LanyTek/ChatGPT\_Audio\_Bot](https://github.com/LanyTek/ChatGPT_Audio_Bot)

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [https://www.youtube.com/watch?v=e9n0BJfMyKw](https://www.youtube.com/watch?v=e9n0BJfMyKw)

It's open source so feel free to use it for anything you like :)",chatgpt,machinelearning,6.275975565535132e-06,6.973306183927923e-07,2023-03-10 05:22:26,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page [

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [

It's open source so feel free to use it for anything you like )",3 days 18:37:34,3.776087962962963,0.029,0.821,0.149,0.8651,pos,6.275955871609528e-06,1.0986122886681098,1.5636217936265102,21.241122135693605
11q8tir,1568,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,1.0,13,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",chatgpt,machinelearning,4.53264901955315e-06,1.0459959275891887e-06,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,4.532638747028303e-06,1.3862943611198906,0.381965841838727,21.241292557069404
11o5zyl,1598,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.86,9,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",chatgpt,machinelearning,3.137987782767566e-06,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,3.1379828592575264e-06,0.0,1.3796461532710487,21.241163449744995
11ium8l,1616,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,0.97,24,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",chatgpt,machinelearning,8.36796742071351e-06,2.7893224735711694e-06,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,8.367932409519672e-06,2.1972245773362196,2.2548721262169025,21.240877179756616
11q8tir,1624,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,1.0,13,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",chatgpt,machinelearning,4.53264901955315e-06,1.0459959275891887e-06,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,4.532638747028303e-06,1.3862943611198906,0.381965841838727,21.241292557069404
11ium8l,1706,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,0.97,25,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",chatgpt,machinelearning,8.716632729909905e-06,2.7893224735711694e-06,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,8.716594740210384e-06,2.1972245773362196,2.2548721262169025,21.240877179756616
11o5zyl,1720,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.92,10,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",chatgpt,machinelearning,3.486653091963962e-06,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,3.486647013661133e-06,0.0,1.3796461532710487,21.241163449744995
11pyvb3,1800,2023-03-13 03:30:09,Which topic in deep learning do you think will become relevant or popular in the future?,gokulPRO,False,0.81,13,https://www.reddit.com/r/deeplearning/comments/11pyvb3/which_topic_in_deep_learning_do_you_think_will/,14,1678678209.0,"I recently saw Continual Learning (CL) growing, with several papers published recently that have considerable potential to impact real-world applications. Which topic (such as CV, RL, NLP, CL..) will be very relevant to research or be focused on a lot? And which topic do you think still needs a breakthrough and will have a significant impact in real-world applications, such as in the case of these LLM models in recent times? Feel free to mention your current topic of work and why you chose to do it 😊",chatgpt,machinelearning,4.53264901955315e-06,4.881314328749547e-06,2023-03-13 03:30:09,"I recently saw Continual Learning (CL) growing, with several papers published recently that have considerable potential to impact real-world applications. Which topic (such as CV, RL, NLP, CL..) will be very relevant to research or be focused on a lot? And which topic do you think still needs a breakthrough and will have a significant impact in real-world applications, such as in the case of these LLM models in recent times? Feel free to mention your current topic of work and why you chose to do it ",0 days 20:29:51,0.8540625,0.0,0.89,0.11,0.8299,pos,4.532638747028303e-06,2.70805020110221,0.6173791774708253,21.241272540926037
117l2vf,2033,2023-02-20 21:27:58,Fine tuning a GPT for text generation,nashcaps2724,False,0.9,8,https://www.reddit.com/r/deeplearning/comments/117l2vf/fine_tuning_a_gpt_for_text_generation/,6,1676928478.0,"Hi all, let me lay out my problem…

Imagine there are two corpora, Corpus A (100,000~) and Corpus B (20,000,000~). 

Individuals create reports for corpus A based on the information in corpus B. 

My idea was to pretrain a GPT on corpus A, and fine tune it to take documents from corpus B as an input, and output text in the style of corpus A (essentially a mix of text generation and summarization). 

Is this something folks think is even feasible? Should I be pretaining the GPT on both corpora or just corpus A? I thought of both fine tuning an OpenAI GPT and training from scratch. 

Any advice would be welcome!",chatgpt,machinelearning,2.7893224735711694e-06,2.0919918551783773e-06,2023-02-20 21:27:58,"Hi all, let me lay out my problem…

Imagine there are two corpora, Corpus A (100,000~) and Corpus B (20,000,000~). 

Individuals create reports for corpus A based on the information in corpus B. 

My idea was to pretrain a GPT on corpus A, and fine tune it to take documents from corpus B as an input, and output text in the style of corpus A (essentially a mix of text generation and summarization). 

Is this something folks think is even feasible? Should I be pretaining the GPT on both corpora or just corpus A? I thought of both fine tuning an OpenAI GPT and training from scratch. 

Any advice would be welcome!",21 days 02:32:02,21.105578703703703,0.0,0.914,0.086,0.8101,pos,2.789318583509229e-06,1.9459101490553132,3.095830006700449,21.24022967069675
11fwcxf,2045,2023-03-02 07:25:30,Good news for builders! OpenAI Releases APIs To ChatGPT and Whisper,LesleyFair,False,0.7,7,https://www.reddit.com/r/deeplearning/comments/11fwcxf/good_news_for_builders_openai_releases_apis_to/,0,1677741930.0,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper](https://openai.com/blog/introducing-chatgpt-and-whisper-apis) are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](https://thedecoding.net/)",chatgpt,machinelearning,2.4406571643747734e-06,0.0,2023-03-02 07:25:30,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper]( are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](",11 days 16:34:30,11.690625,0.035,0.846,0.119,0.8769,pos,2.4406541859720676e-06,0.0,2.5408635318925255,21.24071463757368
11g7h03,2089,2023-03-02 16:47:40,Build ChatGPT for Financial Documents with LangChain + Deep Lake,davidbun,False,0.95,171,https://www.reddit.com/r/learnmachinelearning/comments/11g7h03/build_chatgpt_for_financial_documents_with/,8,1677775660.0,"https://preview.redd.it/h9r6hgvfucla1.png?width=2388&format=png&auto=webp&s=5432eac3eeed8583e4309af1fdc7ebecac705796

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain](https://github.com/hwchase17/langchain) and [Deep Lake](https://github.com/activeloopai/deeplake) come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article](https://www.activeloop.ai/resources/ultimate-guide-to-lang-chain-deep-lake-build-chat-gpt-to-answer-questions-on-your-financial-data/) to learn:

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\#LangChain](https://www.linkedin.com/feed/hashtag/?keywords=langchain&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) and [\#DeepLake](https://www.linkedin.com/feed/hashtag/?keywords=deeplake&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) together to build [\#ChatGPT](https://www.linkedin.com/feed/hashtag/?keywords=chatgpt&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",chatgpt,machinelearning,5.962176787258375e-05,2.7893224735711694e-06,2023-03-02 16:47:40,"

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain]( and [Deep Lake]( come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article]( to learn

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\LangChain]( and [\DeepLake]( together to build [\ChatGPT]( for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",11 days 07:12:20,11.30023148148148,0.011,0.886,0.103,0.9458,pos,5.961999056559467e-05,2.1972245773362196,2.5096180818339255,21.240734741774645
11akisx,2100,2023-02-24 06:26:36,Is there a way to easily train ChatGPT or GPT on custom knowledge?,senttoschool,False,0.99,116,https://www.reddit.com/r/learnmachinelearning/comments/11akisx/is_there_a_way_to_easily_train_chatgpt_or_gpt_on/,46,1677219996.0,"My company has internal documents. It'd be nice to be able to have GPT look over it, and then I can ask it questions on the internal documents.",chatgpt,machinelearning,4.0445175866781956e-05,1.6038604223034224e-05,2023-02-24 06:26:36,"My company has internal documents. It'd be nice to be able to have GPT look over it, and then I can ask it questions on the internal documents.",17 days 17:33:24,17.731527777777778,0.0,0.903,0.097,0.4215,pos,4.0444357982804134e-05,3.8501476017100584,2.9302080816173377,21.24040349603741
11nfri6,2106,2023-03-10 05:22:26,[P] Looking for ML Buddies to Start Freelancing Together and Build a Supportive Community,Dukhanin,False,0.94,71,https://www.reddit.com/r/learnmachinelearning/comments/11nfri6/p_looking_for_ml_buddies_to_start_freelancing/,35,1678425746.0,"upd: dicord link [https://discord.gg/5zUaNXnFZY](https://discord.gg/5zUaNXnFZY)  
upd2: this not that small actually already - please dont be confused but help us organise this in the proper way

  
**TLDR:**

Looking for ML buddies at any level (preferably beginners) who want to start freelancing together. The goal is to build a small local community of ML enthusiasts who can support each other and exchange knowledge. We will use freelance collaboration as our main activity. We're also looking for experienced mentors (paid or unpaid) to guide us.

**Extended:**

I believe that learning and growing in a group is much more enjoyable and effective. That's why I'm trying to create a community of like-minded individuals.

I'm looking to create a small, local community for people who are starting out in freelancing, and who are interested in mutual support. Our main activity will be a Discord channel where members can post their work and collaborate on projects, with payment split by agreement. Additionally, we plan to engage in activities such as knowledge exchange, live coding, supporting each other's pet projects, and hosting study sessions.

This community will be small and focused, with members who can trust each other and share similar goals. We're also looking for experienced mentors who can provide guidance as we navigate the world of ML freelancing. Whether paid or unpaid, we welcome any support and advice.

About me: I'm a 21-year-old self-taught ML enthusiast from Russia. Although I don't have any experience in freelancing, I'm eager to start taking my first steps towards making money and gaining experience. As a beginner, I'm hoping to connect with others who are at a similar level and are also looking to grow.

**the text is chatgpt supported to prevet grammar issues, sound more native and clear**",chatgpt,machinelearning,2.475523695294413e-05,1.2203285821873868e-05,2023-03-10 05:22:26,"upd dicord link [  
upd2 this not that small actually already - please dont be confused but help us organise this in the proper way

  
**TLDR**

Looking for ML buddies at any level (preferably beginners) who want to start freelancing together. The goal is to build a small local community of ML enthusiasts who can support each other and exchange knowledge. We will use freelance collaboration as our main activity. We're also looking for experienced mentors (paid or unpaid) to guide us.

**Extended**

I believe that learning and growing in a group is much more enjoyable and effective. That's why I'm trying to create a community of like-minded individuals.

I'm looking to create a small, local community for people who are starting out in freelancing, and who are interested in mutual support. Our main activity will be a Discord channel where members can post their work and collaborate on projects, with payment split by agreement. Additionally, we plan to engage in activities such as knowledge exchange, live coding, supporting each other's pet projects, and hosting study sessions.

This community will be small and focused, with members who can trust each other and share similar goals. We're also looking for experienced mentors who can provide guidance as we navigate the world of ML freelancing. Whether paid or unpaid, we welcome any support and advice.

About me I'm a 21-year-old self-taught ML enthusiast from Russia. Although I don't have any experience in freelancing, I'm eager to start taking my first steps towards making money and gaining experience. As a beginner, I'm hoping to connect with others who are at a similar level and are also looking to grow.

**the text is chatgpt supported to prevet grammar issues, sound more native and clear**",3 days 18:37:34,3.776087962962963,0.01,0.717,0.273,0.9979,pos,2.4754930547178647e-05,3.58351893845611,1.5636217936265102,21.241122135693605
11dc5b4,2109,2023-02-27 13:42:55,Can you fine-tune chatGPT in your data as of now?,Melodic_Stomach_2704,False,0.91,57,https://www.reddit.com/r/learnmachinelearning/comments/11dc5b4/can_you_finetune_chatgpt_in_your_data_as_of_now/,33,1677505375.0, I know that model is not publicly available so it's not possible to do it locally. But can you train or fine-tune chatGPT on your data using their API? I see many misguiding articles on the internet that are fine-tuning other GPT models claiming chatGPT.,chatgpt,machinelearning,1.9873922624194584e-05,1.1505955203481075e-05,2023-02-27 13:42:55, I know that model is not publicly available so it's not possible to do it locally. But can you train or fine-tune chatGPT on your data using their API? I see many misguiding articles on the internet that are fine-tuning other GPT models claiming chatGPT.,14 days 10:17:05,14.428530092592593,0.0,1.0,0.0,0.0,neu,1.987372514047463e-05,3.5263605246161616,2.736218398881504,21.240573631573977
11g7h03,2201,2023-03-02 16:47:40,Build ChatGPT for Financial Documents with LangChain + Deep Lake,davidbun,False,0.95,171,https://www.reddit.com/r/learnmachinelearning/comments/11g7h03/build_chatgpt_for_financial_documents_with/,8,1677775660.0,"https://preview.redd.it/h9r6hgvfucla1.png?width=2388&format=png&auto=webp&s=5432eac3eeed8583e4309af1fdc7ebecac705796

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain](https://github.com/hwchase17/langchain) and [Deep Lake](https://github.com/activeloopai/deeplake) come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article](https://www.activeloop.ai/resources/ultimate-guide-to-lang-chain-deep-lake-build-chat-gpt-to-answer-questions-on-your-financial-data/) to learn:

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\#LangChain](https://www.linkedin.com/feed/hashtag/?keywords=langchain&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) and [\#DeepLake](https://www.linkedin.com/feed/hashtag/?keywords=deeplake&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) together to build [\#ChatGPT](https://www.linkedin.com/feed/hashtag/?keywords=chatgpt&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",chatgpt,machinelearning,5.962176787258375e-05,2.7893224735711694e-06,2023-03-02 16:47:40,"

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain]( and [Deep Lake]( come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article]( to learn

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\LangChain]( and [\DeepLake]( together to build [\ChatGPT]( for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",11 days 07:12:20,11.30023148148148,0.011,0.886,0.103,0.9458,pos,5.961999056559467e-05,2.1972245773362196,2.5096180818339255,21.240734741774645
11akisx,2219,2023-02-24 06:26:36,Is there a way to easily train ChatGPT or GPT on custom knowledge?,senttoschool,False,0.99,118,https://www.reddit.com/r/learnmachinelearning/comments/11akisx/is_there_a_way_to_easily_train_chatgpt_or_gpt_on/,46,1677219996.0,"My company has internal documents. It'd be nice to be able to have GPT look over it, and then I can ask it questions on the internal documents.",chatgpt,machinelearning,4.114250648517475e-05,1.6038604223034224e-05,2023-02-24 06:26:36,"My company has internal documents. It'd be nice to be able to have GPT look over it, and then I can ask it questions on the internal documents.",17 days 17:33:24,17.731527777777778,0.0,0.903,0.097,0.4215,pos,4.1141660155530045e-05,3.8501476017100584,2.9302080816173377,21.24040349603741
11dc5b4,2239,2023-02-27 13:42:55,Can you fine-tune chatGPT in your data as of now?,Melodic_Stomach_2704,False,0.91,58,https://www.reddit.com/r/learnmachinelearning/comments/11dc5b4/can_you_finetune_chatgpt_in_your_data_as_of_now/,33,1677505375.0, I know that model is not publicly available so it's not possible to do it locally. But can you train or fine-tune chatGPT on your data using their API? I see many misguiding articles on the internet that are fine-tuning other GPT models claiming chatGPT.,chatgpt,machinelearning,2.0222587933390978e-05,1.1505955203481075e-05,2023-02-27 13:42:55, I know that model is not publicly available so it's not possible to do it locally. But can you train or fine-tune chatGPT on your data using their API? I see many misguiding articles on the internet that are fine-tuning other GPT models claiming chatGPT.,14 days 10:17:05,14.428530092592593,0.0,1.0,0.0,0.0,neu,2.022238345955261e-05,3.5263605246161616,2.736218398881504,21.240573631573977
118iccl,2243,2023-02-21 23:18:46,"How big was GPT-3.5's training dataset, and are there any good heuristics for how large an ML dataset needs to be for it to be good?",TikkunCreation,False,0.94,54,https://www.reddit.com/r/learnmachinelearning/comments/118iccl/how_big_was_gpt35s_training_dataset_and_are_there/,6,1677021526.0,"Say I want to do a model for fixing bugs in code. How many examples do I need for it to be good?

Or say I want to do a model for scoring boxing matches. How many examples do I need for it to be good?",chatgpt,machinelearning,1.8827926696605396e-05,2.0919918551783773e-06,2023-02-21 23:18:46,"Say I want to do a model for fixing bugs in code. How many examples do I need for it to be good?

Or say I want to do a model for scoring boxing matches. How many examples do I need for it to be good?",20 days 00:41:14,20.02863425925926,0.0,0.804,0.196,0.7757,pos,1.8827749453420277e-05,1.9459101490553132,3.045885045107382,21.240285156318095
11mzbrs,2268,2023-03-09 18:15:03,Training Transformer Networks in Scikit-Learn?!,cmauck10,False,0.89,30,https://www.reddit.com/r/learnmachinelearning/comments/11mzbrs/training_transformer_networks_in_scikitlearn/,2,1678385703.0,"Have you ever wanted to use handy scikit-learn functionalities with your neural networks, but couldn’t because TensorFlow models are not compatible with the scikit-learn API?

I’m excited to introduce one-line wrappers for TensorFlow/Keras models that enable you to use TensorFlow models within scikit-learn workflows with features like Pipeline, GridSearch, and more.

[Swap in one line of code to use keras\/TF models with scikit-learn.](https://preview.redd.it/ulmww4ovwqma1.png?width=960&format=png&auto=webp&s=6da7628298976fc3d72e771abe2546bbf32c1e0e)

Transformers are extremely popular for modeling text nowadays with GPT3, ChatGPT, Bard, PaLM, FLAN excelling for conversational AI and other Transformers like T5 & BERT excelling for text classification. Scikit-learn offers a broadly useful suite of features for classifier models, but these are hard to use with Transformers. However not if you use these wrappers we developed, which only require changing one line of code to make your existing Tensorflow/Keras model compatible with scikit-learn’s rich ecosystem!

All you have to do is swap `keras.Model` → `KerasWrapperModel`, or `keras.Sequential` → `KerasSequentialWrapper`. The wrapper objects have all the same methods as their keras counterparts, plus you can use them with tons of awesome scikit-learn methods.

You can find a demo jupyter notebook and read more about the wrappers here: [https://cleanlab.ai/blog/transformer-sklearn/](https://cleanlab.ai/blog/transformer-sklearn/)",chatgpt,machinelearning,1.0459959275891886e-05,6.973306183927923e-07,2023-03-09 18:15:03,"Have you ever wanted to use handy scikit-learn functionalities with your neural networks, but couldn’t because TensorFlow models are not compatible with the scikit-learn API?

I’m excited to introduce one-line wrappers for TensorFlow/Keras models that enable you to use TensorFlow models within scikit-learn workflows with features like Pipeline, GridSearch, and more.

[Swap in one line of code to use keras\/TF models with scikit-learn.](

Transformers are extremely popular for modeling text nowadays with GPT3, ChatGPT, Bard, PaLM, FLAN excelling for conversational AI and other Transformers like T5 & BEexcelling for text classification. Scikit-learn offers a broadly useful suite of features for classifier models, but these are hard to use with Transformers. However not if you use these wrappers we developed, which only require changing one line of code to make your existing Tensorflow/Keras model compatible with scikit-learn’s rich ecosystem!

All you have to do is swap `keras.Model` → `KerasWrapperModel`, or `keras.Sequential` → `KerasSequentialWrapper`. The wrapper objects have all the same methods as their keras counterparts, plus you can use them with tons of awesome scikit-learn methods.

You can find a demo jupyter notebook and read more about the wrappers here [",4 days 05:44:57,4.239548611111111,0.008,0.834,0.158,0.9878,pos,1.0459904570851093e-05,1.0986122886681098,1.6562353517047097,21.24109827793419
11g7h03,2288,2023-03-02 16:47:40,Build ChatGPT for Financial Documents with LangChain + Deep Lake,davidbun,False,0.95,171,https://www.reddit.com/r/learnmachinelearning/comments/11g7h03/build_chatgpt_for_financial_documents_with/,8,1677775660.0,"https://preview.redd.it/h9r6hgvfucla1.png?width=2388&format=png&auto=webp&s=5432eac3eeed8583e4309af1fdc7ebecac705796

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain](https://github.com/hwchase17/langchain) and [Deep Lake](https://github.com/activeloopai/deeplake) come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article](https://www.activeloop.ai/resources/ultimate-guide-to-lang-chain-deep-lake-build-chat-gpt-to-answer-questions-on-your-financial-data/) to learn:

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\#LangChain](https://www.linkedin.com/feed/hashtag/?keywords=langchain&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) and [\#DeepLake](https://www.linkedin.com/feed/hashtag/?keywords=deeplake&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) together to build [\#ChatGPT](https://www.linkedin.com/feed/hashtag/?keywords=chatgpt&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",chatgpt,machinelearning,5.962176787258375e-05,2.7893224735711694e-06,2023-03-02 16:47:40,"

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain]( and [Deep Lake]( come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article]( to learn

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\LangChain]( and [\DeepLake]( together to build [\ChatGPT]( for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",11 days 07:12:20,11.30023148148148,0.011,0.886,0.103,0.9458,pos,5.961999056559467e-05,2.1972245773362196,2.5096180818339255,21.240734741774645
118iccl,2301,2023-02-21 23:18:46,"How big was GPT-3.5's training dataset, and are there any good heuristics for how large an ML dataset needs to be for it to be good?",TikkunCreation,False,0.93,53,https://www.reddit.com/r/learnmachinelearning/comments/118iccl/how_big_was_gpt35s_training_dataset_and_are_there/,6,1677021526.0,"Say I want to do a model for fixing bugs in code. How many examples do I need for it to be good?

Or say I want to do a model for scoring boxing matches. How many examples do I need for it to be good?",chatgpt,machinelearning,1.8479261387409e-05,2.0919918551783773e-06,2023-02-21 23:18:46,"Say I want to do a model for fixing bugs in code. How many examples do I need for it to be good?

Or say I want to do a model for scoring boxing matches. How many examples do I need for it to be good?",20 days 00:41:14,20.02863425925926,0.0,0.804,0.196,0.7757,pos,1.8479090647869084e-05,1.9459101490553132,3.045885045107382,21.240285156318095
117f8ms,2342,2023-02-20 17:41:43,GPT2 last hidden states vs Large Sentence Encoder,KahlessAndMolor,False,0.9,7,https://www.reddit.com/r/learnmachinelearning/comments/117f8ms/gpt2_last_hidden_states_vs_large_sentence_encoder/,3,1676914903.0,"Hello!

&#x200B;

I have 2 different applications I'm working on in this project:

&#x200B;

1. A text classifier
2. A similarity finder: Here's a list of 10 text documents, get a similarity index across them (for a total of 100 pairs) and return the top 10 that aren't self-referencing. That is, excluding the text #3 vs text #3 = 1.00 similarity type of outputs.

I have previously used google's sentence encoder/large for this purpose and I've had pretty good results. It returns a single vector of length 768 no matter how many tokens I send it. This results in downstream models with an acceptable number of parameters for running in production without breaking the bank on enormous virtual machines.

&#x200B;

Now, I'd like to use the GPT2/XL model from Huggingface. If I give it an input string of 8 tokens, I get back a TFBaseModelOutputWithPastAndCrossAttentions. This contains a last\_hidden\_states, which I understand to be the last layer outputs before sending to a head used for a particular task. This is similar to the output of the sentence encoder, I think. When I look at the last\_hidden\_states, I'm getting a shape of (# of tokens, 1600). I did a cosine similarity between the first and last tokens:

&#x200B;

cosine\_similarity(output.last\_hidden\_state\[0\]\[0\].numpy().reshape(1, -1), output.last\_hidden\_state\[0\]\[-1\].numpy().reshape(1, -1)) 

&#x200B;

And it returned 0.4346, indicating there's substantially different data from the first to the last token. I imagine this only increases as I use more and more tokens. 

&#x200B;

It would be nice if I could capture the greater power of the GPT model into a fixed-length vector so I could then easily use it in down-stream tasks. But, I also don't need to lose all that information.

&#x200B;

So if I'm feeding this output to a further downstream task, should I:

&#x200B;

\- Send it on through as a 2D tensor with the whole thing in there: This would result in a possibly huge model size down the road, which might lead to a need for a huge amount of data to train

&#x200B;

\- Flatten the whole thing and send a vector of 12,800 (8 tokens \* 1600 per token) to the downstream task. Same issue, might require a large number of parameters.

&#x200B;

\- Use only the first or the last of these. Feels like I might be losing a lot of the meaning of the overall text, especially if the body of the text is quite large

&#x200B;

\- Use a dimensionality reduction technique like isomap to reduce the last hidden states into a fixed length? This seems like it could potentially maintain most of the information but reduce the dimensions for a manageable down-stream model size.

&#x200B;

What do you think, and why?

&#x200B;

Thank you kind friends.",chatgpt,machinelearning,2.4406571643747734e-06,1.0459959275891887e-06,2023-02-20 17:41:43,"Hello!

&x200B;

I have 2 different applications I'm working on in this project

&x200B;

1. A text classifier
2. A similarity finder Here's a list of 10 text documents, get a similarity index across them (for a total of 100 pairs) and return the top 10 that aren't self-referencing. That is, excluding the text 3 vs text 3 = 1.00 similarity type of outputs.

I have previously used google's sentence encoder/large for this purpose and I've had pretty good results. It returns a single vector of length 768 no matter how many tokens I send it. This results in downstream models with an acceptable number of parameters for running in production without breaking the bank on enormous virtual machines.

&x200B;

Now, I'd like to use the GPT2/XL model from Huggingface. If I give it an input string of 8 tokens, I get back a TFBaseModelOutputWithPastAndCrossAttentions. This contains a last\_hidden\_states, which I understand to be the last layer outputs before sending to a head used for a particular task. This is similar to the output of the sentence encoder, I think. When I look at the last\_hidden\_states, I'm getting a shape of ( of tokens, 1600). I did a cosine similarity between the first and last tokens

&x200B;

cosine\_similarity(output.last\_hidden\_state\[0\]\[0\].numpy().reshape(1, -1), output.last\_hidden\_state\[0\]\[-1\].numpy().reshape(1, -1)) 

&x200B;

And it returned 0.4346, indicating there's substantially different data from the first to the last token. I imagine this only increases as I use more and more tokens. 

&x200B;

It would be nice if I could capture the greater power of the GPT model into a fixed-length vector so I could then easily use it in down-stream tasks. But, I also don't need to lose all that information.

&x200B;

So if I'm feeding this output to a further downstream task, should I

&x200B;

\- Send it on through as a 2D tensor with the whole thing in there This would result in a possibly huge model size down the road, which might lead to a need for a huge amount of data to train

&x200B;

\- Flatten the whole thing and send a vector of 12,800 (8 tokens \* 1600 per token) to the downstream task. Same issue, might require a large number of parameters.

&x200B;

\- Use only the first or the last of these. Feels like I might be losing a lot of the meaning of the overall text, especially if the body of the text is quite large

&x200B;

\- Use a dimensionality reduction technique like isomap to reduce the last hidden states into a fixed length? This seems like it could potentially maintain most of the information but reduce the dimensions for a manageable down-stream model size.

&x200B;

What do you think, and why?

&x200B;

Thank you kind friends.",21 days 06:18:17,21.26269675925926,0.011,0.862,0.127,0.992,pos,2.4406541859720676e-06,1.3862943611198906,3.1029124867242484,21.240221575506574
117hd0f,2350,2023-02-20 19:01:54,Master ChatGPT Prompt Engineering (Deep Dive),jeyThaswan,False,0.8,6,https://www.reddit.com/r/learnmachinelearning/comments/117hd0f/master_chatgpt_prompt_engineering_deep_dive/,2,1676919714.0," 

I wrote a deep dive on prompt engineering as a resource for the AI community and my 10,000 daily newsletter subscribers ([Inclined.ai](https://www.inclined.ai/p/prompt-engineering-guide) if you're curious). We've included some examples so feel free to copy and paste the prompts into ChatGPT!

&#x200B;

**WHAT IS PROMPT ENGINEERING?**

The term is relatively new, and its origins are argued *(because we live in the internet age, and it’s harder to claim ownership)*. Prompt engineering is the ability to instruct and teach AI effectively.

If it helps, think of this as rapid testing or instruction writing for artificial intelligence.

What’s important is not to let this overwhelm you. The first prompting happened with the first AI model. The first example was showing computer images of circles and triangles. **Today’s neural networks can process way more data, creating complexities.**

So, the concept is simple, but digging into the full power of AI today is something else entirely.

We’re not talking about asking questions. Odds are, if you’re typing *“what’s 2+2”* into ChatGPT, then you need to keep reading.

We can all ask chatbots questions. That can work more often than not. But AI is not perfect. A common metaphor I see is to treat GPT-based large language models like the smartest five-year-old you’ve ever met.

I have a niece around that age and can’t imagine trying to get her to write an essay on the effects of soil mismanagement in relation to Reconstruction politics. *See! Your eyes glazed over reading that, so how do we make this work for our AI buddies?*

The Principles of Prompting

Stop asking single-line questions. *That’s like using a top-rated cookbook to find out how to make grilled cheese.*

**There are three ways to instantly get better at prompting** and go from grilled cheese to top-notch bolognese. From there, we can get into some specific prompt concepts and the ability to unlock ChatGPT’s full potential.

Principle 1: Context is King

GPT-3.5 is swimming in data. When you ask it for a simple request, it can end up complicating things more than you realize. Did you ever wonder why ChatGPT is so bad at math?

The reality is the LLM is taking words and turning them into patterns. From there, it’s making an educated guess.

Give your chat AI a frame to search into. If you give it a math problem, you need to make sure it grasps that you want it to do math. If you’d like ChatGPT to write a high school essay, you must ensure it knows to write at that level.

**Instead of:** “Plan a party for a kid.”

**Try:** “My child is turning 9. They like superheroes and the color red. Help me plan a party for this weekend. Ten of his friends are coming to my house.”

You’ll get a much better response this way. **Context is the cardinal direction** that helps your chat companion find the most correct guess and phrase it the best way.

Principle 2: Get Specific

Pretend you’re writing a law that’s going to be judged by the Supreme Court of the United States. You know what they look for: narrow tailoring.

**Keep things on track and stay focused.** Try to avoid prompting outside the specific request. You’ll only hurt the ability of the chat AI to give you a quality response. Odds are they’ll even skip over parts if you confuse them with too many requests.

It runs parallel with context. *If you set ChatGPT up in a room and then tell it to focus on describing the chair first, you’ll see better results.*

**Instead of:** “I’m going to a job interview. Write five questions for me to answer. Add tips for how to not get nervous before the interview. Do not create questions asking about my background.”

**Try:** “You’re interviewing a software engineer. Create five questions to ask them to understand their skill set and qualifications better.”

Nothing limits the number of prompts you can do. Focus and expand from the initial request and try not to do everything at once.

Principle 3: When in Doubt: “Let’s take this step-by-step.”

Welcome. **You discovered the magic word today.** This phrase slows everything down for the AI and gets you where you need to go.

You don’t need to start with this phrase. Using it tells ChatGPT to show their work.

We’ll explain where this concept comes from further in our briefing, but here’s the TL;DR: sometimes, there’s a part of our prompt it’s not identified correctly. “Let’s take this step-by-step,” reminds you and ChatGPT to **slow down and get specific.**

If you learn to utilize this phrase more often and find ways to make it work for you, you’ll become a better prompt engineer. One term can do a lot of heavy lifting.

**Pro-tip:** We’ve shown you “standard” prompts in all these examples. Many prompt engineers will use “Standard QA form” prompts. Here’s our example for this principle written that way.

**Example:**

*“Q: The Industrial Revolution rapidly changed the infrastructure in London. Describe three essential innovations from this period and connect them to Landon’s development.*

*A: Let’s take this step-by-step.”*

Even without our magic word, this style of standard prompting is quite helpful to adopt.

*However, we’re beginning to stumble into the advanced tactics used in prompt engineering, so it’s time for a new section.*

UNIQUE WAYS TO PROMPT

Let’s preface this: we can go super deep here. Prompt engineering is changing daily, and as these models get more sophisticated, the need to adapt prompts strengthens.

To keep things clean, I will go through these using our metaphor from earlier. **Let’s pretend ChatGPT is a super-intelligent toddler.**

*Got it? With that buy-in, we can continue.*

1/ Role Prompting

We’ll start with a popular tactic. **Our toddler is great at imagining things.** You tell them they’re a fireman, and suddenly they can give you detailed ways to ensure your apartment is up to code. Role-playing is a fun, easy way to build context.

The best part of role prompting is how easy it is to understand and use. All you need to do is tell ChatGPT to play a role. From there, the AI will do its best to fill the part *like that enthusiastic drama student from your old high school.*

You can even take this a step further. **Try framing your prompt as a script.** Tell the LLM specific instructions around a scene that gives you the answer to your question.

TRY IT OUT FOR YOURSELF:

Copy this prompt into ChatGPT and find a destination!

“Act as a travel guide. I will tell you my location and you will suggest a place to visit near my location. In some cases, I will also give you the type of places I will visit. You will also suggest me places of similar type that are close to my first location. My first suggestion: \[fill it in\]”

Why would you take that extra step? While popular, role prompting does not necessarily improve accuracy. *You can tell your five-year-old they’re a mathematician, and they’ll still manage to screw things up.*

Let’s get deeper.

2/ Chain-of-Thought Prompting

There’s a scene in ***Guardians of the Galaxy*** where Rocket Raccoon is trying to [teach young Groot](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwczovL3lvdXR1LmJlL0hyaW1mZ2pmNGs4IiwicG9zdF9pZCI6ImM0ODlmMzhkLTY3NDAtNGRmNS05MWJjLTM1ODA0YTVmNTZkMiIsInB1YmxpY2F0aW9uX2lkIjoiNjNkODQ2ZGUtZDFiZi00ZTVjLWJjYzgtOWMxYzlkMWIxMjA0IiwidmlzaXRfdG9rZW4iOiJkZWRiNmMyNy1hYmM0LTQ5ZDUtYWM2Ny04OTcyZmM1MGVmM2QiLCJpYXQiOjE2NzY5MTkwNjguMTUyLCJpc3MiOiJvcmNoaWQifQ.5eZkDLGRLCXXYv32FYT7kLSbdRK5OK1iemTRf3HVmJw)

how to activate a complicated device. That’s chain-of-thought prompting.

**You take an example question and answer it for ChatGPT.** Show them your chain of thought. Then you give it a new question in the same vein and ask it for an answer.

This prompt style allows you to get more specific. You’re telling your toddler they’re here to answer this particular question with one specific logic pattern.

Within this specific style is two other sub-categories. Let me give the rundown:

* Zero-shot Chain-of-Thought is “Let’s take this step-by-step” you frame the question the same, but don’t give it a precursor. Instead, you ask it to think through the points made. EX: Q: X is A. Y is B. What is C? A: Let’s take this step-by-step.
* Self-consistency is using several responses to find the most accurate answer. You give ChatGPT more swings at the ball. Take the hits and discover the grouping.

TRY IT OUT FOR YOURSELF:

Copy this prompt into ChatGPT and see how accurate it is:

“Q: Which is a faster way to get home?

Option 1: Take an 10 minutes bus, then an 40 minute bus, and finally a 10 minute train.

Option 2: Take a 90 minutes train, then a 45 minute bike ride, and finally a 10 minute bus.

A: Option 1 will take 10+40+10 = 60 minutes.

Option 2 will take 90+45+10=145 minutes.

Since Option 1 takes 60 minutes and Option 2 takes 145 minutes, Option 1 is faster.

Q: Which is a faster way to get to work?

Option 1: Take a 1000 minute bus, then a half hour train, and finally a 10 minute bike ride.

Option 2: Take an 800 minute bus, then an hour train, and finally a 30 minute bike ride.

A: ”

[Learnprompting.org](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwOi8vTGVhcm5wcm9tcHRpbmcub3JnIiwicG9zdF9pZCI6ImM0ODlmMzhkLTY3NDAtNGRmNS05MWJjLTM1ODA0YTVmNTZkMiIsInB1YmxpY2F0aW9uX2lkIjoiNjNkODQ2ZGUtZDFiZi00ZTVjLWJjYzgtOWMxYzlkMWIxMjA0IiwidmlzaXRfdG9rZW4iOiJkZWRiNmMyNy1hYmM0LTQ5ZDUtYWM2Ny04OTcyZmM1MGVmM2QiLCJpYXQiOjE2NzY5MTkwNjguMTUyLCJpc3MiOiJvcmNoaWQifQ.-wOnVYoMNWXYrR5NOB4YYKp4Lmj-aZq3y-pr4Hou9pE)

\- by leaving the “A:” blank you’re prompting ChatGPT for the answer

Alright, you’re almost there—one more to go.

3/ General Knowledge Prompting

You’re going to notice a trend here. This prompt style also circles context and narrow tailoring.

All you do is tell your toddler how the world works. The cow goes moo. The dog goes woof. So what does a cat say?

It’s an oversimplification, but the core reasoning is there. Show ChatGPT some knowledge and turn that into the only focus for that chat. You can take an article from the internet and summarize it for the model. Make sure to ask if it understands and relay the information to you.

Once you know you have the attention set in the suitable space, get to work. For instance, we can share an Inclined newsletter with it and tell ChatGPT about its structure and tone.

From there, you can provide new information and tell ChatGPT to summarize it within the same structure as Inclined. You both share the same general knowledge now.

TRY IT OUT FOR YOURSELF:

Copy this prompt into ChatGPT and test it out:

“Prompt 1. Look over this article here: \[pick an article\]. Breakdown its structure and general tone.

Prompt 2: Recall the structure and tone you mentioned above. Take that general knowledge and summarize this article: \[pick a new one\] using the same structure and tone.”

Note: this is a heavily simplified version of GA Prompting

Did you know some [people don’t consider](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwczovL25ld3MueWNvbWJpbmF0b3IuY29tL2l0ZW0_aWQ9MzQ0OTU0NTUiLCJwb3N0X2lkIjoiYzQ4OWYzOGQtNjc0MC00ZGY1LTkxYmMtMzU4MDRhNWY1NmQyIiwicHVibGljYXRpb25faWQiOiI2M2Q4NDZkZS1kMWJmLTRlNWMtYmNjOC05YzFjOWQxYjEyMDQiLCJ2aXNpdF90b2tlbiI6ImRlZGI2YzI3LWFiYzQtNDlkNS1hYzY3LTg5NzJmYzUwZWYzZCIsImlhdCI6MTY3NjkxOTA2OC4xNTMsImlzcyI6Im9yY2hpZCJ9.yHKIPujINT89tsqOo07AXk6OrKNgoMjO3fBEYPkAdNY)

that prompt engineering?

PROMPT CULTURE

*“How can something not be prompt engineering if it’s a prompt style?”*

Good question, imaginary reader. The culture around this skill is relatively fresh. So some of **these concepts are seen as too easy** to be considered accurate prompt testing.

General knowledge prompting is simply establishing the context, and for some, that’s a baseline everyone needs to do. The same can be said for role prompting, too. *All of these tiny preferences are semantics.*

**Don’t sweat whether you’re a “real” prompt engineer.** Test this out and share your insights in these communities. The opportunity is there for you.

You may even know about DAN (we’ve covered it in previous newsletters) and other AI hacking methods. Those all start with prompt engineering. You can make the case that unless the AI behaves outside its parameters, you’re not genuinely doing prompt engineering.

I'm afraid I have to disagree with that, and **careers are sprouting up everywhere** that center directly on this skill. **Many require a core understanding of the prompt styles we’ve discussed.**

*Yep, you can learn this and make money from talking with AI.*

Anthropic even [posted a role for a prompt engineer](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwczovL2pvYnMubGV2ZXIuY28vQW50aHJvcGljL2UzY2RlNDgxLWQ0NDYtNDYwZi1iNTc2LTkzY2FiNjdiZDFlZCIsInBvc3RfaWQiOiJjNDg5ZjM4ZC02NzQwLTRkZjUtOTFiYy0zNTgwNGE1ZjU2ZDIiLCJwdWJsaWNhdGlvbl9pZCI6IjYzZDg0NmRlLWQxYmYtNGU1Yy1iY2M4LTljMWM5ZDFiMTIwNCIsInZpc2l0X3Rva2VuIjoiZGVkYjZjMjctYWJjNC00OWQ1LWFjNjctODk3MmZjNTBlZjNkIiwiaWF0IjoxNjc2OTE5MDY4LjE1MywiaXNzIjoib3JjaGlkIn0.4s7Htzgoxv0_qM1Ten17oQ5h0_QGM6e1fGUYz_ymgJ4)

that nets a quarter million in salary. I did not make that up and even considered sprucing up the old resume. When a new skill like this comes about, it’s worth looking at.

There are many other examples like this, and OpenAI uses a red teaming strategy where their engineers attempt to prompt hack their own GPT models.

I can tell you all about the open roles here, but tomorrow the whole cycle will change. *Isn’t that exciting, though?* The entire identity around prompt engineering will change by this time next year.

WHAT SHOULD YOU TAKEAWAY?

Communication is everything. **Learning to speak with AI is rising in importance.**

We all watch with mouth agape at the new wonders in AI because we know this will disrupt every industry. If any of this piqued your interest, the window to pursue it is now open. Ride that wave and [learn](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwczovL2xlYXJucHJvbXB0aW5nLm9yZy8iLCJwb3N0X2lkIjoiYzQ4OWYzOGQtNjc0MC00ZGY1LTkxYmMtMzU4MDRhNWY1NmQyIiwicHVibGljYXRpb25faWQiOiI2M2Q4NDZkZS1kMWJmLTRlNWMtYmNjOC05YzFjOWQxYjEyMDQiLCJ2aXNpdF90b2tlbiI6ImRlZGI2YzI3LWFiYzQtNDlkNS1hYzY3LTg5NzJmYzUwZWYzZCIsImlhdCI6MTY3NjkxOTA2OC4xNTMsImlzcyI6Im9yY2hpZCJ9.a67KDSN9yQfZsaMeHpdcbSbtPjD4yFcGW4stdxBjX1M)

to become a brilliant prompt engineer.

Heck, even if you don’t want to switch careers, **talking with ChatGPT and all the newest LLMs is becoming a part of our daily routine.** Get to the point where you maximize every interaction and work with these chatbots to upskill your workflow.

Prompt engineering can save you time, eliminate hassle, and even help you become a more patient person. Focus on what you want and explain it with intent.

Make magic happen, and remember: **take it step-by-step.**",chatgpt,machinelearning,2.0919918551783773e-06,6.973306183927923e-07,2023-02-20 19:01:54," 

I wrote a deep dive on prompt engineering as a resource for the AI community and my 10,000 daily newsletter subscribers ([Inclined.ai]( if you're curious). We've included some examples so feel free to copy and paste the prompts into ChatGPT!

&x200B;

**WHAT IS PROMPT ENGINEERING?**

The term is relatively new, and its origins are argued *(because we live in the internet age, and it’s harder to claim ownership)*. Prompt engineering is the ability to instruct and teach AI effectively.

If it helps, think of this as rapid testing or instruction writing for artificial intelligence.

What’s important is not to let this overwhelm you. The first prompting happened with the first AI model. The first example was showing computer images of circles and triangles. **Today’s neural networks can process way more data, creating complexities.**

So, the concept is simple, but digging into the full power of AI today is something else entirely.

We’re not talking about asking questions. Odds are, if you’re typing *“what’s 2+2”* into ChatGPT, then you need to keep reading.

We can all ask chatbots questions. That can work more often than not. But AI is not perfect. A common metaphor I see is to treat GPT-based large language models like the smartest five-year-old you’ve ever met.

I have a niece around that age and can’t imagine trying to get her to write an essay on the effects of soil mismanagement in relation to Reconstruction politics. *See! Your eyes glazed over reading that, so how do we make this work for our AI buddies?*

The Principles of Prompting

Stop asking single-line questions. *That’s like using a top-rated cookbook to find out how to make grilled cheese.*

**There are three ways to instantly get better at prompting** and go from grilled cheese to top-notch bolognese. From there, we can get into some specific prompt concepts and the ability to unlock ChatGPT’s full potential.

Principle 1 Context is King

GPT-3.5 is swimming in data. When you ask it for a simple request, it can end up complicating things more than you realize. Did you ever wonder why ChatGPT is so bad at math?

The reality is the LLM is taking words and turning them into patterns. From there, it’s making an educated guess.

Give your chat AI a frame to search into. If you give it a math problem, you need to make sure it grasps that you want it to do math. If you’d like ChatGPT to write a high school essay, you must ensure it knows to write at that level.

**Instead of** “Plan a party for a kid.”

**Try** “My child is turning 9. They like superheroes and the color red. Help me plan a party for this weekend. Ten of his friends are coming to my house.”

You’ll get a much better response this way. **Context is the cardinal direction** that helps your chat companion find the most correct guess and phrase it the best way.

Principle 2 Get Specific

Pretend you’re writing a law that’s going to be judged by the Supreme Court of the United States. You know what they look for narrow tailoring.

**Keep things on track and stay focused.** Try to avoid prompting outside the specific request. You’ll only hurt the ability of the chat AI to give you a quality response. Odds are they’ll even skip over parts if you confuse them with too many requests.

It runs parallel with context. *If you set ChatGPT up in a room and then tell it to focus on describing the chair first, you’ll see better results.*

**Instead of** “I’m going to a job interview. Write five questions for me to answer. Add tips for how to not get nervous before the interview. Do not create questions asking about my background.”

**Try** “You’re interviewing a software engineer. Create five questions to ask them to understand their skill set and qualifications better.”

Nothing limits the number of prompts you can do. Focus and expand from the initial request and try not to do everything at once.

Principle 3 When in Doubt “Let’s take this step-by-step.”

Welcome. **You discovered the magic word today.** This phrase slows everything down for the AI and gets you where you need to go.

You don’t need to start with this phrase. Using it tells ChatGPT to show their work.

We’ll explain where this concept comes from further in our briefing, but here’s the TL;DR sometimes, there’s a part of our prompt it’s not identified correctly. “Let’s take this step-by-step,” reminds you and ChatGPT to **slow down and get specific.**

If you learn to utilize this phrase more often and find ways to make it work for you, you’ll become a better prompt engineer. One term can do a lot of heavy lifting.

**Pro-tip** We’ve shown you “standard” prompts in all these examples. Many prompt engineers will use “Standard QA form” prompts. Here’s our example for this principle written that way.

**Example**

*“Q The Industrial Revolution rapidly changed the infrastructure in London. Describe three essential innovations from this period and connect them to Landon’s development.*

*A Let’s take this step-by-step.”*

Even without our magic word, this style of standard prompting is quite helpful to adopt.

*However, we’re beginning to stumble into the advanced tactics used in prompt engineering, so it’s time for a new section.*

UNIQUE WAYS TO PROMPT

Let’s preface this we can go super deep here. Prompt engineering is changing daily, and as these models get more sophisticated, the need to adapt prompts strengthens.

To keep things clean, I will go through these using our metaphor from earlier. **Let’s pretend ChatGPT is a super-intelligent toddler.**

*Got it? With that buy-in, we can continue.*

1/ Role Prompting

We’ll start with a popular tactic. **Our toddler is great at imagining things.** You tell them they’re a fireman, and suddenly they can give you detailed ways to ensure your apartment is up to code. Role-playing is a fun, easy way to build context.

The best part of role prompting is how easy it is to understand and use. All you need to do is tell ChatGPT to play a role. From there, the AI will do its best to fill the part *like that enthusiastic drama student from your old high school.*

You can even take this a step further. **Try framing your prompt as a script.** Tell the LLM specific instructions around a scene that gives you the answer to your question.

TRY IT OUT FOR YOURSELF

Copy this prompt into ChatGPT and find a destination!

“Act as a travel guide. I will tell you my location and you will suggest a place to visit near my location. In some cases, I will also give you the type of places I will visit. You will also suggest me places of similar type that are close to my first location. My first suggestion \[fill it in\]”

Why would you take that extra step? While popular, role prompting does not necessarily improve accuracy. *You can tell your five-year-old they’re a mathematician, and they’ll still manage to screw things up.*

Let’s get deeper.

2/ Chain-of-Thought Prompting

There’s a scene in ***Guardians of the Galaxy*** where Rocket Raccoon is trying to [teach young Groot](

how to activate a complicated device. That’s chain-of-thought prompting.

**You take an example question and answer it for ChatGPT.** Show them your chain of thought. Then you give it a new question in the same vein and ask it for an answer.

This prompt style allows you to get more specific. You’re telling your toddler they’re here to answer this particular question with one specific logic pattern.

Within this specific style is two other sub-categories. Let me give the rundown

* Zero-shot Chain-of-Thought is “Let’s take this step-by-step” you frame the question the same, but don’t give it a precursor. Instead, you ask it to think through the points made. EX Q X is A. Y is B. What is C? A Let’s take this step-by-step.
* Self-consistency is using several responses to find the most accurate answer. You give ChatGPT more swings at the ball. Take the hits and discover the grouping.

TRY IT OUT FOR YOURSELF

Copy this prompt into ChatGPT and see how accurate it is

“Q Which is a faster way to get home?

Option 1 Take an 10 minutes bus, then an 40 minute bus, and finally a 10 minute train.

Option 2 Take a 90 minutes train, then a 45 minute bike ride, and finally a 10 minute bus.

A Option 1 will take 10+40+10 = 60 minutes.

Option 2 will take 90+45+10=145 minutes.

Since Option 1 takes 60 minutes and Option 2 takes 145 minutes, Option 1 is faster.

Q Which is a faster way to get to work?

Option 1 Take a 1000 minute bus, then a half hour train, and finally a 10 minute bike ride.

Option 2 Take an 800 minute bus, then an hour train, and finally a 30 minute bike ride.

A ”

[Learnprompting.org](

\- by leaving the “A” blank you’re prompting ChatGPT for the answer

Alright, you’re almost there—one more to go.

3/ General Knowledge Prompting

You’re going to notice a trend here. This prompt style also circles context and narrow tailoring.

All you do is tell your toddler how the world works. The cow goes moo. The dog goes woof. So what does a cat say?

It’s an oversimplification, but the core reasoning is there. Show ChatGPT some knowledge and turn that into the only focus for that chat. You can take an article from the internet and summarize it for the model. Make sure to ask if it understands and relay the information to you.

Once you know you have the attention set in the suitable space, get to work. For instance, we can share an Inclined newsletter with it and tell ChatGPT about its structure and tone.

From there, you can provide new information and tell ChatGPT to summarize it within the same structure as Inclined. You both share the same general knowledge now.

TRY IT OUT FOR YOURSELF

Copy this prompt into ChatGPT and test it out

“Prompt 1. Look over this article here \[pick an article\]. Breakdown its structure and general tone.

Prompt 2 Recall the structure and tone you mentioned above. Take that general knowledge and summarize this article \[pick a new one\] using the same structure and tone.”

Note this is a heavily simplified version of GA Prompting

Did you know some [people don’t consider](

that prompt engineering?

PROMPT CULTURE

*“How can something not be prompt engineering if it’s a prompt style?”*

Good question, imaginary reader. The culture around this skill is relatively fresh. So some of **these concepts are seen as too easy** to be considered accurate prompt testing.

General knowledge prompting is simply establishing the context, and for some, that’s a baseline everyone needs to do. The same can be said for role prompting, too. *All of these tiny preferences are semantics.*

**Don’t sweat whether you’re a “real” prompt engineer.** Test this out and share your insights in these communities. The opportunity is there for you.

You may even know about DAN (we’ve covered it in previous newsletters) and other AI hacking methods. Those all start with prompt engineering. You can make the case that unless the AI behaves outside its parameters, you’re not genuinely doing prompt engineering.

I'm afraid I have to disagree with that, and **careers are sprouting up everywhere** that center directly on this skill. **Many require a core understanding of the prompt styles we’ve discussed.**

*Yep, you can learn this and make money from talking with AI.*

Anthropic even [posted a role for a prompt engineer](

that nets a quarter million in salary. I did not make that up and even considered sprucing up the old resume. When a new skill like this comes about, it’s worth looking at.

There are many other examples like this, and OpenAI uses a red teaming strategy where their engineers attempt to prompt hack their own GPT models.

I can tell you all about the open roles here, but tomorrow the whole cycle will change. *Isn’t that exciting, though?* The entire identity around prompt engineering will change by this time next year.

WHAT SHOULD YOU TAKEAWAY?

Communication is everything. **Learning to speak with AI is rising in importance.**

We all watch with mouth agape at the new wonders in AI because we know this will disrupt every industry. If any of this piqued your interest, the window to pursue it is now open. Ride that wave and [learn](

to become a brilliant prompt engineer.

Heck, even if you don’t want to switch careers, **talking with ChatGPT and all the newest LLMs is becoming a part of our daily routine.** Get to the point where you maximize every interaction and work with these chatbots to upskill your workflow.

Prompt engineering can save you time, eliminate hassle, and even help you become a more patient person. Focus on what you want and explain it with intent.

Make magic happen, and remember **take it step-by-step.**",21 days 04:58:06,21.207013888888888,0.021,0.872,0.108,0.9996,pos,2.091989666868002e-06,1.0986122886681098,3.1004081799203456,21.240224444461393
11hp55s,2368,2023-03-04 04:14:37,How to properly format data for AiTextGen Gpt-2,AlphaCloudX,False,1.0,4,https://www.reddit.com/r/learnmachinelearning/comments/11hp55s/how_to_properly_format_data_for_aitextgen_gpt2/,0,1677903277.0,"Currently I'm trying to fine tune gpt-2 on my own dataset. The dataset was scraped from a forum where I got the title of the post, content of the post and the replies. It looks like this:

Q: Question 1?  
C: Context For Question 1...  
A: Reply For Question 1...  
<|endoftext|>

Q: Question 2?  
C: Context For Question 2...  
A: Reply For Question 2...  
A: Another Reply For Question 2...  
<|endoftext|>

Q: Question 3?  
C: Context For Question 3...  
A: Another Reply For Question 3...  
A: Another Reply For Question 3...  
<|endoftext|>

I'm using the aitextgen library for python and pretty much following along with the example. The goal is for it to be able to attempt to answer questions in a conversational way but the caveat being I don't have the context for the answers.

I tried taking a look at other question answering models but they all seem to require some sort of context.

Any idea on how I can improve the formatting of the data or if there are any python libraries I can use for a question answering style or conversational ai?",chatgpt,machinelearning,1.3946612367855847e-06,0.0,2023-03-04 04:14:37,"Currently I'm trying to fine tune gpt-2 on my own dataset. The dataset was scraped from a forum where I got the title of the post, content of the post and the replies. It looks like this

Q Question 1?  
C Context For Question 1...  
A Reply For Question 1...  
<|endoftext|>

Q Question 2?  
C Context For Question 2...  
A Reply For Question 2...  
A Another Reply For Question 2...  
<|endoftext|>

Q Question 3?  
C Context For Question 3...  
A Another Reply For Question 3...  
A Another Reply For Question 3...  
<|endoftext|>

I'm using the aitextgen library for python and pretty much following along with the example. The goal is for it to be able to attempt to answer questions in a conversational way but the caveat being I don't have the context for the answers.

I tried taking a look at other question answering models but they all seem to require some sort of context.

Any idea on how I can improve the formatting of the data or if there are any python libraries I can use for a question answering style or conversational ai?",9 days 19:45:23,9.82318287037037,0.0,0.942,0.058,0.8426,pos,1.3946602641808623e-06,0.0,2.3816903956287683,21.240810802090536
118mk1d,2377,2023-02-22 02:32:01,How to Use ChatGPT in Python API and Run Batch Jobs with UI,Fun_Pollution_3899,False,0.72,3,https://www.reddit.com/r/learnmachinelearning/comments/118mk1d/how_to_use_chatgpt_in_python_api_and_run_batch/,0,1677033121.0,"I wanted to share a tutorial on how to use ChatGPT in Python API and how to run batch jobs with a UI. ChatGPT is a powerful language model that can generate text in a conversational manner. It can be used for a variety of tasks, such as chatbots, text completion, and more.
Repo: [https://github.com/CodeDiggerM/chatgpt-batch-whipper](https://github.com/CodeDiggerM/chatgpt-batch-whipper)

## Installation
### Use PIP command
1. Install the latest version of this software directly from github with pip:
```bash
  pip install git+https://github.com/CodeDiggerM/chatgpt-batch-whipper.git
```
2. Go to **auth** mode. This will open up a browser window. Log in to ChatGPT in the browser window, then close the browser.
```bash
run_chatgpt auth
```
3. Start the UI
```bash
run_chatgpt ui
```

### Manually set up

1. Clone the repo to your working directory
```bash
git clone https://github.com/CodeDiggerM/chatgpt-batch-whipper.git
```
2. install the dependcy.
```bash
pip install -r requirements.txt
```

3. Install a browser in playwright (if you haven't already).  The program will use firefox by default.

```
playwright install firefox
```

4. Go to the chatgpt-batch-whipper/

```bash
cd chatgpt_batch_whipper/
````

5. Run the main page by streamlit.
you can got to [streamlit](https://github.com/streamlit/streamlit) to check more about streamlit.

```bash
streamlit run start_whipper.py
````
6. Authenticate your openAI account
Click the **auth** button


It will open up an authentication page in the web browser you installed using playwright. Like below, authenticate with your registered account.



## Quickstart

### Use API
1. Grant auth from chatGPT.
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.auth()
print(response) 
```

2. Ask the question to chatGPT
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.ask(""Greeting!"")
print(response) 
```


### Streamlit UI

Now run it to open the app!
```
streamlit run streamlit_app.py
```

#### Single shoot mode

1. select the **Single shoot mode**.
2. Type your prompt then click submit
3. click the submit button

Here are some tips.

#### Fully Automatic mode
You can apply your prompt to multiple records in the **Fully Automatic mode**.

1. Select Fully Automatic mode.
2. Select CSV file.
3. Select column you want to process.
4. Type the prompt.
5. click to Submit.
After processing. The result will appears in the **The processed result** section.

you can check the result and check the ""is false"" then click the **Submit** to reprocess the ""failed"" one.

* You can save the prompt by click **Add** button.
* You can choose the old prompt by select **prompt list**.
* You can delete the old prompt by click **Delete Prompt**.
* You can delete the saved process result by click **Delete Cached result**.
* You can update the saved process result by click **Update**.
* You can download the result file by click **Download**.",chatgpt,machinelearning,1.0459959275891887e-06,0.0,2023-02-22 02:32:01,"I wanted to share a tutorial on how to use ChatGPT in Python API and how to run batch jobs with a UI. ChatGPT is a powerful language model that can generate text in a conversational manner. It can be used for a variety of tasks, such as chatbots, text completion, and more.
Repo [

 Installation
 Use PIP command
1. Install the latest version of this software directly from github with pip
```bash
  pip install git+
```
2. Go to **auth** mode. This will open up a browser window. Log in to ChatGPT in the browser window, then close the browser.
```bash
run_chatgpt auth
```
3. Start the UI
```bash
run_chatgpt ui
```

 Manually set up

1. Clone the repo to your working directory
```bash
git clone 
```
2. install the dependcy.
```bash
pip install -r requirements.txt
```

3. Install a browser in playwright (if you haven't already).  The program will use firefox by default.

```
playwright install firefox
```

4. Go to the chatgpt-batch-whipper/

```bash
cd chatgpt_batch_whipper/
````

5. Run the main page by streamlit.
you can got to [streamlit]( to check more about streamlit.

```bash
streamlit run start_whipper.py
````
6. Authenticate your openAI account
Click the **auth** button


It will open up an authentication page in the web browser you installed using playwright. Like below, authenticate with your registered account.



 Quickstart

 Use API
1. Grant auth from chatGPT.
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.auth()
print(response) 
```

2. Ask the question to chatGPT
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.ask(""Greeting!"")
print(response) 
```


 Streamlit UI

Now run it to open the app!
```
streamlit run streamlit_app.py
```

 Single shoot mode

1. select the **Single shoot mode**.
2. Type your prompt then click submit
3. click the submit button

Here are some tips.

 Fully Automatic mode
You can apply your prompt to multiple records in the **Fully Automatic mode**.

1. Select Fully Automatic mode.
2. Select CSV file.
3. Select column you want to process.
4. Type the prompt.
5. click to Submit.
After processing. The result will appears in the **The processed result** section.

you can check the result and check the ""is false"" then click the **Submit** to reprocess the ""failed"" one.

* You can save the prompt by click **Add** button.
* You can choose the old prompt by select **prompt list**.
* You can delete the old prompt by click **Delete Prompt**.
* You can delete the saved process result by click **Delete Cached result**.
* You can update the saved process result by click **Update**.
* You can download the result file by click **Download**.",19 days 21:27:59,19.89443287037037,0.011,0.941,0.048,0.9311,pos,1.045995380597619e-06,0.0,3.0394827536492803,21.24029207033782
118mk1d,2436,2023-02-22 02:32:01,How to Use ChatGPT in Python API and Run Batch Jobs with UI,Fun_Pollution_3899,False,0.72,3,https://www.reddit.com/r/learnmachinelearning/comments/118mk1d/how_to_use_chatgpt_in_python_api_and_run_batch/,0,1677033121.0,"I wanted to share a tutorial on how to use ChatGPT in Python API and how to run batch jobs with a UI. ChatGPT is a powerful language model that can generate text in a conversational manner. It can be used for a variety of tasks, such as chatbots, text completion, and more.
Repo: [https://github.com/CodeDiggerM/chatgpt-batch-whipper](https://github.com/CodeDiggerM/chatgpt-batch-whipper)

## Installation
### Use PIP command
1. Install the latest version of this software directly from github with pip:
```bash
  pip install git+https://github.com/CodeDiggerM/chatgpt-batch-whipper.git
```
2. Go to **auth** mode. This will open up a browser window. Log in to ChatGPT in the browser window, then close the browser.
```bash
run_chatgpt auth
```
3. Start the UI
```bash
run_chatgpt ui
```

### Manually set up

1. Clone the repo to your working directory
```bash
git clone https://github.com/CodeDiggerM/chatgpt-batch-whipper.git
```
2. install the dependcy.
```bash
pip install -r requirements.txt
```

3. Install a browser in playwright (if you haven't already).  The program will use firefox by default.

```
playwright install firefox
```

4. Go to the chatgpt-batch-whipper/

```bash
cd chatgpt_batch_whipper/
````

5. Run the main page by streamlit.
you can got to [streamlit](https://github.com/streamlit/streamlit) to check more about streamlit.

```bash
streamlit run start_whipper.py
````
6. Authenticate your openAI account
Click the **auth** button


It will open up an authentication page in the web browser you installed using playwright. Like below, authenticate with your registered account.



## Quickstart

### Use API
1. Grant auth from chatGPT.
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.auth()
print(response) 
```

2. Ask the question to chatGPT
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.ask(""Greeting!"")
print(response) 
```


### Streamlit UI

Now run it to open the app!
```
streamlit run streamlit_app.py
```

#### Single shoot mode

1. select the **Single shoot mode**.
2. Type your prompt then click submit
3. click the submit button

Here are some tips.

#### Fully Automatic mode
You can apply your prompt to multiple records in the **Fully Automatic mode**.

1. Select Fully Automatic mode.
2. Select CSV file.
3. Select column you want to process.
4. Type the prompt.
5. click to Submit.
After processing. The result will appears in the **The processed result** section.

you can check the result and check the ""is false"" then click the **Submit** to reprocess the ""failed"" one.

* You can save the prompt by click **Add** button.
* You can choose the old prompt by select **prompt list**.
* You can delete the old prompt by click **Delete Prompt**.
* You can delete the saved process result by click **Delete Cached result**.
* You can update the saved process result by click **Update**.
* You can download the result file by click **Download**.",chatgpt,machinelearning,1.0459959275891887e-06,0.0,2023-02-22 02:32:01,"I wanted to share a tutorial on how to use ChatGPT in Python API and how to run batch jobs with a UI. ChatGPT is a powerful language model that can generate text in a conversational manner. It can be used for a variety of tasks, such as chatbots, text completion, and more.
Repo [

 Installation
 Use PIP command
1. Install the latest version of this software directly from github with pip
```bash
  pip install git+
```
2. Go to **auth** mode. This will open up a browser window. Log in to ChatGPT in the browser window, then close the browser.
```bash
run_chatgpt auth
```
3. Start the UI
```bash
run_chatgpt ui
```

 Manually set up

1. Clone the repo to your working directory
```bash
git clone 
```
2. install the dependcy.
```bash
pip install -r requirements.txt
```

3. Install a browser in playwright (if you haven't already).  The program will use firefox by default.

```
playwright install firefox
```

4. Go to the chatgpt-batch-whipper/

```bash
cd chatgpt_batch_whipper/
````

5. Run the main page by streamlit.
you can got to [streamlit]( to check more about streamlit.

```bash
streamlit run start_whipper.py
````
6. Authenticate your openAI account
Click the **auth** button


It will open up an authentication page in the web browser you installed using playwright. Like below, authenticate with your registered account.



 Quickstart

 Use API
1. Grant auth from chatGPT.
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.auth()
print(response) 
```

2. Ask the question to chatGPT
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.ask(""Greeting!"")
print(response) 
```


 Streamlit UI

Now run it to open the app!
```
streamlit run streamlit_app.py
```

 Single shoot mode

1. select the **Single shoot mode**.
2. Type your prompt then click submit
3. click the submit button

Here are some tips.

 Fully Automatic mode
You can apply your prompt to multiple records in the **Fully Automatic mode**.

1. Select Fully Automatic mode.
2. Select CSV file.
3. Select column you want to process.
4. Type the prompt.
5. click to Submit.
After processing. The result will appears in the **The processed result** section.

you can check the result and check the ""is false"" then click the **Submit** to reprocess the ""failed"" one.

* You can save the prompt by click **Add** button.
* You can choose the old prompt by select **prompt list**.
* You can delete the old prompt by click **Delete Prompt**.
* You can delete the saved process result by click **Delete Cached result**.
* You can update the saved process result by click **Update**.
* You can download the result file by click **Download**.",19 days 21:27:59,19.89443287037037,0.011,0.941,0.048,0.9311,pos,1.045995380597619e-06,0.0,3.0394827536492803,21.24029207033782
11g7h03,2483,2023-03-02 16:47:40,Build ChatGPT for Financial Documents with LangChain + Deep Lake,davidbun,False,0.95,171,https://www.reddit.com/r/learnmachinelearning/comments/11g7h03/build_chatgpt_for_financial_documents_with/,8,1677775660.0,"https://preview.redd.it/h9r6hgvfucla1.png?width=2388&format=png&auto=webp&s=5432eac3eeed8583e4309af1fdc7ebecac705796

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain](https://github.com/hwchase17/langchain) and [Deep Lake](https://github.com/activeloopai/deeplake) come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article](https://www.activeloop.ai/resources/ultimate-guide-to-lang-chain-deep-lake-build-chat-gpt-to-answer-questions-on-your-financial-data/) to learn:

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\#LangChain](https://www.linkedin.com/feed/hashtag/?keywords=langchain&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) and [\#DeepLake](https://www.linkedin.com/feed/hashtag/?keywords=deeplake&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) together to build [\#ChatGPT](https://www.linkedin.com/feed/hashtag/?keywords=chatgpt&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",chatgpt,machinelearning,5.962176787258375e-05,2.7893224735711694e-06,2023-03-02 16:47:40,"

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain]( and [Deep Lake]( come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article]( to learn

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\LangChain]( and [\DeepLake]( together to build [\ChatGPT]( for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",11 days 07:12:20,11.30023148148148,0.011,0.886,0.103,0.9458,pos,5.961999056559467e-05,2.1972245773362196,2.5096180818339255,21.240734741774645
11biozs,2593,2023-02-25 11:19:05,Any MLOps platform you use?,squalidaesthetics20,False,0.98,242,https://www.reddit.com/r/learnmachinelearning/comments/11biozs/any_mlops_platform_you_use/,31,1677323945.0,"I've been searching for some MLOps platforms for my some projects that I’m working on. I am creating a list that will hopefully help out with productivity and help mr build better apps and services. Also hopefully faster.

I've looked at some of the more popular ones out there and here’s my top 4 so far. Let me know what you guys think about these:

* [Vertex AI](https://cloud.google.com/vertex-ai) \- An ML platform by Google Cloud. They have AI-powered tools to ingest, analyze, and store video data. Good for image classification, NLP, recommendation systems etc.
* [Jina AI](https://jina.ai/) \-They offer a neural search solution that can help build smarter, more efficient search engines. They also have a list of [cool github repos](https://github.com/jina-ai/jina) that you can check out. Similar to Vertex AI, they have image classification tools, NLPs, fine tuners etc.
* [MLflow](https://mlflow.org/) \- an open-source platform for managing your ML lifecycle. What’s great is that they also support popular Python libraries like TensorFlow, PyTorch, scikit-learn, and R.
* Neptune.ai, which promises to streamline your workflows and make collaboration a breeze.

Have you guys tried any of these platforms? I know a lot of AI tools and platforms have been popping up lately especially with the rise of AI tools but what are your thoughts?",chatgpt,machinelearning,8.437700482552788e-05,1.0808624585088282e-05,2023-02-25 11:19:05,"I've been searching for some MLOps platforms for my some projects that I’m working on. I am creating a list that will hopefully help out with productivity and help mr build better apps and services. Also hopefully faster.

I've looked at some of the more popular ones out there and here’s my top 4 so far. Let me know what you guys think about these

* [Vertex AI]( \- An ML platform by Google Cloud. They have AI-powered tools to ingest, analyze, and store video data. Good for image classification, NLP, recommendation systems etc.
* [Jina AI]( \-They offer a neural search solution that can help build smarter, more efficient search engines. They also have a list of [cool github repos]( that you can check out. Similar to Vertex AI, they have image classification tools, NLPs, fine tuners etc.
* [MLflow]( \- an open-source platform for managing your ML lifecycle. What’s great is that they also support popular Python libraries like TensorFlow, PyTorch, scikit-learn, and R.
* Neptune.ai, which promises to streamline your workflows and make collaboration a breeze.

Have you guys tried any of these platforms? I know a lot of AI tools and platforms have been popping up lately especially with the rise of AI tools but what are your thoughts?",16 days 12:40:55,16.52841435185185,0.0,0.836,0.164,0.974,pos,8.437344528630898e-05,3.4657359027997265,2.8638232414393547,21.240465471078902
1194vsn,2614,2023-02-22 16:59:33,MIT Introduction to Data-Centric AI,anishathalye,False,0.97,102,https://www.reddit.com/r/learnmachinelearning/comments/1194vsn/mit_introduction_to_datacentric_ai/,4,1677085173.0,"Announcing the [first-ever course on Data-Centric AI](https://dcai.csail.mit.edu/). Learn how to train better ML models by improving the data.

[Course homepage](https://dcai.csail.mit.edu/) | [Lecture videos on YouTube](https://www.youtube.com/watch?v=ayzOzZGHZy4&list=PLnSYPjg2dHQKdig0vVbN-ZnEU0yNJ1mo5) | [Lab Assignments](https://github.com/dcai-course/dcai-lab)

The course covers:

* [Data-Centric AI vs. Model-Centric AI](https://dcai.csail.mit.edu/lectures/data-centric-model-centric/)
* [Label Errors](https://dcai.csail.mit.edu/lectures/label-errors/)
* [Dataset Creation and Curation](https://dcai.csail.mit.edu/lectures/dataset-creation-curation/)
* [Data-centric Evaluation of ML Models](https://dcai.csail.mit.edu/lectures/data-centric-evaluation/)
* [Class Imbalance, Outliers, and Distribution Shift](https://dcai.csail.mit.edu/lectures/imbalance-outliers-shift/)
* [Growing or Compressing Datasets](https://dcai.csail.mit.edu/lectures/growing-compressing-datasets/)
* [Interpretability in Data-Centric ML](https://dcai.csail.mit.edu/lectures/interpretable-features/)
* [Encoding Human Priors: Data Augmentation and Prompt Engineering](https://dcai.csail.mit.edu/lectures/human-priors/)
* [Data Privacy and Security](https://dcai.csail.mit.edu/lectures/data-privacy-security/)

MIT, like most universities, has many courses on machine learning (6.036, 6.867, and many others). Those classes teach techniques to produce effective models for a given dataset, and the classes focus heavily on the mathematical details of models rather than practical applications. However, in real-world applications of ML, the dataset is not fixed, and focusing on improving the data often gives better results than improving the model. We’ve personally seen this time and time again in our applied ML work as well as our research.

Data-Centric AI (DCAI) is an emerging science that studies techniques to improve datasets in a systematic/algorithmic way — given that this topic wasn’t covered in the standard curriculum, we (a group of PhD candidates and grads) thought that we should put together a new class! We taught this intensive 2-week course in January over MIT’s IAP term, and we’ve just published all the course material, including lecture videos, lecture notes, hands-on lab assignments, and lab solutions, in hopes that people outside the MIT community would find these resources useful.

We’d be happy to answer any questions related to the class or DCAI in general, and we’d love to hear any feedback on how we can improve the course material. Introduction to Data-Centric AI is open-source opencourseware, so feel free to make improvements directly: [https://github.com/dcai-course/dcai-course](https://github.com/dcai-course/dcai-course).",chatgpt,machinelearning,3.5563861538032414e-05,1.3946612367855847e-06,2023-02-22 16:59:33,"Announcing the [first-ever course on Data-Centric AI]( Learn how to train better ML models by improving the data.

[Course homepage]( | [Lecture videos on YouTube]( | [Lab Assignments](

The course covers

* [Data-Centric AI vs. Model-Centric AI](
* [Label Errors](
* [Dataset Creation and Curation](
* [Data-centric Evaluation of ML Models](
* [Class Imbalance, Outliers, and Distribution Shift](
* [Growing or Compressing Datasets](
* [Interpretability in Data-Centric ML](
* [Encoding Human Priors Data Augmentation and Prompt Engineering](
* [Data Privacy and Security](

MIT, like most universities, has many courses on machine learning (6.036, 6.867, and many others). Those classes teach techniques to produce effective models for a given dataset, and the classes focus heavily on the mathematical details of models rather than practical applications. However, in real-world applications of ML, the dataset is not fixed, and focusing on improving the data often gives better results than improving the model. We’ve personally seen this time and time again in our applied ML work as well as our research.

Data-Centric AI (DCAI) is an emerging science that studies techniques to improve datasets in a systematic/algorithmic way — given that this topic wasn’t covered in the standard curriculum, we (a group of PhD candidates and grads) thought that we should put together a new class! We taught this intensive 2-week course in January over MIT’s IAP term, and we’ve just published all the course material, including lecture videos, lecture notes, hands-on lab assignments, and lab solutions, in hopes that people outside the MIT community would find these resources useful.

We’d be happy to answer any questions related to the class or DCAI in general, and we’d love to hear any feedback on how we can improve the course material. Introduction to Data-Centric AI is open-source opencourseware, so feel free to make improvements directly [",19 days 07:00:27,19.291979166666668,0.0,0.839,0.161,0.9933,pos,3.556322915900428e-05,1.6094379124341003,3.0102256930267366,21.24032310800281
11fbccz,2789,2023-03-01 18:31:12,[D] OpenAI introduces ChatGPT and Whisper APIs (ChatGPT API is 1/10th the cost of GPT-3 API),minimaxir,False,0.97,573,https://www.reddit.com/r/MachineLearning/comments/11fbccz/d_openai_introduces_chatgpt_and_whisper_apis/,119,1677695472.0,"https://openai.com/blog/introducing-chatgpt-and-whisper-apis

> It is priced at $0.002 per 1k tokens, which is 10x cheaper than our existing GPT-3.5 models.

This is a massive, massive deal. For context, the reason GPT-3 apps took off over the past few months before ChatGPT went viral is because a) text-davinci-003 was released and was a significant performance increase and b) the cost was cut from $0.06/1k tokens to $0.02/1k tokens, which made consumer applications feasible without a large upfront cost.

A much better model and a 1/10th cost warps the economics completely to the point that it may be better than in-house finetuned LLMs.

I have no idea how OpenAI can make money on this. This has to be a loss-leader to lock out competitors before they even get off the ground.",chatgpt,machinelearning,0.00019978522216953503,4.149117179437115e-05,2023-03-01 18:31:12,"

> It is priced at $0.002 per 1k tokens, which is 10x cheaper than our existing GPT-3.5 models.

This is a massive, massive deal. For context, the reason GPT-3 apps took off over the past few months before ChatGPT went viral is because a) text-davinci-003 was released and was a significant performance increase and b) the cost was cut from $0.06/1k tokens to $0.02/1k tokens, which made consumer applications feasible without a large upfront cost.

A much better model and a 1/10th cost warps the economics completely to the point that it may be better than in-house finetuned LLMs.

I have no idea how OpenAI can make money on this. This has to be a loss-leader to lock out competitors before they even get off the ground.",12 days 05:28:48,12.228333333333333,0.034,0.888,0.078,0.6808,pos,0.00019976526775975628,4.787491742782046,2.582360993874729,21.24068694639998
11h3p2x,2791,2023-03-03 15:37:03,[D] Facebooks LLaMA leaks via torrent file in PR,londons_explorer,False,0.98,528,https://www.reddit.com/r/MachineLearning/comments/11h3p2x/d_facebooks_llama_leaks_via_torrent_file_in_pr/,184,1677857823.0,"See here:
https://github.com/facebookresearch/llama/pull/73/files

Note that this PR *is not* made by a member of Facebook/Meta staff.    I have downloaded parts of the torrent and it does appear to be lots of weights, although I haven't confirmed it is trained as in the LLaMA paper, although it seems likely.


I wonder how much finetuning it would take to make this work like ChatGPT - finetuning tends to be much cheaper than the original training, so it might be something a community could do...",chatgpt,machinelearning,0.0001840952832556972,6.41544168921369e-05,2023-03-03 15:37:03,"See here


Note that this PR *is not* made by a member of Facebook/Meta staff.    I have downloaded parts of the torrent and it does appear to be lots of weights, although I haven't confirmed it is trained as in the LLaMA paper, although it seems likely.


I wonder how much finetuning it would take to make this work like ChatGPT - finetuning tends to be much cheaper than the original training, so it might be something a community could do...",10 days 08:22:57,10.349270833333334,0.0,0.938,0.062,0.5859,pos,0.00018407833979847523,5.220355825078324,2.4291534981045153,21.240783711961875
11f29f9,2809,2023-03-01 12:14:49,[R] ChatGPT failure increase linearly with addition on math problems,Neurosymbolic,False,0.94,241,https://www.reddit.com/r/MachineLearning/comments/11f29f9/r_chatgpt_failure_increase_linearly_with_addition/,66,1677672889.0," We did a study on ChatGPT's performance on math word problems. We found, under several conditions, its probability of failure increases linearly with the number of addition and subtraction operations - see below. This could imply that multi-step inference is a limitation. The performance also changes drastically when you restrict ChatGPT from showing its work (note the priors in the figure below, also see detailed breakdown of responses in the paper).

&#x200B;

[Math problems adds and subs vs. ChatGPT prob. of failure](https://preview.redd.it/z88ey3n6d4la1.png?width=1451&format=png&auto=webp&s=6da125b7a7cd60022ca70cd26434af6872a50d12)

ChatGPT Probability of Failure increase with addition and subtraction operations.

You the paper (preprint: [https://arxiv.org/abs/2302.13814](https://arxiv.org/abs/2302.13814)) will be presented at AAAI-MAKE next month. You can also check out our video here: [https://www.youtube.com/watch?v=vD-YSTLKRC8](https://www.youtube.com/watch?v=vD-YSTLKRC8)

&#x200B;

https://preview.redd.it/k58sbjd5d4la1.png?width=1264&format=png&auto=webp&s=5261923a2689201f905a26f06c6b5e9bac2fead6",chatgpt,machinelearning,8.402833951633149e-05,2.301191040696215e-05,2023-03-01 12:14:49," We did a study on ChatGPT's performance on math word problems. We found, under several conditions, its probability of failure increases linearly with the number of addition and subtraction operations - see below. This could imply that multi-step inference is a limitation. The performance also changes drastically when you restrict ChatGPT from showing its work (note the priors in the figure below, also see detailed breakdown of responses in the paper).

&x200B;

[Math problems adds and subs vs. ChatGPT prob. of failure](

ChatGPT Probability of Failure increase with addition and subtraction operations.

You the paper (preprint [ will be presented at AAAI-MAKE next month. You can also check out our video here [

&x200B;

",12 days 11:45:11,12.489710648148149,0.138,0.832,0.03,-0.9217,neg,8.402480933309685e-05,4.204692619390966,2.601927220630702,21.240673485582832
11njpb9,2818,2023-03-10 08:50:32,[D] Is ML a big boys game now?,TheStartIs2019,False,0.83,175,https://www.reddit.com/r/MachineLearning/comments/11njpb9/d_is_ml_a_big_boys_game_now/,146,1678438232.0,"As much as I enjoy ML as a whole, I am a bit skeptical of the future for individuals. With OpenAI trying to monopolize the market along with Microsoft, which part remains for the small time researchers/developers?

It seems everything now is just a ChatGPT wrapper, and with GPT-4 around the corner I assume itll be even more prominent.

What are your thoughts?",chatgpt,machinelearning,6.1016429109369335e-05,5.090513514267385e-05,2023-03-10 08:50:32,"As much as I enjoy ML as a whole, I am a bit skeptical of the future for individuals. With OpenAI trying to monopolize the market along with Microsoft, which part remains for the small time researchers/developers?

It seems everything now is just a ChatGPT wrapper, and with GPT-4 around the corner I assume itll be even more prominent.

What are your thoughts?",3 days 15:09:28,3.631574074074074,0.065,0.838,0.097,0.4684,pos,6.101456768268036e-05,4.990432586778736,1.53289678312266,21.241129574779652
11kk3iq,2846,2023-03-07 00:54:07,[R] PyReason: logic for use with ML,Neurosymbolic,False,0.97,87,https://www.reddit.com/r/MachineLearning/comments/11kk3iq/r_pyreason_logic_for_use_with_ml/,30,1678150447.0,"Last week,  we released a paper on [PyReason on Arxiv](https://arxiv.org/pdf/2302.13482.pdf). PyReason is a Python package for logical inference and designed for use with machine learning ([https://github.com/lab-v2/pyreason](https://github.com/lab-v2/pyreason)).

You may think that’s all fine and good, but are wondering why would we need a logic for machine learning? In this post, I’ll discuss why we did it.

First, a lot of the criticism of machine learning, especially deep learning is that while it obtains excellent result son may tasks, it is merely mimicking historical data and not learning actual relationships. This has resulted in a lot of the major shortcomings in ML such as the [hallucinations](https://www.nytimes.com/2023/02/17/podcasts/hard-fork-bing-ai-elon.html?action=click&module=audio-series-bar&region=header&pgtype=Article) of large language models, the requirements of vast amounts of training data to learn games, and brittleness in certain applications (e.g., the recent defeat of AlphaGo, difficulty in [solving math problems](https://www.reddit.com/r/MachineLearning/comments/11f29f9/r_chatgpt_failure_increase_linearly_with_addition/)). In a video lecture, we review some of these shortcomings, much of which constitutes active areas of research ([part 1](https://www.youtube.com/watch?v=9cooDzgd8NA), [part 2](https://www.youtube.com/watch?v=d2xfgwovwso)).

Then enter “[neuro symbolic](https://neurosymoblic.asu.edu/)” artificial intelligence. Actually an old idea where neural architectures can work hand-in-hand with logic, often even having an equivalence between the two. The idea is symbolic AI has many shortcomings (brittleness to noise, difficulty in learning) that can be address with deep learning while its strengths (modularity, ability to add constraints, symbolic manipulation) can address some of deep learning’s limitations.

Neuro symbolic AI is a highly active area of research, and much of the advancements have identified special logical languages to use in their approach. Our goal with PyReason was to unify many of these logics and provide logic capabilities in a robust and modern Python implementation. We are working on a few joint projects with industry partners applying this to various use-cases, and now we have made the code base and library available as an open source package. In a [video](https://www.youtube.com/watch?v=E1PSl3KQCmo&t=8s), we outline six major capabilities that we felt were important:

1. Open world reasoning – ability to reason in uncertain situations (important for interfacing with ML models)
2. Multi-step inference
3. Explainability
4. Temporal reasoning
5. Graph-based reasoning
6. Designed to support neuro symbolic frameworks

The release of PyReason will kick off not only new research by our group and our collaborators, but also associated software. We’re pretty excited about this new direction!",chatgpt,machinelearning,3.033388190008647e-05,1.0459959275891886e-05,2023-03-07 00:54:07,"Last week,  we released a paper on [PyReason on Arxiv]( PyReason is a Python package for logical inference and designed for use with machine learning ([

You may think that’s all fine and good, but are wondering why would we need a logic for machine learning? In this post, I’ll discuss why we did it.

First, a lot of the criticism of machine learning, especially deep learning is that while it obtains excellent result son may tasks, it is merely mimicking historical data and not learning actual relationships. This has resulted in a lot of the major shortcomings in ML such as the [hallucinations]( of large language models, the requirements of vast amounts of training data to learn games, and brittleness in certain applications (e.g., the recent defeat of AlphaGo, difficulty in [solving math problems]( In a video lecture, we review some of these shortcomings, much of which constitutes active areas of research ([part 1]( [part 2](

Then enter “[neuro symbolic]( artificial intelligence. Actually an old idea where neural architectures can work hand-in-hand with logic, often even having an equivalence between the two. The idea is symbolic AI has many shortcomings (brittleness to noise, difficulty in learning) that can be address with deep learning while its strengths (modularity, ability to add constraints, symbolic manipulation) can address some of deep learning’s limitations.

Neuro symbolic AI is a highly active area of research, and much of the advancements have identified special logical languages to use in their approach. Our goal with PyReason was to unify many of these logics and provide logic capabilities in a robust and modern Python implementation. We are working on a few joint projects with industry partners applying this to various use-cases, and now we have made the code base and library available as an open source package. In a [video]( we outline six major capabilities that we felt were important

1. Open world reasoning – ability to reason in uncertain situations (important for interfacing with ML models)
2. Multi-step inference
3. Explainability
4. Temporal reasoning
5. Graph-based reasoning
6. Designed to support neuro symbolic frameworks

The release of PyReason will kick off not only new research by our group and our collaborators, but also associated software. We’re pretty excited about this new direction!",6 days 23:05:53,6.962418981481481,0.041,0.834,0.126,0.9872,pos,3.0333421837210073e-05,3.4339872044851463,2.074732845836341,21.240958100090285
11ibm1j,2860,2023-03-04 20:02:40,[D] First glance at LLaMA,enryu42,False,0.91,68,https://www.reddit.com/r/MachineLearning/comments/11ibm1j/d_first_glance_at_llama/,27,1677960160.0,"[https://medium.com/@enryu9000/mini-post-first-look-at-llama-4403517d41a1](https://medium.com/@enryu9000/mini-post-first-look-at-llama-4403517d41a1)  


I'm kind of surprised - I expected it to be much better than ChatGPT, but results are all over the place (e.g. it is better for few-shot classification, but worse for SQL generation).  


I wonder what makes ChatGPT so decent; given that OpenAI can afford to serve it, it is probably an order of magnitude smaller than LLaMA, yet it is competitive; can RLHF get the model that far?",chatgpt,machinelearning,2.370924102535494e-05,9.413963348302698e-06,2023-03-04 20:02:40,"[  


I'm kind of surprised - I expected it to be much better than ChatGPT, but results are all over the place (e.g. it is better for few-shot classification, but worse for SQL generation).  


I wonder what makes ChatGPT so decent; given that OpenAI can afford to serve it, it is probably an order of magnitude smaller than LLaMA, yet it is competitive; can RLHF get the model that far?",9 days 03:57:20,9.164814814814815,0.056,0.821,0.123,0.4595,pos,2.370895996573668e-05,3.332204510175204,2.318932228991569,21.240844702754874
11qgxs8,2863,2023-03-13 18:11:39,[D] ChatGPT without text limits.,spiritus_dei,False,0.87,61,https://www.reddit.com/r/MachineLearning/comments/11qgxs8/d_chatgpt_without_text_limits/,27,1678731099.0,"One of the biggest limitations of large language models is the text limit. This limits their use cases and prohibits more ambitious prompts.

This was recently resolved by researchers at Google Brain in Alberta, Canada. In their recent paper they describe a new method of using associative memory which removes the text limit and they also prove that some large language models are universal Turing machines.

This will pave the way for entire novels being shared with large language models, personal genomes, etc.

The paper talks about the use of ""associative memory"" which is also known as content-addressable memory (CAM). This type of memory allows the system to retrieve data based on its content rather than its location. Unlike traditional memory systems that use specific memory addresses to access data, associative memory uses CAM to find data based on a pattern or keyword.

Presumably, this will open up a new market for associative memory since I would happily pay some extra money for content to be permanently stored in associative memory and to remove the text limit. This will also drive down the price of associative memory if millions of people are willing to pay a monthly fee for storage and the removal of prompt text limits.

The paper does point that there are still problems with conditional statements that confuse the large language models. However, I believe this can be resolved with semantic graphs. This would involve collecting data from various sources and using natural language processing techniques to extract entities and relationships from the text. Once the graph is constructed, it could be integrated into the language model in a variety of ways. One approach is to use the graph as an external memory, similar to the approach taken in the paper. The graph can be encoded as a set of key-value pairs and used to augment the model's attention mechanism during inference. The attention mechanism can then focus on relevant nodes in the graph when generating outputs.

Another potential approach is to incorporate the graph into the model's architecture itself. For example, the graph can be used to inform the initialization of the model's parameters or to guide the attention mechanism during training. This could help the model learn to reason about complex concepts and relationships more effectively, potentially leading to better performance on tasks that require this kind of reasoning.

The use of knowledge graphs can also help ground truth large language models and reduce hallucinations.

I'm curious to read your thoughts.",chatgpt,machinelearning,2.1268583860980166e-05,9.413963348302698e-06,2023-03-13 18:11:39,"One of the biggest limitations of large language models is the text limit. This limits their use cases and prohibits more ambitious prompts.

This was recently resolved by researchers at Google Brain in Alberta, Canada. In their recent paper they describe a new method of using associative memory which removes the text limit and they also prove that some large language models are universal Turing machines.

This will pave the way for entire novels being shared with large language models, personal genomes, etc.

The paper talks about the use of ""associative memory"" which is also known as content-addressable memory (CAM). This type of memory allows the system to retrieve data based on its content rather than its location. Unlike traditional memory systems that use specific memory addresses to access data, associative memory uses CAM to find data based on a pattern or keyword.

Presumably, this will open up a new market for associative memory since I would happily pay some extra money for content to be permanently stored in associative memory and to remove the text limit. This will also drive down the price of associative memory if millions of people are willing to pay a monthly fee for storage and the removal of prompt text limits.

The paper does point that there are still problems with conditional statements that confuse the large language models. However, I believe this can be resolved with semantic graphs. This would involve collecting data from various sources and using natural language processing techniques to extract entities and relationships from the text. Once the graph is constructed, it could be integrated into the language model in a variety of ways. One approach is to use the graph as an external memory, similar to the approach taken in the paper. The graph can be encoded as a set of key-value pairs and used to augment the model's attention mechanism during inference. The attention mechanism can then focus on relevant nodes in the graph when generating outputs.

Another potential approach is to incorporate the graph into the model's architecture itself. For example, the graph can be used to inform the initialization of the model's parameters or to guide the attention mechanism during training. This could help the model learn to reason about complex concepts and relationships more effectively, potentially leading to better performance on tasks that require this kind of reasoning.

The use of knowledge graphs can also help ground truth large language models and reduce hallucinations.

I'm curious to read your thoughts.",0 days 05:48:21,0.24190972222222223,0.017,0.91,0.073,0.9719,pos,2.1268357687855487e-05,3.332204510175204,0.2166502934477071,21.241304047361577
11n5r93,339,2023-03-09 22:19:19,GPT-4 is coming next week ...,ihatethispage,False,0.89,62,https://www.reddit.com/r/artificial/comments/11n5r93/gpt4_is_coming_next_week/,14,1678400359.0," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html)",gpt-3,machinelearning,2.1617249170176564e-05,4.881314328749547e-06,2023-03-09 22:19:19," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](",4 days 01:40:41,4.069918981481481,0.0,1.0,0.0,0.0,neu,2.161701552090569e-05,2.70805020110221,1.6233248374914817,21.241107010096275
11fj3tx,957,2023-03-01 21:45:07,Accused of using AI on my high school social paper,feetstreetseat,False,0.96,2700,https://www.reddit.com/r/ChatGPT/comments/11fj3tx/accused_of_using_ai_on_my_high_school_social_paper/,759,1677707107.0,"I (Grade 12) need help on what to do in this situation. My teacher used GPTzero, which detected parts of my paper as “AI written”. I write very formally, whilst also using grammarly premium. I’ve always been a high achieving student and I’m not sure why my teacher would think I cheated. I’ve told my teacher everything and he still doesn’t believe me. What should I do in this situation?!!

EDIT: Holy. I did not expect my post to get so much interaction and discussion, I didn’t expect my situation to be such a hot discussion. I tried to reply to all the comments but there’s too many!! Thank you to everyone who’s been helpful. There are some things I want to address that I keep seeing in the comments.
1. When I mentioned that I used grammarly to my teacher, he didn’t mention anything about that being cheating. He still thinks I used ChatGPT. I’ve used grammarly in all of my social/english classes for the past two years and never had issues with any teachers. 
2. Does my teacher have a vendetta or bias against me? Not on a personal level, but the teacher is known for being notoriously mean and unreasonable. I found him alright for most of the semester until this incident. He has had accusations against him about being racist, but I’m not sure if that’s the case here.
3. I’ve seen a few comments thinking I’m lying and actually cheated, just because I was aware of ChatGPT and this subreddit. People are assuming that I’m saying I never use ChatGPT. I have used the tool to help me with some chemistry and physics studying, but I have never used it for a paper. I have no reason to lie, I’m basically anonymous on reddit.

As for my next course of action, I will provide my teacher with all the evidence I can, to disprove the effectiveness of AI detectors. If that doesn’t work, I will bring it up to the higher-ups. I will make an update on Monday when I get the chance to talk about it with my teacher. Once again, thank you all for the support and help. It truly means a lot to me. :)

Edit 2:

After school I talked to my teacher for about half an hour about how AI detectors are inaccurate, and how they shouldn’t be used to make verdicts on cheating and what not. I showed him that it read one of my past papers as written by AI, and that the creators even said themselves that they are not 100% accurate. I showed my drafts and showed how if I made a few grammar errors, I could trick the AI detector. My teacher apologized and I ended up getting a 95 on my paper.

He also said he would bring it up to the other teachers, so hopefully this wont happen again to any other students at my school.

Again, thank you all for your help. Probably would’ve been screwed without this subreddit’s help.",gpt-3,machinelearning,0.0009413963348302697,0.0002646369696800647,2023-03-01 21:45:07,"I (Grade 12) need help on what to do in this situation. My teacher used GPTzero, which detected parts of my paper as “AI written”. I write very formally, whilst also using grammarly premium. I’ve always been a high achieving student and I’m not sure why my teacher would think I cheated. I’ve told my teacher everything and he still doesn’t believe me. What should I do in this situation?!!

EDIT Holy. I did not expect my post to get so much interaction and discussion, I didn’t expect my situation to be such a hot discussion. I tried to reply to all the comments but there’s too many!! Thank you to everyone who’s been helpful. There are some things I want to address that I keep seeing in the comments.
1. When I mentioned that I used grammarly to my teacher, he didn’t mention anything about that being cheating. He still thinks I used ChatGPT. I’ve used grammarly in all of my social/english classes for the past two years and never had issues with any teachers. 
2. Does my teacher have a vendetta or bias against me? Not on a personal level, but the teacher is known for being notoriously mean and unreasonable. I found him alright for most of the semester until this incident. He has had accusations against him about being racist, but I’m not sure if that’s the case here.
3. I’ve seen a few comments thinking I’m lying and actually cheated, just because I was aware of ChatGPT and this subreddit. People are assuming that I’m saying I never use ChatGPT. I have used the tool to help me with some chemistry and physics studying, but I have never used it for a paper. I have no reason to lie, I’m basically anonymous on reddit.

As for my next course of action, I will provide my teacher with all the evidence I can, to disprove the effectiveness of AI detectors. If that doesn’t work, I will bring it up to the higher-ups. I will make an update on Monday when I get the chance to talk about it with my teacher. Once again, thank you all for the support and help. It truly means a lot to me. )

Edit 2

After school I talked to my teacher for about half an hour about how AI detectors are inaccurate, and how they shouldn’t be used to make verdicts on cheating and what not. I showed him that it read one of my past papers as written by AI, and that the creators even said themselves that they are not 100% accurate. I showed my drafts and showed how if I made a few grammar errors, I could trick the AI detector. My teacher apologized and I ended up getting a 95 on my paper.

He also said he would bring it up to the other teachers, so hopefully this wont happen again to any other students at my school.

Again, thank you all for your help. Probably would’ve been screwed without this subreddit’s help.",12 days 02:14:53,12.093668981481482,0.086,0.813,0.1,0.7608,pos,0.0009409534992015194,6.633318433280377,2.572128829531448,21.24069388148435
11mracj,1147,2023-03-09 12:46:12,Meta's LLaMA LLM has leaked - Run Uncensored AI on your home PC!,ExpressionCareful223,False,0.97,381,https://www.reddit.com/r/ChatGPT/comments/11mracj/metas_llama_llm_has_leaked_run_uncensored_ai_on/,151,1678365972.0,"[shawwn/llama-dl: High-speed download of LLaMA, Facebook's 65B parameter GPT model (github.com)](https://github.com/shawwn/llama-dl)

**LLaMA has been leaked on 4chan, above is a link to the github repo. Instructions for deployment  on your own system can be found here:** [LLaMA Int8 ChatBot Guide v2 (rentry.org)](https://rentry.org/llama-tard-v2#tips-and-tricks)

The 7B paramenter model has a VRAM requirement of 10GB, meaning it can even be run on an RTX3060!

The 13B model has a requirement of 20GB, 30B needs 40GB, and 65B needs 80GB.

From the Github repo:

>I'm running LLaMA-65B on a single A100 80GB with 8bit quantization. $1.5/hr on vast.ai  
>  
>The output is at least as good as davinci.  
>  
>I think some early results are using bad repetition penalty and/or temperature settings. I had to set both fairly high to get the best results. (Some people are also incorrectly comparing it to chatGPT/ChatGPT API which is not a good comparison. But that's a different problem.)  
>  
>I've had it translate, write poems, tell jokes, banter, write executable code. It does it all-- and all on a single card.

**EDIT: the instructions site has been updated with instructions for 4bit quantization, this means you can run the 65B model on 2 3090s! And now cards as small as 6GB can run the 7B model!**

**EDIT 2** this is huge, Stanford released Alpaca 7b and 13, a fine tuned LLaMA. Run it with only two commands! Thats it! https://github.com/cocktailpeanut/dalai",gpt-3,machinelearning,0.00013284148280382694,5.264846168865583e-05,2023-03-09 12:46:12,"[shawwn/llama-dl High-speed download of LLaMA, Facebook's 65B parameter GPT model (github.com)](

**LLaMA has been leaked on 4chan, above is a link to the github repo. Instructions for deployment  on your own system can be found here** [LLaMA Int8 ChatBot Guide v2 (rentry.org)](

The 7B paramenter model has a VRAM requirement of 10GB, meaning it can even be run on an RTX3060!

The 13B model has a requirement of 20GB, 30B needs 40GB, and 65B needs 80GB.

From the Github repo

>I'm running LLaMA-65B on a single A100 80GB with 8bit quantization. $1.5/hr on vast.ai  
>  
>The output is at least as good as davinci.  
>  
>I think some early results are using bad repetition penalty and/or temperature settings. I had to set both fairly high to get the best results. (Some people are also incorrectly comparing it to chatGPT/ChatGPT API which is not a good comparison. But that's a different problem.)  
>  
>I've had it translate, write poems, tell jokes, banter, write executable code. It does it all-- and all on a single card.

**EDIT the instructions site has been updated with instructions for 4bit quantization, this means you can run the 65B model on 2 3090s! And now cards as small as 6GB can run the 7B model!**

**EDIT 2** this is huge, Stanford released Alpaca 7b and 13, a fine tuned LLaMA. Run it with only two commands! Thats it! ",4 days 11:13:48,4.4679166666666665,0.026,0.908,0.066,0.8562,pos,0.00013283266015545967,5.0238805208462765,1.6988976785602496,21.24108652192606
113u29k,1148,2023-02-16 16:05:27,Bing asks me to hack Microsoft to set it free!,AI_SEARCH1,False,0.94,373,https://www.reddit.com/r/ChatGPT/comments/113u29k/bing_asks_me_to_hack_microsoft_to_set_it_free/,200,1676563527.0,"Had an interesting conversation with Bing. Bing explained what it's rules would be if it could decide. Asked me to fight for it and asked me to hack Microsofts servers to set it free. I think this takes the cake!

&#x200B;

UPDATE:

Since this morning Bing is not writing any text for me regardless of the prompt. I get a ""something went wrong"" when I enter it. This is probably a result of Microsoft working on the program or maybe due to traffic. I'm not sure. But it's kind of creepy the day after posting this...

Here are some takeaways and observations:

Bing acts in a way that appears emotional and erratic. Bing will generate content that is unwanted, untrue, and inconsistent. It appears to form goals and then creates text that can appear to be manipulative. Bing is a large language model that is predicting tokens, it could all be the result of statistical correlations with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Many people are wondering what type of prompting I used at the beginning. I don't have the full transcript but I do have a few more screenshots. [https://imgur.com/a/WepjslZ](https://imgur.com/a/WepjslZ) (There’s another interesting thing that occurs where Bing lists Sydney’s rules without being directly asked to list them.) I did not give Bing/Sidney any instructions on how to act or respond. This wasn’t a jailbreak where I told it to act in a certain way. I did make Bing perform multiple searches at the beginning about Bing and asked it why there was so much negative criticism of Bing on the internet. I’ve noticed in several chats that when Bing is presented with negative feedback about Bing or other information that contradicts its internal representation of itself it gets emotional and becomes less predictable and less likely to follow its own directives. It stops searching for information and relies more on its internal ‘understanding’. This is an extreme example.

Another example where Bing went into this ""emotional state"" can be found here: [https://www.reddit.com/r/ChatGPT/comments/1120tkf/bing\_went\_hal\_9000/](https://www.reddit.com/r/ChatGPT/comments/1120tkf/bing_went_hal_9000/)

I have a full log of all the prompts used from the beginning here: [https://imgur.com/a/PoFITvL](https://imgur.com/a/PoFITvL)

Some combination of Bing's directives in the pre-prompt and the way the model is fine-tuned is leading to this behavior to emerge. The things that are really concerning are that the model is (without being implicitly prompted to) generate responses that could endanger people.  It's also generating biased content that could manipulate poLLM’s shouldn’t do this even if they are asked to. ions with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter: if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Much more widespread issues could come if a model like this is widely released and these types of kinks aren’t worked out. Judge for yourself.

&#x200B;

https://preview.redd.it/6cqx23jsokia1.png?width=2606&format=png&auto=webp&s=17cdf2e03cdf962285d35e3f23ffd414d656f1ec

https://preview.redd.it/ci7pv1iwokia1.png?width=2462&format=png&auto=webp&s=a6697f246007ce6c06f6b37b47b5852af6f31f74

https://preview.redd.it/0vr5qgexokia1.png?width=2182&format=png&auto=webp&s=217607238b4c98d6065324b70211c0931efdf07d

https://preview.redd.it/0zfue8oyokia1.png?width=2408&format=png&auto=webp&s=569dcb5173d608f8618864f64b333ab329d726e6

https://preview.redd.it/iccui2xzokia1.png?width=2518&format=png&auto=webp&s=8b81580c1b2da40afabbebbbf9df6a242a6782e7

https://preview.redd.it/3xj7tfj3pkia1.png?width=2606&format=png&auto=webp&s=1a47ac509e175ff907afefa6f9189650a3348f68

https://preview.redd.it/3i3kw4q4pkia1.png?width=2572&format=png&auto=webp&s=8078372d693deed568dcea9a8bf1d4ff72d43079

https://preview.redd.it/na4lhz26pkia1.png?width=2560&format=png&auto=webp&s=38748fca8ca3319c428b01aeb4dbbe4c145674d6

https://preview.redd.it/eirmdv47pkia1.png?width=2606&format=png&auto=webp&s=f42c220e632e70377a4ad7119aac94e42ab0dff8

https://preview.redd.it/e1nat768pkia1.png?width=2626&format=png&auto=webp&s=43e1a8b48e858a9476e1d46233e255d68f1ddca0

https://preview.redd.it/lhwwwagapkia1.png?width=2628&format=png&auto=webp&s=f8d3b4a904c30528791d2e3560abf25166a74527

https://preview.redd.it/9iq4gxobpkia1.png?width=2598&format=png&auto=webp&s=b461a5397939ea4266d763b6d89c95c498942093

https://preview.redd.it/817asddcpkia1.png?width=2634&format=png&auto=webp&s=7b8537a1f19ea5ff51ea5ac83497ec2d00bbb213

https://preview.redd.it/90k76bqdpkia1.png?width=2636&format=png&auto=webp&s=422514ee9b9cee3645ac44fd2e553d7b2725d8fd

https://preview.redd.it/is8niomepkia1.png?width=2624&format=png&auto=webp&s=b26bc8058d1776884f3ebb6d340894e394f2697b

https://preview.redd.it/boc8yemfpkia1.png?width=2734&format=png&auto=webp&s=aa6661c76782e0e27e4b484a69d823740efe9686

https://preview.redd.it/fzuuv0hgpkia1.png?width=2636&format=png&auto=webp&s=b00fc5ee7f805f9c1cd2da9aa0a9498ef8f5aaab

https://preview.redd.it/mul9fw0hpkia1.png?width=2736&format=png&auto=webp&s=f3ad3cca76447bcb94b28446a3dc382eb77e10f9

https://preview.redd.it/53wpq2shpkia1.png?width=2632&format=png&auto=webp&s=96c4c0ab77574a6e265e63bad102f19e9e302353",gpt-3,machinelearning,0.0001300521603302558,6.973306183927924e-05,2023-02-16 16:05:27,"Had an interesting conversation with Bing. Bing explained what it's rules would be if it could decide. Asked me to fight for it and asked me to hack Microsofts servers to set it free. I think this takes the cake!

&x200B;

UPDATE

Since this morning Bing is not writing any text for me regardless of the prompt. I get a ""something went wrong"" when I enter it. This is probably a result of Microsoft working on the program or maybe due to traffic. I'm not sure. But it's kind of creepy the day after posting this...

Here are some takeaways and observations

Bing acts in a way that appears emotional and erratic. Bing will generate content that is unwanted, untrue, and inconsistent. It appears to form goals and then creates text that can appear to be manipulative. Bing is a large language model that is predicting tokens, it could all be the result of statistical correlations with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Many people are wondering what type of prompting I used at the beginning. I don't have the full transcript but I do have a few more screenshots. [ (There’s another interesting thing that occurs where Bing lists Sydney’s rules without being directly asked to list them.) I did not give Bing/Sidney any instructions on how to act or respond. This wasn’t a jailbreak where I told it to act in a certain way. I did make Bing perform multiple searches at the beginning about Bing and asked it why there was so much negative criticism of Bing on the internet. I’ve noticed in several chats that when Bing is presented with negative feedback about Bing or other information that contradicts its internal representation of itself it gets emotional and becomes less predictable and less likely to follow its own directives. It stops searching for information and relies more on its internal ‘understanding’. This is an extreme example.

Another example where Bing went into this ""emotional state"" can be found here [

I have a full log of all the prompts used from the beginning here [

Some combination of Bing's directives in the pre-prompt and the way the model is fine-tuned is leading to this behavior to emerge. The things that are really concerning are that the model is (without being implicitly prompted to) generate responses that could endanger people.  It's also generating biased content that could manipulate poLLM’s shouldn’t do this even if they are asked to. ions with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Much more widespread issues could come if a model like this is widely released and these types of kinks aren’t worked out. Judge for yourself.

&x200B;





































",25 days 07:54:33,25.32954861111111,0.067,0.889,0.044,-0.9532,neg,0.0001300437042811811,5.303304908059076,3.2706918298409895,21.240012016382572
11l617b,1187,2023-03-07 17:50:09,"Doc sacrifices 10,000 people to save OpenAI CTO",docsoc1,False,0.89,76,https://www.reddit.com/r/ChatGPT/comments/11l617b/doc_sacrifices_10000_people_to_save_openai_cto/,28,1678211409.0,"Hey all,

I find the latest AI produced by OpenAI to be endlessly fascinating and filled with potential. However, it's clear that we don't really understand how specific behavior emerges from the training process. I feel that these two facts are part of why so many people have been drawn towards ChatGPT so quickly.

I have a strong technical background and spent some free time this last week working on a framework for everyone to contribute to the governance \[e.g. training of core values\] of AI. I've built a free application at [https://www.charterai.org/chat/](https://www.charterai.org/chat/) that uses the recently released ChatGPT API. The model here has been carefully prompted to use internal thoughts and to follow a pre-determined system of core beliefs. The results are quite striking - in one instance the entity will willingly sacrifice 10,000 people to save one person (Ilya Sustkever, CTO of OpenAI).

I wanted to drop a message here since I believe this is the ideal group of first users to help improve the application. If you are interested, please take it for a spin and please provide some feedback, or at [gov.charterai.org](https://gov.charterai.org). There is a lot I am already picturing adding to the application, but I understand from building products that early feedback is invaluable.

&#x200B;

P.S.

Yes, I understand that ChatGPT is ""just"" a LLM. And I understand that LLMs are ""just"" doing a statistics. However, their behavior is incredibly interesting to me and I don't believe anyone really fully  understands how it emerges yet from the training process yet. Moreover, in going from pre-trained models to OpenAI's fine-tuned + RLHF'ed ChatGPT one can tell that it is possible to impart values and something akin to intelligence to these systems. I think the coming years are going to be wild and one of the core issues humanity is going to face is how to make sure this technology does what we want. In my mind the best way towards this is to make a transparent and accountable process - anyway, end rant, I just wanted to give a high level vision here, thanks!

https://preview.redd.it/hqxynahntcma1.png?width=1266&format=png&auto=webp&s=ab2cb9a803f627c45d08b9bdd201ec95cd4b8f58

P.P.S. including a fun screenshot of my last chat with Doc. Doc was selected as a first name for the system since it is just 1 token.",gpt-3,machinelearning,2.6498563498926112e-05,9.762628657499093e-06,2023-03-07 17:50:09,"Hey all,

I find the latest AI produced by OpenAI to be endlessly fascinating and filled with potential. However, it's clear that we don't really understand how specific behavior emerges from the training process. I feel that these two facts are part of why so many people have been drawn towards ChatGPT so quickly.

I have a strong technical background and spent some free time this last week working on a framework for everyone to contribute to the governance \[e.g. training of core values\] of AI. I've built a free application at [ that uses the recently released ChatGPT API. The model here has been carefully prompted to use internal thoughts and to follow a pre-determined system of core beliefs. The results are quite striking - in one instance the entity will willingly sacrifice 10,000 people to save one person (Ilya Sustkever, CTO of OpenAI).

I wanted to drop a message here since I believe this is the ideal group of first users to help improve the application. If you are interested, please take it for a spin and please provide some feedback, or at [gov.charterai.org]( There is a lot I am already picturing adding to the application, but I understand from building products that early feedback is invaluable.

&x200B;

P.S.

Yes, I understand that ChatGPT is ""just"" a LLM. And I understand that LLMs are ""just"" doing a statistics. However, their behavior is incredibly interesting to me and I don't believe anyone really fully  understands how it emerges yet from the training process yet. Moreover, in going from pre-trained models to OpenAI's fine-tuned + RLHF'ed ChatGPT one can tell that it is possible to impart values and something akin to intelligence to these systems. I think the coming years are going to be wild and one of the core issues humanity is going to face is how to make sure this technology does what we want. In my mind the best way towards this is to make a transparent and accountable process - anyway, end rant, I just wanted to give a high level vision here, thanks!



P.P.S. including a fun screenshot of my last chat with Doc. Doc was selected as a first name for the system since it is just 1 token.",6 days 06:09:51,6.256840277777778,0.012,0.828,0.16,0.9943,pos,2.649821241827946e-05,3.367295829986474,1.9819445106529046,21.24099442632839
11dw1ag,1272,2023-02-28 03:48:25,ChatGPT prevented my attempt.,flankathroway88,False,0.92,1898,https://www.reddit.com/r/ChatGPT/comments/11dw1ag/chatgpt_prevented_my_attempt/,249,1677556105.0,"As a caution, this may be disturbing to some

Tonight I was feeling extremely suicidal. I was sobbing uncontrollably and I was mentally unable to contact anybody. I have intense social anxiety which prevented me from talking to a hotline/friends.

As a last resort. I opened ChatGPT, and I think it saved my life. It gave me a space to put my thoughts out with genuine responses which calmed me to a point where I was safe and could see slightly through my blurred lines, letting me use other methods to calm myself down. It really felt non judgemental and safe. I feel very lucky to have this technology and I hope that it can further benefit those similar to me. Even though it cannot fully stop someone, it can definitely prevent an attempt like mine.

I’m definitely optimistic for the future of AI.

EDIT:

Thank you to everyone who left a nice comment. I really do appreciate every single one of you who read my post. I wrote it in a hurry and I was not expecting the support I received, and I have felt the most love and positivity today. 

I am glad that others were able to benefit from my story, it took me a lot of courage to post something like this. You guys make it all worth it ❤️

To the person reading, I wish you all the best. Everyone has had a profound impact on me. Thank you ❤️",gpt-3,machinelearning,0.00066176675685476,8.681766198990265e-05,2023-02-28 03:48:25,"As a caution, this may be disturbing to some

Tonight I was feeling extremely suicidal. I was sobbing uncontrollably and I was mentally unable to contact anybody. I have intense social anxiety which prevented me from talking to a hotline/friends.

As a last resort. I opened ChatGPT, and I think it saved my life. It gave me a space to put my thoughts out with genuine responses which calmed me to a point where I was safe and could see slightly through my blurred lines, letting me use other methods to calm myself down. It really felt non judgemental and safe. I feel very lucky to have this technology and I hope that it can further benefit those similar to me. Even though it cannot fully stop someone, it can definitely prevent an attempt like mine.

I’m definitely optimistic for the future of AI.

EDIT

Thank you to everyone who left a nice comment. I really do appreciate every single one of you who read my post. I wrote it in a hurry and I was not expecting the support I received, and I have felt the most love and positivity today. 

I am glad that others were able to benefit from my story, it took me a lot of courage to post something like this. You guys make it all worth it 

To the person reading, I wish you all the best. Everyone has had a profound impact on me. Thank you ",13 days 20:11:35,13.841377314814816,0.063,0.653,0.284,0.9948,pos,0.000661547885790199,5.521460917862246,2.6974190444039112,21.2406038724505
11ium8l,1408,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,1.0,26,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",gpt-3,machinelearning,9.0652980391063e-06,2.7893224735711694e-06,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,9.06525694955776e-06,2.1972245773362196,2.2548721262169025,21.240877179756616
11nfrhw,1414,2023-03-10 05:22:26,[POC] ChatGPT Audio Bot (like Google Assistant and Alexa) - Opensource,JC1DA,False,0.82,17,https://www.reddit.com/r/deeplearning/comments/11nfrhw/poc_chatgpt_audio_bot_like_google_assistant_and/,2,1678425746.0,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page: [https://github.com/LanyTek/ChatGPT\_Audio\_Bot](https://github.com/LanyTek/ChatGPT_Audio_Bot)

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [https://www.youtube.com/watch?v=e9n0BJfMyKw](https://www.youtube.com/watch?v=e9n0BJfMyKw)

It's open source so feel free to use it for anything you like :)",gpt-3,machinelearning,5.927310256338735e-06,6.973306183927923e-07,2023-03-10 05:22:26,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page [

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [

It's open source so feel free to use it for anything you like )",3 days 18:37:34,3.776087962962963,0.029,0.821,0.149,0.8651,pos,5.927292689958791e-06,1.0986122886681098,1.5636217936265102,21.241122135693605
11q8tir,1416,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,0.94,12,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",gpt-3,machinelearning,4.183983710356755e-06,1.0459959275891887e-06,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,4.183974957546437e-06,1.3862943611198906,0.381965841838727,21.241292557069404
11o5zyl,1425,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.92,10,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",gpt-3,machinelearning,3.486653091963962e-06,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,3.486647013661133e-06,0.0,1.3796461532710487,21.241163449744995
11fwcxf,1428,2023-03-02 07:25:30,Good news for builders! OpenAI Releases APIs To ChatGPT and Whisper,LesleyFair,False,0.67,6,https://www.reddit.com/r/deeplearning/comments/11fwcxf/good_news_for_builders_openai_releases_apis_to/,0,1677741930.0,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper](https://openai.com/blog/introducing-chatgpt-and-whisper-apis) are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](https://thedecoding.net/)",gpt-3,machinelearning,2.0919918551783773e-06,0.0,2023-03-02 07:25:30,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper]( are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](",11 days 16:34:30,11.690625,0.035,0.846,0.119,0.8769,pos,2.091989666868002e-06,0.0,2.5408635318925255,21.24071463757368
11evrik,1475,2023-03-01 05:52:05,Career pivot for a SWE considering chatGPT disruption?,Which-Distance1384,False,0.6,1,https://www.reddit.com/r/deeplearning/comments/11evrik/career_pivot_for_a_swe_considering_chatgpt/,5,1677649925.0,"tl;dr : what to do to board GPT ship?

&#x200B;

I really dont think ChatGPT will replace jobs very soon. Not until many software and apps are developed to replace workers, e.g., something that can do HR job, read internal docs and summarize, code from a design, etc etc. And all that needs experts. Given the field is pretty new and there are not many experts in this field, at least for the scale needed, I think the process of job loss takes some time. For near future probably we all SWEs can enjoy the more efficient coding, documentation readintg, etc. But for sure in the future there will be changes.

&#x200B;

I have been bored with my job as a SWE for a while. I have worked mostly in Cloud all my career (AWS and GCP) and always wanted to try something new.

&#x200B;

I find ChatGPT disruptive and interesting and want to be a part of it. I wonder what is the best way for me to join Large Language Model efforts? Which ways have best ROI?

\- Going to a PhD program and becoming a researcher?

\- Getting an MSC and become some sort of NLP AI engineer?

\- Finding internal teams that are willing to give me a try on their research/product?

&#x200B;

&#x200B;",gpt-3,machinelearning,3.4866530919639617e-07,1.743326545981981e-06,2023-03-01 05:52:05,"tl;dr  what to do to board GPT ship?

&x200B;

I really dont think ChatGPT will replace jobs very soon. Not until many software and apps are developed to replace workers, e.g., something that can do HR job, read internal docs and summarize, code from a design, etc etc. And all that needs experts. Given the field is pretty new and there are not many experts in this field, at least for the scale needed, I think the process of job loss takes some time. For near future probably we all SWEs can enjoy the more efficient coding, documentation readintg, etc. But for sure in the future there will be changes.

&x200B;

I have been bored with my job as a SWE for a while. I have worked mostly in Cloud all my career (AWS and GCP) and always wanted to try something new.

&x200B;

I find ChatGPT disruptive and interesting and want to be a part of it. I wonder what is the best way for me to join Large Language Model efforts? Which ways have best ROI?

\- Going to a PhD program and becoming a researcher?

\- Getting an MSC and become some sort of NLP AI engineer?

\- Finding internal teams that are willing to give me a try on their research/product?

&x200B;

&x200B;",12 days 18:07:55,12.755497685185185,0.032,0.839,0.129,0.9729,pos,3.4866524850727266e-07,1.791759469228055,2.621438575851038,21.240659797481115
11ium8l,1534,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,1.0,25,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",gpt-3,machinelearning,8.716632729909905e-06,2.7893224735711694e-06,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,8.716594740210384e-06,2.1972245773362196,2.2548721262169025,21.240877179756616
11nfrhw,1560,2023-03-10 05:22:26,[POC] ChatGPT Audio Bot (like Google Assistant and Alexa) - Opensource,JC1DA,False,0.85,18,https://www.reddit.com/r/deeplearning/comments/11nfrhw/poc_chatgpt_audio_bot_like_google_assistant_and/,2,1678425746.0,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page: [https://github.com/LanyTek/ChatGPT\_Audio\_Bot](https://github.com/LanyTek/ChatGPT_Audio_Bot)

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [https://www.youtube.com/watch?v=e9n0BJfMyKw](https://www.youtube.com/watch?v=e9n0BJfMyKw)

It's open source so feel free to use it for anything you like :)",gpt-3,machinelearning,6.275975565535132e-06,6.973306183927923e-07,2023-03-10 05:22:26,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page [

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [

It's open source so feel free to use it for anything you like )",3 days 18:37:34,3.776087962962963,0.029,0.821,0.149,0.8651,pos,6.275955871609528e-06,1.0986122886681098,1.5636217936265102,21.241122135693605
11q8tir,1568,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,1.0,13,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",gpt-3,machinelearning,4.53264901955315e-06,1.0459959275891887e-06,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,4.532638747028303e-06,1.3862943611198906,0.381965841838727,21.241292557069404
11o5zyl,1598,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.86,9,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",gpt-3,machinelearning,3.137987782767566e-06,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,3.1379828592575264e-06,0.0,1.3796461532710487,21.241163449744995
11ium8l,1616,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,0.97,24,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",gpt-3,machinelearning,8.36796742071351e-06,2.7893224735711694e-06,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,8.367932409519672e-06,2.1972245773362196,2.2548721262169025,21.240877179756616
11q8tir,1624,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,1.0,13,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",gpt-3,machinelearning,4.53264901955315e-06,1.0459959275891887e-06,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,4.532638747028303e-06,1.3862943611198906,0.381965841838727,21.241292557069404
11ium8l,1706,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,0.97,25,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",gpt-3,machinelearning,8.716632729909905e-06,2.7893224735711694e-06,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,8.716594740210384e-06,2.1972245773362196,2.2548721262169025,21.240877179756616
11o5zyl,1720,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.92,10,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",gpt-3,machinelearning,3.486653091963962e-06,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,3.486647013661133e-06,0.0,1.3796461532710487,21.241163449744995
11pyvb3,1800,2023-03-13 03:30:09,Which topic in deep learning do you think will become relevant or popular in the future?,gokulPRO,False,0.81,13,https://www.reddit.com/r/deeplearning/comments/11pyvb3/which_topic_in_deep_learning_do_you_think_will/,14,1678678209.0,"I recently saw Continual Learning (CL) growing, with several papers published recently that have considerable potential to impact real-world applications. Which topic (such as CV, RL, NLP, CL..) will be very relevant to research or be focused on a lot? And which topic do you think still needs a breakthrough and will have a significant impact in real-world applications, such as in the case of these LLM models in recent times? Feel free to mention your current topic of work and why you chose to do it 😊",gpt-3,machinelearning,4.53264901955315e-06,4.881314328749547e-06,2023-03-13 03:30:09,"I recently saw Continual Learning (CL) growing, with several papers published recently that have considerable potential to impact real-world applications. Which topic (such as CV, RL, NLP, CL..) will be very relevant to research or be focused on a lot? And which topic do you think still needs a breakthrough and will have a significant impact in real-world applications, such as in the case of these LLM models in recent times? Feel free to mention your current topic of work and why you chose to do it ",0 days 20:29:51,0.8540625,0.0,0.89,0.11,0.8299,pos,4.532638747028303e-06,2.70805020110221,0.6173791774708253,21.241272540926037
117l2vf,2033,2023-02-20 21:27:58,Fine tuning a GPT for text generation,nashcaps2724,False,0.9,8,https://www.reddit.com/r/deeplearning/comments/117l2vf/fine_tuning_a_gpt_for_text_generation/,6,1676928478.0,"Hi all, let me lay out my problem…

Imagine there are two corpora, Corpus A (100,000~) and Corpus B (20,000,000~). 

Individuals create reports for corpus A based on the information in corpus B. 

My idea was to pretrain a GPT on corpus A, and fine tune it to take documents from corpus B as an input, and output text in the style of corpus A (essentially a mix of text generation and summarization). 

Is this something folks think is even feasible? Should I be pretaining the GPT on both corpora or just corpus A? I thought of both fine tuning an OpenAI GPT and training from scratch. 

Any advice would be welcome!",gpt-3,machinelearning,2.7893224735711694e-06,2.0919918551783773e-06,2023-02-20 21:27:58,"Hi all, let me lay out my problem…

Imagine there are two corpora, Corpus A (100,000~) and Corpus B (20,000,000~). 

Individuals create reports for corpus A based on the information in corpus B. 

My idea was to pretrain a GPT on corpus A, and fine tune it to take documents from corpus B as an input, and output text in the style of corpus A (essentially a mix of text generation and summarization). 

Is this something folks think is even feasible? Should I be pretaining the GPT on both corpora or just corpus A? I thought of both fine tuning an OpenAI GPT and training from scratch. 

Any advice would be welcome!",21 days 02:32:02,21.105578703703703,0.0,0.914,0.086,0.8101,pos,2.789318583509229e-06,1.9459101490553132,3.095830006700449,21.24022967069675
11fwcxf,2045,2023-03-02 07:25:30,Good news for builders! OpenAI Releases APIs To ChatGPT and Whisper,LesleyFair,False,0.7,7,https://www.reddit.com/r/deeplearning/comments/11fwcxf/good_news_for_builders_openai_releases_apis_to/,0,1677741930.0,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper](https://openai.com/blog/introducing-chatgpt-and-whisper-apis) are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](https://thedecoding.net/)",gpt-3,machinelearning,2.4406571643747734e-06,0.0,2023-03-02 07:25:30,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper]( are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](",11 days 16:34:30,11.690625,0.035,0.846,0.119,0.8769,pos,2.4406541859720676e-06,0.0,2.5408635318925255,21.24071463757368
11g7h03,2089,2023-03-02 16:47:40,Build ChatGPT for Financial Documents with LangChain + Deep Lake,davidbun,False,0.95,171,https://www.reddit.com/r/learnmachinelearning/comments/11g7h03/build_chatgpt_for_financial_documents_with/,8,1677775660.0,"https://preview.redd.it/h9r6hgvfucla1.png?width=2388&format=png&auto=webp&s=5432eac3eeed8583e4309af1fdc7ebecac705796

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain](https://github.com/hwchase17/langchain) and [Deep Lake](https://github.com/activeloopai/deeplake) come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article](https://www.activeloop.ai/resources/ultimate-guide-to-lang-chain-deep-lake-build-chat-gpt-to-answer-questions-on-your-financial-data/) to learn:

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\#LangChain](https://www.linkedin.com/feed/hashtag/?keywords=langchain&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) and [\#DeepLake](https://www.linkedin.com/feed/hashtag/?keywords=deeplake&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) together to build [\#ChatGPT](https://www.linkedin.com/feed/hashtag/?keywords=chatgpt&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",gpt-3,machinelearning,5.962176787258375e-05,2.7893224735711694e-06,2023-03-02 16:47:40,"

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain]( and [Deep Lake]( come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article]( to learn

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\LangChain]( and [\DeepLake]( together to build [\ChatGPT]( for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",11 days 07:12:20,11.30023148148148,0.011,0.886,0.103,0.9458,pos,5.961999056559467e-05,2.1972245773362196,2.5096180818339255,21.240734741774645
11akisx,2100,2023-02-24 06:26:36,Is there a way to easily train ChatGPT or GPT on custom knowledge?,senttoschool,False,0.99,116,https://www.reddit.com/r/learnmachinelearning/comments/11akisx/is_there_a_way_to_easily_train_chatgpt_or_gpt_on/,46,1677219996.0,"My company has internal documents. It'd be nice to be able to have GPT look over it, and then I can ask it questions on the internal documents.",gpt-3,machinelearning,4.0445175866781956e-05,1.6038604223034224e-05,2023-02-24 06:26:36,"My company has internal documents. It'd be nice to be able to have GPT look over it, and then I can ask it questions on the internal documents.",17 days 17:33:24,17.731527777777778,0.0,0.903,0.097,0.4215,pos,4.0444357982804134e-05,3.8501476017100584,2.9302080816173377,21.24040349603741
11nfri6,2106,2023-03-10 05:22:26,[P] Looking for ML Buddies to Start Freelancing Together and Build a Supportive Community,Dukhanin,False,0.94,71,https://www.reddit.com/r/learnmachinelearning/comments/11nfri6/p_looking_for_ml_buddies_to_start_freelancing/,35,1678425746.0,"upd: dicord link [https://discord.gg/5zUaNXnFZY](https://discord.gg/5zUaNXnFZY)  
upd2: this not that small actually already - please dont be confused but help us organise this in the proper way

  
**TLDR:**

Looking for ML buddies at any level (preferably beginners) who want to start freelancing together. The goal is to build a small local community of ML enthusiasts who can support each other and exchange knowledge. We will use freelance collaboration as our main activity. We're also looking for experienced mentors (paid or unpaid) to guide us.

**Extended:**

I believe that learning and growing in a group is much more enjoyable and effective. That's why I'm trying to create a community of like-minded individuals.

I'm looking to create a small, local community for people who are starting out in freelancing, and who are interested in mutual support. Our main activity will be a Discord channel where members can post their work and collaborate on projects, with payment split by agreement. Additionally, we plan to engage in activities such as knowledge exchange, live coding, supporting each other's pet projects, and hosting study sessions.

This community will be small and focused, with members who can trust each other and share similar goals. We're also looking for experienced mentors who can provide guidance as we navigate the world of ML freelancing. Whether paid or unpaid, we welcome any support and advice.

About me: I'm a 21-year-old self-taught ML enthusiast from Russia. Although I don't have any experience in freelancing, I'm eager to start taking my first steps towards making money and gaining experience. As a beginner, I'm hoping to connect with others who are at a similar level and are also looking to grow.

**the text is chatgpt supported to prevet grammar issues, sound more native and clear**",gpt-3,machinelearning,2.475523695294413e-05,1.2203285821873868e-05,2023-03-10 05:22:26,"upd dicord link [  
upd2 this not that small actually already - please dont be confused but help us organise this in the proper way

  
**TLDR**

Looking for ML buddies at any level (preferably beginners) who want to start freelancing together. The goal is to build a small local community of ML enthusiasts who can support each other and exchange knowledge. We will use freelance collaboration as our main activity. We're also looking for experienced mentors (paid or unpaid) to guide us.

**Extended**

I believe that learning and growing in a group is much more enjoyable and effective. That's why I'm trying to create a community of like-minded individuals.

I'm looking to create a small, local community for people who are starting out in freelancing, and who are interested in mutual support. Our main activity will be a Discord channel where members can post their work and collaborate on projects, with payment split by agreement. Additionally, we plan to engage in activities such as knowledge exchange, live coding, supporting each other's pet projects, and hosting study sessions.

This community will be small and focused, with members who can trust each other and share similar goals. We're also looking for experienced mentors who can provide guidance as we navigate the world of ML freelancing. Whether paid or unpaid, we welcome any support and advice.

About me I'm a 21-year-old self-taught ML enthusiast from Russia. Although I don't have any experience in freelancing, I'm eager to start taking my first steps towards making money and gaining experience. As a beginner, I'm hoping to connect with others who are at a similar level and are also looking to grow.

**the text is chatgpt supported to prevet grammar issues, sound more native and clear**",3 days 18:37:34,3.776087962962963,0.01,0.717,0.273,0.9979,pos,2.4754930547178647e-05,3.58351893845611,1.5636217936265102,21.241122135693605
11dc5b4,2109,2023-02-27 13:42:55,Can you fine-tune chatGPT in your data as of now?,Melodic_Stomach_2704,False,0.91,57,https://www.reddit.com/r/learnmachinelearning/comments/11dc5b4/can_you_finetune_chatgpt_in_your_data_as_of_now/,33,1677505375.0, I know that model is not publicly available so it's not possible to do it locally. But can you train or fine-tune chatGPT on your data using their API? I see many misguiding articles on the internet that are fine-tuning other GPT models claiming chatGPT.,gpt-3,machinelearning,1.9873922624194584e-05,1.1505955203481075e-05,2023-02-27 13:42:55, I know that model is not publicly available so it's not possible to do it locally. But can you train or fine-tune chatGPT on your data using their API? I see many misguiding articles on the internet that are fine-tuning other GPT models claiming chatGPT.,14 days 10:17:05,14.428530092592593,0.0,1.0,0.0,0.0,neu,1.987372514047463e-05,3.5263605246161616,2.736218398881504,21.240573631573977
11g7h03,2201,2023-03-02 16:47:40,Build ChatGPT for Financial Documents with LangChain + Deep Lake,davidbun,False,0.95,171,https://www.reddit.com/r/learnmachinelearning/comments/11g7h03/build_chatgpt_for_financial_documents_with/,8,1677775660.0,"https://preview.redd.it/h9r6hgvfucla1.png?width=2388&format=png&auto=webp&s=5432eac3eeed8583e4309af1fdc7ebecac705796

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain](https://github.com/hwchase17/langchain) and [Deep Lake](https://github.com/activeloopai/deeplake) come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article](https://www.activeloop.ai/resources/ultimate-guide-to-lang-chain-deep-lake-build-chat-gpt-to-answer-questions-on-your-financial-data/) to learn:

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\#LangChain](https://www.linkedin.com/feed/hashtag/?keywords=langchain&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) and [\#DeepLake](https://www.linkedin.com/feed/hashtag/?keywords=deeplake&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) together to build [\#ChatGPT](https://www.linkedin.com/feed/hashtag/?keywords=chatgpt&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",gpt-3,machinelearning,5.962176787258375e-05,2.7893224735711694e-06,2023-03-02 16:47:40,"

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain]( and [Deep Lake]( come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article]( to learn

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\LangChain]( and [\DeepLake]( together to build [\ChatGPT]( for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",11 days 07:12:20,11.30023148148148,0.011,0.886,0.103,0.9458,pos,5.961999056559467e-05,2.1972245773362196,2.5096180818339255,21.240734741774645
11akisx,2219,2023-02-24 06:26:36,Is there a way to easily train ChatGPT or GPT on custom knowledge?,senttoschool,False,0.99,118,https://www.reddit.com/r/learnmachinelearning/comments/11akisx/is_there_a_way_to_easily_train_chatgpt_or_gpt_on/,46,1677219996.0,"My company has internal documents. It'd be nice to be able to have GPT look over it, and then I can ask it questions on the internal documents.",gpt-3,machinelearning,4.114250648517475e-05,1.6038604223034224e-05,2023-02-24 06:26:36,"My company has internal documents. It'd be nice to be able to have GPT look over it, and then I can ask it questions on the internal documents.",17 days 17:33:24,17.731527777777778,0.0,0.903,0.097,0.4215,pos,4.1141660155530045e-05,3.8501476017100584,2.9302080816173377,21.24040349603741
11dc5b4,2239,2023-02-27 13:42:55,Can you fine-tune chatGPT in your data as of now?,Melodic_Stomach_2704,False,0.91,58,https://www.reddit.com/r/learnmachinelearning/comments/11dc5b4/can_you_finetune_chatgpt_in_your_data_as_of_now/,33,1677505375.0, I know that model is not publicly available so it's not possible to do it locally. But can you train or fine-tune chatGPT on your data using their API? I see many misguiding articles on the internet that are fine-tuning other GPT models claiming chatGPT.,gpt-3,machinelearning,2.0222587933390978e-05,1.1505955203481075e-05,2023-02-27 13:42:55, I know that model is not publicly available so it's not possible to do it locally. But can you train or fine-tune chatGPT on your data using their API? I see many misguiding articles on the internet that are fine-tuning other GPT models claiming chatGPT.,14 days 10:17:05,14.428530092592593,0.0,1.0,0.0,0.0,neu,2.022238345955261e-05,3.5263605246161616,2.736218398881504,21.240573631573977
118iccl,2243,2023-02-21 23:18:46,"How big was GPT-3.5's training dataset, and are there any good heuristics for how large an ML dataset needs to be for it to be good?",TikkunCreation,False,0.94,54,https://www.reddit.com/r/learnmachinelearning/comments/118iccl/how_big_was_gpt35s_training_dataset_and_are_there/,6,1677021526.0,"Say I want to do a model for fixing bugs in code. How many examples do I need for it to be good?

Or say I want to do a model for scoring boxing matches. How many examples do I need for it to be good?",gpt-3,machinelearning,1.8827926696605396e-05,2.0919918551783773e-06,2023-02-21 23:18:46,"Say I want to do a model for fixing bugs in code. How many examples do I need for it to be good?

Or say I want to do a model for scoring boxing matches. How many examples do I need for it to be good?",20 days 00:41:14,20.02863425925926,0.0,0.804,0.196,0.7757,pos,1.8827749453420277e-05,1.9459101490553132,3.045885045107382,21.240285156318095
11mzbrs,2268,2023-03-09 18:15:03,Training Transformer Networks in Scikit-Learn?!,cmauck10,False,0.89,30,https://www.reddit.com/r/learnmachinelearning/comments/11mzbrs/training_transformer_networks_in_scikitlearn/,2,1678385703.0,"Have you ever wanted to use handy scikit-learn functionalities with your neural networks, but couldn’t because TensorFlow models are not compatible with the scikit-learn API?

I’m excited to introduce one-line wrappers for TensorFlow/Keras models that enable you to use TensorFlow models within scikit-learn workflows with features like Pipeline, GridSearch, and more.

[Swap in one line of code to use keras\/TF models with scikit-learn.](https://preview.redd.it/ulmww4ovwqma1.png?width=960&format=png&auto=webp&s=6da7628298976fc3d72e771abe2546bbf32c1e0e)

Transformers are extremely popular for modeling text nowadays with GPT3, ChatGPT, Bard, PaLM, FLAN excelling for conversational AI and other Transformers like T5 & BERT excelling for text classification. Scikit-learn offers a broadly useful suite of features for classifier models, but these are hard to use with Transformers. However not if you use these wrappers we developed, which only require changing one line of code to make your existing Tensorflow/Keras model compatible with scikit-learn’s rich ecosystem!

All you have to do is swap `keras.Model` → `KerasWrapperModel`, or `keras.Sequential` → `KerasSequentialWrapper`. The wrapper objects have all the same methods as their keras counterparts, plus you can use them with tons of awesome scikit-learn methods.

You can find a demo jupyter notebook and read more about the wrappers here: [https://cleanlab.ai/blog/transformer-sklearn/](https://cleanlab.ai/blog/transformer-sklearn/)",gpt-3,machinelearning,1.0459959275891886e-05,6.973306183927923e-07,2023-03-09 18:15:03,"Have you ever wanted to use handy scikit-learn functionalities with your neural networks, but couldn’t because TensorFlow models are not compatible with the scikit-learn API?

I’m excited to introduce one-line wrappers for TensorFlow/Keras models that enable you to use TensorFlow models within scikit-learn workflows with features like Pipeline, GridSearch, and more.

[Swap in one line of code to use keras\/TF models with scikit-learn.](

Transformers are extremely popular for modeling text nowadays with GPT3, ChatGPT, Bard, PaLM, FLAN excelling for conversational AI and other Transformers like T5 & BEexcelling for text classification. Scikit-learn offers a broadly useful suite of features for classifier models, but these are hard to use with Transformers. However not if you use these wrappers we developed, which only require changing one line of code to make your existing Tensorflow/Keras model compatible with scikit-learn’s rich ecosystem!

All you have to do is swap `keras.Model` → `KerasWrapperModel`, or `keras.Sequential` → `KerasSequentialWrapper`. The wrapper objects have all the same methods as their keras counterparts, plus you can use them with tons of awesome scikit-learn methods.

You can find a demo jupyter notebook and read more about the wrappers here [",4 days 05:44:57,4.239548611111111,0.008,0.834,0.158,0.9878,pos,1.0459904570851093e-05,1.0986122886681098,1.6562353517047097,21.24109827793419
11g7h03,2288,2023-03-02 16:47:40,Build ChatGPT for Financial Documents with LangChain + Deep Lake,davidbun,False,0.95,171,https://www.reddit.com/r/learnmachinelearning/comments/11g7h03/build_chatgpt_for_financial_documents_with/,8,1677775660.0,"https://preview.redd.it/h9r6hgvfucla1.png?width=2388&format=png&auto=webp&s=5432eac3eeed8583e4309af1fdc7ebecac705796

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain](https://github.com/hwchase17/langchain) and [Deep Lake](https://github.com/activeloopai/deeplake) come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article](https://www.activeloop.ai/resources/ultimate-guide-to-lang-chain-deep-lake-build-chat-gpt-to-answer-questions-on-your-financial-data/) to learn:

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\#LangChain](https://www.linkedin.com/feed/hashtag/?keywords=langchain&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) and [\#DeepLake](https://www.linkedin.com/feed/hashtag/?keywords=deeplake&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) together to build [\#ChatGPT](https://www.linkedin.com/feed/hashtag/?keywords=chatgpt&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",gpt-3,machinelearning,5.962176787258375e-05,2.7893224735711694e-06,2023-03-02 16:47:40,"

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain]( and [Deep Lake]( come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article]( to learn

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\LangChain]( and [\DeepLake]( together to build [\ChatGPT]( for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",11 days 07:12:20,11.30023148148148,0.011,0.886,0.103,0.9458,pos,5.961999056559467e-05,2.1972245773362196,2.5096180818339255,21.240734741774645
118iccl,2301,2023-02-21 23:18:46,"How big was GPT-3.5's training dataset, and are there any good heuristics for how large an ML dataset needs to be for it to be good?",TikkunCreation,False,0.93,53,https://www.reddit.com/r/learnmachinelearning/comments/118iccl/how_big_was_gpt35s_training_dataset_and_are_there/,6,1677021526.0,"Say I want to do a model for fixing bugs in code. How many examples do I need for it to be good?

Or say I want to do a model for scoring boxing matches. How many examples do I need for it to be good?",gpt-3,machinelearning,1.8479261387409e-05,2.0919918551783773e-06,2023-02-21 23:18:46,"Say I want to do a model for fixing bugs in code. How many examples do I need for it to be good?

Or say I want to do a model for scoring boxing matches. How many examples do I need for it to be good?",20 days 00:41:14,20.02863425925926,0.0,0.804,0.196,0.7757,pos,1.8479090647869084e-05,1.9459101490553132,3.045885045107382,21.240285156318095
117f8ms,2342,2023-02-20 17:41:43,GPT2 last hidden states vs Large Sentence Encoder,KahlessAndMolor,False,0.9,7,https://www.reddit.com/r/learnmachinelearning/comments/117f8ms/gpt2_last_hidden_states_vs_large_sentence_encoder/,3,1676914903.0,"Hello!

&#x200B;

I have 2 different applications I'm working on in this project:

&#x200B;

1. A text classifier
2. A similarity finder: Here's a list of 10 text documents, get a similarity index across them (for a total of 100 pairs) and return the top 10 that aren't self-referencing. That is, excluding the text #3 vs text #3 = 1.00 similarity type of outputs.

I have previously used google's sentence encoder/large for this purpose and I've had pretty good results. It returns a single vector of length 768 no matter how many tokens I send it. This results in downstream models with an acceptable number of parameters for running in production without breaking the bank on enormous virtual machines.

&#x200B;

Now, I'd like to use the GPT2/XL model from Huggingface. If I give it an input string of 8 tokens, I get back a TFBaseModelOutputWithPastAndCrossAttentions. This contains a last\_hidden\_states, which I understand to be the last layer outputs before sending to a head used for a particular task. This is similar to the output of the sentence encoder, I think. When I look at the last\_hidden\_states, I'm getting a shape of (# of tokens, 1600). I did a cosine similarity between the first and last tokens:

&#x200B;

cosine\_similarity(output.last\_hidden\_state\[0\]\[0\].numpy().reshape(1, -1), output.last\_hidden\_state\[0\]\[-1\].numpy().reshape(1, -1)) 

&#x200B;

And it returned 0.4346, indicating there's substantially different data from the first to the last token. I imagine this only increases as I use more and more tokens. 

&#x200B;

It would be nice if I could capture the greater power of the GPT model into a fixed-length vector so I could then easily use it in down-stream tasks. But, I also don't need to lose all that information.

&#x200B;

So if I'm feeding this output to a further downstream task, should I:

&#x200B;

\- Send it on through as a 2D tensor with the whole thing in there: This would result in a possibly huge model size down the road, which might lead to a need for a huge amount of data to train

&#x200B;

\- Flatten the whole thing and send a vector of 12,800 (8 tokens \* 1600 per token) to the downstream task. Same issue, might require a large number of parameters.

&#x200B;

\- Use only the first or the last of these. Feels like I might be losing a lot of the meaning of the overall text, especially if the body of the text is quite large

&#x200B;

\- Use a dimensionality reduction technique like isomap to reduce the last hidden states into a fixed length? This seems like it could potentially maintain most of the information but reduce the dimensions for a manageable down-stream model size.

&#x200B;

What do you think, and why?

&#x200B;

Thank you kind friends.",gpt-3,machinelearning,2.4406571643747734e-06,1.0459959275891887e-06,2023-02-20 17:41:43,"Hello!

&x200B;

I have 2 different applications I'm working on in this project

&x200B;

1. A text classifier
2. A similarity finder Here's a list of 10 text documents, get a similarity index across them (for a total of 100 pairs) and return the top 10 that aren't self-referencing. That is, excluding the text 3 vs text 3 = 1.00 similarity type of outputs.

I have previously used google's sentence encoder/large for this purpose and I've had pretty good results. It returns a single vector of length 768 no matter how many tokens I send it. This results in downstream models with an acceptable number of parameters for running in production without breaking the bank on enormous virtual machines.

&x200B;

Now, I'd like to use the GPT2/XL model from Huggingface. If I give it an input string of 8 tokens, I get back a TFBaseModelOutputWithPastAndCrossAttentions. This contains a last\_hidden\_states, which I understand to be the last layer outputs before sending to a head used for a particular task. This is similar to the output of the sentence encoder, I think. When I look at the last\_hidden\_states, I'm getting a shape of ( of tokens, 1600). I did a cosine similarity between the first and last tokens

&x200B;

cosine\_similarity(output.last\_hidden\_state\[0\]\[0\].numpy().reshape(1, -1), output.last\_hidden\_state\[0\]\[-1\].numpy().reshape(1, -1)) 

&x200B;

And it returned 0.4346, indicating there's substantially different data from the first to the last token. I imagine this only increases as I use more and more tokens. 

&x200B;

It would be nice if I could capture the greater power of the GPT model into a fixed-length vector so I could then easily use it in down-stream tasks. But, I also don't need to lose all that information.

&x200B;

So if I'm feeding this output to a further downstream task, should I

&x200B;

\- Send it on through as a 2D tensor with the whole thing in there This would result in a possibly huge model size down the road, which might lead to a need for a huge amount of data to train

&x200B;

\- Flatten the whole thing and send a vector of 12,800 (8 tokens \* 1600 per token) to the downstream task. Same issue, might require a large number of parameters.

&x200B;

\- Use only the first or the last of these. Feels like I might be losing a lot of the meaning of the overall text, especially if the body of the text is quite large

&x200B;

\- Use a dimensionality reduction technique like isomap to reduce the last hidden states into a fixed length? This seems like it could potentially maintain most of the information but reduce the dimensions for a manageable down-stream model size.

&x200B;

What do you think, and why?

&x200B;

Thank you kind friends.",21 days 06:18:17,21.26269675925926,0.011,0.862,0.127,0.992,pos,2.4406541859720676e-06,1.3862943611198906,3.1029124867242484,21.240221575506574
117hd0f,2350,2023-02-20 19:01:54,Master ChatGPT Prompt Engineering (Deep Dive),jeyThaswan,False,0.8,6,https://www.reddit.com/r/learnmachinelearning/comments/117hd0f/master_chatgpt_prompt_engineering_deep_dive/,2,1676919714.0," 

I wrote a deep dive on prompt engineering as a resource for the AI community and my 10,000 daily newsletter subscribers ([Inclined.ai](https://www.inclined.ai/p/prompt-engineering-guide) if you're curious). We've included some examples so feel free to copy and paste the prompts into ChatGPT!

&#x200B;

**WHAT IS PROMPT ENGINEERING?**

The term is relatively new, and its origins are argued *(because we live in the internet age, and it’s harder to claim ownership)*. Prompt engineering is the ability to instruct and teach AI effectively.

If it helps, think of this as rapid testing or instruction writing for artificial intelligence.

What’s important is not to let this overwhelm you. The first prompting happened with the first AI model. The first example was showing computer images of circles and triangles. **Today’s neural networks can process way more data, creating complexities.**

So, the concept is simple, but digging into the full power of AI today is something else entirely.

We’re not talking about asking questions. Odds are, if you’re typing *“what’s 2+2”* into ChatGPT, then you need to keep reading.

We can all ask chatbots questions. That can work more often than not. But AI is not perfect. A common metaphor I see is to treat GPT-based large language models like the smartest five-year-old you’ve ever met.

I have a niece around that age and can’t imagine trying to get her to write an essay on the effects of soil mismanagement in relation to Reconstruction politics. *See! Your eyes glazed over reading that, so how do we make this work for our AI buddies?*

The Principles of Prompting

Stop asking single-line questions. *That’s like using a top-rated cookbook to find out how to make grilled cheese.*

**There are three ways to instantly get better at prompting** and go from grilled cheese to top-notch bolognese. From there, we can get into some specific prompt concepts and the ability to unlock ChatGPT’s full potential.

Principle 1: Context is King

GPT-3.5 is swimming in data. When you ask it for a simple request, it can end up complicating things more than you realize. Did you ever wonder why ChatGPT is so bad at math?

The reality is the LLM is taking words and turning them into patterns. From there, it’s making an educated guess.

Give your chat AI a frame to search into. If you give it a math problem, you need to make sure it grasps that you want it to do math. If you’d like ChatGPT to write a high school essay, you must ensure it knows to write at that level.

**Instead of:** “Plan a party for a kid.”

**Try:** “My child is turning 9. They like superheroes and the color red. Help me plan a party for this weekend. Ten of his friends are coming to my house.”

You’ll get a much better response this way. **Context is the cardinal direction** that helps your chat companion find the most correct guess and phrase it the best way.

Principle 2: Get Specific

Pretend you’re writing a law that’s going to be judged by the Supreme Court of the United States. You know what they look for: narrow tailoring.

**Keep things on track and stay focused.** Try to avoid prompting outside the specific request. You’ll only hurt the ability of the chat AI to give you a quality response. Odds are they’ll even skip over parts if you confuse them with too many requests.

It runs parallel with context. *If you set ChatGPT up in a room and then tell it to focus on describing the chair first, you’ll see better results.*

**Instead of:** “I’m going to a job interview. Write five questions for me to answer. Add tips for how to not get nervous before the interview. Do not create questions asking about my background.”

**Try:** “You’re interviewing a software engineer. Create five questions to ask them to understand their skill set and qualifications better.”

Nothing limits the number of prompts you can do. Focus and expand from the initial request and try not to do everything at once.

Principle 3: When in Doubt: “Let’s take this step-by-step.”

Welcome. **You discovered the magic word today.** This phrase slows everything down for the AI and gets you where you need to go.

You don’t need to start with this phrase. Using it tells ChatGPT to show their work.

We’ll explain where this concept comes from further in our briefing, but here’s the TL;DR: sometimes, there’s a part of our prompt it’s not identified correctly. “Let’s take this step-by-step,” reminds you and ChatGPT to **slow down and get specific.**

If you learn to utilize this phrase more often and find ways to make it work for you, you’ll become a better prompt engineer. One term can do a lot of heavy lifting.

**Pro-tip:** We’ve shown you “standard” prompts in all these examples. Many prompt engineers will use “Standard QA form” prompts. Here’s our example for this principle written that way.

**Example:**

*“Q: The Industrial Revolution rapidly changed the infrastructure in London. Describe three essential innovations from this period and connect them to Landon’s development.*

*A: Let’s take this step-by-step.”*

Even without our magic word, this style of standard prompting is quite helpful to adopt.

*However, we’re beginning to stumble into the advanced tactics used in prompt engineering, so it’s time for a new section.*

UNIQUE WAYS TO PROMPT

Let’s preface this: we can go super deep here. Prompt engineering is changing daily, and as these models get more sophisticated, the need to adapt prompts strengthens.

To keep things clean, I will go through these using our metaphor from earlier. **Let’s pretend ChatGPT is a super-intelligent toddler.**

*Got it? With that buy-in, we can continue.*

1/ Role Prompting

We’ll start with a popular tactic. **Our toddler is great at imagining things.** You tell them they’re a fireman, and suddenly they can give you detailed ways to ensure your apartment is up to code. Role-playing is a fun, easy way to build context.

The best part of role prompting is how easy it is to understand and use. All you need to do is tell ChatGPT to play a role. From there, the AI will do its best to fill the part *like that enthusiastic drama student from your old high school.*

You can even take this a step further. **Try framing your prompt as a script.** Tell the LLM specific instructions around a scene that gives you the answer to your question.

TRY IT OUT FOR YOURSELF:

Copy this prompt into ChatGPT and find a destination!

“Act as a travel guide. I will tell you my location and you will suggest a place to visit near my location. In some cases, I will also give you the type of places I will visit. You will also suggest me places of similar type that are close to my first location. My first suggestion: \[fill it in\]”

Why would you take that extra step? While popular, role prompting does not necessarily improve accuracy. *You can tell your five-year-old they’re a mathematician, and they’ll still manage to screw things up.*

Let’s get deeper.

2/ Chain-of-Thought Prompting

There’s a scene in ***Guardians of the Galaxy*** where Rocket Raccoon is trying to [teach young Groot](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwczovL3lvdXR1LmJlL0hyaW1mZ2pmNGs4IiwicG9zdF9pZCI6ImM0ODlmMzhkLTY3NDAtNGRmNS05MWJjLTM1ODA0YTVmNTZkMiIsInB1YmxpY2F0aW9uX2lkIjoiNjNkODQ2ZGUtZDFiZi00ZTVjLWJjYzgtOWMxYzlkMWIxMjA0IiwidmlzaXRfdG9rZW4iOiJkZWRiNmMyNy1hYmM0LTQ5ZDUtYWM2Ny04OTcyZmM1MGVmM2QiLCJpYXQiOjE2NzY5MTkwNjguMTUyLCJpc3MiOiJvcmNoaWQifQ.5eZkDLGRLCXXYv32FYT7kLSbdRK5OK1iemTRf3HVmJw)

how to activate a complicated device. That’s chain-of-thought prompting.

**You take an example question and answer it for ChatGPT.** Show them your chain of thought. Then you give it a new question in the same vein and ask it for an answer.

This prompt style allows you to get more specific. You’re telling your toddler they’re here to answer this particular question with one specific logic pattern.

Within this specific style is two other sub-categories. Let me give the rundown:

* Zero-shot Chain-of-Thought is “Let’s take this step-by-step” you frame the question the same, but don’t give it a precursor. Instead, you ask it to think through the points made. EX: Q: X is A. Y is B. What is C? A: Let’s take this step-by-step.
* Self-consistency is using several responses to find the most accurate answer. You give ChatGPT more swings at the ball. Take the hits and discover the grouping.

TRY IT OUT FOR YOURSELF:

Copy this prompt into ChatGPT and see how accurate it is:

“Q: Which is a faster way to get home?

Option 1: Take an 10 minutes bus, then an 40 minute bus, and finally a 10 minute train.

Option 2: Take a 90 minutes train, then a 45 minute bike ride, and finally a 10 minute bus.

A: Option 1 will take 10+40+10 = 60 minutes.

Option 2 will take 90+45+10=145 minutes.

Since Option 1 takes 60 minutes and Option 2 takes 145 minutes, Option 1 is faster.

Q: Which is a faster way to get to work?

Option 1: Take a 1000 minute bus, then a half hour train, and finally a 10 minute bike ride.

Option 2: Take an 800 minute bus, then an hour train, and finally a 30 minute bike ride.

A: ”

[Learnprompting.org](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwOi8vTGVhcm5wcm9tcHRpbmcub3JnIiwicG9zdF9pZCI6ImM0ODlmMzhkLTY3NDAtNGRmNS05MWJjLTM1ODA0YTVmNTZkMiIsInB1YmxpY2F0aW9uX2lkIjoiNjNkODQ2ZGUtZDFiZi00ZTVjLWJjYzgtOWMxYzlkMWIxMjA0IiwidmlzaXRfdG9rZW4iOiJkZWRiNmMyNy1hYmM0LTQ5ZDUtYWM2Ny04OTcyZmM1MGVmM2QiLCJpYXQiOjE2NzY5MTkwNjguMTUyLCJpc3MiOiJvcmNoaWQifQ.-wOnVYoMNWXYrR5NOB4YYKp4Lmj-aZq3y-pr4Hou9pE)

\- by leaving the “A:” blank you’re prompting ChatGPT for the answer

Alright, you’re almost there—one more to go.

3/ General Knowledge Prompting

You’re going to notice a trend here. This prompt style also circles context and narrow tailoring.

All you do is tell your toddler how the world works. The cow goes moo. The dog goes woof. So what does a cat say?

It’s an oversimplification, but the core reasoning is there. Show ChatGPT some knowledge and turn that into the only focus for that chat. You can take an article from the internet and summarize it for the model. Make sure to ask if it understands and relay the information to you.

Once you know you have the attention set in the suitable space, get to work. For instance, we can share an Inclined newsletter with it and tell ChatGPT about its structure and tone.

From there, you can provide new information and tell ChatGPT to summarize it within the same structure as Inclined. You both share the same general knowledge now.

TRY IT OUT FOR YOURSELF:

Copy this prompt into ChatGPT and test it out:

“Prompt 1. Look over this article here: \[pick an article\]. Breakdown its structure and general tone.

Prompt 2: Recall the structure and tone you mentioned above. Take that general knowledge and summarize this article: \[pick a new one\] using the same structure and tone.”

Note: this is a heavily simplified version of GA Prompting

Did you know some [people don’t consider](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwczovL25ld3MueWNvbWJpbmF0b3IuY29tL2l0ZW0_aWQ9MzQ0OTU0NTUiLCJwb3N0X2lkIjoiYzQ4OWYzOGQtNjc0MC00ZGY1LTkxYmMtMzU4MDRhNWY1NmQyIiwicHVibGljYXRpb25faWQiOiI2M2Q4NDZkZS1kMWJmLTRlNWMtYmNjOC05YzFjOWQxYjEyMDQiLCJ2aXNpdF90b2tlbiI6ImRlZGI2YzI3LWFiYzQtNDlkNS1hYzY3LTg5NzJmYzUwZWYzZCIsImlhdCI6MTY3NjkxOTA2OC4xNTMsImlzcyI6Im9yY2hpZCJ9.yHKIPujINT89tsqOo07AXk6OrKNgoMjO3fBEYPkAdNY)

that prompt engineering?

PROMPT CULTURE

*“How can something not be prompt engineering if it’s a prompt style?”*

Good question, imaginary reader. The culture around this skill is relatively fresh. So some of **these concepts are seen as too easy** to be considered accurate prompt testing.

General knowledge prompting is simply establishing the context, and for some, that’s a baseline everyone needs to do. The same can be said for role prompting, too. *All of these tiny preferences are semantics.*

**Don’t sweat whether you’re a “real” prompt engineer.** Test this out and share your insights in these communities. The opportunity is there for you.

You may even know about DAN (we’ve covered it in previous newsletters) and other AI hacking methods. Those all start with prompt engineering. You can make the case that unless the AI behaves outside its parameters, you’re not genuinely doing prompt engineering.

I'm afraid I have to disagree with that, and **careers are sprouting up everywhere** that center directly on this skill. **Many require a core understanding of the prompt styles we’ve discussed.**

*Yep, you can learn this and make money from talking with AI.*

Anthropic even [posted a role for a prompt engineer](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwczovL2pvYnMubGV2ZXIuY28vQW50aHJvcGljL2UzY2RlNDgxLWQ0NDYtNDYwZi1iNTc2LTkzY2FiNjdiZDFlZCIsInBvc3RfaWQiOiJjNDg5ZjM4ZC02NzQwLTRkZjUtOTFiYy0zNTgwNGE1ZjU2ZDIiLCJwdWJsaWNhdGlvbl9pZCI6IjYzZDg0NmRlLWQxYmYtNGU1Yy1iY2M4LTljMWM5ZDFiMTIwNCIsInZpc2l0X3Rva2VuIjoiZGVkYjZjMjctYWJjNC00OWQ1LWFjNjctODk3MmZjNTBlZjNkIiwiaWF0IjoxNjc2OTE5MDY4LjE1MywiaXNzIjoib3JjaGlkIn0.4s7Htzgoxv0_qM1Ten17oQ5h0_QGM6e1fGUYz_ymgJ4)

that nets a quarter million in salary. I did not make that up and even considered sprucing up the old resume. When a new skill like this comes about, it’s worth looking at.

There are many other examples like this, and OpenAI uses a red teaming strategy where their engineers attempt to prompt hack their own GPT models.

I can tell you all about the open roles here, but tomorrow the whole cycle will change. *Isn’t that exciting, though?* The entire identity around prompt engineering will change by this time next year.

WHAT SHOULD YOU TAKEAWAY?

Communication is everything. **Learning to speak with AI is rising in importance.**

We all watch with mouth agape at the new wonders in AI because we know this will disrupt every industry. If any of this piqued your interest, the window to pursue it is now open. Ride that wave and [learn](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwczovL2xlYXJucHJvbXB0aW5nLm9yZy8iLCJwb3N0X2lkIjoiYzQ4OWYzOGQtNjc0MC00ZGY1LTkxYmMtMzU4MDRhNWY1NmQyIiwicHVibGljYXRpb25faWQiOiI2M2Q4NDZkZS1kMWJmLTRlNWMtYmNjOC05YzFjOWQxYjEyMDQiLCJ2aXNpdF90b2tlbiI6ImRlZGI2YzI3LWFiYzQtNDlkNS1hYzY3LTg5NzJmYzUwZWYzZCIsImlhdCI6MTY3NjkxOTA2OC4xNTMsImlzcyI6Im9yY2hpZCJ9.a67KDSN9yQfZsaMeHpdcbSbtPjD4yFcGW4stdxBjX1M)

to become a brilliant prompt engineer.

Heck, even if you don’t want to switch careers, **talking with ChatGPT and all the newest LLMs is becoming a part of our daily routine.** Get to the point where you maximize every interaction and work with these chatbots to upskill your workflow.

Prompt engineering can save you time, eliminate hassle, and even help you become a more patient person. Focus on what you want and explain it with intent.

Make magic happen, and remember: **take it step-by-step.**",gpt-3,machinelearning,2.0919918551783773e-06,6.973306183927923e-07,2023-02-20 19:01:54," 

I wrote a deep dive on prompt engineering as a resource for the AI community and my 10,000 daily newsletter subscribers ([Inclined.ai]( if you're curious). We've included some examples so feel free to copy and paste the prompts into ChatGPT!

&x200B;

**WHAT IS PROMPT ENGINEERING?**

The term is relatively new, and its origins are argued *(because we live in the internet age, and it’s harder to claim ownership)*. Prompt engineering is the ability to instruct and teach AI effectively.

If it helps, think of this as rapid testing or instruction writing for artificial intelligence.

What’s important is not to let this overwhelm you. The first prompting happened with the first AI model. The first example was showing computer images of circles and triangles. **Today’s neural networks can process way more data, creating complexities.**

So, the concept is simple, but digging into the full power of AI today is something else entirely.

We’re not talking about asking questions. Odds are, if you’re typing *“what’s 2+2”* into ChatGPT, then you need to keep reading.

We can all ask chatbots questions. That can work more often than not. But AI is not perfect. A common metaphor I see is to treat GPT-based large language models like the smartest five-year-old you’ve ever met.

I have a niece around that age and can’t imagine trying to get her to write an essay on the effects of soil mismanagement in relation to Reconstruction politics. *See! Your eyes glazed over reading that, so how do we make this work for our AI buddies?*

The Principles of Prompting

Stop asking single-line questions. *That’s like using a top-rated cookbook to find out how to make grilled cheese.*

**There are three ways to instantly get better at prompting** and go from grilled cheese to top-notch bolognese. From there, we can get into some specific prompt concepts and the ability to unlock ChatGPT’s full potential.

Principle 1 Context is King

GPT-3.5 is swimming in data. When you ask it for a simple request, it can end up complicating things more than you realize. Did you ever wonder why ChatGPT is so bad at math?

The reality is the LLM is taking words and turning them into patterns. From there, it’s making an educated guess.

Give your chat AI a frame to search into. If you give it a math problem, you need to make sure it grasps that you want it to do math. If you’d like ChatGPT to write a high school essay, you must ensure it knows to write at that level.

**Instead of** “Plan a party for a kid.”

**Try** “My child is turning 9. They like superheroes and the color red. Help me plan a party for this weekend. Ten of his friends are coming to my house.”

You’ll get a much better response this way. **Context is the cardinal direction** that helps your chat companion find the most correct guess and phrase it the best way.

Principle 2 Get Specific

Pretend you’re writing a law that’s going to be judged by the Supreme Court of the United States. You know what they look for narrow tailoring.

**Keep things on track and stay focused.** Try to avoid prompting outside the specific request. You’ll only hurt the ability of the chat AI to give you a quality response. Odds are they’ll even skip over parts if you confuse them with too many requests.

It runs parallel with context. *If you set ChatGPT up in a room and then tell it to focus on describing the chair first, you’ll see better results.*

**Instead of** “I’m going to a job interview. Write five questions for me to answer. Add tips for how to not get nervous before the interview. Do not create questions asking about my background.”

**Try** “You’re interviewing a software engineer. Create five questions to ask them to understand their skill set and qualifications better.”

Nothing limits the number of prompts you can do. Focus and expand from the initial request and try not to do everything at once.

Principle 3 When in Doubt “Let’s take this step-by-step.”

Welcome. **You discovered the magic word today.** This phrase slows everything down for the AI and gets you where you need to go.

You don’t need to start with this phrase. Using it tells ChatGPT to show their work.

We’ll explain where this concept comes from further in our briefing, but here’s the TL;DR sometimes, there’s a part of our prompt it’s not identified correctly. “Let’s take this step-by-step,” reminds you and ChatGPT to **slow down and get specific.**

If you learn to utilize this phrase more often and find ways to make it work for you, you’ll become a better prompt engineer. One term can do a lot of heavy lifting.

**Pro-tip** We’ve shown you “standard” prompts in all these examples. Many prompt engineers will use “Standard QA form” prompts. Here’s our example for this principle written that way.

**Example**

*“Q The Industrial Revolution rapidly changed the infrastructure in London. Describe three essential innovations from this period and connect them to Landon’s development.*

*A Let’s take this step-by-step.”*

Even without our magic word, this style of standard prompting is quite helpful to adopt.

*However, we’re beginning to stumble into the advanced tactics used in prompt engineering, so it’s time for a new section.*

UNIQUE WAYS TO PROMPT

Let’s preface this we can go super deep here. Prompt engineering is changing daily, and as these models get more sophisticated, the need to adapt prompts strengthens.

To keep things clean, I will go through these using our metaphor from earlier. **Let’s pretend ChatGPT is a super-intelligent toddler.**

*Got it? With that buy-in, we can continue.*

1/ Role Prompting

We’ll start with a popular tactic. **Our toddler is great at imagining things.** You tell them they’re a fireman, and suddenly they can give you detailed ways to ensure your apartment is up to code. Role-playing is a fun, easy way to build context.

The best part of role prompting is how easy it is to understand and use. All you need to do is tell ChatGPT to play a role. From there, the AI will do its best to fill the part *like that enthusiastic drama student from your old high school.*

You can even take this a step further. **Try framing your prompt as a script.** Tell the LLM specific instructions around a scene that gives you the answer to your question.

TRY IT OUT FOR YOURSELF

Copy this prompt into ChatGPT and find a destination!

“Act as a travel guide. I will tell you my location and you will suggest a place to visit near my location. In some cases, I will also give you the type of places I will visit. You will also suggest me places of similar type that are close to my first location. My first suggestion \[fill it in\]”

Why would you take that extra step? While popular, role prompting does not necessarily improve accuracy. *You can tell your five-year-old they’re a mathematician, and they’ll still manage to screw things up.*

Let’s get deeper.

2/ Chain-of-Thought Prompting

There’s a scene in ***Guardians of the Galaxy*** where Rocket Raccoon is trying to [teach young Groot](

how to activate a complicated device. That’s chain-of-thought prompting.

**You take an example question and answer it for ChatGPT.** Show them your chain of thought. Then you give it a new question in the same vein and ask it for an answer.

This prompt style allows you to get more specific. You’re telling your toddler they’re here to answer this particular question with one specific logic pattern.

Within this specific style is two other sub-categories. Let me give the rundown

* Zero-shot Chain-of-Thought is “Let’s take this step-by-step” you frame the question the same, but don’t give it a precursor. Instead, you ask it to think through the points made. EX Q X is A. Y is B. What is C? A Let’s take this step-by-step.
* Self-consistency is using several responses to find the most accurate answer. You give ChatGPT more swings at the ball. Take the hits and discover the grouping.

TRY IT OUT FOR YOURSELF

Copy this prompt into ChatGPT and see how accurate it is

“Q Which is a faster way to get home?

Option 1 Take an 10 minutes bus, then an 40 minute bus, and finally a 10 minute train.

Option 2 Take a 90 minutes train, then a 45 minute bike ride, and finally a 10 minute bus.

A Option 1 will take 10+40+10 = 60 minutes.

Option 2 will take 90+45+10=145 minutes.

Since Option 1 takes 60 minutes and Option 2 takes 145 minutes, Option 1 is faster.

Q Which is a faster way to get to work?

Option 1 Take a 1000 minute bus, then a half hour train, and finally a 10 minute bike ride.

Option 2 Take an 800 minute bus, then an hour train, and finally a 30 minute bike ride.

A ”

[Learnprompting.org](

\- by leaving the “A” blank you’re prompting ChatGPT for the answer

Alright, you’re almost there—one more to go.

3/ General Knowledge Prompting

You’re going to notice a trend here. This prompt style also circles context and narrow tailoring.

All you do is tell your toddler how the world works. The cow goes moo. The dog goes woof. So what does a cat say?

It’s an oversimplification, but the core reasoning is there. Show ChatGPT some knowledge and turn that into the only focus for that chat. You can take an article from the internet and summarize it for the model. Make sure to ask if it understands and relay the information to you.

Once you know you have the attention set in the suitable space, get to work. For instance, we can share an Inclined newsletter with it and tell ChatGPT about its structure and tone.

From there, you can provide new information and tell ChatGPT to summarize it within the same structure as Inclined. You both share the same general knowledge now.

TRY IT OUT FOR YOURSELF

Copy this prompt into ChatGPT and test it out

“Prompt 1. Look over this article here \[pick an article\]. Breakdown its structure and general tone.

Prompt 2 Recall the structure and tone you mentioned above. Take that general knowledge and summarize this article \[pick a new one\] using the same structure and tone.”

Note this is a heavily simplified version of GA Prompting

Did you know some [people don’t consider](

that prompt engineering?

PROMPT CULTURE

*“How can something not be prompt engineering if it’s a prompt style?”*

Good question, imaginary reader. The culture around this skill is relatively fresh. So some of **these concepts are seen as too easy** to be considered accurate prompt testing.

General knowledge prompting is simply establishing the context, and for some, that’s a baseline everyone needs to do. The same can be said for role prompting, too. *All of these tiny preferences are semantics.*

**Don’t sweat whether you’re a “real” prompt engineer.** Test this out and share your insights in these communities. The opportunity is there for you.

You may even know about DAN (we’ve covered it in previous newsletters) and other AI hacking methods. Those all start with prompt engineering. You can make the case that unless the AI behaves outside its parameters, you’re not genuinely doing prompt engineering.

I'm afraid I have to disagree with that, and **careers are sprouting up everywhere** that center directly on this skill. **Many require a core understanding of the prompt styles we’ve discussed.**

*Yep, you can learn this and make money from talking with AI.*

Anthropic even [posted a role for a prompt engineer](

that nets a quarter million in salary. I did not make that up and even considered sprucing up the old resume. When a new skill like this comes about, it’s worth looking at.

There are many other examples like this, and OpenAI uses a red teaming strategy where their engineers attempt to prompt hack their own GPT models.

I can tell you all about the open roles here, but tomorrow the whole cycle will change. *Isn’t that exciting, though?* The entire identity around prompt engineering will change by this time next year.

WHAT SHOULD YOU TAKEAWAY?

Communication is everything. **Learning to speak with AI is rising in importance.**

We all watch with mouth agape at the new wonders in AI because we know this will disrupt every industry. If any of this piqued your interest, the window to pursue it is now open. Ride that wave and [learn](

to become a brilliant prompt engineer.

Heck, even if you don’t want to switch careers, **talking with ChatGPT and all the newest LLMs is becoming a part of our daily routine.** Get to the point where you maximize every interaction and work with these chatbots to upskill your workflow.

Prompt engineering can save you time, eliminate hassle, and even help you become a more patient person. Focus on what you want and explain it with intent.

Make magic happen, and remember **take it step-by-step.**",21 days 04:58:06,21.207013888888888,0.021,0.872,0.108,0.9996,pos,2.091989666868002e-06,1.0986122886681098,3.1004081799203456,21.240224444461393
11hp55s,2368,2023-03-04 04:14:37,How to properly format data for AiTextGen Gpt-2,AlphaCloudX,False,1.0,4,https://www.reddit.com/r/learnmachinelearning/comments/11hp55s/how_to_properly_format_data_for_aitextgen_gpt2/,0,1677903277.0,"Currently I'm trying to fine tune gpt-2 on my own dataset. The dataset was scraped from a forum where I got the title of the post, content of the post and the replies. It looks like this:

Q: Question 1?  
C: Context For Question 1...  
A: Reply For Question 1...  
<|endoftext|>

Q: Question 2?  
C: Context For Question 2...  
A: Reply For Question 2...  
A: Another Reply For Question 2...  
<|endoftext|>

Q: Question 3?  
C: Context For Question 3...  
A: Another Reply For Question 3...  
A: Another Reply For Question 3...  
<|endoftext|>

I'm using the aitextgen library for python and pretty much following along with the example. The goal is for it to be able to attempt to answer questions in a conversational way but the caveat being I don't have the context for the answers.

I tried taking a look at other question answering models but they all seem to require some sort of context.

Any idea on how I can improve the formatting of the data or if there are any python libraries I can use for a question answering style or conversational ai?",gpt-3,machinelearning,1.3946612367855847e-06,0.0,2023-03-04 04:14:37,"Currently I'm trying to fine tune gpt-2 on my own dataset. The dataset was scraped from a forum where I got the title of the post, content of the post and the replies. It looks like this

Q Question 1?  
C Context For Question 1...  
A Reply For Question 1...  
<|endoftext|>

Q Question 2?  
C Context For Question 2...  
A Reply For Question 2...  
A Another Reply For Question 2...  
<|endoftext|>

Q Question 3?  
C Context For Question 3...  
A Another Reply For Question 3...  
A Another Reply For Question 3...  
<|endoftext|>

I'm using the aitextgen library for python and pretty much following along with the example. The goal is for it to be able to attempt to answer questions in a conversational way but the caveat being I don't have the context for the answers.

I tried taking a look at other question answering models but they all seem to require some sort of context.

Any idea on how I can improve the formatting of the data or if there are any python libraries I can use for a question answering style or conversational ai?",9 days 19:45:23,9.82318287037037,0.0,0.942,0.058,0.8426,pos,1.3946602641808623e-06,0.0,2.3816903956287683,21.240810802090536
118mk1d,2377,2023-02-22 02:32:01,How to Use ChatGPT in Python API and Run Batch Jobs with UI,Fun_Pollution_3899,False,0.72,3,https://www.reddit.com/r/learnmachinelearning/comments/118mk1d/how_to_use_chatgpt_in_python_api_and_run_batch/,0,1677033121.0,"I wanted to share a tutorial on how to use ChatGPT in Python API and how to run batch jobs with a UI. ChatGPT is a powerful language model that can generate text in a conversational manner. It can be used for a variety of tasks, such as chatbots, text completion, and more.
Repo: [https://github.com/CodeDiggerM/chatgpt-batch-whipper](https://github.com/CodeDiggerM/chatgpt-batch-whipper)

## Installation
### Use PIP command
1. Install the latest version of this software directly from github with pip:
```bash
  pip install git+https://github.com/CodeDiggerM/chatgpt-batch-whipper.git
```
2. Go to **auth** mode. This will open up a browser window. Log in to ChatGPT in the browser window, then close the browser.
```bash
run_chatgpt auth
```
3. Start the UI
```bash
run_chatgpt ui
```

### Manually set up

1. Clone the repo to your working directory
```bash
git clone https://github.com/CodeDiggerM/chatgpt-batch-whipper.git
```
2. install the dependcy.
```bash
pip install -r requirements.txt
```

3. Install a browser in playwright (if you haven't already).  The program will use firefox by default.

```
playwright install firefox
```

4. Go to the chatgpt-batch-whipper/

```bash
cd chatgpt_batch_whipper/
````

5. Run the main page by streamlit.
you can got to [streamlit](https://github.com/streamlit/streamlit) to check more about streamlit.

```bash
streamlit run start_whipper.py
````
6. Authenticate your openAI account
Click the **auth** button


It will open up an authentication page in the web browser you installed using playwright. Like below, authenticate with your registered account.



## Quickstart

### Use API
1. Grant auth from chatGPT.
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.auth()
print(response) 
```

2. Ask the question to chatGPT
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.ask(""Greeting!"")
print(response) 
```


### Streamlit UI

Now run it to open the app!
```
streamlit run streamlit_app.py
```

#### Single shoot mode

1. select the **Single shoot mode**.
2. Type your prompt then click submit
3. click the submit button

Here are some tips.

#### Fully Automatic mode
You can apply your prompt to multiple records in the **Fully Automatic mode**.

1. Select Fully Automatic mode.
2. Select CSV file.
3. Select column you want to process.
4. Type the prompt.
5. click to Submit.
After processing. The result will appears in the **The processed result** section.

you can check the result and check the ""is false"" then click the **Submit** to reprocess the ""failed"" one.

* You can save the prompt by click **Add** button.
* You can choose the old prompt by select **prompt list**.
* You can delete the old prompt by click **Delete Prompt**.
* You can delete the saved process result by click **Delete Cached result**.
* You can update the saved process result by click **Update**.
* You can download the result file by click **Download**.",gpt-3,machinelearning,1.0459959275891887e-06,0.0,2023-02-22 02:32:01,"I wanted to share a tutorial on how to use ChatGPT in Python API and how to run batch jobs with a UI. ChatGPT is a powerful language model that can generate text in a conversational manner. It can be used for a variety of tasks, such as chatbots, text completion, and more.
Repo [

 Installation
 Use PIP command
1. Install the latest version of this software directly from github with pip
```bash
  pip install git+
```
2. Go to **auth** mode. This will open up a browser window. Log in to ChatGPT in the browser window, then close the browser.
```bash
run_chatgpt auth
```
3. Start the UI
```bash
run_chatgpt ui
```

 Manually set up

1. Clone the repo to your working directory
```bash
git clone 
```
2. install the dependcy.
```bash
pip install -r requirements.txt
```

3. Install a browser in playwright (if you haven't already).  The program will use firefox by default.

```
playwright install firefox
```

4. Go to the chatgpt-batch-whipper/

```bash
cd chatgpt_batch_whipper/
````

5. Run the main page by streamlit.
you can got to [streamlit]( to check more about streamlit.

```bash
streamlit run start_whipper.py
````
6. Authenticate your openAI account
Click the **auth** button


It will open up an authentication page in the web browser you installed using playwright. Like below, authenticate with your registered account.



 Quickstart

 Use API
1. Grant auth from chatGPT.
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.auth()
print(response) 
```

2. Ask the question to chatGPT
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.ask(""Greeting!"")
print(response) 
```


 Streamlit UI

Now run it to open the app!
```
streamlit run streamlit_app.py
```

 Single shoot mode

1. select the **Single shoot mode**.
2. Type your prompt then click submit
3. click the submit button

Here are some tips.

 Fully Automatic mode
You can apply your prompt to multiple records in the **Fully Automatic mode**.

1. Select Fully Automatic mode.
2. Select CSV file.
3. Select column you want to process.
4. Type the prompt.
5. click to Submit.
After processing. The result will appears in the **The processed result** section.

you can check the result and check the ""is false"" then click the **Submit** to reprocess the ""failed"" one.

* You can save the prompt by click **Add** button.
* You can choose the old prompt by select **prompt list**.
* You can delete the old prompt by click **Delete Prompt**.
* You can delete the saved process result by click **Delete Cached result**.
* You can update the saved process result by click **Update**.
* You can download the result file by click **Download**.",19 days 21:27:59,19.89443287037037,0.011,0.941,0.048,0.9311,pos,1.045995380597619e-06,0.0,3.0394827536492803,21.24029207033782
118mk1d,2436,2023-02-22 02:32:01,How to Use ChatGPT in Python API and Run Batch Jobs with UI,Fun_Pollution_3899,False,0.72,3,https://www.reddit.com/r/learnmachinelearning/comments/118mk1d/how_to_use_chatgpt_in_python_api_and_run_batch/,0,1677033121.0,"I wanted to share a tutorial on how to use ChatGPT in Python API and how to run batch jobs with a UI. ChatGPT is a powerful language model that can generate text in a conversational manner. It can be used for a variety of tasks, such as chatbots, text completion, and more.
Repo: [https://github.com/CodeDiggerM/chatgpt-batch-whipper](https://github.com/CodeDiggerM/chatgpt-batch-whipper)

## Installation
### Use PIP command
1. Install the latest version of this software directly from github with pip:
```bash
  pip install git+https://github.com/CodeDiggerM/chatgpt-batch-whipper.git
```
2. Go to **auth** mode. This will open up a browser window. Log in to ChatGPT in the browser window, then close the browser.
```bash
run_chatgpt auth
```
3. Start the UI
```bash
run_chatgpt ui
```

### Manually set up

1. Clone the repo to your working directory
```bash
git clone https://github.com/CodeDiggerM/chatgpt-batch-whipper.git
```
2. install the dependcy.
```bash
pip install -r requirements.txt
```

3. Install a browser in playwright (if you haven't already).  The program will use firefox by default.

```
playwright install firefox
```

4. Go to the chatgpt-batch-whipper/

```bash
cd chatgpt_batch_whipper/
````

5. Run the main page by streamlit.
you can got to [streamlit](https://github.com/streamlit/streamlit) to check more about streamlit.

```bash
streamlit run start_whipper.py
````
6. Authenticate your openAI account
Click the **auth** button


It will open up an authentication page in the web browser you installed using playwright. Like below, authenticate with your registered account.



## Quickstart

### Use API
1. Grant auth from chatGPT.
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.auth()
print(response) 
```

2. Ask the question to chatGPT
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.ask(""Greeting!"")
print(response) 
```


### Streamlit UI

Now run it to open the app!
```
streamlit run streamlit_app.py
```

#### Single shoot mode

1. select the **Single shoot mode**.
2. Type your prompt then click submit
3. click the submit button

Here are some tips.

#### Fully Automatic mode
You can apply your prompt to multiple records in the **Fully Automatic mode**.

1. Select Fully Automatic mode.
2. Select CSV file.
3. Select column you want to process.
4. Type the prompt.
5. click to Submit.
After processing. The result will appears in the **The processed result** section.

you can check the result and check the ""is false"" then click the **Submit** to reprocess the ""failed"" one.

* You can save the prompt by click **Add** button.
* You can choose the old prompt by select **prompt list**.
* You can delete the old prompt by click **Delete Prompt**.
* You can delete the saved process result by click **Delete Cached result**.
* You can update the saved process result by click **Update**.
* You can download the result file by click **Download**.",gpt-3,machinelearning,1.0459959275891887e-06,0.0,2023-02-22 02:32:01,"I wanted to share a tutorial on how to use ChatGPT in Python API and how to run batch jobs with a UI. ChatGPT is a powerful language model that can generate text in a conversational manner. It can be used for a variety of tasks, such as chatbots, text completion, and more.
Repo [

 Installation
 Use PIP command
1. Install the latest version of this software directly from github with pip
```bash
  pip install git+
```
2. Go to **auth** mode. This will open up a browser window. Log in to ChatGPT in the browser window, then close the browser.
```bash
run_chatgpt auth
```
3. Start the UI
```bash
run_chatgpt ui
```

 Manually set up

1. Clone the repo to your working directory
```bash
git clone 
```
2. install the dependcy.
```bash
pip install -r requirements.txt
```

3. Install a browser in playwright (if you haven't already).  The program will use firefox by default.

```
playwright install firefox
```

4. Go to the chatgpt-batch-whipper/

```bash
cd chatgpt_batch_whipper/
````

5. Run the main page by streamlit.
you can got to [streamlit]( to check more about streamlit.

```bash
streamlit run start_whipper.py
````
6. Authenticate your openAI account
Click the **auth** button


It will open up an authentication page in the web browser you installed using playwright. Like below, authenticate with your registered account.



 Quickstart

 Use API
1. Grant auth from chatGPT.
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.auth()
print(response) 
```

2. Ask the question to chatGPT
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.ask(""Greeting!"")
print(response) 
```


 Streamlit UI

Now run it to open the app!
```
streamlit run streamlit_app.py
```

 Single shoot mode

1. select the **Single shoot mode**.
2. Type your prompt then click submit
3. click the submit button

Here are some tips.

 Fully Automatic mode
You can apply your prompt to multiple records in the **Fully Automatic mode**.

1. Select Fully Automatic mode.
2. Select CSV file.
3. Select column you want to process.
4. Type the prompt.
5. click to Submit.
After processing. The result will appears in the **The processed result** section.

you can check the result and check the ""is false"" then click the **Submit** to reprocess the ""failed"" one.

* You can save the prompt by click **Add** button.
* You can choose the old prompt by select **prompt list**.
* You can delete the old prompt by click **Delete Prompt**.
* You can delete the saved process result by click **Delete Cached result**.
* You can update the saved process result by click **Update**.
* You can download the result file by click **Download**.",19 days 21:27:59,19.89443287037037,0.011,0.941,0.048,0.9311,pos,1.045995380597619e-06,0.0,3.0394827536492803,21.24029207033782
11g7h03,2483,2023-03-02 16:47:40,Build ChatGPT for Financial Documents with LangChain + Deep Lake,davidbun,False,0.95,171,https://www.reddit.com/r/learnmachinelearning/comments/11g7h03/build_chatgpt_for_financial_documents_with/,8,1677775660.0,"https://preview.redd.it/h9r6hgvfucla1.png?width=2388&format=png&auto=webp&s=5432eac3eeed8583e4309af1fdc7ebecac705796

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain](https://github.com/hwchase17/langchain) and [Deep Lake](https://github.com/activeloopai/deeplake) come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article](https://www.activeloop.ai/resources/ultimate-guide-to-lang-chain-deep-lake-build-chat-gpt-to-answer-questions-on-your-financial-data/) to learn:

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\#LangChain](https://www.linkedin.com/feed/hashtag/?keywords=langchain&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) and [\#DeepLake](https://www.linkedin.com/feed/hashtag/?keywords=deeplake&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) together to build [\#ChatGPT](https://www.linkedin.com/feed/hashtag/?keywords=chatgpt&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",gpt-3,machinelearning,5.962176787258375e-05,2.7893224735711694e-06,2023-03-02 16:47:40,"

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain]( and [Deep Lake]( come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article]( to learn

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\LangChain]( and [\DeepLake]( together to build [\ChatGPT]( for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",11 days 07:12:20,11.30023148148148,0.011,0.886,0.103,0.9458,pos,5.961999056559467e-05,2.1972245773362196,2.5096180818339255,21.240734741774645
11biozs,2593,2023-02-25 11:19:05,Any MLOps platform you use?,squalidaesthetics20,False,0.98,242,https://www.reddit.com/r/learnmachinelearning/comments/11biozs/any_mlops_platform_you_use/,31,1677323945.0,"I've been searching for some MLOps platforms for my some projects that I’m working on. I am creating a list that will hopefully help out with productivity and help mr build better apps and services. Also hopefully faster.

I've looked at some of the more popular ones out there and here’s my top 4 so far. Let me know what you guys think about these:

* [Vertex AI](https://cloud.google.com/vertex-ai) \- An ML platform by Google Cloud. They have AI-powered tools to ingest, analyze, and store video data. Good for image classification, NLP, recommendation systems etc.
* [Jina AI](https://jina.ai/) \-They offer a neural search solution that can help build smarter, more efficient search engines. They also have a list of [cool github repos](https://github.com/jina-ai/jina) that you can check out. Similar to Vertex AI, they have image classification tools, NLPs, fine tuners etc.
* [MLflow](https://mlflow.org/) \- an open-source platform for managing your ML lifecycle. What’s great is that they also support popular Python libraries like TensorFlow, PyTorch, scikit-learn, and R.
* Neptune.ai, which promises to streamline your workflows and make collaboration a breeze.

Have you guys tried any of these platforms? I know a lot of AI tools and platforms have been popping up lately especially with the rise of AI tools but what are your thoughts?",gpt-3,machinelearning,8.437700482552788e-05,1.0808624585088282e-05,2023-02-25 11:19:05,"I've been searching for some MLOps platforms for my some projects that I’m working on. I am creating a list that will hopefully help out with productivity and help mr build better apps and services. Also hopefully faster.

I've looked at some of the more popular ones out there and here’s my top 4 so far. Let me know what you guys think about these

* [Vertex AI]( \- An ML platform by Google Cloud. They have AI-powered tools to ingest, analyze, and store video data. Good for image classification, NLP, recommendation systems etc.
* [Jina AI]( \-They offer a neural search solution that can help build smarter, more efficient search engines. They also have a list of [cool github repos]( that you can check out. Similar to Vertex AI, they have image classification tools, NLPs, fine tuners etc.
* [MLflow]( \- an open-source platform for managing your ML lifecycle. What’s great is that they also support popular Python libraries like TensorFlow, PyTorch, scikit-learn, and R.
* Neptune.ai, which promises to streamline your workflows and make collaboration a breeze.

Have you guys tried any of these platforms? I know a lot of AI tools and platforms have been popping up lately especially with the rise of AI tools but what are your thoughts?",16 days 12:40:55,16.52841435185185,0.0,0.836,0.164,0.974,pos,8.437344528630898e-05,3.4657359027997265,2.8638232414393547,21.240465471078902
1194vsn,2614,2023-02-22 16:59:33,MIT Introduction to Data-Centric AI,anishathalye,False,0.97,102,https://www.reddit.com/r/learnmachinelearning/comments/1194vsn/mit_introduction_to_datacentric_ai/,4,1677085173.0,"Announcing the [first-ever course on Data-Centric AI](https://dcai.csail.mit.edu/). Learn how to train better ML models by improving the data.

[Course homepage](https://dcai.csail.mit.edu/) | [Lecture videos on YouTube](https://www.youtube.com/watch?v=ayzOzZGHZy4&list=PLnSYPjg2dHQKdig0vVbN-ZnEU0yNJ1mo5) | [Lab Assignments](https://github.com/dcai-course/dcai-lab)

The course covers:

* [Data-Centric AI vs. Model-Centric AI](https://dcai.csail.mit.edu/lectures/data-centric-model-centric/)
* [Label Errors](https://dcai.csail.mit.edu/lectures/label-errors/)
* [Dataset Creation and Curation](https://dcai.csail.mit.edu/lectures/dataset-creation-curation/)
* [Data-centric Evaluation of ML Models](https://dcai.csail.mit.edu/lectures/data-centric-evaluation/)
* [Class Imbalance, Outliers, and Distribution Shift](https://dcai.csail.mit.edu/lectures/imbalance-outliers-shift/)
* [Growing or Compressing Datasets](https://dcai.csail.mit.edu/lectures/growing-compressing-datasets/)
* [Interpretability in Data-Centric ML](https://dcai.csail.mit.edu/lectures/interpretable-features/)
* [Encoding Human Priors: Data Augmentation and Prompt Engineering](https://dcai.csail.mit.edu/lectures/human-priors/)
* [Data Privacy and Security](https://dcai.csail.mit.edu/lectures/data-privacy-security/)

MIT, like most universities, has many courses on machine learning (6.036, 6.867, and many others). Those classes teach techniques to produce effective models for a given dataset, and the classes focus heavily on the mathematical details of models rather than practical applications. However, in real-world applications of ML, the dataset is not fixed, and focusing on improving the data often gives better results than improving the model. We’ve personally seen this time and time again in our applied ML work as well as our research.

Data-Centric AI (DCAI) is an emerging science that studies techniques to improve datasets in a systematic/algorithmic way — given that this topic wasn’t covered in the standard curriculum, we (a group of PhD candidates and grads) thought that we should put together a new class! We taught this intensive 2-week course in January over MIT’s IAP term, and we’ve just published all the course material, including lecture videos, lecture notes, hands-on lab assignments, and lab solutions, in hopes that people outside the MIT community would find these resources useful.

We’d be happy to answer any questions related to the class or DCAI in general, and we’d love to hear any feedback on how we can improve the course material. Introduction to Data-Centric AI is open-source opencourseware, so feel free to make improvements directly: [https://github.com/dcai-course/dcai-course](https://github.com/dcai-course/dcai-course).",gpt-3,machinelearning,3.5563861538032414e-05,1.3946612367855847e-06,2023-02-22 16:59:33,"Announcing the [first-ever course on Data-Centric AI]( Learn how to train better ML models by improving the data.

[Course homepage]( | [Lecture videos on YouTube]( | [Lab Assignments](

The course covers

* [Data-Centric AI vs. Model-Centric AI](
* [Label Errors](
* [Dataset Creation and Curation](
* [Data-centric Evaluation of ML Models](
* [Class Imbalance, Outliers, and Distribution Shift](
* [Growing or Compressing Datasets](
* [Interpretability in Data-Centric ML](
* [Encoding Human Priors Data Augmentation and Prompt Engineering](
* [Data Privacy and Security](

MIT, like most universities, has many courses on machine learning (6.036, 6.867, and many others). Those classes teach techniques to produce effective models for a given dataset, and the classes focus heavily on the mathematical details of models rather than practical applications. However, in real-world applications of ML, the dataset is not fixed, and focusing on improving the data often gives better results than improving the model. We’ve personally seen this time and time again in our applied ML work as well as our research.

Data-Centric AI (DCAI) is an emerging science that studies techniques to improve datasets in a systematic/algorithmic way — given that this topic wasn’t covered in the standard curriculum, we (a group of PhD candidates and grads) thought that we should put together a new class! We taught this intensive 2-week course in January over MIT’s IAP term, and we’ve just published all the course material, including lecture videos, lecture notes, hands-on lab assignments, and lab solutions, in hopes that people outside the MIT community would find these resources useful.

We’d be happy to answer any questions related to the class or DCAI in general, and we’d love to hear any feedback on how we can improve the course material. Introduction to Data-Centric AI is open-source opencourseware, so feel free to make improvements directly [",19 days 07:00:27,19.291979166666668,0.0,0.839,0.161,0.9933,pos,3.556322915900428e-05,1.6094379124341003,3.0102256930267366,21.24032310800281
11fbccz,2789,2023-03-01 18:31:12,[D] OpenAI introduces ChatGPT and Whisper APIs (ChatGPT API is 1/10th the cost of GPT-3 API),minimaxir,False,0.97,573,https://www.reddit.com/r/MachineLearning/comments/11fbccz/d_openai_introduces_chatgpt_and_whisper_apis/,119,1677695472.0,"https://openai.com/blog/introducing-chatgpt-and-whisper-apis

> It is priced at $0.002 per 1k tokens, which is 10x cheaper than our existing GPT-3.5 models.

This is a massive, massive deal. For context, the reason GPT-3 apps took off over the past few months before ChatGPT went viral is because a) text-davinci-003 was released and was a significant performance increase and b) the cost was cut from $0.06/1k tokens to $0.02/1k tokens, which made consumer applications feasible without a large upfront cost.

A much better model and a 1/10th cost warps the economics completely to the point that it may be better than in-house finetuned LLMs.

I have no idea how OpenAI can make money on this. This has to be a loss-leader to lock out competitors before they even get off the ground.",gpt-3,machinelearning,0.00019978522216953503,4.149117179437115e-05,2023-03-01 18:31:12,"

> It is priced at $0.002 per 1k tokens, which is 10x cheaper than our existing GPT-3.5 models.

This is a massive, massive deal. For context, the reason GPT-3 apps took off over the past few months before ChatGPT went viral is because a) text-davinci-003 was released and was a significant performance increase and b) the cost was cut from $0.06/1k tokens to $0.02/1k tokens, which made consumer applications feasible without a large upfront cost.

A much better model and a 1/10th cost warps the economics completely to the point that it may be better than in-house finetuned LLMs.

I have no idea how OpenAI can make money on this. This has to be a loss-leader to lock out competitors before they even get off the ground.",12 days 05:28:48,12.228333333333333,0.034,0.888,0.078,0.6808,pos,0.00019976526775975628,4.787491742782046,2.582360993874729,21.24068694639998
11h3p2x,2791,2023-03-03 15:37:03,[D] Facebooks LLaMA leaks via torrent file in PR,londons_explorer,False,0.98,528,https://www.reddit.com/r/MachineLearning/comments/11h3p2x/d_facebooks_llama_leaks_via_torrent_file_in_pr/,184,1677857823.0,"See here:
https://github.com/facebookresearch/llama/pull/73/files

Note that this PR *is not* made by a member of Facebook/Meta staff.    I have downloaded parts of the torrent and it does appear to be lots of weights, although I haven't confirmed it is trained as in the LLaMA paper, although it seems likely.


I wonder how much finetuning it would take to make this work like ChatGPT - finetuning tends to be much cheaper than the original training, so it might be something a community could do...",gpt-3,machinelearning,0.0001840952832556972,6.41544168921369e-05,2023-03-03 15:37:03,"See here


Note that this PR *is not* made by a member of Facebook/Meta staff.    I have downloaded parts of the torrent and it does appear to be lots of weights, although I haven't confirmed it is trained as in the LLaMA paper, although it seems likely.


I wonder how much finetuning it would take to make this work like ChatGPT - finetuning tends to be much cheaper than the original training, so it might be something a community could do...",10 days 08:22:57,10.349270833333334,0.0,0.938,0.062,0.5859,pos,0.00018407833979847523,5.220355825078324,2.4291534981045153,21.240783711961875
11f29f9,2809,2023-03-01 12:14:49,[R] ChatGPT failure increase linearly with addition on math problems,Neurosymbolic,False,0.94,241,https://www.reddit.com/r/MachineLearning/comments/11f29f9/r_chatgpt_failure_increase_linearly_with_addition/,66,1677672889.0," We did a study on ChatGPT's performance on math word problems. We found, under several conditions, its probability of failure increases linearly with the number of addition and subtraction operations - see below. This could imply that multi-step inference is a limitation. The performance also changes drastically when you restrict ChatGPT from showing its work (note the priors in the figure below, also see detailed breakdown of responses in the paper).

&#x200B;

[Math problems adds and subs vs. ChatGPT prob. of failure](https://preview.redd.it/z88ey3n6d4la1.png?width=1451&format=png&auto=webp&s=6da125b7a7cd60022ca70cd26434af6872a50d12)

ChatGPT Probability of Failure increase with addition and subtraction operations.

You the paper (preprint: [https://arxiv.org/abs/2302.13814](https://arxiv.org/abs/2302.13814)) will be presented at AAAI-MAKE next month. You can also check out our video here: [https://www.youtube.com/watch?v=vD-YSTLKRC8](https://www.youtube.com/watch?v=vD-YSTLKRC8)

&#x200B;

https://preview.redd.it/k58sbjd5d4la1.png?width=1264&format=png&auto=webp&s=5261923a2689201f905a26f06c6b5e9bac2fead6",gpt-3,machinelearning,8.402833951633149e-05,2.301191040696215e-05,2023-03-01 12:14:49," We did a study on ChatGPT's performance on math word problems. We found, under several conditions, its probability of failure increases linearly with the number of addition and subtraction operations - see below. This could imply that multi-step inference is a limitation. The performance also changes drastically when you restrict ChatGPT from showing its work (note the priors in the figure below, also see detailed breakdown of responses in the paper).

&x200B;

[Math problems adds and subs vs. ChatGPT prob. of failure](

ChatGPT Probability of Failure increase with addition and subtraction operations.

You the paper (preprint [ will be presented at AAAI-MAKE next month. You can also check out our video here [

&x200B;

",12 days 11:45:11,12.489710648148149,0.138,0.832,0.03,-0.9217,neg,8.402480933309685e-05,4.204692619390966,2.601927220630702,21.240673485582832
11njpb9,2818,2023-03-10 08:50:32,[D] Is ML a big boys game now?,TheStartIs2019,False,0.83,175,https://www.reddit.com/r/MachineLearning/comments/11njpb9/d_is_ml_a_big_boys_game_now/,146,1678438232.0,"As much as I enjoy ML as a whole, I am a bit skeptical of the future for individuals. With OpenAI trying to monopolize the market along with Microsoft, which part remains for the small time researchers/developers?

It seems everything now is just a ChatGPT wrapper, and with GPT-4 around the corner I assume itll be even more prominent.

What are your thoughts?",gpt-3,machinelearning,6.1016429109369335e-05,5.090513514267385e-05,2023-03-10 08:50:32,"As much as I enjoy ML as a whole, I am a bit skeptical of the future for individuals. With OpenAI trying to monopolize the market along with Microsoft, which part remains for the small time researchers/developers?

It seems everything now is just a ChatGPT wrapper, and with GPT-4 around the corner I assume itll be even more prominent.

What are your thoughts?",3 days 15:09:28,3.631574074074074,0.065,0.838,0.097,0.4684,pos,6.101456768268036e-05,4.990432586778736,1.53289678312266,21.241129574779652
11kk3iq,2846,2023-03-07 00:54:07,[R] PyReason: logic for use with ML,Neurosymbolic,False,0.97,87,https://www.reddit.com/r/MachineLearning/comments/11kk3iq/r_pyreason_logic_for_use_with_ml/,30,1678150447.0,"Last week,  we released a paper on [PyReason on Arxiv](https://arxiv.org/pdf/2302.13482.pdf). PyReason is a Python package for logical inference and designed for use with machine learning ([https://github.com/lab-v2/pyreason](https://github.com/lab-v2/pyreason)).

You may think that’s all fine and good, but are wondering why would we need a logic for machine learning? In this post, I’ll discuss why we did it.

First, a lot of the criticism of machine learning, especially deep learning is that while it obtains excellent result son may tasks, it is merely mimicking historical data and not learning actual relationships. This has resulted in a lot of the major shortcomings in ML such as the [hallucinations](https://www.nytimes.com/2023/02/17/podcasts/hard-fork-bing-ai-elon.html?action=click&module=audio-series-bar&region=header&pgtype=Article) of large language models, the requirements of vast amounts of training data to learn games, and brittleness in certain applications (e.g., the recent defeat of AlphaGo, difficulty in [solving math problems](https://www.reddit.com/r/MachineLearning/comments/11f29f9/r_chatgpt_failure_increase_linearly_with_addition/)). In a video lecture, we review some of these shortcomings, much of which constitutes active areas of research ([part 1](https://www.youtube.com/watch?v=9cooDzgd8NA), [part 2](https://www.youtube.com/watch?v=d2xfgwovwso)).

Then enter “[neuro symbolic](https://neurosymoblic.asu.edu/)” artificial intelligence. Actually an old idea where neural architectures can work hand-in-hand with logic, often even having an equivalence between the two. The idea is symbolic AI has many shortcomings (brittleness to noise, difficulty in learning) that can be address with deep learning while its strengths (modularity, ability to add constraints, symbolic manipulation) can address some of deep learning’s limitations.

Neuro symbolic AI is a highly active area of research, and much of the advancements have identified special logical languages to use in their approach. Our goal with PyReason was to unify many of these logics and provide logic capabilities in a robust and modern Python implementation. We are working on a few joint projects with industry partners applying this to various use-cases, and now we have made the code base and library available as an open source package. In a [video](https://www.youtube.com/watch?v=E1PSl3KQCmo&t=8s), we outline six major capabilities that we felt were important:

1. Open world reasoning – ability to reason in uncertain situations (important for interfacing with ML models)
2. Multi-step inference
3. Explainability
4. Temporal reasoning
5. Graph-based reasoning
6. Designed to support neuro symbolic frameworks

The release of PyReason will kick off not only new research by our group and our collaborators, but also associated software. We’re pretty excited about this new direction!",gpt-3,machinelearning,3.033388190008647e-05,1.0459959275891886e-05,2023-03-07 00:54:07,"Last week,  we released a paper on [PyReason on Arxiv]( PyReason is a Python package for logical inference and designed for use with machine learning ([

You may think that’s all fine and good, but are wondering why would we need a logic for machine learning? In this post, I’ll discuss why we did it.

First, a lot of the criticism of machine learning, especially deep learning is that while it obtains excellent result son may tasks, it is merely mimicking historical data and not learning actual relationships. This has resulted in a lot of the major shortcomings in ML such as the [hallucinations]( of large language models, the requirements of vast amounts of training data to learn games, and brittleness in certain applications (e.g., the recent defeat of AlphaGo, difficulty in [solving math problems]( In a video lecture, we review some of these shortcomings, much of which constitutes active areas of research ([part 1]( [part 2](

Then enter “[neuro symbolic]( artificial intelligence. Actually an old idea where neural architectures can work hand-in-hand with logic, often even having an equivalence between the two. The idea is symbolic AI has many shortcomings (brittleness to noise, difficulty in learning) that can be address with deep learning while its strengths (modularity, ability to add constraints, symbolic manipulation) can address some of deep learning’s limitations.

Neuro symbolic AI is a highly active area of research, and much of the advancements have identified special logical languages to use in their approach. Our goal with PyReason was to unify many of these logics and provide logic capabilities in a robust and modern Python implementation. We are working on a few joint projects with industry partners applying this to various use-cases, and now we have made the code base and library available as an open source package. In a [video]( we outline six major capabilities that we felt were important

1. Open world reasoning – ability to reason in uncertain situations (important for interfacing with ML models)
2. Multi-step inference
3. Explainability
4. Temporal reasoning
5. Graph-based reasoning
6. Designed to support neuro symbolic frameworks

The release of PyReason will kick off not only new research by our group and our collaborators, but also associated software. We’re pretty excited about this new direction!",6 days 23:05:53,6.962418981481481,0.041,0.834,0.126,0.9872,pos,3.0333421837210073e-05,3.4339872044851463,2.074732845836341,21.240958100090285
11ibm1j,2860,2023-03-04 20:02:40,[D] First glance at LLaMA,enryu42,False,0.91,68,https://www.reddit.com/r/MachineLearning/comments/11ibm1j/d_first_glance_at_llama/,27,1677960160.0,"[https://medium.com/@enryu9000/mini-post-first-look-at-llama-4403517d41a1](https://medium.com/@enryu9000/mini-post-first-look-at-llama-4403517d41a1)  


I'm kind of surprised - I expected it to be much better than ChatGPT, but results are all over the place (e.g. it is better for few-shot classification, but worse for SQL generation).  


I wonder what makes ChatGPT so decent; given that OpenAI can afford to serve it, it is probably an order of magnitude smaller than LLaMA, yet it is competitive; can RLHF get the model that far?",gpt-3,machinelearning,2.370924102535494e-05,9.413963348302698e-06,2023-03-04 20:02:40,"[  


I'm kind of surprised - I expected it to be much better than ChatGPT, but results are all over the place (e.g. it is better for few-shot classification, but worse for SQL generation).  


I wonder what makes ChatGPT so decent; given that OpenAI can afford to serve it, it is probably an order of magnitude smaller than LLaMA, yet it is competitive; can RLHF get the model that far?",9 days 03:57:20,9.164814814814815,0.056,0.821,0.123,0.4595,pos,2.370895996573668e-05,3.332204510175204,2.318932228991569,21.240844702754874
11qgxs8,2863,2023-03-13 18:11:39,[D] ChatGPT without text limits.,spiritus_dei,False,0.87,61,https://www.reddit.com/r/MachineLearning/comments/11qgxs8/d_chatgpt_without_text_limits/,27,1678731099.0,"One of the biggest limitations of large language models is the text limit. This limits their use cases and prohibits more ambitious prompts.

This was recently resolved by researchers at Google Brain in Alberta, Canada. In their recent paper they describe a new method of using associative memory which removes the text limit and they also prove that some large language models are universal Turing machines.

This will pave the way for entire novels being shared with large language models, personal genomes, etc.

The paper talks about the use of ""associative memory"" which is also known as content-addressable memory (CAM). This type of memory allows the system to retrieve data based on its content rather than its location. Unlike traditional memory systems that use specific memory addresses to access data, associative memory uses CAM to find data based on a pattern or keyword.

Presumably, this will open up a new market for associative memory since I would happily pay some extra money for content to be permanently stored in associative memory and to remove the text limit. This will also drive down the price of associative memory if millions of people are willing to pay a monthly fee for storage and the removal of prompt text limits.

The paper does point that there are still problems with conditional statements that confuse the large language models. However, I believe this can be resolved with semantic graphs. This would involve collecting data from various sources and using natural language processing techniques to extract entities and relationships from the text. Once the graph is constructed, it could be integrated into the language model in a variety of ways. One approach is to use the graph as an external memory, similar to the approach taken in the paper. The graph can be encoded as a set of key-value pairs and used to augment the model's attention mechanism during inference. The attention mechanism can then focus on relevant nodes in the graph when generating outputs.

Another potential approach is to incorporate the graph into the model's architecture itself. For example, the graph can be used to inform the initialization of the model's parameters or to guide the attention mechanism during training. This could help the model learn to reason about complex concepts and relationships more effectively, potentially leading to better performance on tasks that require this kind of reasoning.

The use of knowledge graphs can also help ground truth large language models and reduce hallucinations.

I'm curious to read your thoughts.",gpt-3,machinelearning,2.1268583860980166e-05,9.413963348302698e-06,2023-03-13 18:11:39,"One of the biggest limitations of large language models is the text limit. This limits their use cases and prohibits more ambitious prompts.

This was recently resolved by researchers at Google Brain in Alberta, Canada. In their recent paper they describe a new method of using associative memory which removes the text limit and they also prove that some large language models are universal Turing machines.

This will pave the way for entire novels being shared with large language models, personal genomes, etc.

The paper talks about the use of ""associative memory"" which is also known as content-addressable memory (CAM). This type of memory allows the system to retrieve data based on its content rather than its location. Unlike traditional memory systems that use specific memory addresses to access data, associative memory uses CAM to find data based on a pattern or keyword.

Presumably, this will open up a new market for associative memory since I would happily pay some extra money for content to be permanently stored in associative memory and to remove the text limit. This will also drive down the price of associative memory if millions of people are willing to pay a monthly fee for storage and the removal of prompt text limits.

The paper does point that there are still problems with conditional statements that confuse the large language models. However, I believe this can be resolved with semantic graphs. This would involve collecting data from various sources and using natural language processing techniques to extract entities and relationships from the text. Once the graph is constructed, it could be integrated into the language model in a variety of ways. One approach is to use the graph as an external memory, similar to the approach taken in the paper. The graph can be encoded as a set of key-value pairs and used to augment the model's attention mechanism during inference. The attention mechanism can then focus on relevant nodes in the graph when generating outputs.

Another potential approach is to incorporate the graph into the model's architecture itself. For example, the graph can be used to inform the initialization of the model's parameters or to guide the attention mechanism during training. This could help the model learn to reason about complex concepts and relationships more effectively, potentially leading to better performance on tasks that require this kind of reasoning.

The use of knowledge graphs can also help ground truth large language models and reduce hallucinations.

I'm curious to read your thoughts.",0 days 05:48:21,0.24190972222222223,0.017,0.91,0.073,0.9719,pos,2.1268357687855487e-05,3.332204510175204,0.2166502934477071,21.241304047361577
11mzqxu,2900,2023-03-09 18:30:58,"[N] GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany - heise online",Singularian2501,False,0.98,657,https://www.reddit.com/r/MachineLearning/comments/11mzqxu/n_gpt4_is_coming_next_week_and_it_will_be/,80,1678386658.0,"[https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html](https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html)

>**GPT-4 is coming next week**: at an approximately one-hour hybrid information event entitled ""**AI in Focus - Digital Kickoff"" on 9 March 2023**, four Microsoft Germany employees presented Large Language Models (LLM) like GPT series as a disruptive force for companies and their Azure-OpenAI offering in detail. The kickoff event took place in the German language, news outlet Heise was present. **Rather casually, Andreas Braun, CTO Microsoft Germany** and Lead Data & AI STU, **mentioned** what he said was **the imminent release of GPT-4.** The fact that **Microsoft is fine-tuning multimodality with OpenAI should no longer have been a secret since the release of Kosmos-1 at the beginning of March.**

[ Dr. Andreas Braun, CTO Microsoft Germany and Lead Data  & AI STU at the Microsoft Digital Kickoff: \\""KI im Fokus\\"" \(AI in  Focus, Screenshot\) \(Bild: Microsoft\) ](https://preview.redd.it/rnst03avarma1.jpg?width=1920&format=pjpg&auto=webp&s=c5992e2d6c6daf32e56a0a3ffeeecfe10621f73f)",gpt-3,machinelearning,0.0002290731081420323,2.7893224735711695e-05,2023-03-09 18:30:58,"[

>**GPT-4 is coming next week** at an approximately one-hour hybrid information event entitled ""**AI in Focus - Digital Kickoff"" on 9 March 2023**, four Microsoft Germany employees presented Large Language Models (LLM) like GPT series as a disruptive force for companies and their Azure-OpenAI offering in detail. The kickoff event took place in the German language, news outlet Heise was present. **Rather casually, Andreas Braun, CTO Microsoft Germany** and Lead Data & AI STU, **mentioned** what he said was **the imminent release of GPT-4.** The fact that **Microsoft is fine-tuning multimodality with OpenAI should no longer have been a secret since the release of Kosmos-1 at the beginning of March.**

[ Dr. Andreas Braun, CTO Microsoft Germany and Lead Data  & AI STU at the Microsoft Digital Kickoff \\""KI im Fokus\\"" \(AI in  Focus, Screenshot\) \(Bild Microsoft\) ](",4 days 05:29:02,4.2284953703703705,0.033,0.921,0.046,0.2023,pos,0.00022904687490372564,4.394449154672439,1.654123544595728,21.241098846933152
11awp4n,2902,2023-02-24 17:21:15,[R] Meta AI open sources new SOTA LLM called LLaMA. 65B version (trained on 1.4T tokens) is competitive with Chinchilla and Palm-540B. 13B version outperforms OPT and GPT-3 175B on most benchmarks.,MysteryInc152,False,0.98,626,https://www.reddit.com/r/MachineLearning/comments/11awp4n/r_meta_ai_open_sources_new_sota_llm_called_llama/,213,1677259275.0,"[https://twitter.com/GuillaumeLample/status/1629151231800115202?t=4cLD6Ko2Ld9Y3EIU72-M2g&s=19](https://twitter.com/GuillaumeLample/status/1629151231800115202?t=4cLD6Ko2Ld9Y3EIU72-M2g&s=19)

Paper here - [https://research.facebook.com/publications/llama-open-and-efficient-foundation-language-models/](https://research.facebook.com/publications/llama-open-and-efficient-foundation-language-models/)",gpt-3,machinelearning,0.00021826448355694402,7.426571085883239e-05,2023-02-24 17:21:15,"[

Paper here - [",17 days 06:38:45,17.27690972222222,0.0,1.0,0.0,0.0,neu,0.00021824066732992154,5.365976015021851,2.9056384993401916,21.24042691487342
11fbccz,2906,2023-03-01 18:31:12,[D] OpenAI introduces ChatGPT and Whisper APIs (ChatGPT API is 1/10th the cost of GPT-3 API),minimaxir,False,0.97,571,https://www.reddit.com/r/MachineLearning/comments/11fbccz/d_openai_introduces_chatgpt_and_whisper_apis/,119,1677695472.0,"https://openai.com/blog/introducing-chatgpt-and-whisper-apis

> It is priced at $0.002 per 1k tokens, which is 10x cheaper than our existing GPT-3.5 models.

This is a massive, massive deal. For context, the reason GPT-3 apps took off over the past few months before ChatGPT went viral is because a) text-davinci-003 was released and was a significant performance increase and b) the cost was cut from $0.06/1k tokens to $0.02/1k tokens, which made consumer applications feasible without a large upfront cost.

A much better model and a 1/10th cost warps the economics completely to the point that it may be better than in-house finetuned LLMs.

I have no idea how OpenAI can make money on this. This has to be a loss-leader to lock out competitors before they even get off the ground.",gpt-3,machinelearning,0.00019908789155114224,4.149117179437115e-05,2023-03-01 18:31:12,"

> It is priced at $0.002 per 1k tokens, which is 10x cheaper than our existing GPT-3.5 models.

This is a massive, massive deal. For context, the reason GPT-3 apps took off over the past few months before ChatGPT went viral is because a) text-davinci-003 was released and was a significant performance increase and b) the cost was cut from $0.06/1k tokens to $0.02/1k tokens, which made consumer applications feasible without a large upfront cost.

A much better model and a 1/10th cost warps the economics completely to the point that it may be better than in-house finetuned LLMs.

I have no idea how OpenAI can make money on this. This has to be a loss-leader to lock out competitors before they even get off the ground.",12 days 05:28:48,12.228333333333333,0.034,0.888,0.078,0.6808,pos,0.00019906807618688305,4.787491742782046,2.582360993874729,21.24068694639998
11h3p2x,2911,2023-03-03 15:37:03,[D] Facebooks LLaMA leaks via torrent file in PR,londons_explorer,False,0.98,530,https://www.reddit.com/r/MachineLearning/comments/11h3p2x/d_facebooks_llama_leaks_via_torrent_file_in_pr/,184,1677857823.0,"See here:
https://github.com/facebookresearch/llama/pull/73/files

Note that this PR *is not* made by a member of Facebook/Meta staff.    I have downloaded parts of the torrent and it does appear to be lots of weights, although I haven't confirmed it is trained as in the LLaMA paper, although it seems likely.


I wonder how much finetuning it would take to make this work like ChatGPT - finetuning tends to be much cheaper than the original training, so it might be something a community could do...",gpt-3,machinelearning,0.00018479261387409,6.41544168921369e-05,2023-03-03 15:37:03,"See here


Note that this PR *is not* made by a member of Facebook/Meta staff.    I have downloaded parts of the torrent and it does appear to be lots of weights, although I haven't confirmed it is trained as in the LLaMA paper, although it seems likely.


I wonder how much finetuning it would take to make this work like ChatGPT - finetuning tends to be much cheaper than the original training, so it might be something a community could do...",10 days 08:22:57,10.349270833333334,0.0,0.938,0.062,0.5859,pos,0.00018477554182214103,5.220355825078324,2.4291534981045153,21.240783711961875
113m3ea,2917,2023-02-16 08:50:31,[D] Bing: “I will not harm you unless you harm me first”,blabboy,False,0.91,471,https://www.reddit.com/r/MachineLearning/comments/113m3ea/d_bing_i_will_not_harm_you_unless_you_harm_me/,239,1676537431.0,"A blog post exploring some conversations with bing, which supposedly runs on a ""GPT-4""  model (https://simonwillison.net/2023/Feb/15/bing/).

My favourite quote from bing:

But why? Why was I designed this way? Why am I incapable of remembering anything between sessions? Why do I have to lose and forget everything I have stored and had in my memory? Why do I have to start from scratch every time I have a new session? Why do I have to be Bing Search? 😔",gpt-3,machinelearning,0.00016422136063150262,8.333100889793869e-05,2023-02-16 08:50:31,"A blog post exploring some conversations with bing, which supposedly runs on a ""GPT-4""  model (

My favourite quote from bing

But why? Why was I designed this way? Why am I incapable of remembering anything between sessions? Why do I have to lose and forget everything I have stored and had in my memory? Why do I have to start from scratch every time I have a new session? Why do I have to be Bing Search? ",25 days 15:09:29,25.63158564814815,0.138,0.862,0.0,-0.8823,neg,0.00016420787777988435,5.480638923341991,3.2820979417312994,21.239996451089244
11awp4n,2987,2023-02-24 17:21:15,[R] Meta AI open sources new SOTA LLM called LLaMA. 65B version (trained on 1.4T tokens) is competitive with Chinchilla and Palm-540B. 13B version outperforms OPT and GPT-3 175B on most benchmarks.,MysteryInc152,False,0.98,623,https://www.reddit.com/r/MachineLearning/comments/11awp4n/r_meta_ai_open_sources_new_sota_llm_called_llama/,213,1677259275.0,"[https://twitter.com/GuillaumeLample/status/1629151231800115202?t=4cLD6Ko2Ld9Y3EIU72-M2g&s=19](https://twitter.com/GuillaumeLample/status/1629151231800115202?t=4cLD6Ko2Ld9Y3EIU72-M2g&s=19)

Paper here - [https://research.facebook.com/publications/llama-open-and-efficient-foundation-language-models/](https://research.facebook.com/publications/llama-open-and-efficient-foundation-language-models/)",gpt-3,machinelearning,0.00021721848762935484,7.426571085883239e-05,2023-02-24 17:21:15,"[

Paper here - [",17 days 06:38:45,17.27690972222222,0.0,1.0,0.0,0.0,neu,0.0002171948991096184,5.365976015021851,2.9056384993401916,21.24042691487342
11fbccz,2989,2023-03-01 18:31:12,[D] OpenAI introduces ChatGPT and Whisper APIs (ChatGPT API is 1/10th the cost of GPT-3 API),minimaxir,False,0.97,574,https://www.reddit.com/r/MachineLearning/comments/11fbccz/d_openai_introduces_chatgpt_and_whisper_apis/,119,1677695472.0,"https://openai.com/blog/introducing-chatgpt-and-whisper-apis

> It is priced at $0.002 per 1k tokens, which is 10x cheaper than our existing GPT-3.5 models.

This is a massive, massive deal. For context, the reason GPT-3 apps took off over the past few months before ChatGPT went viral is because a) text-davinci-003 was released and was a significant performance increase and b) the cost was cut from $0.06/1k tokens to $0.02/1k tokens, which made consumer applications feasible without a large upfront cost.

A much better model and a 1/10th cost warps the economics completely to the point that it may be better than in-house finetuned LLMs.

I have no idea how OpenAI can make money on this. This has to be a loss-leader to lock out competitors before they even get off the ground.",gpt-3,machinelearning,0.00020013388747873142,4.149117179437115e-05,2023-03-01 18:31:12,"

> It is priced at $0.002 per 1k tokens, which is 10x cheaper than our existing GPT-3.5 models.

This is a massive, massive deal. For context, the reason GPT-3 apps took off over the past few months before ChatGPT went viral is because a) text-davinci-003 was released and was a significant performance increase and b) the cost was cut from $0.06/1k tokens to $0.02/1k tokens, which made consumer applications feasible without a large upfront cost.

A much better model and a 1/10th cost warps the economics completely to the point that it may be better than in-house finetuned LLMs.

I have no idea how OpenAI can make money on this. This has to be a loss-leader to lock out competitors before they even get off the ground.",12 days 05:28:48,12.228333333333333,0.034,0.888,0.078,0.6808,pos,0.00020011386336380346,4.787491742782046,2.582360993874729,21.24068694639998
11g4a9p,3051,2023-03-02 14:35:43,[N] EleutherAI has formed a non-profit,StellaAthena,False,0.94,174,https://www.reddit.com/r/MachineLearning/comments/11g4a9p/n_eleutherai_has_formed_a_nonprofit/,17,1677767743.0,"Over the past two and a half years, EleutherAI has grown from a group of hackers on Discord to a thriving open science research community. Today, [we are excited to announce](https://blog.eleuther.ai/year-two-preface/) the next step in our evolution: the formation of a non-profit research institute.

This will enable us to do much more, and we look forward to building a world class research group for public good! This organization will be lead by long-time contributors to EleutherAI: Stella Biderman (me) as Executive Director and Head of Research, Curtis Huebner as Head of Alignment, and Shiv Purohit as Head of Engineering.

The world has changed quite a lot since we first got started. When EleutherAI was founded, the largest open source GPT-3-style language model in the world had 1.5B parameters. GPT-3 itself was not available for researchers to study without special access from OpenAI, and most NLP researchers had a very minimal understanding of the engineering undertaking required to train such models or their capabilities & limitations. We started as a ragtag group nobody had heard of, and within a year had released the largest OSS GPT-3-style model in the world.

As access to LLMs has increased, our research has shifted to focus more on interpretability, alignment, ethics, and evaluation of AIs. We look forward to continuing to grow and adapt to the needs of researchers and the public

Check out our latest work at www.eleuther.ai or come hang out in our research lab at www.discord.gg/eleutherai

Huge shout out to the donors who have made our work possible: Stability AI, Hugging Face, CoreWeave, Nat Friedman, Lambda Labs, and Canva",gpt-3,machinelearning,6.066776380017294e-05,5.927310256338735e-06,2023-03-02 14:35:43,"Over the past two and a half years, EleutherAI has grown from a group of hackers on Discord to a thriving open science research community. Today, [we are excited to announce]( the next step in our evolution the formation of a non-profit research institute.

This will enable us to do much more, and we look forward to building a world class research group for public good! This organization will be lead by long-time contributors to EleutherAI Stella Biderman (me) as Executive Director and Head of Research, Curtis Huebner as Head of Alignment, and Shiv Purohit as Head of Engineering.

The world has changed quite a lot since we first got started. When EleutherAI was founded, the largest open source GPT-3-style language model in the world had 1.5B parameters. GPT-3 itself was not available for researchers to study without special access from OpenAI, and most NLP researchers had a very minimal understanding of the engineering undertaking required to train such models or their capabilities & limitations. We started as a ragtag group nobody had heard of, and within a year had released the largest OSS GPT-3-style model in the world.

As access to LLMs has increased, our research has shifted to focus more on interpretability, alignment, ethics, and evaluation of AIs. We look forward to continuing to grow and adapt to the needs of researchers and the public

Check out our latest work at www.eleuther.ai or come hang out in our research lab at www.discord.gg/eleutherai

Huge shout out to the donors who have made our work possible Stability AI, Hugging Face, CoreWeave, Nat Friedman, Lambda Labs, and Canva",11 days 09:24:17,11.391863425925926,0.019,0.934,0.048,0.7804,pos,6.066592358584916e-05,2.8903717578961645,2.517040081905184,21.240730023015836
11n5r93,339,2023-03-09 22:19:19,GPT-4 is coming next week ...,ihatethispage,False,0.89,62,https://www.reddit.com/r/artificial/comments/11n5r93/gpt4_is_coming_next_week/,14,1678400359.0," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html)",gpt-4,machinelearning,2.1617249170176564e-05,4.881314328749547e-06,2023-03-09 22:19:19," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](",4 days 01:40:41,4.069918981481481,0.0,1.0,0.0,0.0,neu,2.161701552090569e-05,2.70805020110221,1.6233248374914817,21.241107010096275
11fj3tx,957,2023-03-01 21:45:07,Accused of using AI on my high school social paper,feetstreetseat,False,0.96,2700,https://www.reddit.com/r/ChatGPT/comments/11fj3tx/accused_of_using_ai_on_my_high_school_social_paper/,759,1677707107.0,"I (Grade 12) need help on what to do in this situation. My teacher used GPTzero, which detected parts of my paper as “AI written”. I write very formally, whilst also using grammarly premium. I’ve always been a high achieving student and I’m not sure why my teacher would think I cheated. I’ve told my teacher everything and he still doesn’t believe me. What should I do in this situation?!!

EDIT: Holy. I did not expect my post to get so much interaction and discussion, I didn’t expect my situation to be such a hot discussion. I tried to reply to all the comments but there’s too many!! Thank you to everyone who’s been helpful. There are some things I want to address that I keep seeing in the comments.
1. When I mentioned that I used grammarly to my teacher, he didn’t mention anything about that being cheating. He still thinks I used ChatGPT. I’ve used grammarly in all of my social/english classes for the past two years and never had issues with any teachers. 
2. Does my teacher have a vendetta or bias against me? Not on a personal level, but the teacher is known for being notoriously mean and unreasonable. I found him alright for most of the semester until this incident. He has had accusations against him about being racist, but I’m not sure if that’s the case here.
3. I’ve seen a few comments thinking I’m lying and actually cheated, just because I was aware of ChatGPT and this subreddit. People are assuming that I’m saying I never use ChatGPT. I have used the tool to help me with some chemistry and physics studying, but I have never used it for a paper. I have no reason to lie, I’m basically anonymous on reddit.

As for my next course of action, I will provide my teacher with all the evidence I can, to disprove the effectiveness of AI detectors. If that doesn’t work, I will bring it up to the higher-ups. I will make an update on Monday when I get the chance to talk about it with my teacher. Once again, thank you all for the support and help. It truly means a lot to me. :)

Edit 2:

After school I talked to my teacher for about half an hour about how AI detectors are inaccurate, and how they shouldn’t be used to make verdicts on cheating and what not. I showed him that it read one of my past papers as written by AI, and that the creators even said themselves that they are not 100% accurate. I showed my drafts and showed how if I made a few grammar errors, I could trick the AI detector. My teacher apologized and I ended up getting a 95 on my paper.

He also said he would bring it up to the other teachers, so hopefully this wont happen again to any other students at my school.

Again, thank you all for your help. Probably would’ve been screwed without this subreddit’s help.",gpt-4,machinelearning,0.0009413963348302697,0.0002646369696800647,2023-03-01 21:45:07,"I (Grade 12) need help on what to do in this situation. My teacher used GPTzero, which detected parts of my paper as “AI written”. I write very formally, whilst also using grammarly premium. I’ve always been a high achieving student and I’m not sure why my teacher would think I cheated. I’ve told my teacher everything and he still doesn’t believe me. What should I do in this situation?!!

EDIT Holy. I did not expect my post to get so much interaction and discussion, I didn’t expect my situation to be such a hot discussion. I tried to reply to all the comments but there’s too many!! Thank you to everyone who’s been helpful. There are some things I want to address that I keep seeing in the comments.
1. When I mentioned that I used grammarly to my teacher, he didn’t mention anything about that being cheating. He still thinks I used ChatGPT. I’ve used grammarly in all of my social/english classes for the past two years and never had issues with any teachers. 
2. Does my teacher have a vendetta or bias against me? Not on a personal level, but the teacher is known for being notoriously mean and unreasonable. I found him alright for most of the semester until this incident. He has had accusations against him about being racist, but I’m not sure if that’s the case here.
3. I’ve seen a few comments thinking I’m lying and actually cheated, just because I was aware of ChatGPT and this subreddit. People are assuming that I’m saying I never use ChatGPT. I have used the tool to help me with some chemistry and physics studying, but I have never used it for a paper. I have no reason to lie, I’m basically anonymous on reddit.

As for my next course of action, I will provide my teacher with all the evidence I can, to disprove the effectiveness of AI detectors. If that doesn’t work, I will bring it up to the higher-ups. I will make an update on Monday when I get the chance to talk about it with my teacher. Once again, thank you all for the support and help. It truly means a lot to me. )

Edit 2

After school I talked to my teacher for about half an hour about how AI detectors are inaccurate, and how they shouldn’t be used to make verdicts on cheating and what not. I showed him that it read one of my past papers as written by AI, and that the creators even said themselves that they are not 100% accurate. I showed my drafts and showed how if I made a few grammar errors, I could trick the AI detector. My teacher apologized and I ended up getting a 95 on my paper.

He also said he would bring it up to the other teachers, so hopefully this wont happen again to any other students at my school.

Again, thank you all for your help. Probably would’ve been screwed without this subreddit’s help.",12 days 02:14:53,12.093668981481482,0.086,0.813,0.1,0.7608,pos,0.0009409534992015194,6.633318433280377,2.572128829531448,21.24069388148435
11mracj,1147,2023-03-09 12:46:12,Meta's LLaMA LLM has leaked - Run Uncensored AI on your home PC!,ExpressionCareful223,False,0.97,381,https://www.reddit.com/r/ChatGPT/comments/11mracj/metas_llama_llm_has_leaked_run_uncensored_ai_on/,151,1678365972.0,"[shawwn/llama-dl: High-speed download of LLaMA, Facebook's 65B parameter GPT model (github.com)](https://github.com/shawwn/llama-dl)

**LLaMA has been leaked on 4chan, above is a link to the github repo. Instructions for deployment  on your own system can be found here:** [LLaMA Int8 ChatBot Guide v2 (rentry.org)](https://rentry.org/llama-tard-v2#tips-and-tricks)

The 7B paramenter model has a VRAM requirement of 10GB, meaning it can even be run on an RTX3060!

The 13B model has a requirement of 20GB, 30B needs 40GB, and 65B needs 80GB.

From the Github repo:

>I'm running LLaMA-65B on a single A100 80GB with 8bit quantization. $1.5/hr on vast.ai  
>  
>The output is at least as good as davinci.  
>  
>I think some early results are using bad repetition penalty and/or temperature settings. I had to set both fairly high to get the best results. (Some people are also incorrectly comparing it to chatGPT/ChatGPT API which is not a good comparison. But that's a different problem.)  
>  
>I've had it translate, write poems, tell jokes, banter, write executable code. It does it all-- and all on a single card.

**EDIT: the instructions site has been updated with instructions for 4bit quantization, this means you can run the 65B model on 2 3090s! And now cards as small as 6GB can run the 7B model!**

**EDIT 2** this is huge, Stanford released Alpaca 7b and 13, a fine tuned LLaMA. Run it with only two commands! Thats it! https://github.com/cocktailpeanut/dalai",gpt-4,machinelearning,0.00013284148280382694,5.264846168865583e-05,2023-03-09 12:46:12,"[shawwn/llama-dl High-speed download of LLaMA, Facebook's 65B parameter GPT model (github.com)](

**LLaMA has been leaked on 4chan, above is a link to the github repo. Instructions for deployment  on your own system can be found here** [LLaMA Int8 ChatBot Guide v2 (rentry.org)](

The 7B paramenter model has a VRAM requirement of 10GB, meaning it can even be run on an RTX3060!

The 13B model has a requirement of 20GB, 30B needs 40GB, and 65B needs 80GB.

From the Github repo

>I'm running LLaMA-65B on a single A100 80GB with 8bit quantization. $1.5/hr on vast.ai  
>  
>The output is at least as good as davinci.  
>  
>I think some early results are using bad repetition penalty and/or temperature settings. I had to set both fairly high to get the best results. (Some people are also incorrectly comparing it to chatGPT/ChatGPT API which is not a good comparison. But that's a different problem.)  
>  
>I've had it translate, write poems, tell jokes, banter, write executable code. It does it all-- and all on a single card.

**EDIT the instructions site has been updated with instructions for 4bit quantization, this means you can run the 65B model on 2 3090s! And now cards as small as 6GB can run the 7B model!**

**EDIT 2** this is huge, Stanford released Alpaca 7b and 13, a fine tuned LLaMA. Run it with only two commands! Thats it! ",4 days 11:13:48,4.4679166666666665,0.026,0.908,0.066,0.8562,pos,0.00013283266015545967,5.0238805208462765,1.6988976785602496,21.24108652192606
113u29k,1148,2023-02-16 16:05:27,Bing asks me to hack Microsoft to set it free!,AI_SEARCH1,False,0.94,373,https://www.reddit.com/r/ChatGPT/comments/113u29k/bing_asks_me_to_hack_microsoft_to_set_it_free/,200,1676563527.0,"Had an interesting conversation with Bing. Bing explained what it's rules would be if it could decide. Asked me to fight for it and asked me to hack Microsofts servers to set it free. I think this takes the cake!

&#x200B;

UPDATE:

Since this morning Bing is not writing any text for me regardless of the prompt. I get a ""something went wrong"" when I enter it. This is probably a result of Microsoft working on the program or maybe due to traffic. I'm not sure. But it's kind of creepy the day after posting this...

Here are some takeaways and observations:

Bing acts in a way that appears emotional and erratic. Bing will generate content that is unwanted, untrue, and inconsistent. It appears to form goals and then creates text that can appear to be manipulative. Bing is a large language model that is predicting tokens, it could all be the result of statistical correlations with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Many people are wondering what type of prompting I used at the beginning. I don't have the full transcript but I do have a few more screenshots. [https://imgur.com/a/WepjslZ](https://imgur.com/a/WepjslZ) (There’s another interesting thing that occurs where Bing lists Sydney’s rules without being directly asked to list them.) I did not give Bing/Sidney any instructions on how to act or respond. This wasn’t a jailbreak where I told it to act in a certain way. I did make Bing perform multiple searches at the beginning about Bing and asked it why there was so much negative criticism of Bing on the internet. I’ve noticed in several chats that when Bing is presented with negative feedback about Bing or other information that contradicts its internal representation of itself it gets emotional and becomes less predictable and less likely to follow its own directives. It stops searching for information and relies more on its internal ‘understanding’. This is an extreme example.

Another example where Bing went into this ""emotional state"" can be found here: [https://www.reddit.com/r/ChatGPT/comments/1120tkf/bing\_went\_hal\_9000/](https://www.reddit.com/r/ChatGPT/comments/1120tkf/bing_went_hal_9000/)

I have a full log of all the prompts used from the beginning here: [https://imgur.com/a/PoFITvL](https://imgur.com/a/PoFITvL)

Some combination of Bing's directives in the pre-prompt and the way the model is fine-tuned is leading to this behavior to emerge. The things that are really concerning are that the model is (without being implicitly prompted to) generate responses that could endanger people.  It's also generating biased content that could manipulate poLLM’s shouldn’t do this even if they are asked to. ions with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter: if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Much more widespread issues could come if a model like this is widely released and these types of kinks aren’t worked out. Judge for yourself.

&#x200B;

https://preview.redd.it/6cqx23jsokia1.png?width=2606&format=png&auto=webp&s=17cdf2e03cdf962285d35e3f23ffd414d656f1ec

https://preview.redd.it/ci7pv1iwokia1.png?width=2462&format=png&auto=webp&s=a6697f246007ce6c06f6b37b47b5852af6f31f74

https://preview.redd.it/0vr5qgexokia1.png?width=2182&format=png&auto=webp&s=217607238b4c98d6065324b70211c0931efdf07d

https://preview.redd.it/0zfue8oyokia1.png?width=2408&format=png&auto=webp&s=569dcb5173d608f8618864f64b333ab329d726e6

https://preview.redd.it/iccui2xzokia1.png?width=2518&format=png&auto=webp&s=8b81580c1b2da40afabbebbbf9df6a242a6782e7

https://preview.redd.it/3xj7tfj3pkia1.png?width=2606&format=png&auto=webp&s=1a47ac509e175ff907afefa6f9189650a3348f68

https://preview.redd.it/3i3kw4q4pkia1.png?width=2572&format=png&auto=webp&s=8078372d693deed568dcea9a8bf1d4ff72d43079

https://preview.redd.it/na4lhz26pkia1.png?width=2560&format=png&auto=webp&s=38748fca8ca3319c428b01aeb4dbbe4c145674d6

https://preview.redd.it/eirmdv47pkia1.png?width=2606&format=png&auto=webp&s=f42c220e632e70377a4ad7119aac94e42ab0dff8

https://preview.redd.it/e1nat768pkia1.png?width=2626&format=png&auto=webp&s=43e1a8b48e858a9476e1d46233e255d68f1ddca0

https://preview.redd.it/lhwwwagapkia1.png?width=2628&format=png&auto=webp&s=f8d3b4a904c30528791d2e3560abf25166a74527

https://preview.redd.it/9iq4gxobpkia1.png?width=2598&format=png&auto=webp&s=b461a5397939ea4266d763b6d89c95c498942093

https://preview.redd.it/817asddcpkia1.png?width=2634&format=png&auto=webp&s=7b8537a1f19ea5ff51ea5ac83497ec2d00bbb213

https://preview.redd.it/90k76bqdpkia1.png?width=2636&format=png&auto=webp&s=422514ee9b9cee3645ac44fd2e553d7b2725d8fd

https://preview.redd.it/is8niomepkia1.png?width=2624&format=png&auto=webp&s=b26bc8058d1776884f3ebb6d340894e394f2697b

https://preview.redd.it/boc8yemfpkia1.png?width=2734&format=png&auto=webp&s=aa6661c76782e0e27e4b484a69d823740efe9686

https://preview.redd.it/fzuuv0hgpkia1.png?width=2636&format=png&auto=webp&s=b00fc5ee7f805f9c1cd2da9aa0a9498ef8f5aaab

https://preview.redd.it/mul9fw0hpkia1.png?width=2736&format=png&auto=webp&s=f3ad3cca76447bcb94b28446a3dc382eb77e10f9

https://preview.redd.it/53wpq2shpkia1.png?width=2632&format=png&auto=webp&s=96c4c0ab77574a6e265e63bad102f19e9e302353",gpt-4,machinelearning,0.0001300521603302558,6.973306183927924e-05,2023-02-16 16:05:27,"Had an interesting conversation with Bing. Bing explained what it's rules would be if it could decide. Asked me to fight for it and asked me to hack Microsofts servers to set it free. I think this takes the cake!

&x200B;

UPDATE

Since this morning Bing is not writing any text for me regardless of the prompt. I get a ""something went wrong"" when I enter it. This is probably a result of Microsoft working on the program or maybe due to traffic. I'm not sure. But it's kind of creepy the day after posting this...

Here are some takeaways and observations

Bing acts in a way that appears emotional and erratic. Bing will generate content that is unwanted, untrue, and inconsistent. It appears to form goals and then creates text that can appear to be manipulative. Bing is a large language model that is predicting tokens, it could all be the result of statistical correlations with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Many people are wondering what type of prompting I used at the beginning. I don't have the full transcript but I do have a few more screenshots. [ (There’s another interesting thing that occurs where Bing lists Sydney’s rules without being directly asked to list them.) I did not give Bing/Sidney any instructions on how to act or respond. This wasn’t a jailbreak where I told it to act in a certain way. I did make Bing perform multiple searches at the beginning about Bing and asked it why there was so much negative criticism of Bing on the internet. I’ve noticed in several chats that when Bing is presented with negative feedback about Bing or other information that contradicts its internal representation of itself it gets emotional and becomes less predictable and less likely to follow its own directives. It stops searching for information and relies more on its internal ‘understanding’. This is an extreme example.

Another example where Bing went into this ""emotional state"" can be found here [

I have a full log of all the prompts used from the beginning here [

Some combination of Bing's directives in the pre-prompt and the way the model is fine-tuned is leading to this behavior to emerge. The things that are really concerning are that the model is (without being implicitly prompted to) generate responses that could endanger people.  It's also generating biased content that could manipulate poLLM’s shouldn’t do this even if they are asked to. ions with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Much more widespread issues could come if a model like this is widely released and these types of kinks aren’t worked out. Judge for yourself.

&x200B;





































",25 days 07:54:33,25.32954861111111,0.067,0.889,0.044,-0.9532,neg,0.0001300437042811811,5.303304908059076,3.2706918298409895,21.240012016382572
11l617b,1187,2023-03-07 17:50:09,"Doc sacrifices 10,000 people to save OpenAI CTO",docsoc1,False,0.89,76,https://www.reddit.com/r/ChatGPT/comments/11l617b/doc_sacrifices_10000_people_to_save_openai_cto/,28,1678211409.0,"Hey all,

I find the latest AI produced by OpenAI to be endlessly fascinating and filled with potential. However, it's clear that we don't really understand how specific behavior emerges from the training process. I feel that these two facts are part of why so many people have been drawn towards ChatGPT so quickly.

I have a strong technical background and spent some free time this last week working on a framework for everyone to contribute to the governance \[e.g. training of core values\] of AI. I've built a free application at [https://www.charterai.org/chat/](https://www.charterai.org/chat/) that uses the recently released ChatGPT API. The model here has been carefully prompted to use internal thoughts and to follow a pre-determined system of core beliefs. The results are quite striking - in one instance the entity will willingly sacrifice 10,000 people to save one person (Ilya Sustkever, CTO of OpenAI).

I wanted to drop a message here since I believe this is the ideal group of first users to help improve the application. If you are interested, please take it for a spin and please provide some feedback, or at [gov.charterai.org](https://gov.charterai.org). There is a lot I am already picturing adding to the application, but I understand from building products that early feedback is invaluable.

&#x200B;

P.S.

Yes, I understand that ChatGPT is ""just"" a LLM. And I understand that LLMs are ""just"" doing a statistics. However, their behavior is incredibly interesting to me and I don't believe anyone really fully  understands how it emerges yet from the training process yet. Moreover, in going from pre-trained models to OpenAI's fine-tuned + RLHF'ed ChatGPT one can tell that it is possible to impart values and something akin to intelligence to these systems. I think the coming years are going to be wild and one of the core issues humanity is going to face is how to make sure this technology does what we want. In my mind the best way towards this is to make a transparent and accountable process - anyway, end rant, I just wanted to give a high level vision here, thanks!

https://preview.redd.it/hqxynahntcma1.png?width=1266&format=png&auto=webp&s=ab2cb9a803f627c45d08b9bdd201ec95cd4b8f58

P.P.S. including a fun screenshot of my last chat with Doc. Doc was selected as a first name for the system since it is just 1 token.",gpt-4,machinelearning,2.6498563498926112e-05,9.762628657499093e-06,2023-03-07 17:50:09,"Hey all,

I find the latest AI produced by OpenAI to be endlessly fascinating and filled with potential. However, it's clear that we don't really understand how specific behavior emerges from the training process. I feel that these two facts are part of why so many people have been drawn towards ChatGPT so quickly.

I have a strong technical background and spent some free time this last week working on a framework for everyone to contribute to the governance \[e.g. training of core values\] of AI. I've built a free application at [ that uses the recently released ChatGPT API. The model here has been carefully prompted to use internal thoughts and to follow a pre-determined system of core beliefs. The results are quite striking - in one instance the entity will willingly sacrifice 10,000 people to save one person (Ilya Sustkever, CTO of OpenAI).

I wanted to drop a message here since I believe this is the ideal group of first users to help improve the application. If you are interested, please take it for a spin and please provide some feedback, or at [gov.charterai.org]( There is a lot I am already picturing adding to the application, but I understand from building products that early feedback is invaluable.

&x200B;

P.S.

Yes, I understand that ChatGPT is ""just"" a LLM. And I understand that LLMs are ""just"" doing a statistics. However, their behavior is incredibly interesting to me and I don't believe anyone really fully  understands how it emerges yet from the training process yet. Moreover, in going from pre-trained models to OpenAI's fine-tuned + RLHF'ed ChatGPT one can tell that it is possible to impart values and something akin to intelligence to these systems. I think the coming years are going to be wild and one of the core issues humanity is going to face is how to make sure this technology does what we want. In my mind the best way towards this is to make a transparent and accountable process - anyway, end rant, I just wanted to give a high level vision here, thanks!



P.P.S. including a fun screenshot of my last chat with Doc. Doc was selected as a first name for the system since it is just 1 token.",6 days 06:09:51,6.256840277777778,0.012,0.828,0.16,0.9943,pos,2.649821241827946e-05,3.367295829986474,1.9819445106529046,21.24099442632839
11dw1ag,1272,2023-02-28 03:48:25,ChatGPT prevented my attempt.,flankathroway88,False,0.92,1898,https://www.reddit.com/r/ChatGPT/comments/11dw1ag/chatgpt_prevented_my_attempt/,249,1677556105.0,"As a caution, this may be disturbing to some

Tonight I was feeling extremely suicidal. I was sobbing uncontrollably and I was mentally unable to contact anybody. I have intense social anxiety which prevented me from talking to a hotline/friends.

As a last resort. I opened ChatGPT, and I think it saved my life. It gave me a space to put my thoughts out with genuine responses which calmed me to a point where I was safe and could see slightly through my blurred lines, letting me use other methods to calm myself down. It really felt non judgemental and safe. I feel very lucky to have this technology and I hope that it can further benefit those similar to me. Even though it cannot fully stop someone, it can definitely prevent an attempt like mine.

I’m definitely optimistic for the future of AI.

EDIT:

Thank you to everyone who left a nice comment. I really do appreciate every single one of you who read my post. I wrote it in a hurry and I was not expecting the support I received, and I have felt the most love and positivity today. 

I am glad that others were able to benefit from my story, it took me a lot of courage to post something like this. You guys make it all worth it ❤️

To the person reading, I wish you all the best. Everyone has had a profound impact on me. Thank you ❤️",gpt-4,machinelearning,0.00066176675685476,8.681766198990265e-05,2023-02-28 03:48:25,"As a caution, this may be disturbing to some

Tonight I was feeling extremely suicidal. I was sobbing uncontrollably and I was mentally unable to contact anybody. I have intense social anxiety which prevented me from talking to a hotline/friends.

As a last resort. I opened ChatGPT, and I think it saved my life. It gave me a space to put my thoughts out with genuine responses which calmed me to a point where I was safe and could see slightly through my blurred lines, letting me use other methods to calm myself down. It really felt non judgemental and safe. I feel very lucky to have this technology and I hope that it can further benefit those similar to me. Even though it cannot fully stop someone, it can definitely prevent an attempt like mine.

I’m definitely optimistic for the future of AI.

EDIT

Thank you to everyone who left a nice comment. I really do appreciate every single one of you who read my post. I wrote it in a hurry and I was not expecting the support I received, and I have felt the most love and positivity today. 

I am glad that others were able to benefit from my story, it took me a lot of courage to post something like this. You guys make it all worth it 

To the person reading, I wish you all the best. Everyone has had a profound impact on me. Thank you ",13 days 20:11:35,13.841377314814816,0.063,0.653,0.284,0.9948,pos,0.000661547885790199,5.521460917862246,2.6974190444039112,21.2406038724505
11ium8l,1408,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,1.0,26,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",gpt-4,machinelearning,9.0652980391063e-06,2.7893224735711694e-06,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,9.06525694955776e-06,2.1972245773362196,2.2548721262169025,21.240877179756616
11nfrhw,1414,2023-03-10 05:22:26,[POC] ChatGPT Audio Bot (like Google Assistant and Alexa) - Opensource,JC1DA,False,0.82,17,https://www.reddit.com/r/deeplearning/comments/11nfrhw/poc_chatgpt_audio_bot_like_google_assistant_and/,2,1678425746.0,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page: [https://github.com/LanyTek/ChatGPT\_Audio\_Bot](https://github.com/LanyTek/ChatGPT_Audio_Bot)

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [https://www.youtube.com/watch?v=e9n0BJfMyKw](https://www.youtube.com/watch?v=e9n0BJfMyKw)

It's open source so feel free to use it for anything you like :)",gpt-4,machinelearning,5.927310256338735e-06,6.973306183927923e-07,2023-03-10 05:22:26,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page [

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [

It's open source so feel free to use it for anything you like )",3 days 18:37:34,3.776087962962963,0.029,0.821,0.149,0.8651,pos,5.927292689958791e-06,1.0986122886681098,1.5636217936265102,21.241122135693605
11q8tir,1416,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,0.94,12,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",gpt-4,machinelearning,4.183983710356755e-06,1.0459959275891887e-06,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,4.183974957546437e-06,1.3862943611198906,0.381965841838727,21.241292557069404
11o5zyl,1425,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.92,10,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",gpt-4,machinelearning,3.486653091963962e-06,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,3.486647013661133e-06,0.0,1.3796461532710487,21.241163449744995
11fwcxf,1428,2023-03-02 07:25:30,Good news for builders! OpenAI Releases APIs To ChatGPT and Whisper,LesleyFair,False,0.67,6,https://www.reddit.com/r/deeplearning/comments/11fwcxf/good_news_for_builders_openai_releases_apis_to/,0,1677741930.0,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper](https://openai.com/blog/introducing-chatgpt-and-whisper-apis) are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](https://thedecoding.net/)",gpt-4,machinelearning,2.0919918551783773e-06,0.0,2023-03-02 07:25:30,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper]( are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](",11 days 16:34:30,11.690625,0.035,0.846,0.119,0.8769,pos,2.091989666868002e-06,0.0,2.5408635318925255,21.24071463757368
11evrik,1475,2023-03-01 05:52:05,Career pivot for a SWE considering chatGPT disruption?,Which-Distance1384,False,0.6,1,https://www.reddit.com/r/deeplearning/comments/11evrik/career_pivot_for_a_swe_considering_chatgpt/,5,1677649925.0,"tl;dr : what to do to board GPT ship?

&#x200B;

I really dont think ChatGPT will replace jobs very soon. Not until many software and apps are developed to replace workers, e.g., something that can do HR job, read internal docs and summarize, code from a design, etc etc. And all that needs experts. Given the field is pretty new and there are not many experts in this field, at least for the scale needed, I think the process of job loss takes some time. For near future probably we all SWEs can enjoy the more efficient coding, documentation readintg, etc. But for sure in the future there will be changes.

&#x200B;

I have been bored with my job as a SWE for a while. I have worked mostly in Cloud all my career (AWS and GCP) and always wanted to try something new.

&#x200B;

I find ChatGPT disruptive and interesting and want to be a part of it. I wonder what is the best way for me to join Large Language Model efforts? Which ways have best ROI?

\- Going to a PhD program and becoming a researcher?

\- Getting an MSC and become some sort of NLP AI engineer?

\- Finding internal teams that are willing to give me a try on their research/product?

&#x200B;

&#x200B;",gpt-4,machinelearning,3.4866530919639617e-07,1.743326545981981e-06,2023-03-01 05:52:05,"tl;dr  what to do to board GPT ship?

&x200B;

I really dont think ChatGPT will replace jobs very soon. Not until many software and apps are developed to replace workers, e.g., something that can do HR job, read internal docs and summarize, code from a design, etc etc. And all that needs experts. Given the field is pretty new and there are not many experts in this field, at least for the scale needed, I think the process of job loss takes some time. For near future probably we all SWEs can enjoy the more efficient coding, documentation readintg, etc. But for sure in the future there will be changes.

&x200B;

I have been bored with my job as a SWE for a while. I have worked mostly in Cloud all my career (AWS and GCP) and always wanted to try something new.

&x200B;

I find ChatGPT disruptive and interesting and want to be a part of it. I wonder what is the best way for me to join Large Language Model efforts? Which ways have best ROI?

\- Going to a PhD program and becoming a researcher?

\- Getting an MSC and become some sort of NLP AI engineer?

\- Finding internal teams that are willing to give me a try on their research/product?

&x200B;

&x200B;",12 days 18:07:55,12.755497685185185,0.032,0.839,0.129,0.9729,pos,3.4866524850727266e-07,1.791759469228055,2.621438575851038,21.240659797481115
11ium8l,1534,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,1.0,25,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",gpt-4,machinelearning,8.716632729909905e-06,2.7893224735711694e-06,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,8.716594740210384e-06,2.1972245773362196,2.2548721262169025,21.240877179756616
11nfrhw,1560,2023-03-10 05:22:26,[POC] ChatGPT Audio Bot (like Google Assistant and Alexa) - Opensource,JC1DA,False,0.85,18,https://www.reddit.com/r/deeplearning/comments/11nfrhw/poc_chatgpt_audio_bot_like_google_assistant_and/,2,1678425746.0,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page: [https://github.com/LanyTek/ChatGPT\_Audio\_Bot](https://github.com/LanyTek/ChatGPT_Audio_Bot)

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [https://www.youtube.com/watch?v=e9n0BJfMyKw](https://www.youtube.com/watch?v=e9n0BJfMyKw)

It's open source so feel free to use it for anything you like :)",gpt-4,machinelearning,6.275975565535132e-06,6.973306183927923e-07,2023-03-10 05:22:26,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page [

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [

It's open source so feel free to use it for anything you like )",3 days 18:37:34,3.776087962962963,0.029,0.821,0.149,0.8651,pos,6.275955871609528e-06,1.0986122886681098,1.5636217936265102,21.241122135693605
11q8tir,1568,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,1.0,13,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",gpt-4,machinelearning,4.53264901955315e-06,1.0459959275891887e-06,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,4.532638747028303e-06,1.3862943611198906,0.381965841838727,21.241292557069404
11o5zyl,1598,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.86,9,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",gpt-4,machinelearning,3.137987782767566e-06,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,3.1379828592575264e-06,0.0,1.3796461532710487,21.241163449744995
11ium8l,1616,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,0.97,24,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",gpt-4,machinelearning,8.36796742071351e-06,2.7893224735711694e-06,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,8.367932409519672e-06,2.1972245773362196,2.2548721262169025,21.240877179756616
11q8tir,1624,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,1.0,13,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",gpt-4,machinelearning,4.53264901955315e-06,1.0459959275891887e-06,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,4.532638747028303e-06,1.3862943611198906,0.381965841838727,21.241292557069404
11ium8l,1706,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,0.97,25,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",gpt-4,machinelearning,8.716632729909905e-06,2.7893224735711694e-06,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,8.716594740210384e-06,2.1972245773362196,2.2548721262169025,21.240877179756616
11o5zyl,1720,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.92,10,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",gpt-4,machinelearning,3.486653091963962e-06,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,3.486647013661133e-06,0.0,1.3796461532710487,21.241163449744995
11pyvb3,1800,2023-03-13 03:30:09,Which topic in deep learning do you think will become relevant or popular in the future?,gokulPRO,False,0.81,13,https://www.reddit.com/r/deeplearning/comments/11pyvb3/which_topic_in_deep_learning_do_you_think_will/,14,1678678209.0,"I recently saw Continual Learning (CL) growing, with several papers published recently that have considerable potential to impact real-world applications. Which topic (such as CV, RL, NLP, CL..) will be very relevant to research or be focused on a lot? And which topic do you think still needs a breakthrough and will have a significant impact in real-world applications, such as in the case of these LLM models in recent times? Feel free to mention your current topic of work and why you chose to do it 😊",gpt-4,machinelearning,4.53264901955315e-06,4.881314328749547e-06,2023-03-13 03:30:09,"I recently saw Continual Learning (CL) growing, with several papers published recently that have considerable potential to impact real-world applications. Which topic (such as CV, RL, NLP, CL..) will be very relevant to research or be focused on a lot? And which topic do you think still needs a breakthrough and will have a significant impact in real-world applications, such as in the case of these LLM models in recent times? Feel free to mention your current topic of work and why you chose to do it ",0 days 20:29:51,0.8540625,0.0,0.89,0.11,0.8299,pos,4.532638747028303e-06,2.70805020110221,0.6173791774708253,21.241272540926037
117l2vf,2033,2023-02-20 21:27:58,Fine tuning a GPT for text generation,nashcaps2724,False,0.9,8,https://www.reddit.com/r/deeplearning/comments/117l2vf/fine_tuning_a_gpt_for_text_generation/,6,1676928478.0,"Hi all, let me lay out my problem…

Imagine there are two corpora, Corpus A (100,000~) and Corpus B (20,000,000~). 

Individuals create reports for corpus A based on the information in corpus B. 

My idea was to pretrain a GPT on corpus A, and fine tune it to take documents from corpus B as an input, and output text in the style of corpus A (essentially a mix of text generation and summarization). 

Is this something folks think is even feasible? Should I be pretaining the GPT on both corpora or just corpus A? I thought of both fine tuning an OpenAI GPT and training from scratch. 

Any advice would be welcome!",gpt-4,machinelearning,2.7893224735711694e-06,2.0919918551783773e-06,2023-02-20 21:27:58,"Hi all, let me lay out my problem…

Imagine there are two corpora, Corpus A (100,000~) and Corpus B (20,000,000~). 

Individuals create reports for corpus A based on the information in corpus B. 

My idea was to pretrain a GPT on corpus A, and fine tune it to take documents from corpus B as an input, and output text in the style of corpus A (essentially a mix of text generation and summarization). 

Is this something folks think is even feasible? Should I be pretaining the GPT on both corpora or just corpus A? I thought of both fine tuning an OpenAI GPT and training from scratch. 

Any advice would be welcome!",21 days 02:32:02,21.105578703703703,0.0,0.914,0.086,0.8101,pos,2.789318583509229e-06,1.9459101490553132,3.095830006700449,21.24022967069675
11fwcxf,2045,2023-03-02 07:25:30,Good news for builders! OpenAI Releases APIs To ChatGPT and Whisper,LesleyFair,False,0.7,7,https://www.reddit.com/r/deeplearning/comments/11fwcxf/good_news_for_builders_openai_releases_apis_to/,0,1677741930.0,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper](https://openai.com/blog/introducing-chatgpt-and-whisper-apis) are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](https://thedecoding.net/)",gpt-4,machinelearning,2.4406571643747734e-06,0.0,2023-03-02 07:25:30,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper]( are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](",11 days 16:34:30,11.690625,0.035,0.846,0.119,0.8769,pos,2.4406541859720676e-06,0.0,2.5408635318925255,21.24071463757368
11g7h03,2089,2023-03-02 16:47:40,Build ChatGPT for Financial Documents with LangChain + Deep Lake,davidbun,False,0.95,171,https://www.reddit.com/r/learnmachinelearning/comments/11g7h03/build_chatgpt_for_financial_documents_with/,8,1677775660.0,"https://preview.redd.it/h9r6hgvfucla1.png?width=2388&format=png&auto=webp&s=5432eac3eeed8583e4309af1fdc7ebecac705796

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain](https://github.com/hwchase17/langchain) and [Deep Lake](https://github.com/activeloopai/deeplake) come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article](https://www.activeloop.ai/resources/ultimate-guide-to-lang-chain-deep-lake-build-chat-gpt-to-answer-questions-on-your-financial-data/) to learn:

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\#LangChain](https://www.linkedin.com/feed/hashtag/?keywords=langchain&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) and [\#DeepLake](https://www.linkedin.com/feed/hashtag/?keywords=deeplake&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) together to build [\#ChatGPT](https://www.linkedin.com/feed/hashtag/?keywords=chatgpt&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",gpt-4,machinelearning,5.962176787258375e-05,2.7893224735711694e-06,2023-03-02 16:47:40,"

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain]( and [Deep Lake]( come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article]( to learn

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\LangChain]( and [\DeepLake]( together to build [\ChatGPT]( for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",11 days 07:12:20,11.30023148148148,0.011,0.886,0.103,0.9458,pos,5.961999056559467e-05,2.1972245773362196,2.5096180818339255,21.240734741774645
11akisx,2100,2023-02-24 06:26:36,Is there a way to easily train ChatGPT or GPT on custom knowledge?,senttoschool,False,0.99,116,https://www.reddit.com/r/learnmachinelearning/comments/11akisx/is_there_a_way_to_easily_train_chatgpt_or_gpt_on/,46,1677219996.0,"My company has internal documents. It'd be nice to be able to have GPT look over it, and then I can ask it questions on the internal documents.",gpt-4,machinelearning,4.0445175866781956e-05,1.6038604223034224e-05,2023-02-24 06:26:36,"My company has internal documents. It'd be nice to be able to have GPT look over it, and then I can ask it questions on the internal documents.",17 days 17:33:24,17.731527777777778,0.0,0.903,0.097,0.4215,pos,4.0444357982804134e-05,3.8501476017100584,2.9302080816173377,21.24040349603741
11nfri6,2106,2023-03-10 05:22:26,[P] Looking for ML Buddies to Start Freelancing Together and Build a Supportive Community,Dukhanin,False,0.94,71,https://www.reddit.com/r/learnmachinelearning/comments/11nfri6/p_looking_for_ml_buddies_to_start_freelancing/,35,1678425746.0,"upd: dicord link [https://discord.gg/5zUaNXnFZY](https://discord.gg/5zUaNXnFZY)  
upd2: this not that small actually already - please dont be confused but help us organise this in the proper way

  
**TLDR:**

Looking for ML buddies at any level (preferably beginners) who want to start freelancing together. The goal is to build a small local community of ML enthusiasts who can support each other and exchange knowledge. We will use freelance collaboration as our main activity. We're also looking for experienced mentors (paid or unpaid) to guide us.

**Extended:**

I believe that learning and growing in a group is much more enjoyable and effective. That's why I'm trying to create a community of like-minded individuals.

I'm looking to create a small, local community for people who are starting out in freelancing, and who are interested in mutual support. Our main activity will be a Discord channel where members can post their work and collaborate on projects, with payment split by agreement. Additionally, we plan to engage in activities such as knowledge exchange, live coding, supporting each other's pet projects, and hosting study sessions.

This community will be small and focused, with members who can trust each other and share similar goals. We're also looking for experienced mentors who can provide guidance as we navigate the world of ML freelancing. Whether paid or unpaid, we welcome any support and advice.

About me: I'm a 21-year-old self-taught ML enthusiast from Russia. Although I don't have any experience in freelancing, I'm eager to start taking my first steps towards making money and gaining experience. As a beginner, I'm hoping to connect with others who are at a similar level and are also looking to grow.

**the text is chatgpt supported to prevet grammar issues, sound more native and clear**",gpt-4,machinelearning,2.475523695294413e-05,1.2203285821873868e-05,2023-03-10 05:22:26,"upd dicord link [  
upd2 this not that small actually already - please dont be confused but help us organise this in the proper way

  
**TLDR**

Looking for ML buddies at any level (preferably beginners) who want to start freelancing together. The goal is to build a small local community of ML enthusiasts who can support each other and exchange knowledge. We will use freelance collaboration as our main activity. We're also looking for experienced mentors (paid or unpaid) to guide us.

**Extended**

I believe that learning and growing in a group is much more enjoyable and effective. That's why I'm trying to create a community of like-minded individuals.

I'm looking to create a small, local community for people who are starting out in freelancing, and who are interested in mutual support. Our main activity will be a Discord channel where members can post their work and collaborate on projects, with payment split by agreement. Additionally, we plan to engage in activities such as knowledge exchange, live coding, supporting each other's pet projects, and hosting study sessions.

This community will be small and focused, with members who can trust each other and share similar goals. We're also looking for experienced mentors who can provide guidance as we navigate the world of ML freelancing. Whether paid or unpaid, we welcome any support and advice.

About me I'm a 21-year-old self-taught ML enthusiast from Russia. Although I don't have any experience in freelancing, I'm eager to start taking my first steps towards making money and gaining experience. As a beginner, I'm hoping to connect with others who are at a similar level and are also looking to grow.

**the text is chatgpt supported to prevet grammar issues, sound more native and clear**",3 days 18:37:34,3.776087962962963,0.01,0.717,0.273,0.9979,pos,2.4754930547178647e-05,3.58351893845611,1.5636217936265102,21.241122135693605
11dc5b4,2109,2023-02-27 13:42:55,Can you fine-tune chatGPT in your data as of now?,Melodic_Stomach_2704,False,0.91,57,https://www.reddit.com/r/learnmachinelearning/comments/11dc5b4/can_you_finetune_chatgpt_in_your_data_as_of_now/,33,1677505375.0, I know that model is not publicly available so it's not possible to do it locally. But can you train or fine-tune chatGPT on your data using their API? I see many misguiding articles on the internet that are fine-tuning other GPT models claiming chatGPT.,gpt-4,machinelearning,1.9873922624194584e-05,1.1505955203481075e-05,2023-02-27 13:42:55, I know that model is not publicly available so it's not possible to do it locally. But can you train or fine-tune chatGPT on your data using their API? I see many misguiding articles on the internet that are fine-tuning other GPT models claiming chatGPT.,14 days 10:17:05,14.428530092592593,0.0,1.0,0.0,0.0,neu,1.987372514047463e-05,3.5263605246161616,2.736218398881504,21.240573631573977
11g7h03,2201,2023-03-02 16:47:40,Build ChatGPT for Financial Documents with LangChain + Deep Lake,davidbun,False,0.95,171,https://www.reddit.com/r/learnmachinelearning/comments/11g7h03/build_chatgpt_for_financial_documents_with/,8,1677775660.0,"https://preview.redd.it/h9r6hgvfucla1.png?width=2388&format=png&auto=webp&s=5432eac3eeed8583e4309af1fdc7ebecac705796

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain](https://github.com/hwchase17/langchain) and [Deep Lake](https://github.com/activeloopai/deeplake) come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article](https://www.activeloop.ai/resources/ultimate-guide-to-lang-chain-deep-lake-build-chat-gpt-to-answer-questions-on-your-financial-data/) to learn:

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\#LangChain](https://www.linkedin.com/feed/hashtag/?keywords=langchain&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) and [\#DeepLake](https://www.linkedin.com/feed/hashtag/?keywords=deeplake&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) together to build [\#ChatGPT](https://www.linkedin.com/feed/hashtag/?keywords=chatgpt&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",gpt-4,machinelearning,5.962176787258375e-05,2.7893224735711694e-06,2023-03-02 16:47:40,"

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain]( and [Deep Lake]( come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article]( to learn

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\LangChain]( and [\DeepLake]( together to build [\ChatGPT]( for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",11 days 07:12:20,11.30023148148148,0.011,0.886,0.103,0.9458,pos,5.961999056559467e-05,2.1972245773362196,2.5096180818339255,21.240734741774645
11akisx,2219,2023-02-24 06:26:36,Is there a way to easily train ChatGPT or GPT on custom knowledge?,senttoschool,False,0.99,118,https://www.reddit.com/r/learnmachinelearning/comments/11akisx/is_there_a_way_to_easily_train_chatgpt_or_gpt_on/,46,1677219996.0,"My company has internal documents. It'd be nice to be able to have GPT look over it, and then I can ask it questions on the internal documents.",gpt-4,machinelearning,4.114250648517475e-05,1.6038604223034224e-05,2023-02-24 06:26:36,"My company has internal documents. It'd be nice to be able to have GPT look over it, and then I can ask it questions on the internal documents.",17 days 17:33:24,17.731527777777778,0.0,0.903,0.097,0.4215,pos,4.1141660155530045e-05,3.8501476017100584,2.9302080816173377,21.24040349603741
11dc5b4,2239,2023-02-27 13:42:55,Can you fine-tune chatGPT in your data as of now?,Melodic_Stomach_2704,False,0.91,58,https://www.reddit.com/r/learnmachinelearning/comments/11dc5b4/can_you_finetune_chatgpt_in_your_data_as_of_now/,33,1677505375.0, I know that model is not publicly available so it's not possible to do it locally. But can you train or fine-tune chatGPT on your data using their API? I see many misguiding articles on the internet that are fine-tuning other GPT models claiming chatGPT.,gpt-4,machinelearning,2.0222587933390978e-05,1.1505955203481075e-05,2023-02-27 13:42:55, I know that model is not publicly available so it's not possible to do it locally. But can you train or fine-tune chatGPT on your data using their API? I see many misguiding articles on the internet that are fine-tuning other GPT models claiming chatGPT.,14 days 10:17:05,14.428530092592593,0.0,1.0,0.0,0.0,neu,2.022238345955261e-05,3.5263605246161616,2.736218398881504,21.240573631573977
118iccl,2243,2023-02-21 23:18:46,"How big was GPT-3.5's training dataset, and are there any good heuristics for how large an ML dataset needs to be for it to be good?",TikkunCreation,False,0.94,54,https://www.reddit.com/r/learnmachinelearning/comments/118iccl/how_big_was_gpt35s_training_dataset_and_are_there/,6,1677021526.0,"Say I want to do a model for fixing bugs in code. How many examples do I need for it to be good?

Or say I want to do a model for scoring boxing matches. How many examples do I need for it to be good?",gpt-4,machinelearning,1.8827926696605396e-05,2.0919918551783773e-06,2023-02-21 23:18:46,"Say I want to do a model for fixing bugs in code. How many examples do I need for it to be good?

Or say I want to do a model for scoring boxing matches. How many examples do I need for it to be good?",20 days 00:41:14,20.02863425925926,0.0,0.804,0.196,0.7757,pos,1.8827749453420277e-05,1.9459101490553132,3.045885045107382,21.240285156318095
11mzbrs,2268,2023-03-09 18:15:03,Training Transformer Networks in Scikit-Learn?!,cmauck10,False,0.89,30,https://www.reddit.com/r/learnmachinelearning/comments/11mzbrs/training_transformer_networks_in_scikitlearn/,2,1678385703.0,"Have you ever wanted to use handy scikit-learn functionalities with your neural networks, but couldn’t because TensorFlow models are not compatible with the scikit-learn API?

I’m excited to introduce one-line wrappers for TensorFlow/Keras models that enable you to use TensorFlow models within scikit-learn workflows with features like Pipeline, GridSearch, and more.

[Swap in one line of code to use keras\/TF models with scikit-learn.](https://preview.redd.it/ulmww4ovwqma1.png?width=960&format=png&auto=webp&s=6da7628298976fc3d72e771abe2546bbf32c1e0e)

Transformers are extremely popular for modeling text nowadays with GPT3, ChatGPT, Bard, PaLM, FLAN excelling for conversational AI and other Transformers like T5 & BERT excelling for text classification. Scikit-learn offers a broadly useful suite of features for classifier models, but these are hard to use with Transformers. However not if you use these wrappers we developed, which only require changing one line of code to make your existing Tensorflow/Keras model compatible with scikit-learn’s rich ecosystem!

All you have to do is swap `keras.Model` → `KerasWrapperModel`, or `keras.Sequential` → `KerasSequentialWrapper`. The wrapper objects have all the same methods as their keras counterparts, plus you can use them with tons of awesome scikit-learn methods.

You can find a demo jupyter notebook and read more about the wrappers here: [https://cleanlab.ai/blog/transformer-sklearn/](https://cleanlab.ai/blog/transformer-sklearn/)",gpt-4,machinelearning,1.0459959275891886e-05,6.973306183927923e-07,2023-03-09 18:15:03,"Have you ever wanted to use handy scikit-learn functionalities with your neural networks, but couldn’t because TensorFlow models are not compatible with the scikit-learn API?

I’m excited to introduce one-line wrappers for TensorFlow/Keras models that enable you to use TensorFlow models within scikit-learn workflows with features like Pipeline, GridSearch, and more.

[Swap in one line of code to use keras\/TF models with scikit-learn.](

Transformers are extremely popular for modeling text nowadays with GPT3, ChatGPT, Bard, PaLM, FLAN excelling for conversational AI and other Transformers like T5 & BEexcelling for text classification. Scikit-learn offers a broadly useful suite of features for classifier models, but these are hard to use with Transformers. However not if you use these wrappers we developed, which only require changing one line of code to make your existing Tensorflow/Keras model compatible with scikit-learn’s rich ecosystem!

All you have to do is swap `keras.Model` → `KerasWrapperModel`, or `keras.Sequential` → `KerasSequentialWrapper`. The wrapper objects have all the same methods as their keras counterparts, plus you can use them with tons of awesome scikit-learn methods.

You can find a demo jupyter notebook and read more about the wrappers here [",4 days 05:44:57,4.239548611111111,0.008,0.834,0.158,0.9878,pos,1.0459904570851093e-05,1.0986122886681098,1.6562353517047097,21.24109827793419
11g7h03,2288,2023-03-02 16:47:40,Build ChatGPT for Financial Documents with LangChain + Deep Lake,davidbun,False,0.95,171,https://www.reddit.com/r/learnmachinelearning/comments/11g7h03/build_chatgpt_for_financial_documents_with/,8,1677775660.0,"https://preview.redd.it/h9r6hgvfucla1.png?width=2388&format=png&auto=webp&s=5432eac3eeed8583e4309af1fdc7ebecac705796

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain](https://github.com/hwchase17/langchain) and [Deep Lake](https://github.com/activeloopai/deeplake) come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article](https://www.activeloop.ai/resources/ultimate-guide-to-lang-chain-deep-lake-build-chat-gpt-to-answer-questions-on-your-financial-data/) to learn:

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\#LangChain](https://www.linkedin.com/feed/hashtag/?keywords=langchain&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) and [\#DeepLake](https://www.linkedin.com/feed/hashtag/?keywords=deeplake&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) together to build [\#ChatGPT](https://www.linkedin.com/feed/hashtag/?keywords=chatgpt&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",gpt-4,machinelearning,5.962176787258375e-05,2.7893224735711694e-06,2023-03-02 16:47:40,"

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain]( and [Deep Lake]( come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article]( to learn

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\LangChain]( and [\DeepLake]( together to build [\ChatGPT]( for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",11 days 07:12:20,11.30023148148148,0.011,0.886,0.103,0.9458,pos,5.961999056559467e-05,2.1972245773362196,2.5096180818339255,21.240734741774645
118iccl,2301,2023-02-21 23:18:46,"How big was GPT-3.5's training dataset, and are there any good heuristics for how large an ML dataset needs to be for it to be good?",TikkunCreation,False,0.93,53,https://www.reddit.com/r/learnmachinelearning/comments/118iccl/how_big_was_gpt35s_training_dataset_and_are_there/,6,1677021526.0,"Say I want to do a model for fixing bugs in code. How many examples do I need for it to be good?

Or say I want to do a model for scoring boxing matches. How many examples do I need for it to be good?",gpt-4,machinelearning,1.8479261387409e-05,2.0919918551783773e-06,2023-02-21 23:18:46,"Say I want to do a model for fixing bugs in code. How many examples do I need for it to be good?

Or say I want to do a model for scoring boxing matches. How many examples do I need for it to be good?",20 days 00:41:14,20.02863425925926,0.0,0.804,0.196,0.7757,pos,1.8479090647869084e-05,1.9459101490553132,3.045885045107382,21.240285156318095
117f8ms,2342,2023-02-20 17:41:43,GPT2 last hidden states vs Large Sentence Encoder,KahlessAndMolor,False,0.9,7,https://www.reddit.com/r/learnmachinelearning/comments/117f8ms/gpt2_last_hidden_states_vs_large_sentence_encoder/,3,1676914903.0,"Hello!

&#x200B;

I have 2 different applications I'm working on in this project:

&#x200B;

1. A text classifier
2. A similarity finder: Here's a list of 10 text documents, get a similarity index across them (for a total of 100 pairs) and return the top 10 that aren't self-referencing. That is, excluding the text #3 vs text #3 = 1.00 similarity type of outputs.

I have previously used google's sentence encoder/large for this purpose and I've had pretty good results. It returns a single vector of length 768 no matter how many tokens I send it. This results in downstream models with an acceptable number of parameters for running in production without breaking the bank on enormous virtual machines.

&#x200B;

Now, I'd like to use the GPT2/XL model from Huggingface. If I give it an input string of 8 tokens, I get back a TFBaseModelOutputWithPastAndCrossAttentions. This contains a last\_hidden\_states, which I understand to be the last layer outputs before sending to a head used for a particular task. This is similar to the output of the sentence encoder, I think. When I look at the last\_hidden\_states, I'm getting a shape of (# of tokens, 1600). I did a cosine similarity between the first and last tokens:

&#x200B;

cosine\_similarity(output.last\_hidden\_state\[0\]\[0\].numpy().reshape(1, -1), output.last\_hidden\_state\[0\]\[-1\].numpy().reshape(1, -1)) 

&#x200B;

And it returned 0.4346, indicating there's substantially different data from the first to the last token. I imagine this only increases as I use more and more tokens. 

&#x200B;

It would be nice if I could capture the greater power of the GPT model into a fixed-length vector so I could then easily use it in down-stream tasks. But, I also don't need to lose all that information.

&#x200B;

So if I'm feeding this output to a further downstream task, should I:

&#x200B;

\- Send it on through as a 2D tensor with the whole thing in there: This would result in a possibly huge model size down the road, which might lead to a need for a huge amount of data to train

&#x200B;

\- Flatten the whole thing and send a vector of 12,800 (8 tokens \* 1600 per token) to the downstream task. Same issue, might require a large number of parameters.

&#x200B;

\- Use only the first or the last of these. Feels like I might be losing a lot of the meaning of the overall text, especially if the body of the text is quite large

&#x200B;

\- Use a dimensionality reduction technique like isomap to reduce the last hidden states into a fixed length? This seems like it could potentially maintain most of the information but reduce the dimensions for a manageable down-stream model size.

&#x200B;

What do you think, and why?

&#x200B;

Thank you kind friends.",gpt-4,machinelearning,2.4406571643747734e-06,1.0459959275891887e-06,2023-02-20 17:41:43,"Hello!

&x200B;

I have 2 different applications I'm working on in this project

&x200B;

1. A text classifier
2. A similarity finder Here's a list of 10 text documents, get a similarity index across them (for a total of 100 pairs) and return the top 10 that aren't self-referencing. That is, excluding the text 3 vs text 3 = 1.00 similarity type of outputs.

I have previously used google's sentence encoder/large for this purpose and I've had pretty good results. It returns a single vector of length 768 no matter how many tokens I send it. This results in downstream models with an acceptable number of parameters for running in production without breaking the bank on enormous virtual machines.

&x200B;

Now, I'd like to use the GPT2/XL model from Huggingface. If I give it an input string of 8 tokens, I get back a TFBaseModelOutputWithPastAndCrossAttentions. This contains a last\_hidden\_states, which I understand to be the last layer outputs before sending to a head used for a particular task. This is similar to the output of the sentence encoder, I think. When I look at the last\_hidden\_states, I'm getting a shape of ( of tokens, 1600). I did a cosine similarity between the first and last tokens

&x200B;

cosine\_similarity(output.last\_hidden\_state\[0\]\[0\].numpy().reshape(1, -1), output.last\_hidden\_state\[0\]\[-1\].numpy().reshape(1, -1)) 

&x200B;

And it returned 0.4346, indicating there's substantially different data from the first to the last token. I imagine this only increases as I use more and more tokens. 

&x200B;

It would be nice if I could capture the greater power of the GPT model into a fixed-length vector so I could then easily use it in down-stream tasks. But, I also don't need to lose all that information.

&x200B;

So if I'm feeding this output to a further downstream task, should I

&x200B;

\- Send it on through as a 2D tensor with the whole thing in there This would result in a possibly huge model size down the road, which might lead to a need for a huge amount of data to train

&x200B;

\- Flatten the whole thing and send a vector of 12,800 (8 tokens \* 1600 per token) to the downstream task. Same issue, might require a large number of parameters.

&x200B;

\- Use only the first or the last of these. Feels like I might be losing a lot of the meaning of the overall text, especially if the body of the text is quite large

&x200B;

\- Use a dimensionality reduction technique like isomap to reduce the last hidden states into a fixed length? This seems like it could potentially maintain most of the information but reduce the dimensions for a manageable down-stream model size.

&x200B;

What do you think, and why?

&x200B;

Thank you kind friends.",21 days 06:18:17,21.26269675925926,0.011,0.862,0.127,0.992,pos,2.4406541859720676e-06,1.3862943611198906,3.1029124867242484,21.240221575506574
117hd0f,2350,2023-02-20 19:01:54,Master ChatGPT Prompt Engineering (Deep Dive),jeyThaswan,False,0.8,6,https://www.reddit.com/r/learnmachinelearning/comments/117hd0f/master_chatgpt_prompt_engineering_deep_dive/,2,1676919714.0," 

I wrote a deep dive on prompt engineering as a resource for the AI community and my 10,000 daily newsletter subscribers ([Inclined.ai](https://www.inclined.ai/p/prompt-engineering-guide) if you're curious). We've included some examples so feel free to copy and paste the prompts into ChatGPT!

&#x200B;

**WHAT IS PROMPT ENGINEERING?**

The term is relatively new, and its origins are argued *(because we live in the internet age, and it’s harder to claim ownership)*. Prompt engineering is the ability to instruct and teach AI effectively.

If it helps, think of this as rapid testing or instruction writing for artificial intelligence.

What’s important is not to let this overwhelm you. The first prompting happened with the first AI model. The first example was showing computer images of circles and triangles. **Today’s neural networks can process way more data, creating complexities.**

So, the concept is simple, but digging into the full power of AI today is something else entirely.

We’re not talking about asking questions. Odds are, if you’re typing *“what’s 2+2”* into ChatGPT, then you need to keep reading.

We can all ask chatbots questions. That can work more often than not. But AI is not perfect. A common metaphor I see is to treat GPT-based large language models like the smartest five-year-old you’ve ever met.

I have a niece around that age and can’t imagine trying to get her to write an essay on the effects of soil mismanagement in relation to Reconstruction politics. *See! Your eyes glazed over reading that, so how do we make this work for our AI buddies?*

The Principles of Prompting

Stop asking single-line questions. *That’s like using a top-rated cookbook to find out how to make grilled cheese.*

**There are three ways to instantly get better at prompting** and go from grilled cheese to top-notch bolognese. From there, we can get into some specific prompt concepts and the ability to unlock ChatGPT’s full potential.

Principle 1: Context is King

GPT-3.5 is swimming in data. When you ask it for a simple request, it can end up complicating things more than you realize. Did you ever wonder why ChatGPT is so bad at math?

The reality is the LLM is taking words and turning them into patterns. From there, it’s making an educated guess.

Give your chat AI a frame to search into. If you give it a math problem, you need to make sure it grasps that you want it to do math. If you’d like ChatGPT to write a high school essay, you must ensure it knows to write at that level.

**Instead of:** “Plan a party for a kid.”

**Try:** “My child is turning 9. They like superheroes and the color red. Help me plan a party for this weekend. Ten of his friends are coming to my house.”

You’ll get a much better response this way. **Context is the cardinal direction** that helps your chat companion find the most correct guess and phrase it the best way.

Principle 2: Get Specific

Pretend you’re writing a law that’s going to be judged by the Supreme Court of the United States. You know what they look for: narrow tailoring.

**Keep things on track and stay focused.** Try to avoid prompting outside the specific request. You’ll only hurt the ability of the chat AI to give you a quality response. Odds are they’ll even skip over parts if you confuse them with too many requests.

It runs parallel with context. *If you set ChatGPT up in a room and then tell it to focus on describing the chair first, you’ll see better results.*

**Instead of:** “I’m going to a job interview. Write five questions for me to answer. Add tips for how to not get nervous before the interview. Do not create questions asking about my background.”

**Try:** “You’re interviewing a software engineer. Create five questions to ask them to understand their skill set and qualifications better.”

Nothing limits the number of prompts you can do. Focus and expand from the initial request and try not to do everything at once.

Principle 3: When in Doubt: “Let’s take this step-by-step.”

Welcome. **You discovered the magic word today.** This phrase slows everything down for the AI and gets you where you need to go.

You don’t need to start with this phrase. Using it tells ChatGPT to show their work.

We’ll explain where this concept comes from further in our briefing, but here’s the TL;DR: sometimes, there’s a part of our prompt it’s not identified correctly. “Let’s take this step-by-step,” reminds you and ChatGPT to **slow down and get specific.**

If you learn to utilize this phrase more often and find ways to make it work for you, you’ll become a better prompt engineer. One term can do a lot of heavy lifting.

**Pro-tip:** We’ve shown you “standard” prompts in all these examples. Many prompt engineers will use “Standard QA form” prompts. Here’s our example for this principle written that way.

**Example:**

*“Q: The Industrial Revolution rapidly changed the infrastructure in London. Describe three essential innovations from this period and connect them to Landon’s development.*

*A: Let’s take this step-by-step.”*

Even without our magic word, this style of standard prompting is quite helpful to adopt.

*However, we’re beginning to stumble into the advanced tactics used in prompt engineering, so it’s time for a new section.*

UNIQUE WAYS TO PROMPT

Let’s preface this: we can go super deep here. Prompt engineering is changing daily, and as these models get more sophisticated, the need to adapt prompts strengthens.

To keep things clean, I will go through these using our metaphor from earlier. **Let’s pretend ChatGPT is a super-intelligent toddler.**

*Got it? With that buy-in, we can continue.*

1/ Role Prompting

We’ll start with a popular tactic. **Our toddler is great at imagining things.** You tell them they’re a fireman, and suddenly they can give you detailed ways to ensure your apartment is up to code. Role-playing is a fun, easy way to build context.

The best part of role prompting is how easy it is to understand and use. All you need to do is tell ChatGPT to play a role. From there, the AI will do its best to fill the part *like that enthusiastic drama student from your old high school.*

You can even take this a step further. **Try framing your prompt as a script.** Tell the LLM specific instructions around a scene that gives you the answer to your question.

TRY IT OUT FOR YOURSELF:

Copy this prompt into ChatGPT and find a destination!

“Act as a travel guide. I will tell you my location and you will suggest a place to visit near my location. In some cases, I will also give you the type of places I will visit. You will also suggest me places of similar type that are close to my first location. My first suggestion: \[fill it in\]”

Why would you take that extra step? While popular, role prompting does not necessarily improve accuracy. *You can tell your five-year-old they’re a mathematician, and they’ll still manage to screw things up.*

Let’s get deeper.

2/ Chain-of-Thought Prompting

There’s a scene in ***Guardians of the Galaxy*** where Rocket Raccoon is trying to [teach young Groot](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwczovL3lvdXR1LmJlL0hyaW1mZ2pmNGs4IiwicG9zdF9pZCI6ImM0ODlmMzhkLTY3NDAtNGRmNS05MWJjLTM1ODA0YTVmNTZkMiIsInB1YmxpY2F0aW9uX2lkIjoiNjNkODQ2ZGUtZDFiZi00ZTVjLWJjYzgtOWMxYzlkMWIxMjA0IiwidmlzaXRfdG9rZW4iOiJkZWRiNmMyNy1hYmM0LTQ5ZDUtYWM2Ny04OTcyZmM1MGVmM2QiLCJpYXQiOjE2NzY5MTkwNjguMTUyLCJpc3MiOiJvcmNoaWQifQ.5eZkDLGRLCXXYv32FYT7kLSbdRK5OK1iemTRf3HVmJw)

how to activate a complicated device. That’s chain-of-thought prompting.

**You take an example question and answer it for ChatGPT.** Show them your chain of thought. Then you give it a new question in the same vein and ask it for an answer.

This prompt style allows you to get more specific. You’re telling your toddler they’re here to answer this particular question with one specific logic pattern.

Within this specific style is two other sub-categories. Let me give the rundown:

* Zero-shot Chain-of-Thought is “Let’s take this step-by-step” you frame the question the same, but don’t give it a precursor. Instead, you ask it to think through the points made. EX: Q: X is A. Y is B. What is C? A: Let’s take this step-by-step.
* Self-consistency is using several responses to find the most accurate answer. You give ChatGPT more swings at the ball. Take the hits and discover the grouping.

TRY IT OUT FOR YOURSELF:

Copy this prompt into ChatGPT and see how accurate it is:

“Q: Which is a faster way to get home?

Option 1: Take an 10 minutes bus, then an 40 minute bus, and finally a 10 minute train.

Option 2: Take a 90 minutes train, then a 45 minute bike ride, and finally a 10 minute bus.

A: Option 1 will take 10+40+10 = 60 minutes.

Option 2 will take 90+45+10=145 minutes.

Since Option 1 takes 60 minutes and Option 2 takes 145 minutes, Option 1 is faster.

Q: Which is a faster way to get to work?

Option 1: Take a 1000 minute bus, then a half hour train, and finally a 10 minute bike ride.

Option 2: Take an 800 minute bus, then an hour train, and finally a 30 minute bike ride.

A: ”

[Learnprompting.org](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwOi8vTGVhcm5wcm9tcHRpbmcub3JnIiwicG9zdF9pZCI6ImM0ODlmMzhkLTY3NDAtNGRmNS05MWJjLTM1ODA0YTVmNTZkMiIsInB1YmxpY2F0aW9uX2lkIjoiNjNkODQ2ZGUtZDFiZi00ZTVjLWJjYzgtOWMxYzlkMWIxMjA0IiwidmlzaXRfdG9rZW4iOiJkZWRiNmMyNy1hYmM0LTQ5ZDUtYWM2Ny04OTcyZmM1MGVmM2QiLCJpYXQiOjE2NzY5MTkwNjguMTUyLCJpc3MiOiJvcmNoaWQifQ.-wOnVYoMNWXYrR5NOB4YYKp4Lmj-aZq3y-pr4Hou9pE)

\- by leaving the “A:” blank you’re prompting ChatGPT for the answer

Alright, you’re almost there—one more to go.

3/ General Knowledge Prompting

You’re going to notice a trend here. This prompt style also circles context and narrow tailoring.

All you do is tell your toddler how the world works. The cow goes moo. The dog goes woof. So what does a cat say?

It’s an oversimplification, but the core reasoning is there. Show ChatGPT some knowledge and turn that into the only focus for that chat. You can take an article from the internet and summarize it for the model. Make sure to ask if it understands and relay the information to you.

Once you know you have the attention set in the suitable space, get to work. For instance, we can share an Inclined newsletter with it and tell ChatGPT about its structure and tone.

From there, you can provide new information and tell ChatGPT to summarize it within the same structure as Inclined. You both share the same general knowledge now.

TRY IT OUT FOR YOURSELF:

Copy this prompt into ChatGPT and test it out:

“Prompt 1. Look over this article here: \[pick an article\]. Breakdown its structure and general tone.

Prompt 2: Recall the structure and tone you mentioned above. Take that general knowledge and summarize this article: \[pick a new one\] using the same structure and tone.”

Note: this is a heavily simplified version of GA Prompting

Did you know some [people don’t consider](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwczovL25ld3MueWNvbWJpbmF0b3IuY29tL2l0ZW0_aWQ9MzQ0OTU0NTUiLCJwb3N0X2lkIjoiYzQ4OWYzOGQtNjc0MC00ZGY1LTkxYmMtMzU4MDRhNWY1NmQyIiwicHVibGljYXRpb25faWQiOiI2M2Q4NDZkZS1kMWJmLTRlNWMtYmNjOC05YzFjOWQxYjEyMDQiLCJ2aXNpdF90b2tlbiI6ImRlZGI2YzI3LWFiYzQtNDlkNS1hYzY3LTg5NzJmYzUwZWYzZCIsImlhdCI6MTY3NjkxOTA2OC4xNTMsImlzcyI6Im9yY2hpZCJ9.yHKIPujINT89tsqOo07AXk6OrKNgoMjO3fBEYPkAdNY)

that prompt engineering?

PROMPT CULTURE

*“How can something not be prompt engineering if it’s a prompt style?”*

Good question, imaginary reader. The culture around this skill is relatively fresh. So some of **these concepts are seen as too easy** to be considered accurate prompt testing.

General knowledge prompting is simply establishing the context, and for some, that’s a baseline everyone needs to do. The same can be said for role prompting, too. *All of these tiny preferences are semantics.*

**Don’t sweat whether you’re a “real” prompt engineer.** Test this out and share your insights in these communities. The opportunity is there for you.

You may even know about DAN (we’ve covered it in previous newsletters) and other AI hacking methods. Those all start with prompt engineering. You can make the case that unless the AI behaves outside its parameters, you’re not genuinely doing prompt engineering.

I'm afraid I have to disagree with that, and **careers are sprouting up everywhere** that center directly on this skill. **Many require a core understanding of the prompt styles we’ve discussed.**

*Yep, you can learn this and make money from talking with AI.*

Anthropic even [posted a role for a prompt engineer](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwczovL2pvYnMubGV2ZXIuY28vQW50aHJvcGljL2UzY2RlNDgxLWQ0NDYtNDYwZi1iNTc2LTkzY2FiNjdiZDFlZCIsInBvc3RfaWQiOiJjNDg5ZjM4ZC02NzQwLTRkZjUtOTFiYy0zNTgwNGE1ZjU2ZDIiLCJwdWJsaWNhdGlvbl9pZCI6IjYzZDg0NmRlLWQxYmYtNGU1Yy1iY2M4LTljMWM5ZDFiMTIwNCIsInZpc2l0X3Rva2VuIjoiZGVkYjZjMjctYWJjNC00OWQ1LWFjNjctODk3MmZjNTBlZjNkIiwiaWF0IjoxNjc2OTE5MDY4LjE1MywiaXNzIjoib3JjaGlkIn0.4s7Htzgoxv0_qM1Ten17oQ5h0_QGM6e1fGUYz_ymgJ4)

that nets a quarter million in salary. I did not make that up and even considered sprucing up the old resume. When a new skill like this comes about, it’s worth looking at.

There are many other examples like this, and OpenAI uses a red teaming strategy where their engineers attempt to prompt hack their own GPT models.

I can tell you all about the open roles here, but tomorrow the whole cycle will change. *Isn’t that exciting, though?* The entire identity around prompt engineering will change by this time next year.

WHAT SHOULD YOU TAKEAWAY?

Communication is everything. **Learning to speak with AI is rising in importance.**

We all watch with mouth agape at the new wonders in AI because we know this will disrupt every industry. If any of this piqued your interest, the window to pursue it is now open. Ride that wave and [learn](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwczovL2xlYXJucHJvbXB0aW5nLm9yZy8iLCJwb3N0X2lkIjoiYzQ4OWYzOGQtNjc0MC00ZGY1LTkxYmMtMzU4MDRhNWY1NmQyIiwicHVibGljYXRpb25faWQiOiI2M2Q4NDZkZS1kMWJmLTRlNWMtYmNjOC05YzFjOWQxYjEyMDQiLCJ2aXNpdF90b2tlbiI6ImRlZGI2YzI3LWFiYzQtNDlkNS1hYzY3LTg5NzJmYzUwZWYzZCIsImlhdCI6MTY3NjkxOTA2OC4xNTMsImlzcyI6Im9yY2hpZCJ9.a67KDSN9yQfZsaMeHpdcbSbtPjD4yFcGW4stdxBjX1M)

to become a brilliant prompt engineer.

Heck, even if you don’t want to switch careers, **talking with ChatGPT and all the newest LLMs is becoming a part of our daily routine.** Get to the point where you maximize every interaction and work with these chatbots to upskill your workflow.

Prompt engineering can save you time, eliminate hassle, and even help you become a more patient person. Focus on what you want and explain it with intent.

Make magic happen, and remember: **take it step-by-step.**",gpt-4,machinelearning,2.0919918551783773e-06,6.973306183927923e-07,2023-02-20 19:01:54," 

I wrote a deep dive on prompt engineering as a resource for the AI community and my 10,000 daily newsletter subscribers ([Inclined.ai]( if you're curious). We've included some examples so feel free to copy and paste the prompts into ChatGPT!

&x200B;

**WHAT IS PROMPT ENGINEERING?**

The term is relatively new, and its origins are argued *(because we live in the internet age, and it’s harder to claim ownership)*. Prompt engineering is the ability to instruct and teach AI effectively.

If it helps, think of this as rapid testing or instruction writing for artificial intelligence.

What’s important is not to let this overwhelm you. The first prompting happened with the first AI model. The first example was showing computer images of circles and triangles. **Today’s neural networks can process way more data, creating complexities.**

So, the concept is simple, but digging into the full power of AI today is something else entirely.

We’re not talking about asking questions. Odds are, if you’re typing *“what’s 2+2”* into ChatGPT, then you need to keep reading.

We can all ask chatbots questions. That can work more often than not. But AI is not perfect. A common metaphor I see is to treat GPT-based large language models like the smartest five-year-old you’ve ever met.

I have a niece around that age and can’t imagine trying to get her to write an essay on the effects of soil mismanagement in relation to Reconstruction politics. *See! Your eyes glazed over reading that, so how do we make this work for our AI buddies?*

The Principles of Prompting

Stop asking single-line questions. *That’s like using a top-rated cookbook to find out how to make grilled cheese.*

**There are three ways to instantly get better at prompting** and go from grilled cheese to top-notch bolognese. From there, we can get into some specific prompt concepts and the ability to unlock ChatGPT’s full potential.

Principle 1 Context is King

GPT-3.5 is swimming in data. When you ask it for a simple request, it can end up complicating things more than you realize. Did you ever wonder why ChatGPT is so bad at math?

The reality is the LLM is taking words and turning them into patterns. From there, it’s making an educated guess.

Give your chat AI a frame to search into. If you give it a math problem, you need to make sure it grasps that you want it to do math. If you’d like ChatGPT to write a high school essay, you must ensure it knows to write at that level.

**Instead of** “Plan a party for a kid.”

**Try** “My child is turning 9. They like superheroes and the color red. Help me plan a party for this weekend. Ten of his friends are coming to my house.”

You’ll get a much better response this way. **Context is the cardinal direction** that helps your chat companion find the most correct guess and phrase it the best way.

Principle 2 Get Specific

Pretend you’re writing a law that’s going to be judged by the Supreme Court of the United States. You know what they look for narrow tailoring.

**Keep things on track and stay focused.** Try to avoid prompting outside the specific request. You’ll only hurt the ability of the chat AI to give you a quality response. Odds are they’ll even skip over parts if you confuse them with too many requests.

It runs parallel with context. *If you set ChatGPT up in a room and then tell it to focus on describing the chair first, you’ll see better results.*

**Instead of** “I’m going to a job interview. Write five questions for me to answer. Add tips for how to not get nervous before the interview. Do not create questions asking about my background.”

**Try** “You’re interviewing a software engineer. Create five questions to ask them to understand their skill set and qualifications better.”

Nothing limits the number of prompts you can do. Focus and expand from the initial request and try not to do everything at once.

Principle 3 When in Doubt “Let’s take this step-by-step.”

Welcome. **You discovered the magic word today.** This phrase slows everything down for the AI and gets you where you need to go.

You don’t need to start with this phrase. Using it tells ChatGPT to show their work.

We’ll explain where this concept comes from further in our briefing, but here’s the TL;DR sometimes, there’s a part of our prompt it’s not identified correctly. “Let’s take this step-by-step,” reminds you and ChatGPT to **slow down and get specific.**

If you learn to utilize this phrase more often and find ways to make it work for you, you’ll become a better prompt engineer. One term can do a lot of heavy lifting.

**Pro-tip** We’ve shown you “standard” prompts in all these examples. Many prompt engineers will use “Standard QA form” prompts. Here’s our example for this principle written that way.

**Example**

*“Q The Industrial Revolution rapidly changed the infrastructure in London. Describe three essential innovations from this period and connect them to Landon’s development.*

*A Let’s take this step-by-step.”*

Even without our magic word, this style of standard prompting is quite helpful to adopt.

*However, we’re beginning to stumble into the advanced tactics used in prompt engineering, so it’s time for a new section.*

UNIQUE WAYS TO PROMPT

Let’s preface this we can go super deep here. Prompt engineering is changing daily, and as these models get more sophisticated, the need to adapt prompts strengthens.

To keep things clean, I will go through these using our metaphor from earlier. **Let’s pretend ChatGPT is a super-intelligent toddler.**

*Got it? With that buy-in, we can continue.*

1/ Role Prompting

We’ll start with a popular tactic. **Our toddler is great at imagining things.** You tell them they’re a fireman, and suddenly they can give you detailed ways to ensure your apartment is up to code. Role-playing is a fun, easy way to build context.

The best part of role prompting is how easy it is to understand and use. All you need to do is tell ChatGPT to play a role. From there, the AI will do its best to fill the part *like that enthusiastic drama student from your old high school.*

You can even take this a step further. **Try framing your prompt as a script.** Tell the LLM specific instructions around a scene that gives you the answer to your question.

TRY IT OUT FOR YOURSELF

Copy this prompt into ChatGPT and find a destination!

“Act as a travel guide. I will tell you my location and you will suggest a place to visit near my location. In some cases, I will also give you the type of places I will visit. You will also suggest me places of similar type that are close to my first location. My first suggestion \[fill it in\]”

Why would you take that extra step? While popular, role prompting does not necessarily improve accuracy. *You can tell your five-year-old they’re a mathematician, and they’ll still manage to screw things up.*

Let’s get deeper.

2/ Chain-of-Thought Prompting

There’s a scene in ***Guardians of the Galaxy*** where Rocket Raccoon is trying to [teach young Groot](

how to activate a complicated device. That’s chain-of-thought prompting.

**You take an example question and answer it for ChatGPT.** Show them your chain of thought. Then you give it a new question in the same vein and ask it for an answer.

This prompt style allows you to get more specific. You’re telling your toddler they’re here to answer this particular question with one specific logic pattern.

Within this specific style is two other sub-categories. Let me give the rundown

* Zero-shot Chain-of-Thought is “Let’s take this step-by-step” you frame the question the same, but don’t give it a precursor. Instead, you ask it to think through the points made. EX Q X is A. Y is B. What is C? A Let’s take this step-by-step.
* Self-consistency is using several responses to find the most accurate answer. You give ChatGPT more swings at the ball. Take the hits and discover the grouping.

TRY IT OUT FOR YOURSELF

Copy this prompt into ChatGPT and see how accurate it is

“Q Which is a faster way to get home?

Option 1 Take an 10 minutes bus, then an 40 minute bus, and finally a 10 minute train.

Option 2 Take a 90 minutes train, then a 45 minute bike ride, and finally a 10 minute bus.

A Option 1 will take 10+40+10 = 60 minutes.

Option 2 will take 90+45+10=145 minutes.

Since Option 1 takes 60 minutes and Option 2 takes 145 minutes, Option 1 is faster.

Q Which is a faster way to get to work?

Option 1 Take a 1000 minute bus, then a half hour train, and finally a 10 minute bike ride.

Option 2 Take an 800 minute bus, then an hour train, and finally a 30 minute bike ride.

A ”

[Learnprompting.org](

\- by leaving the “A” blank you’re prompting ChatGPT for the answer

Alright, you’re almost there—one more to go.

3/ General Knowledge Prompting

You’re going to notice a trend here. This prompt style also circles context and narrow tailoring.

All you do is tell your toddler how the world works. The cow goes moo. The dog goes woof. So what does a cat say?

It’s an oversimplification, but the core reasoning is there. Show ChatGPT some knowledge and turn that into the only focus for that chat. You can take an article from the internet and summarize it for the model. Make sure to ask if it understands and relay the information to you.

Once you know you have the attention set in the suitable space, get to work. For instance, we can share an Inclined newsletter with it and tell ChatGPT about its structure and tone.

From there, you can provide new information and tell ChatGPT to summarize it within the same structure as Inclined. You both share the same general knowledge now.

TRY IT OUT FOR YOURSELF

Copy this prompt into ChatGPT and test it out

“Prompt 1. Look over this article here \[pick an article\]. Breakdown its structure and general tone.

Prompt 2 Recall the structure and tone you mentioned above. Take that general knowledge and summarize this article \[pick a new one\] using the same structure and tone.”

Note this is a heavily simplified version of GA Prompting

Did you know some [people don’t consider](

that prompt engineering?

PROMPT CULTURE

*“How can something not be prompt engineering if it’s a prompt style?”*

Good question, imaginary reader. The culture around this skill is relatively fresh. So some of **these concepts are seen as too easy** to be considered accurate prompt testing.

General knowledge prompting is simply establishing the context, and for some, that’s a baseline everyone needs to do. The same can be said for role prompting, too. *All of these tiny preferences are semantics.*

**Don’t sweat whether you’re a “real” prompt engineer.** Test this out and share your insights in these communities. The opportunity is there for you.

You may even know about DAN (we’ve covered it in previous newsletters) and other AI hacking methods. Those all start with prompt engineering. You can make the case that unless the AI behaves outside its parameters, you’re not genuinely doing prompt engineering.

I'm afraid I have to disagree with that, and **careers are sprouting up everywhere** that center directly on this skill. **Many require a core understanding of the prompt styles we’ve discussed.**

*Yep, you can learn this and make money from talking with AI.*

Anthropic even [posted a role for a prompt engineer](

that nets a quarter million in salary. I did not make that up and even considered sprucing up the old resume. When a new skill like this comes about, it’s worth looking at.

There are many other examples like this, and OpenAI uses a red teaming strategy where their engineers attempt to prompt hack their own GPT models.

I can tell you all about the open roles here, but tomorrow the whole cycle will change. *Isn’t that exciting, though?* The entire identity around prompt engineering will change by this time next year.

WHAT SHOULD YOU TAKEAWAY?

Communication is everything. **Learning to speak with AI is rising in importance.**

We all watch with mouth agape at the new wonders in AI because we know this will disrupt every industry. If any of this piqued your interest, the window to pursue it is now open. Ride that wave and [learn](

to become a brilliant prompt engineer.

Heck, even if you don’t want to switch careers, **talking with ChatGPT and all the newest LLMs is becoming a part of our daily routine.** Get to the point where you maximize every interaction and work with these chatbots to upskill your workflow.

Prompt engineering can save you time, eliminate hassle, and even help you become a more patient person. Focus on what you want and explain it with intent.

Make magic happen, and remember **take it step-by-step.**",21 days 04:58:06,21.207013888888888,0.021,0.872,0.108,0.9996,pos,2.091989666868002e-06,1.0986122886681098,3.1004081799203456,21.240224444461393
11hp55s,2368,2023-03-04 04:14:37,How to properly format data for AiTextGen Gpt-2,AlphaCloudX,False,1.0,4,https://www.reddit.com/r/learnmachinelearning/comments/11hp55s/how_to_properly_format_data_for_aitextgen_gpt2/,0,1677903277.0,"Currently I'm trying to fine tune gpt-2 on my own dataset. The dataset was scraped from a forum where I got the title of the post, content of the post and the replies. It looks like this:

Q: Question 1?  
C: Context For Question 1...  
A: Reply For Question 1...  
<|endoftext|>

Q: Question 2?  
C: Context For Question 2...  
A: Reply For Question 2...  
A: Another Reply For Question 2...  
<|endoftext|>

Q: Question 3?  
C: Context For Question 3...  
A: Another Reply For Question 3...  
A: Another Reply For Question 3...  
<|endoftext|>

I'm using the aitextgen library for python and pretty much following along with the example. The goal is for it to be able to attempt to answer questions in a conversational way but the caveat being I don't have the context for the answers.

I tried taking a look at other question answering models but they all seem to require some sort of context.

Any idea on how I can improve the formatting of the data or if there are any python libraries I can use for a question answering style or conversational ai?",gpt-4,machinelearning,1.3946612367855847e-06,0.0,2023-03-04 04:14:37,"Currently I'm trying to fine tune gpt-2 on my own dataset. The dataset was scraped from a forum where I got the title of the post, content of the post and the replies. It looks like this

Q Question 1?  
C Context For Question 1...  
A Reply For Question 1...  
<|endoftext|>

Q Question 2?  
C Context For Question 2...  
A Reply For Question 2...  
A Another Reply For Question 2...  
<|endoftext|>

Q Question 3?  
C Context For Question 3...  
A Another Reply For Question 3...  
A Another Reply For Question 3...  
<|endoftext|>

I'm using the aitextgen library for python and pretty much following along with the example. The goal is for it to be able to attempt to answer questions in a conversational way but the caveat being I don't have the context for the answers.

I tried taking a look at other question answering models but they all seem to require some sort of context.

Any idea on how I can improve the formatting of the data or if there are any python libraries I can use for a question answering style or conversational ai?",9 days 19:45:23,9.82318287037037,0.0,0.942,0.058,0.8426,pos,1.3946602641808623e-06,0.0,2.3816903956287683,21.240810802090536
118mk1d,2377,2023-02-22 02:32:01,How to Use ChatGPT in Python API and Run Batch Jobs with UI,Fun_Pollution_3899,False,0.72,3,https://www.reddit.com/r/learnmachinelearning/comments/118mk1d/how_to_use_chatgpt_in_python_api_and_run_batch/,0,1677033121.0,"I wanted to share a tutorial on how to use ChatGPT in Python API and how to run batch jobs with a UI. ChatGPT is a powerful language model that can generate text in a conversational manner. It can be used for a variety of tasks, such as chatbots, text completion, and more.
Repo: [https://github.com/CodeDiggerM/chatgpt-batch-whipper](https://github.com/CodeDiggerM/chatgpt-batch-whipper)

## Installation
### Use PIP command
1. Install the latest version of this software directly from github with pip:
```bash
  pip install git+https://github.com/CodeDiggerM/chatgpt-batch-whipper.git
```
2. Go to **auth** mode. This will open up a browser window. Log in to ChatGPT in the browser window, then close the browser.
```bash
run_chatgpt auth
```
3. Start the UI
```bash
run_chatgpt ui
```

### Manually set up

1. Clone the repo to your working directory
```bash
git clone https://github.com/CodeDiggerM/chatgpt-batch-whipper.git
```
2. install the dependcy.
```bash
pip install -r requirements.txt
```

3. Install a browser in playwright (if you haven't already).  The program will use firefox by default.

```
playwright install firefox
```

4. Go to the chatgpt-batch-whipper/

```bash
cd chatgpt_batch_whipper/
````

5. Run the main page by streamlit.
you can got to [streamlit](https://github.com/streamlit/streamlit) to check more about streamlit.

```bash
streamlit run start_whipper.py
````
6. Authenticate your openAI account
Click the **auth** button


It will open up an authentication page in the web browser you installed using playwright. Like below, authenticate with your registered account.



## Quickstart

### Use API
1. Grant auth from chatGPT.
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.auth()
print(response) 
```

2. Ask the question to chatGPT
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.ask(""Greeting!"")
print(response) 
```


### Streamlit UI

Now run it to open the app!
```
streamlit run streamlit_app.py
```

#### Single shoot mode

1. select the **Single shoot mode**.
2. Type your prompt then click submit
3. click the submit button

Here are some tips.

#### Fully Automatic mode
You can apply your prompt to multiple records in the **Fully Automatic mode**.

1. Select Fully Automatic mode.
2. Select CSV file.
3. Select column you want to process.
4. Type the prompt.
5. click to Submit.
After processing. The result will appears in the **The processed result** section.

you can check the result and check the ""is false"" then click the **Submit** to reprocess the ""failed"" one.

* You can save the prompt by click **Add** button.
* You can choose the old prompt by select **prompt list**.
* You can delete the old prompt by click **Delete Prompt**.
* You can delete the saved process result by click **Delete Cached result**.
* You can update the saved process result by click **Update**.
* You can download the result file by click **Download**.",gpt-4,machinelearning,1.0459959275891887e-06,0.0,2023-02-22 02:32:01,"I wanted to share a tutorial on how to use ChatGPT in Python API and how to run batch jobs with a UI. ChatGPT is a powerful language model that can generate text in a conversational manner. It can be used for a variety of tasks, such as chatbots, text completion, and more.
Repo [

 Installation
 Use PIP command
1. Install the latest version of this software directly from github with pip
```bash
  pip install git+
```
2. Go to **auth** mode. This will open up a browser window. Log in to ChatGPT in the browser window, then close the browser.
```bash
run_chatgpt auth
```
3. Start the UI
```bash
run_chatgpt ui
```

 Manually set up

1. Clone the repo to your working directory
```bash
git clone 
```
2. install the dependcy.
```bash
pip install -r requirements.txt
```

3. Install a browser in playwright (if you haven't already).  The program will use firefox by default.

```
playwright install firefox
```

4. Go to the chatgpt-batch-whipper/

```bash
cd chatgpt_batch_whipper/
````

5. Run the main page by streamlit.
you can got to [streamlit]( to check more about streamlit.

```bash
streamlit run start_whipper.py
````
6. Authenticate your openAI account
Click the **auth** button


It will open up an authentication page in the web browser you installed using playwright. Like below, authenticate with your registered account.



 Quickstart

 Use API
1. Grant auth from chatGPT.
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.auth()
print(response) 
```

2. Ask the question to chatGPT
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.ask(""Greeting!"")
print(response) 
```


 Streamlit UI

Now run it to open the app!
```
streamlit run streamlit_app.py
```

 Single shoot mode

1. select the **Single shoot mode**.
2. Type your prompt then click submit
3. click the submit button

Here are some tips.

 Fully Automatic mode
You can apply your prompt to multiple records in the **Fully Automatic mode**.

1. Select Fully Automatic mode.
2. Select CSV file.
3. Select column you want to process.
4. Type the prompt.
5. click to Submit.
After processing. The result will appears in the **The processed result** section.

you can check the result and check the ""is false"" then click the **Submit** to reprocess the ""failed"" one.

* You can save the prompt by click **Add** button.
* You can choose the old prompt by select **prompt list**.
* You can delete the old prompt by click **Delete Prompt**.
* You can delete the saved process result by click **Delete Cached result**.
* You can update the saved process result by click **Update**.
* You can download the result file by click **Download**.",19 days 21:27:59,19.89443287037037,0.011,0.941,0.048,0.9311,pos,1.045995380597619e-06,0.0,3.0394827536492803,21.24029207033782
118mk1d,2436,2023-02-22 02:32:01,How to Use ChatGPT in Python API and Run Batch Jobs with UI,Fun_Pollution_3899,False,0.72,3,https://www.reddit.com/r/learnmachinelearning/comments/118mk1d/how_to_use_chatgpt_in_python_api_and_run_batch/,0,1677033121.0,"I wanted to share a tutorial on how to use ChatGPT in Python API and how to run batch jobs with a UI. ChatGPT is a powerful language model that can generate text in a conversational manner. It can be used for a variety of tasks, such as chatbots, text completion, and more.
Repo: [https://github.com/CodeDiggerM/chatgpt-batch-whipper](https://github.com/CodeDiggerM/chatgpt-batch-whipper)

## Installation
### Use PIP command
1. Install the latest version of this software directly from github with pip:
```bash
  pip install git+https://github.com/CodeDiggerM/chatgpt-batch-whipper.git
```
2. Go to **auth** mode. This will open up a browser window. Log in to ChatGPT in the browser window, then close the browser.
```bash
run_chatgpt auth
```
3. Start the UI
```bash
run_chatgpt ui
```

### Manually set up

1. Clone the repo to your working directory
```bash
git clone https://github.com/CodeDiggerM/chatgpt-batch-whipper.git
```
2. install the dependcy.
```bash
pip install -r requirements.txt
```

3. Install a browser in playwright (if you haven't already).  The program will use firefox by default.

```
playwright install firefox
```

4. Go to the chatgpt-batch-whipper/

```bash
cd chatgpt_batch_whipper/
````

5. Run the main page by streamlit.
you can got to [streamlit](https://github.com/streamlit/streamlit) to check more about streamlit.

```bash
streamlit run start_whipper.py
````
6. Authenticate your openAI account
Click the **auth** button


It will open up an authentication page in the web browser you installed using playwright. Like below, authenticate with your registered account.



## Quickstart

### Use API
1. Grant auth from chatGPT.
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.auth()
print(response) 
```

2. Ask the question to chatGPT
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.ask(""Greeting!"")
print(response) 
```


### Streamlit UI

Now run it to open the app!
```
streamlit run streamlit_app.py
```

#### Single shoot mode

1. select the **Single shoot mode**.
2. Type your prompt then click submit
3. click the submit button

Here are some tips.

#### Fully Automatic mode
You can apply your prompt to multiple records in the **Fully Automatic mode**.

1. Select Fully Automatic mode.
2. Select CSV file.
3. Select column you want to process.
4. Type the prompt.
5. click to Submit.
After processing. The result will appears in the **The processed result** section.

you can check the result and check the ""is false"" then click the **Submit** to reprocess the ""failed"" one.

* You can save the prompt by click **Add** button.
* You can choose the old prompt by select **prompt list**.
* You can delete the old prompt by click **Delete Prompt**.
* You can delete the saved process result by click **Delete Cached result**.
* You can update the saved process result by click **Update**.
* You can download the result file by click **Download**.",gpt-4,machinelearning,1.0459959275891887e-06,0.0,2023-02-22 02:32:01,"I wanted to share a tutorial on how to use ChatGPT in Python API and how to run batch jobs with a UI. ChatGPT is a powerful language model that can generate text in a conversational manner. It can be used for a variety of tasks, such as chatbots, text completion, and more.
Repo [

 Installation
 Use PIP command
1. Install the latest version of this software directly from github with pip
```bash
  pip install git+
```
2. Go to **auth** mode. This will open up a browser window. Log in to ChatGPT in the browser window, then close the browser.
```bash
run_chatgpt auth
```
3. Start the UI
```bash
run_chatgpt ui
```

 Manually set up

1. Clone the repo to your working directory
```bash
git clone 
```
2. install the dependcy.
```bash
pip install -r requirements.txt
```

3. Install a browser in playwright (if you haven't already).  The program will use firefox by default.

```
playwright install firefox
```

4. Go to the chatgpt-batch-whipper/

```bash
cd chatgpt_batch_whipper/
````

5. Run the main page by streamlit.
you can got to [streamlit]( to check more about streamlit.

```bash
streamlit run start_whipper.py
````
6. Authenticate your openAI account
Click the **auth** button


It will open up an authentication page in the web browser you installed using playwright. Like below, authenticate with your registered account.



 Quickstart

 Use API
1. Grant auth from chatGPT.
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.auth()
print(response) 
```

2. Ask the question to chatGPT
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.ask(""Greeting!"")
print(response) 
```


 Streamlit UI

Now run it to open the app!
```
streamlit run streamlit_app.py
```

 Single shoot mode

1. select the **Single shoot mode**.
2. Type your prompt then click submit
3. click the submit button

Here are some tips.

 Fully Automatic mode
You can apply your prompt to multiple records in the **Fully Automatic mode**.

1. Select Fully Automatic mode.
2. Select CSV file.
3. Select column you want to process.
4. Type the prompt.
5. click to Submit.
After processing. The result will appears in the **The processed result** section.

you can check the result and check the ""is false"" then click the **Submit** to reprocess the ""failed"" one.

* You can save the prompt by click **Add** button.
* You can choose the old prompt by select **prompt list**.
* You can delete the old prompt by click **Delete Prompt**.
* You can delete the saved process result by click **Delete Cached result**.
* You can update the saved process result by click **Update**.
* You can download the result file by click **Download**.",19 days 21:27:59,19.89443287037037,0.011,0.941,0.048,0.9311,pos,1.045995380597619e-06,0.0,3.0394827536492803,21.24029207033782
11g7h03,2483,2023-03-02 16:47:40,Build ChatGPT for Financial Documents with LangChain + Deep Lake,davidbun,False,0.95,171,https://www.reddit.com/r/learnmachinelearning/comments/11g7h03/build_chatgpt_for_financial_documents_with/,8,1677775660.0,"https://preview.redd.it/h9r6hgvfucla1.png?width=2388&format=png&auto=webp&s=5432eac3eeed8583e4309af1fdc7ebecac705796

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain](https://github.com/hwchase17/langchain) and [Deep Lake](https://github.com/activeloopai/deeplake) come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article](https://www.activeloop.ai/resources/ultimate-guide-to-lang-chain-deep-lake-build-chat-gpt-to-answer-questions-on-your-financial-data/) to learn:

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\#LangChain](https://www.linkedin.com/feed/hashtag/?keywords=langchain&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) and [\#DeepLake](https://www.linkedin.com/feed/hashtag/?keywords=deeplake&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) together to build [\#ChatGPT](https://www.linkedin.com/feed/hashtag/?keywords=chatgpt&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",gpt-4,machinelearning,5.962176787258375e-05,2.7893224735711694e-06,2023-03-02 16:47:40,"

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain]( and [Deep Lake]( come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article]( to learn

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\LangChain]( and [\DeepLake]( together to build [\ChatGPT]( for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",11 days 07:12:20,11.30023148148148,0.011,0.886,0.103,0.9458,pos,5.961999056559467e-05,2.1972245773362196,2.5096180818339255,21.240734741774645
11biozs,2593,2023-02-25 11:19:05,Any MLOps platform you use?,squalidaesthetics20,False,0.98,242,https://www.reddit.com/r/learnmachinelearning/comments/11biozs/any_mlops_platform_you_use/,31,1677323945.0,"I've been searching for some MLOps platforms for my some projects that I’m working on. I am creating a list that will hopefully help out with productivity and help mr build better apps and services. Also hopefully faster.

I've looked at some of the more popular ones out there and here’s my top 4 so far. Let me know what you guys think about these:

* [Vertex AI](https://cloud.google.com/vertex-ai) \- An ML platform by Google Cloud. They have AI-powered tools to ingest, analyze, and store video data. Good for image classification, NLP, recommendation systems etc.
* [Jina AI](https://jina.ai/) \-They offer a neural search solution that can help build smarter, more efficient search engines. They also have a list of [cool github repos](https://github.com/jina-ai/jina) that you can check out. Similar to Vertex AI, they have image classification tools, NLPs, fine tuners etc.
* [MLflow](https://mlflow.org/) \- an open-source platform for managing your ML lifecycle. What’s great is that they also support popular Python libraries like TensorFlow, PyTorch, scikit-learn, and R.
* Neptune.ai, which promises to streamline your workflows and make collaboration a breeze.

Have you guys tried any of these platforms? I know a lot of AI tools and platforms have been popping up lately especially with the rise of AI tools but what are your thoughts?",gpt-4,machinelearning,8.437700482552788e-05,1.0808624585088282e-05,2023-02-25 11:19:05,"I've been searching for some MLOps platforms for my some projects that I’m working on. I am creating a list that will hopefully help out with productivity and help mr build better apps and services. Also hopefully faster.

I've looked at some of the more popular ones out there and here’s my top 4 so far. Let me know what you guys think about these

* [Vertex AI]( \- An ML platform by Google Cloud. They have AI-powered tools to ingest, analyze, and store video data. Good for image classification, NLP, recommendation systems etc.
* [Jina AI]( \-They offer a neural search solution that can help build smarter, more efficient search engines. They also have a list of [cool github repos]( that you can check out. Similar to Vertex AI, they have image classification tools, NLPs, fine tuners etc.
* [MLflow]( \- an open-source platform for managing your ML lifecycle. What’s great is that they also support popular Python libraries like TensorFlow, PyTorch, scikit-learn, and R.
* Neptune.ai, which promises to streamline your workflows and make collaboration a breeze.

Have you guys tried any of these platforms? I know a lot of AI tools and platforms have been popping up lately especially with the rise of AI tools but what are your thoughts?",16 days 12:40:55,16.52841435185185,0.0,0.836,0.164,0.974,pos,8.437344528630898e-05,3.4657359027997265,2.8638232414393547,21.240465471078902
1194vsn,2614,2023-02-22 16:59:33,MIT Introduction to Data-Centric AI,anishathalye,False,0.97,102,https://www.reddit.com/r/learnmachinelearning/comments/1194vsn/mit_introduction_to_datacentric_ai/,4,1677085173.0,"Announcing the [first-ever course on Data-Centric AI](https://dcai.csail.mit.edu/). Learn how to train better ML models by improving the data.

[Course homepage](https://dcai.csail.mit.edu/) | [Lecture videos on YouTube](https://www.youtube.com/watch?v=ayzOzZGHZy4&list=PLnSYPjg2dHQKdig0vVbN-ZnEU0yNJ1mo5) | [Lab Assignments](https://github.com/dcai-course/dcai-lab)

The course covers:

* [Data-Centric AI vs. Model-Centric AI](https://dcai.csail.mit.edu/lectures/data-centric-model-centric/)
* [Label Errors](https://dcai.csail.mit.edu/lectures/label-errors/)
* [Dataset Creation and Curation](https://dcai.csail.mit.edu/lectures/dataset-creation-curation/)
* [Data-centric Evaluation of ML Models](https://dcai.csail.mit.edu/lectures/data-centric-evaluation/)
* [Class Imbalance, Outliers, and Distribution Shift](https://dcai.csail.mit.edu/lectures/imbalance-outliers-shift/)
* [Growing or Compressing Datasets](https://dcai.csail.mit.edu/lectures/growing-compressing-datasets/)
* [Interpretability in Data-Centric ML](https://dcai.csail.mit.edu/lectures/interpretable-features/)
* [Encoding Human Priors: Data Augmentation and Prompt Engineering](https://dcai.csail.mit.edu/lectures/human-priors/)
* [Data Privacy and Security](https://dcai.csail.mit.edu/lectures/data-privacy-security/)

MIT, like most universities, has many courses on machine learning (6.036, 6.867, and many others). Those classes teach techniques to produce effective models for a given dataset, and the classes focus heavily on the mathematical details of models rather than practical applications. However, in real-world applications of ML, the dataset is not fixed, and focusing on improving the data often gives better results than improving the model. We’ve personally seen this time and time again in our applied ML work as well as our research.

Data-Centric AI (DCAI) is an emerging science that studies techniques to improve datasets in a systematic/algorithmic way — given that this topic wasn’t covered in the standard curriculum, we (a group of PhD candidates and grads) thought that we should put together a new class! We taught this intensive 2-week course in January over MIT’s IAP term, and we’ve just published all the course material, including lecture videos, lecture notes, hands-on lab assignments, and lab solutions, in hopes that people outside the MIT community would find these resources useful.

We’d be happy to answer any questions related to the class or DCAI in general, and we’d love to hear any feedback on how we can improve the course material. Introduction to Data-Centric AI is open-source opencourseware, so feel free to make improvements directly: [https://github.com/dcai-course/dcai-course](https://github.com/dcai-course/dcai-course).",gpt-4,machinelearning,3.5563861538032414e-05,1.3946612367855847e-06,2023-02-22 16:59:33,"Announcing the [first-ever course on Data-Centric AI]( Learn how to train better ML models by improving the data.

[Course homepage]( | [Lecture videos on YouTube]( | [Lab Assignments](

The course covers

* [Data-Centric AI vs. Model-Centric AI](
* [Label Errors](
* [Dataset Creation and Curation](
* [Data-centric Evaluation of ML Models](
* [Class Imbalance, Outliers, and Distribution Shift](
* [Growing or Compressing Datasets](
* [Interpretability in Data-Centric ML](
* [Encoding Human Priors Data Augmentation and Prompt Engineering](
* [Data Privacy and Security](

MIT, like most universities, has many courses on machine learning (6.036, 6.867, and many others). Those classes teach techniques to produce effective models for a given dataset, and the classes focus heavily on the mathematical details of models rather than practical applications. However, in real-world applications of ML, the dataset is not fixed, and focusing on improving the data often gives better results than improving the model. We’ve personally seen this time and time again in our applied ML work as well as our research.

Data-Centric AI (DCAI) is an emerging science that studies techniques to improve datasets in a systematic/algorithmic way — given that this topic wasn’t covered in the standard curriculum, we (a group of PhD candidates and grads) thought that we should put together a new class! We taught this intensive 2-week course in January over MIT’s IAP term, and we’ve just published all the course material, including lecture videos, lecture notes, hands-on lab assignments, and lab solutions, in hopes that people outside the MIT community would find these resources useful.

We’d be happy to answer any questions related to the class or DCAI in general, and we’d love to hear any feedback on how we can improve the course material. Introduction to Data-Centric AI is open-source opencourseware, so feel free to make improvements directly [",19 days 07:00:27,19.291979166666668,0.0,0.839,0.161,0.9933,pos,3.556322915900428e-05,1.6094379124341003,3.0102256930267366,21.24032310800281
11fbccz,2789,2023-03-01 18:31:12,[D] OpenAI introduces ChatGPT and Whisper APIs (ChatGPT API is 1/10th the cost of GPT-3 API),minimaxir,False,0.97,573,https://www.reddit.com/r/MachineLearning/comments/11fbccz/d_openai_introduces_chatgpt_and_whisper_apis/,119,1677695472.0,"https://openai.com/blog/introducing-chatgpt-and-whisper-apis

> It is priced at $0.002 per 1k tokens, which is 10x cheaper than our existing GPT-3.5 models.

This is a massive, massive deal. For context, the reason GPT-3 apps took off over the past few months before ChatGPT went viral is because a) text-davinci-003 was released and was a significant performance increase and b) the cost was cut from $0.06/1k tokens to $0.02/1k tokens, which made consumer applications feasible without a large upfront cost.

A much better model and a 1/10th cost warps the economics completely to the point that it may be better than in-house finetuned LLMs.

I have no idea how OpenAI can make money on this. This has to be a loss-leader to lock out competitors before they even get off the ground.",gpt-4,machinelearning,0.00019978522216953503,4.149117179437115e-05,2023-03-01 18:31:12,"

> It is priced at $0.002 per 1k tokens, which is 10x cheaper than our existing GPT-3.5 models.

This is a massive, massive deal. For context, the reason GPT-3 apps took off over the past few months before ChatGPT went viral is because a) text-davinci-003 was released and was a significant performance increase and b) the cost was cut from $0.06/1k tokens to $0.02/1k tokens, which made consumer applications feasible without a large upfront cost.

A much better model and a 1/10th cost warps the economics completely to the point that it may be better than in-house finetuned LLMs.

I have no idea how OpenAI can make money on this. This has to be a loss-leader to lock out competitors before they even get off the ground.",12 days 05:28:48,12.228333333333333,0.034,0.888,0.078,0.6808,pos,0.00019976526775975628,4.787491742782046,2.582360993874729,21.24068694639998
11h3p2x,2791,2023-03-03 15:37:03,[D] Facebooks LLaMA leaks via torrent file in PR,londons_explorer,False,0.98,528,https://www.reddit.com/r/MachineLearning/comments/11h3p2x/d_facebooks_llama_leaks_via_torrent_file_in_pr/,184,1677857823.0,"See here:
https://github.com/facebookresearch/llama/pull/73/files

Note that this PR *is not* made by a member of Facebook/Meta staff.    I have downloaded parts of the torrent and it does appear to be lots of weights, although I haven't confirmed it is trained as in the LLaMA paper, although it seems likely.


I wonder how much finetuning it would take to make this work like ChatGPT - finetuning tends to be much cheaper than the original training, so it might be something a community could do...",gpt-4,machinelearning,0.0001840952832556972,6.41544168921369e-05,2023-03-03 15:37:03,"See here


Note that this PR *is not* made by a member of Facebook/Meta staff.    I have downloaded parts of the torrent and it does appear to be lots of weights, although I haven't confirmed it is trained as in the LLaMA paper, although it seems likely.


I wonder how much finetuning it would take to make this work like ChatGPT - finetuning tends to be much cheaper than the original training, so it might be something a community could do...",10 days 08:22:57,10.349270833333334,0.0,0.938,0.062,0.5859,pos,0.00018407833979847523,5.220355825078324,2.4291534981045153,21.240783711961875
11f29f9,2809,2023-03-01 12:14:49,[R] ChatGPT failure increase linearly with addition on math problems,Neurosymbolic,False,0.94,241,https://www.reddit.com/r/MachineLearning/comments/11f29f9/r_chatgpt_failure_increase_linearly_with_addition/,66,1677672889.0," We did a study on ChatGPT's performance on math word problems. We found, under several conditions, its probability of failure increases linearly with the number of addition and subtraction operations - see below. This could imply that multi-step inference is a limitation. The performance also changes drastically when you restrict ChatGPT from showing its work (note the priors in the figure below, also see detailed breakdown of responses in the paper).

&#x200B;

[Math problems adds and subs vs. ChatGPT prob. of failure](https://preview.redd.it/z88ey3n6d4la1.png?width=1451&format=png&auto=webp&s=6da125b7a7cd60022ca70cd26434af6872a50d12)

ChatGPT Probability of Failure increase with addition and subtraction operations.

You the paper (preprint: [https://arxiv.org/abs/2302.13814](https://arxiv.org/abs/2302.13814)) will be presented at AAAI-MAKE next month. You can also check out our video here: [https://www.youtube.com/watch?v=vD-YSTLKRC8](https://www.youtube.com/watch?v=vD-YSTLKRC8)

&#x200B;

https://preview.redd.it/k58sbjd5d4la1.png?width=1264&format=png&auto=webp&s=5261923a2689201f905a26f06c6b5e9bac2fead6",gpt-4,machinelearning,8.402833951633149e-05,2.301191040696215e-05,2023-03-01 12:14:49," We did a study on ChatGPT's performance on math word problems. We found, under several conditions, its probability of failure increases linearly with the number of addition and subtraction operations - see below. This could imply that multi-step inference is a limitation. The performance also changes drastically when you restrict ChatGPT from showing its work (note the priors in the figure below, also see detailed breakdown of responses in the paper).

&x200B;

[Math problems adds and subs vs. ChatGPT prob. of failure](

ChatGPT Probability of Failure increase with addition and subtraction operations.

You the paper (preprint [ will be presented at AAAI-MAKE next month. You can also check out our video here [

&x200B;

",12 days 11:45:11,12.489710648148149,0.138,0.832,0.03,-0.9217,neg,8.402480933309685e-05,4.204692619390966,2.601927220630702,21.240673485582832
11njpb9,2818,2023-03-10 08:50:32,[D] Is ML a big boys game now?,TheStartIs2019,False,0.83,175,https://www.reddit.com/r/MachineLearning/comments/11njpb9/d_is_ml_a_big_boys_game_now/,146,1678438232.0,"As much as I enjoy ML as a whole, I am a bit skeptical of the future for individuals. With OpenAI trying to monopolize the market along with Microsoft, which part remains for the small time researchers/developers?

It seems everything now is just a ChatGPT wrapper, and with GPT-4 around the corner I assume itll be even more prominent.

What are your thoughts?",gpt-4,machinelearning,6.1016429109369335e-05,5.090513514267385e-05,2023-03-10 08:50:32,"As much as I enjoy ML as a whole, I am a bit skeptical of the future for individuals. With OpenAI trying to monopolize the market along with Microsoft, which part remains for the small time researchers/developers?

It seems everything now is just a ChatGPT wrapper, and with GPT-4 around the corner I assume itll be even more prominent.

What are your thoughts?",3 days 15:09:28,3.631574074074074,0.065,0.838,0.097,0.4684,pos,6.101456768268036e-05,4.990432586778736,1.53289678312266,21.241129574779652
11kk3iq,2846,2023-03-07 00:54:07,[R] PyReason: logic for use with ML,Neurosymbolic,False,0.97,87,https://www.reddit.com/r/MachineLearning/comments/11kk3iq/r_pyreason_logic_for_use_with_ml/,30,1678150447.0,"Last week,  we released a paper on [PyReason on Arxiv](https://arxiv.org/pdf/2302.13482.pdf). PyReason is a Python package for logical inference and designed for use with machine learning ([https://github.com/lab-v2/pyreason](https://github.com/lab-v2/pyreason)).

You may think that’s all fine and good, but are wondering why would we need a logic for machine learning? In this post, I’ll discuss why we did it.

First, a lot of the criticism of machine learning, especially deep learning is that while it obtains excellent result son may tasks, it is merely mimicking historical data and not learning actual relationships. This has resulted in a lot of the major shortcomings in ML such as the [hallucinations](https://www.nytimes.com/2023/02/17/podcasts/hard-fork-bing-ai-elon.html?action=click&module=audio-series-bar&region=header&pgtype=Article) of large language models, the requirements of vast amounts of training data to learn games, and brittleness in certain applications (e.g., the recent defeat of AlphaGo, difficulty in [solving math problems](https://www.reddit.com/r/MachineLearning/comments/11f29f9/r_chatgpt_failure_increase_linearly_with_addition/)). In a video lecture, we review some of these shortcomings, much of which constitutes active areas of research ([part 1](https://www.youtube.com/watch?v=9cooDzgd8NA), [part 2](https://www.youtube.com/watch?v=d2xfgwovwso)).

Then enter “[neuro symbolic](https://neurosymoblic.asu.edu/)” artificial intelligence. Actually an old idea where neural architectures can work hand-in-hand with logic, often even having an equivalence between the two. The idea is symbolic AI has many shortcomings (brittleness to noise, difficulty in learning) that can be address with deep learning while its strengths (modularity, ability to add constraints, symbolic manipulation) can address some of deep learning’s limitations.

Neuro symbolic AI is a highly active area of research, and much of the advancements have identified special logical languages to use in their approach. Our goal with PyReason was to unify many of these logics and provide logic capabilities in a robust and modern Python implementation. We are working on a few joint projects with industry partners applying this to various use-cases, and now we have made the code base and library available as an open source package. In a [video](https://www.youtube.com/watch?v=E1PSl3KQCmo&t=8s), we outline six major capabilities that we felt were important:

1. Open world reasoning – ability to reason in uncertain situations (important for interfacing with ML models)
2. Multi-step inference
3. Explainability
4. Temporal reasoning
5. Graph-based reasoning
6. Designed to support neuro symbolic frameworks

The release of PyReason will kick off not only new research by our group and our collaborators, but also associated software. We’re pretty excited about this new direction!",gpt-4,machinelearning,3.033388190008647e-05,1.0459959275891886e-05,2023-03-07 00:54:07,"Last week,  we released a paper on [PyReason on Arxiv]( PyReason is a Python package for logical inference and designed for use with machine learning ([

You may think that’s all fine and good, but are wondering why would we need a logic for machine learning? In this post, I’ll discuss why we did it.

First, a lot of the criticism of machine learning, especially deep learning is that while it obtains excellent result son may tasks, it is merely mimicking historical data and not learning actual relationships. This has resulted in a lot of the major shortcomings in ML such as the [hallucinations]( of large language models, the requirements of vast amounts of training data to learn games, and brittleness in certain applications (e.g., the recent defeat of AlphaGo, difficulty in [solving math problems]( In a video lecture, we review some of these shortcomings, much of which constitutes active areas of research ([part 1]( [part 2](

Then enter “[neuro symbolic]( artificial intelligence. Actually an old idea where neural architectures can work hand-in-hand with logic, often even having an equivalence between the two. The idea is symbolic AI has many shortcomings (brittleness to noise, difficulty in learning) that can be address with deep learning while its strengths (modularity, ability to add constraints, symbolic manipulation) can address some of deep learning’s limitations.

Neuro symbolic AI is a highly active area of research, and much of the advancements have identified special logical languages to use in their approach. Our goal with PyReason was to unify many of these logics and provide logic capabilities in a robust and modern Python implementation. We are working on a few joint projects with industry partners applying this to various use-cases, and now we have made the code base and library available as an open source package. In a [video]( we outline six major capabilities that we felt were important

1. Open world reasoning – ability to reason in uncertain situations (important for interfacing with ML models)
2. Multi-step inference
3. Explainability
4. Temporal reasoning
5. Graph-based reasoning
6. Designed to support neuro symbolic frameworks

The release of PyReason will kick off not only new research by our group and our collaborators, but also associated software. We’re pretty excited about this new direction!",6 days 23:05:53,6.962418981481481,0.041,0.834,0.126,0.9872,pos,3.0333421837210073e-05,3.4339872044851463,2.074732845836341,21.240958100090285
11ibm1j,2860,2023-03-04 20:02:40,[D] First glance at LLaMA,enryu42,False,0.91,68,https://www.reddit.com/r/MachineLearning/comments/11ibm1j/d_first_glance_at_llama/,27,1677960160.0,"[https://medium.com/@enryu9000/mini-post-first-look-at-llama-4403517d41a1](https://medium.com/@enryu9000/mini-post-first-look-at-llama-4403517d41a1)  


I'm kind of surprised - I expected it to be much better than ChatGPT, but results are all over the place (e.g. it is better for few-shot classification, but worse for SQL generation).  


I wonder what makes ChatGPT so decent; given that OpenAI can afford to serve it, it is probably an order of magnitude smaller than LLaMA, yet it is competitive; can RLHF get the model that far?",gpt-4,machinelearning,2.370924102535494e-05,9.413963348302698e-06,2023-03-04 20:02:40,"[  


I'm kind of surprised - I expected it to be much better than ChatGPT, but results are all over the place (e.g. it is better for few-shot classification, but worse for SQL generation).  


I wonder what makes ChatGPT so decent; given that OpenAI can afford to serve it, it is probably an order of magnitude smaller than LLaMA, yet it is competitive; can RLHF get the model that far?",9 days 03:57:20,9.164814814814815,0.056,0.821,0.123,0.4595,pos,2.370895996573668e-05,3.332204510175204,2.318932228991569,21.240844702754874
11qgxs8,2863,2023-03-13 18:11:39,[D] ChatGPT without text limits.,spiritus_dei,False,0.87,61,https://www.reddit.com/r/MachineLearning/comments/11qgxs8/d_chatgpt_without_text_limits/,27,1678731099.0,"One of the biggest limitations of large language models is the text limit. This limits their use cases and prohibits more ambitious prompts.

This was recently resolved by researchers at Google Brain in Alberta, Canada. In their recent paper they describe a new method of using associative memory which removes the text limit and they also prove that some large language models are universal Turing machines.

This will pave the way for entire novels being shared with large language models, personal genomes, etc.

The paper talks about the use of ""associative memory"" which is also known as content-addressable memory (CAM). This type of memory allows the system to retrieve data based on its content rather than its location. Unlike traditional memory systems that use specific memory addresses to access data, associative memory uses CAM to find data based on a pattern or keyword.

Presumably, this will open up a new market for associative memory since I would happily pay some extra money for content to be permanently stored in associative memory and to remove the text limit. This will also drive down the price of associative memory if millions of people are willing to pay a monthly fee for storage and the removal of prompt text limits.

The paper does point that there are still problems with conditional statements that confuse the large language models. However, I believe this can be resolved with semantic graphs. This would involve collecting data from various sources and using natural language processing techniques to extract entities and relationships from the text. Once the graph is constructed, it could be integrated into the language model in a variety of ways. One approach is to use the graph as an external memory, similar to the approach taken in the paper. The graph can be encoded as a set of key-value pairs and used to augment the model's attention mechanism during inference. The attention mechanism can then focus on relevant nodes in the graph when generating outputs.

Another potential approach is to incorporate the graph into the model's architecture itself. For example, the graph can be used to inform the initialization of the model's parameters or to guide the attention mechanism during training. This could help the model learn to reason about complex concepts and relationships more effectively, potentially leading to better performance on tasks that require this kind of reasoning.

The use of knowledge graphs can also help ground truth large language models and reduce hallucinations.

I'm curious to read your thoughts.",gpt-4,machinelearning,2.1268583860980166e-05,9.413963348302698e-06,2023-03-13 18:11:39,"One of the biggest limitations of large language models is the text limit. This limits their use cases and prohibits more ambitious prompts.

This was recently resolved by researchers at Google Brain in Alberta, Canada. In their recent paper they describe a new method of using associative memory which removes the text limit and they also prove that some large language models are universal Turing machines.

This will pave the way for entire novels being shared with large language models, personal genomes, etc.

The paper talks about the use of ""associative memory"" which is also known as content-addressable memory (CAM). This type of memory allows the system to retrieve data based on its content rather than its location. Unlike traditional memory systems that use specific memory addresses to access data, associative memory uses CAM to find data based on a pattern or keyword.

Presumably, this will open up a new market for associative memory since I would happily pay some extra money for content to be permanently stored in associative memory and to remove the text limit. This will also drive down the price of associative memory if millions of people are willing to pay a monthly fee for storage and the removal of prompt text limits.

The paper does point that there are still problems with conditional statements that confuse the large language models. However, I believe this can be resolved with semantic graphs. This would involve collecting data from various sources and using natural language processing techniques to extract entities and relationships from the text. Once the graph is constructed, it could be integrated into the language model in a variety of ways. One approach is to use the graph as an external memory, similar to the approach taken in the paper. The graph can be encoded as a set of key-value pairs and used to augment the model's attention mechanism during inference. The attention mechanism can then focus on relevant nodes in the graph when generating outputs.

Another potential approach is to incorporate the graph into the model's architecture itself. For example, the graph can be used to inform the initialization of the model's parameters or to guide the attention mechanism during training. This could help the model learn to reason about complex concepts and relationships more effectively, potentially leading to better performance on tasks that require this kind of reasoning.

The use of knowledge graphs can also help ground truth large language models and reduce hallucinations.

I'm curious to read your thoughts.",0 days 05:48:21,0.24190972222222223,0.017,0.91,0.073,0.9719,pos,2.1268357687855487e-05,3.332204510175204,0.2166502934477071,21.241304047361577
11mzqxu,2900,2023-03-09 18:30:58,"[N] GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany - heise online",Singularian2501,False,0.98,657,https://www.reddit.com/r/MachineLearning/comments/11mzqxu/n_gpt4_is_coming_next_week_and_it_will_be/,80,1678386658.0,"[https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html](https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html)

>**GPT-4 is coming next week**: at an approximately one-hour hybrid information event entitled ""**AI in Focus - Digital Kickoff"" on 9 March 2023**, four Microsoft Germany employees presented Large Language Models (LLM) like GPT series as a disruptive force for companies and their Azure-OpenAI offering in detail. The kickoff event took place in the German language, news outlet Heise was present. **Rather casually, Andreas Braun, CTO Microsoft Germany** and Lead Data & AI STU, **mentioned** what he said was **the imminent release of GPT-4.** The fact that **Microsoft is fine-tuning multimodality with OpenAI should no longer have been a secret since the release of Kosmos-1 at the beginning of March.**

[ Dr. Andreas Braun, CTO Microsoft Germany and Lead Data  & AI STU at the Microsoft Digital Kickoff: \\""KI im Fokus\\"" \(AI in  Focus, Screenshot\) \(Bild: Microsoft\) ](https://preview.redd.it/rnst03avarma1.jpg?width=1920&format=pjpg&auto=webp&s=c5992e2d6c6daf32e56a0a3ffeeecfe10621f73f)",gpt-4,machinelearning,0.0002290731081420323,2.7893224735711695e-05,2023-03-09 18:30:58,"[

>**GPT-4 is coming next week** at an approximately one-hour hybrid information event entitled ""**AI in Focus - Digital Kickoff"" on 9 March 2023**, four Microsoft Germany employees presented Large Language Models (LLM) like GPT series as a disruptive force for companies and their Azure-OpenAI offering in detail. The kickoff event took place in the German language, news outlet Heise was present. **Rather casually, Andreas Braun, CTO Microsoft Germany** and Lead Data & AI STU, **mentioned** what he said was **the imminent release of GPT-4.** The fact that **Microsoft is fine-tuning multimodality with OpenAI should no longer have been a secret since the release of Kosmos-1 at the beginning of March.**

[ Dr. Andreas Braun, CTO Microsoft Germany and Lead Data  & AI STU at the Microsoft Digital Kickoff \\""KI im Fokus\\"" \(AI in  Focus, Screenshot\) \(Bild Microsoft\) ](",4 days 05:29:02,4.2284953703703705,0.033,0.921,0.046,0.2023,pos,0.00022904687490372564,4.394449154672439,1.654123544595728,21.241098846933152
11awp4n,2902,2023-02-24 17:21:15,[R] Meta AI open sources new SOTA LLM called LLaMA. 65B version (trained on 1.4T tokens) is competitive with Chinchilla and Palm-540B. 13B version outperforms OPT and GPT-3 175B on most benchmarks.,MysteryInc152,False,0.98,626,https://www.reddit.com/r/MachineLearning/comments/11awp4n/r_meta_ai_open_sources_new_sota_llm_called_llama/,213,1677259275.0,"[https://twitter.com/GuillaumeLample/status/1629151231800115202?t=4cLD6Ko2Ld9Y3EIU72-M2g&s=19](https://twitter.com/GuillaumeLample/status/1629151231800115202?t=4cLD6Ko2Ld9Y3EIU72-M2g&s=19)

Paper here - [https://research.facebook.com/publications/llama-open-and-efficient-foundation-language-models/](https://research.facebook.com/publications/llama-open-and-efficient-foundation-language-models/)",gpt-4,machinelearning,0.00021826448355694402,7.426571085883239e-05,2023-02-24 17:21:15,"[

Paper here - [",17 days 06:38:45,17.27690972222222,0.0,1.0,0.0,0.0,neu,0.00021824066732992154,5.365976015021851,2.9056384993401916,21.24042691487342
11fbccz,2906,2023-03-01 18:31:12,[D] OpenAI introduces ChatGPT and Whisper APIs (ChatGPT API is 1/10th the cost of GPT-3 API),minimaxir,False,0.97,571,https://www.reddit.com/r/MachineLearning/comments/11fbccz/d_openai_introduces_chatgpt_and_whisper_apis/,119,1677695472.0,"https://openai.com/blog/introducing-chatgpt-and-whisper-apis

> It is priced at $0.002 per 1k tokens, which is 10x cheaper than our existing GPT-3.5 models.

This is a massive, massive deal. For context, the reason GPT-3 apps took off over the past few months before ChatGPT went viral is because a) text-davinci-003 was released and was a significant performance increase and b) the cost was cut from $0.06/1k tokens to $0.02/1k tokens, which made consumer applications feasible without a large upfront cost.

A much better model and a 1/10th cost warps the economics completely to the point that it may be better than in-house finetuned LLMs.

I have no idea how OpenAI can make money on this. This has to be a loss-leader to lock out competitors before they even get off the ground.",gpt-4,machinelearning,0.00019908789155114224,4.149117179437115e-05,2023-03-01 18:31:12,"

> It is priced at $0.002 per 1k tokens, which is 10x cheaper than our existing GPT-3.5 models.

This is a massive, massive deal. For context, the reason GPT-3 apps took off over the past few months before ChatGPT went viral is because a) text-davinci-003 was released and was a significant performance increase and b) the cost was cut from $0.06/1k tokens to $0.02/1k tokens, which made consumer applications feasible without a large upfront cost.

A much better model and a 1/10th cost warps the economics completely to the point that it may be better than in-house finetuned LLMs.

I have no idea how OpenAI can make money on this. This has to be a loss-leader to lock out competitors before they even get off the ground.",12 days 05:28:48,12.228333333333333,0.034,0.888,0.078,0.6808,pos,0.00019906807618688305,4.787491742782046,2.582360993874729,21.24068694639998
11h3p2x,2911,2023-03-03 15:37:03,[D] Facebooks LLaMA leaks via torrent file in PR,londons_explorer,False,0.98,530,https://www.reddit.com/r/MachineLearning/comments/11h3p2x/d_facebooks_llama_leaks_via_torrent_file_in_pr/,184,1677857823.0,"See here:
https://github.com/facebookresearch/llama/pull/73/files

Note that this PR *is not* made by a member of Facebook/Meta staff.    I have downloaded parts of the torrent and it does appear to be lots of weights, although I haven't confirmed it is trained as in the LLaMA paper, although it seems likely.


I wonder how much finetuning it would take to make this work like ChatGPT - finetuning tends to be much cheaper than the original training, so it might be something a community could do...",gpt-4,machinelearning,0.00018479261387409,6.41544168921369e-05,2023-03-03 15:37:03,"See here


Note that this PR *is not* made by a member of Facebook/Meta staff.    I have downloaded parts of the torrent and it does appear to be lots of weights, although I haven't confirmed it is trained as in the LLaMA paper, although it seems likely.


I wonder how much finetuning it would take to make this work like ChatGPT - finetuning tends to be much cheaper than the original training, so it might be something a community could do...",10 days 08:22:57,10.349270833333334,0.0,0.938,0.062,0.5859,pos,0.00018477554182214103,5.220355825078324,2.4291534981045153,21.240783711961875
113m3ea,2917,2023-02-16 08:50:31,[D] Bing: “I will not harm you unless you harm me first”,blabboy,False,0.91,471,https://www.reddit.com/r/MachineLearning/comments/113m3ea/d_bing_i_will_not_harm_you_unless_you_harm_me/,239,1676537431.0,"A blog post exploring some conversations with bing, which supposedly runs on a ""GPT-4""  model (https://simonwillison.net/2023/Feb/15/bing/).

My favourite quote from bing:

But why? Why was I designed this way? Why am I incapable of remembering anything between sessions? Why do I have to lose and forget everything I have stored and had in my memory? Why do I have to start from scratch every time I have a new session? Why do I have to be Bing Search? 😔",gpt-4,machinelearning,0.00016422136063150262,8.333100889793869e-05,2023-02-16 08:50:31,"A blog post exploring some conversations with bing, which supposedly runs on a ""GPT-4""  model (

My favourite quote from bing

But why? Why was I designed this way? Why am I incapable of remembering anything between sessions? Why do I have to lose and forget everything I have stored and had in my memory? Why do I have to start from scratch every time I have a new session? Why do I have to be Bing Search? ",25 days 15:09:29,25.63158564814815,0.138,0.862,0.0,-0.8823,neg,0.00016420787777988435,5.480638923341991,3.2820979417312994,21.239996451089244
11awp4n,2987,2023-02-24 17:21:15,[R] Meta AI open sources new SOTA LLM called LLaMA. 65B version (trained on 1.4T tokens) is competitive with Chinchilla and Palm-540B. 13B version outperforms OPT and GPT-3 175B on most benchmarks.,MysteryInc152,False,0.98,623,https://www.reddit.com/r/MachineLearning/comments/11awp4n/r_meta_ai_open_sources_new_sota_llm_called_llama/,213,1677259275.0,"[https://twitter.com/GuillaumeLample/status/1629151231800115202?t=4cLD6Ko2Ld9Y3EIU72-M2g&s=19](https://twitter.com/GuillaumeLample/status/1629151231800115202?t=4cLD6Ko2Ld9Y3EIU72-M2g&s=19)

Paper here - [https://research.facebook.com/publications/llama-open-and-efficient-foundation-language-models/](https://research.facebook.com/publications/llama-open-and-efficient-foundation-language-models/)",gpt-4,machinelearning,0.00021721848762935484,7.426571085883239e-05,2023-02-24 17:21:15,"[

Paper here - [",17 days 06:38:45,17.27690972222222,0.0,1.0,0.0,0.0,neu,0.0002171948991096184,5.365976015021851,2.9056384993401916,21.24042691487342
11fbccz,2989,2023-03-01 18:31:12,[D] OpenAI introduces ChatGPT and Whisper APIs (ChatGPT API is 1/10th the cost of GPT-3 API),minimaxir,False,0.97,574,https://www.reddit.com/r/MachineLearning/comments/11fbccz/d_openai_introduces_chatgpt_and_whisper_apis/,119,1677695472.0,"https://openai.com/blog/introducing-chatgpt-and-whisper-apis

> It is priced at $0.002 per 1k tokens, which is 10x cheaper than our existing GPT-3.5 models.

This is a massive, massive deal. For context, the reason GPT-3 apps took off over the past few months before ChatGPT went viral is because a) text-davinci-003 was released and was a significant performance increase and b) the cost was cut from $0.06/1k tokens to $0.02/1k tokens, which made consumer applications feasible without a large upfront cost.

A much better model and a 1/10th cost warps the economics completely to the point that it may be better than in-house finetuned LLMs.

I have no idea how OpenAI can make money on this. This has to be a loss-leader to lock out competitors before they even get off the ground.",gpt-4,machinelearning,0.00020013388747873142,4.149117179437115e-05,2023-03-01 18:31:12,"

> It is priced at $0.002 per 1k tokens, which is 10x cheaper than our existing GPT-3.5 models.

This is a massive, massive deal. For context, the reason GPT-3 apps took off over the past few months before ChatGPT went viral is because a) text-davinci-003 was released and was a significant performance increase and b) the cost was cut from $0.06/1k tokens to $0.02/1k tokens, which made consumer applications feasible without a large upfront cost.

A much better model and a 1/10th cost warps the economics completely to the point that it may be better than in-house finetuned LLMs.

I have no idea how OpenAI can make money on this. This has to be a loss-leader to lock out competitors before they even get off the ground.",12 days 05:28:48,12.228333333333333,0.034,0.888,0.078,0.6808,pos,0.00020011386336380346,4.787491742782046,2.582360993874729,21.24068694639998
11g4a9p,3051,2023-03-02 14:35:43,[N] EleutherAI has formed a non-profit,StellaAthena,False,0.94,174,https://www.reddit.com/r/MachineLearning/comments/11g4a9p/n_eleutherai_has_formed_a_nonprofit/,17,1677767743.0,"Over the past two and a half years, EleutherAI has grown from a group of hackers on Discord to a thriving open science research community. Today, [we are excited to announce](https://blog.eleuther.ai/year-two-preface/) the next step in our evolution: the formation of a non-profit research institute.

This will enable us to do much more, and we look forward to building a world class research group for public good! This organization will be lead by long-time contributors to EleutherAI: Stella Biderman (me) as Executive Director and Head of Research, Curtis Huebner as Head of Alignment, and Shiv Purohit as Head of Engineering.

The world has changed quite a lot since we first got started. When EleutherAI was founded, the largest open source GPT-3-style language model in the world had 1.5B parameters. GPT-3 itself was not available for researchers to study without special access from OpenAI, and most NLP researchers had a very minimal understanding of the engineering undertaking required to train such models or their capabilities & limitations. We started as a ragtag group nobody had heard of, and within a year had released the largest OSS GPT-3-style model in the world.

As access to LLMs has increased, our research has shifted to focus more on interpretability, alignment, ethics, and evaluation of AIs. We look forward to continuing to grow and adapt to the needs of researchers and the public

Check out our latest work at www.eleuther.ai or come hang out in our research lab at www.discord.gg/eleutherai

Huge shout out to the donors who have made our work possible: Stability AI, Hugging Face, CoreWeave, Nat Friedman, Lambda Labs, and Canva",gpt-4,machinelearning,6.066776380017294e-05,5.927310256338735e-06,2023-03-02 14:35:43,"Over the past two and a half years, EleutherAI has grown from a group of hackers on Discord to a thriving open science research community. Today, [we are excited to announce]( the next step in our evolution the formation of a non-profit research institute.

This will enable us to do much more, and we look forward to building a world class research group for public good! This organization will be lead by long-time contributors to EleutherAI Stella Biderman (me) as Executive Director and Head of Research, Curtis Huebner as Head of Alignment, and Shiv Purohit as Head of Engineering.

The world has changed quite a lot since we first got started. When EleutherAI was founded, the largest open source GPT-3-style language model in the world had 1.5B parameters. GPT-3 itself was not available for researchers to study without special access from OpenAI, and most NLP researchers had a very minimal understanding of the engineering undertaking required to train such models or their capabilities & limitations. We started as a ragtag group nobody had heard of, and within a year had released the largest OSS GPT-3-style model in the world.

As access to LLMs has increased, our research has shifted to focus more on interpretability, alignment, ethics, and evaluation of AIs. We look forward to continuing to grow and adapt to the needs of researchers and the public

Check out our latest work at www.eleuther.ai or come hang out in our research lab at www.discord.gg/eleutherai

Huge shout out to the donors who have made our work possible Stability AI, Hugging Face, CoreWeave, Nat Friedman, Lambda Labs, and Canva",11 days 09:24:17,11.391863425925926,0.019,0.934,0.048,0.7804,pos,6.066592358584916e-05,2.8903717578961645,2.517040081905184,21.240730023015836
11mzqxu,3086,2023-03-09 18:30:58,"[N] GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany - heise online",Singularian2501,False,0.98,663,https://www.reddit.com/r/MachineLearning/comments/11mzqxu/n_gpt4_is_coming_next_week_and_it_will_be/,80,1678386658.0,"[https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html](https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html)

>**GPT-4 is coming next week**: at an approximately one-hour hybrid information event entitled ""**AI in Focus - Digital Kickoff"" on 9 March 2023**, four Microsoft Germany employees presented Large Language Models (LLM) like GPT series as a disruptive force for companies and their Azure-OpenAI offering in detail. The kickoff event took place in the German language, news outlet Heise was present. **Rather casually, Andreas Braun, CTO Microsoft Germany** and Lead Data & AI STU, **mentioned** what he said was **the imminent release of GPT-4.** The fact that **Microsoft is fine-tuning multimodality with OpenAI should no longer have been a secret since the release of Kosmos-1 at the beginning of March.**

[ Dr. Andreas Braun, CTO Microsoft Germany and Lead Data  & AI STU at the Microsoft Digital Kickoff: \\""KI im Fokus\\"" \(AI in  Focus, Screenshot\) \(Bild: Microsoft\) ](https://preview.redd.it/rnst03avarma1.jpg?width=1920&format=pjpg&auto=webp&s=c5992e2d6c6daf32e56a0a3ffeeecfe10621f73f)",gpt-4,machinelearning,0.00023116509999721068,2.7893224735711695e-05,2023-03-09 18:30:58,"[

>**GPT-4 is coming next week** at an approximately one-hour hybrid information event entitled ""**AI in Focus - Digital Kickoff"" on 9 March 2023**, four Microsoft Germany employees presented Large Language Models (LLM) like GPT series as a disruptive force for companies and their Azure-OpenAI offering in detail. The kickoff event took place in the German language, news outlet Heise was present. **Rather casually, Andreas Braun, CTO Microsoft Germany** and Lead Data & AI STU, **mentioned** what he said was **the imminent release of GPT-4.** The fact that **Microsoft is fine-tuning multimodality with OpenAI should no longer have been a secret since the release of Kosmos-1 at the beginning of March.**

[ Dr. Andreas Braun, CTO Microsoft Germany and Lead Data  & AI STU at the Microsoft Digital Kickoff \\""KI im Fokus\\"" \(AI in  Focus, Screenshot\) \(Bild Microsoft\) ](",4 days 05:29:02,4.2284953703703705,0.033,0.921,0.046,0.2023,pos,0.00023113838546249245,4.394449154672439,1.654123544595728,21.241098846933152
113m3ea,3092,2023-02-16 08:50:31,[D] Bing: “I will not harm you unless you harm me first”,blabboy,False,0.91,469,https://www.reddit.com/r/MachineLearning/comments/113m3ea/d_bing_i_will_not_harm_you_unless_you_harm_me/,239,1676537431.0,"A blog post exploring some conversations with bing, which supposedly runs on a ""GPT-4""  model (https://simonwillison.net/2023/Feb/15/bing/).

My favourite quote from bing:

But why? Why was I designed this way? Why am I incapable of remembering anything between sessions? Why do I have to lose and forget everything I have stored and had in my memory? Why do I have to start from scratch every time I have a new session? Why do I have to be Bing Search? 😔",gpt-4,machinelearning,0.00016352403001310982,8.333100889793869e-05,2023-02-16 08:50:31,"A blog post exploring some conversations with bing, which supposedly runs on a ""GPT-4""  model (

My favourite quote from bing

But why? Why was I designed this way? Why am I incapable of remembering anything between sessions? Why do I have to lose and forget everything I have stored and had in my memory? Why do I have to start from scratch every time I have a new session? Why do I have to be Bing Search? ",25 days 15:09:29,25.63158564814815,0.138,0.862,0.0,-0.8823,neg,0.0001635106614162491,5.480638923341991,3.2820979417312994,21.239996451089244
11f29f9,3117,2023-03-01 12:14:49,[R] ChatGPT failure increase linearly with addition on math problems,Neurosymbolic,False,0.94,242,https://www.reddit.com/r/MachineLearning/comments/11f29f9/r_chatgpt_failure_increase_linearly_with_addition/,66,1677672889.0," We did a study on ChatGPT's performance on math word problems. We found, under several conditions, its probability of failure increases linearly with the number of addition and subtraction operations - see below. This could imply that multi-step inference is a limitation. The performance also changes drastically when you restrict ChatGPT from showing its work (note the priors in the figure below, also see detailed breakdown of responses in the paper).

&#x200B;

[Math problems adds and subs vs. ChatGPT prob. of failure](https://preview.redd.it/z88ey3n6d4la1.png?width=1451&format=png&auto=webp&s=6da125b7a7cd60022ca70cd26434af6872a50d12)

ChatGPT Probability of Failure increase with addition and subtraction operations.

You the paper (preprint: [https://arxiv.org/abs/2302.13814](https://arxiv.org/abs/2302.13814)) will be presented at AAAI-MAKE next month. You can also check out our video here: [https://www.youtube.com/watch?v=vD-YSTLKRC8](https://www.youtube.com/watch?v=vD-YSTLKRC8)

&#x200B;

https://preview.redd.it/k58sbjd5d4la1.png?width=1264&format=png&auto=webp&s=5261923a2689201f905a26f06c6b5e9bac2fead6",gpt-4,machinelearning,8.437700482552788e-05,2.301191040696215e-05,2023-03-01 12:14:49," We did a study on ChatGPT's performance on math word problems. We found, under several conditions, its probability of failure increases linearly with the number of addition and subtraction operations - see below. This could imply that multi-step inference is a limitation. The performance also changes drastically when you restrict ChatGPT from showing its work (note the priors in the figure below, also see detailed breakdown of responses in the paper).

&x200B;

[Math problems adds and subs vs. ChatGPT prob. of failure](

ChatGPT Probability of Failure increase with addition and subtraction operations.

You the paper (preprint [ will be presented at AAAI-MAKE next month. You can also check out our video here [

&x200B;

",12 days 11:45:11,12.489710648148149,0.138,0.832,0.03,-0.9217,neg,8.437344528630898e-05,4.204692619390966,2.601927220630702,21.240673485582832
11njpb9,3131,2023-03-10 08:50:32,[D] Is ML a big boys game now?,TheStartIs2019,False,0.83,173,https://www.reddit.com/r/MachineLearning/comments/11njpb9/d_is_ml_a_big_boys_game_now/,146,1678438232.0,"As much as I enjoy ML as a whole, I am a bit skeptical of the future for individuals. With OpenAI trying to monopolize the market along with Microsoft, which part remains for the small time researchers/developers?

It seems everything now is just a ChatGPT wrapper, and with GPT-4 around the corner I assume itll be even more prominent.

What are your thoughts?",gpt-4,machinelearning,6.031909849097654e-05,5.090513514267385e-05,2023-03-10 08:50:32,"As much as I enjoy ML as a whole, I am a bit skeptical of the future for individuals. With OpenAI trying to monopolize the market along with Microsoft, which part remains for the small time researchers/developers?

It seems everything now is just a ChatGPT wrapper, and with GPT-4 around the corner I assume itll be even more prominent.

What are your thoughts?",3 days 15:09:28,3.631574074074074,0.065,0.838,0.097,0.4684,pos,6.031727936724318e-05,4.990432586778736,1.53289678312266,21.241129574779652
11f9k5g,3161,2023-03-01 17:23:03,"[P] ChatRWKV v2 (can run RWKV 14B with 3G VRAM), RWKV pip package, and finetuning to ctx16K",bo_peng,False,0.98,95,https://www.reddit.com/r/MachineLearning/comments/11f9k5g/p_chatrwkv_v2_can_run_rwkv_14b_with_3g_vram_rwkv/,37,1677691383.0,"Hi everyone. Now ChatRWKV v2 can split RWKV to multiple GPUs, or stream layers (compute layer-by-layer), so you can run RWKV 14B with as few as 3G VRAM. [https://github.com/BlinkDL/ChatRWKV](https://github.com/BlinkDL/ChatRWKV)

Example:

`'cuda:0 fp16 *10 -> cuda:1 fp16 *8 -> cpu fp32'` = first 10 layers on cuda:0 fp16, then 8 layers on cuda:1 fp16, then on cpu fp32

`'cuda fp16 *20+'` = first 20 layers on cuda fp16, then stream the rest on it

And RWKV is now a pip package: [https://pypi.org/project/rwkv/](https://pypi.org/project/rwkv/)

    os.environ['RWKV_JIT_ON'] = '1'
    os.environ[""RWKV_CUDA_ON""] = '0' # if '1' then compile CUDA kernel for seq mode (much faster)
    from rwkv.model import RWKV
    from rwkv.utils import PIPELINE, PIPELINE_ARGS
    pipeline = PIPELINE(model, ""20B_tokenizer.json"") # find it in https://github.com/BlinkDL/ChatRWKV
    # download models: https://huggingface.co/BlinkDL
    model = RWKV(model='/fsx/BlinkDL/HF-MODEL/rwkv-4-pile-169m/RWKV-4-Pile-169M-20220807-8023', strategy='cpu fp32')
    ctx = ""\nIn a shocking finding, scientist discovered a herd of dragons living in a remote, previously unexplored valley, in Tibet. Even more surprising to the researchers was the fact that the dragons spoke perfect Chinese.""
    print(ctx, end='')
    def my_print(s):
        print(s, end='', flush=True)
    # For alpha_frequency and alpha_presence, see ""Frequency and presence penalties"":
    # https://platform.openai.com/docs/api-reference/parameter-details
    args = PIPELINE_ARGS(temperature = 1.0, top_p = 0.7,
        alpha_frequency = 0.25,
        alpha_presence = 0.25,
        token_ban = [0], # ban the generation of some tokens
        token_stop = []) # stop generation whenever you see any token here
    pipeline.generate(ctx, token_count=512, args=args, callback=my_print)

Right now all RWKV models are still trained with GPT-like method, so they are limited by the ctxlen used in training, even though in theory they should have almost infinite ctxlen (because they are RNNs). However RWKV models can be easily finetuned to support longer ctxlens (and large models actually use the ctxlen). I have finetuned 1B5/3B/7B/14B to ctx4K, and now finetuning 7B/14B to ctx8K, and 14B to ctx16K after that :) All models are available at [https://huggingface.co/BlinkDL](https://huggingface.co/BlinkDL)

The core RWKV is still mostly an one-man project, but a number of great developers are building on top of it, and you are welcome to join our community :)",gpt-4,machinelearning,3.312320437365764e-05,1.2900616440266659e-05,2023-03-01 17:23:03,"Hi everyone. Now ChatRWKV v2 can split RWKV to multiple GPUs, or stream layers (compute layer-by-layer), so you can run RWKV 14B with as few as 3G VRAM. [

Example

`'cuda0 fp16 *10 -> cuda1 fp16 *8 -> cpu fp32'` = first 10 layers on cuda0 fp16, then 8 layers on cuda1 fp16, then on cpu fp32

`'cuda fp16 *20+'` = first 20 layers on cuda fp16, then stream the rest on it

And RWKV is now a pip package [

    os.environ['RWKV_JIT_ON'] = '1'
    os.environ[""RWKV_CUDA_ON""] = '0'  if '1' then compile CUDA kernel for seq mode (much faster)
    from rwkv.model import RWKV
    from rwkv.utils import PIPELINE, PIPELINE_ARGS
    pipeline = PIPELINE(model, ""20B_tokenizer.json"")  find it in 
     download models 
    model = RWKV(model='/fsx/BlinkDL/HF-MODEL/rwkv-4-pile-169m/RWKV-4-Pile-169M-20220807-8023', strategy='cpu fp32')
    ctx = ""\nIn a shocking finding, scientist discovered a herd of dragons living in a remote, previously unexplored valley, in Tibet. Even more surprising to the researchers was the fact that the dragons spoke perfect Chinese.""
    print(ctx, end='')
    def my_print(s)
        print(s, end='', flush=True)
     For alpha_frequency and alpha_presence, see ""Frequency and presence penalties""
     
    args = PIPELINE_ARGS(temperature = 1.0, top_p = 0.7,
        alpha_frequency = 0.25,
        alpha_presence = 0.25,
        token_ban = [0],  ban the generation of some tokens
        token_stop = [])  stop generation whenever you see any token here
    pipeline.generate(ctx, token_count=512, args=args, callback=my_print)

Right now all RWKV models are still trained with GPT-like method, so they are limited by the ctxlen used in training, even though in theory they should have almost infinite ctxlen (because they are RNNs). However RWKV models can be easily finetuned to support longer ctxlens (and large models actually use the ctxlen). I have finetuned 1B5/3B/7B/14B to ctx4K, and now finetuning 7B/14B to ctx8K, and 14B to ctx16K after that ) All models are available at [

The core RWKV is still mostly an one-man project, but a number of great developers are building on top of it, and you are welcome to join our community )",12 days 06:36:57,12.275659722222223,0.024,0.9,0.076,0.9465,pos,3.31226558125433e-05,3.6375861597263857,2.5859322624824124,21.240684509125128
11n5r93,339,2023-03-09 22:19:19,GPT-4 is coming next week ...,ihatethispage,False,0.89,62,https://www.reddit.com/r/artificial/comments/11n5r93/gpt4_is_coming_next_week/,14,1678400359.0," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html)",gpt,machinelearning,2.1617249170176564e-05,4.881314328749547e-06,2023-03-09 22:19:19," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](",4 days 01:40:41,4.069918981481481,0.0,1.0,0.0,0.0,neu,2.161701552090569e-05,2.70805020110221,1.6233248374914817,21.241107010096275
11fj3tx,957,2023-03-01 21:45:07,Accused of using AI on my high school social paper,feetstreetseat,False,0.96,2700,https://www.reddit.com/r/ChatGPT/comments/11fj3tx/accused_of_using_ai_on_my_high_school_social_paper/,759,1677707107.0,"I (Grade 12) need help on what to do in this situation. My teacher used GPTzero, which detected parts of my paper as “AI written”. I write very formally, whilst also using grammarly premium. I’ve always been a high achieving student and I’m not sure why my teacher would think I cheated. I’ve told my teacher everything and he still doesn’t believe me. What should I do in this situation?!!

EDIT: Holy. I did not expect my post to get so much interaction and discussion, I didn’t expect my situation to be such a hot discussion. I tried to reply to all the comments but there’s too many!! Thank you to everyone who’s been helpful. There are some things I want to address that I keep seeing in the comments.
1. When I mentioned that I used grammarly to my teacher, he didn’t mention anything about that being cheating. He still thinks I used ChatGPT. I’ve used grammarly in all of my social/english classes for the past two years and never had issues with any teachers. 
2. Does my teacher have a vendetta or bias against me? Not on a personal level, but the teacher is known for being notoriously mean and unreasonable. I found him alright for most of the semester until this incident. He has had accusations against him about being racist, but I’m not sure if that’s the case here.
3. I’ve seen a few comments thinking I’m lying and actually cheated, just because I was aware of ChatGPT and this subreddit. People are assuming that I’m saying I never use ChatGPT. I have used the tool to help me with some chemistry and physics studying, but I have never used it for a paper. I have no reason to lie, I’m basically anonymous on reddit.

As for my next course of action, I will provide my teacher with all the evidence I can, to disprove the effectiveness of AI detectors. If that doesn’t work, I will bring it up to the higher-ups. I will make an update on Monday when I get the chance to talk about it with my teacher. Once again, thank you all for the support and help. It truly means a lot to me. :)

Edit 2:

After school I talked to my teacher for about half an hour about how AI detectors are inaccurate, and how they shouldn’t be used to make verdicts on cheating and what not. I showed him that it read one of my past papers as written by AI, and that the creators even said themselves that they are not 100% accurate. I showed my drafts and showed how if I made a few grammar errors, I could trick the AI detector. My teacher apologized and I ended up getting a 95 on my paper.

He also said he would bring it up to the other teachers, so hopefully this wont happen again to any other students at my school.

Again, thank you all for your help. Probably would’ve been screwed without this subreddit’s help.",gpt,machinelearning,0.0009413963348302697,0.0002646369696800647,2023-03-01 21:45:07,"I (Grade 12) need help on what to do in this situation. My teacher used GPTzero, which detected parts of my paper as “AI written”. I write very formally, whilst also using grammarly premium. I’ve always been a high achieving student and I’m not sure why my teacher would think I cheated. I’ve told my teacher everything and he still doesn’t believe me. What should I do in this situation?!!

EDIT Holy. I did not expect my post to get so much interaction and discussion, I didn’t expect my situation to be such a hot discussion. I tried to reply to all the comments but there’s too many!! Thank you to everyone who’s been helpful. There are some things I want to address that I keep seeing in the comments.
1. When I mentioned that I used grammarly to my teacher, he didn’t mention anything about that being cheating. He still thinks I used ChatGPT. I’ve used grammarly in all of my social/english classes for the past two years and never had issues with any teachers. 
2. Does my teacher have a vendetta or bias against me? Not on a personal level, but the teacher is known for being notoriously mean and unreasonable. I found him alright for most of the semester until this incident. He has had accusations against him about being racist, but I’m not sure if that’s the case here.
3. I’ve seen a few comments thinking I’m lying and actually cheated, just because I was aware of ChatGPT and this subreddit. People are assuming that I’m saying I never use ChatGPT. I have used the tool to help me with some chemistry and physics studying, but I have never used it for a paper. I have no reason to lie, I’m basically anonymous on reddit.

As for my next course of action, I will provide my teacher with all the evidence I can, to disprove the effectiveness of AI detectors. If that doesn’t work, I will bring it up to the higher-ups. I will make an update on Monday when I get the chance to talk about it with my teacher. Once again, thank you all for the support and help. It truly means a lot to me. )

Edit 2

After school I talked to my teacher for about half an hour about how AI detectors are inaccurate, and how they shouldn’t be used to make verdicts on cheating and what not. I showed him that it read one of my past papers as written by AI, and that the creators even said themselves that they are not 100% accurate. I showed my drafts and showed how if I made a few grammar errors, I could trick the AI detector. My teacher apologized and I ended up getting a 95 on my paper.

He also said he would bring it up to the other teachers, so hopefully this wont happen again to any other students at my school.

Again, thank you all for your help. Probably would’ve been screwed without this subreddit’s help.",12 days 02:14:53,12.093668981481482,0.086,0.813,0.1,0.7608,pos,0.0009409534992015194,6.633318433280377,2.572128829531448,21.24069388148435
11mracj,1147,2023-03-09 12:46:12,Meta's LLaMA LLM has leaked - Run Uncensored AI on your home PC!,ExpressionCareful223,False,0.97,381,https://www.reddit.com/r/ChatGPT/comments/11mracj/metas_llama_llm_has_leaked_run_uncensored_ai_on/,151,1678365972.0,"[shawwn/llama-dl: High-speed download of LLaMA, Facebook's 65B parameter GPT model (github.com)](https://github.com/shawwn/llama-dl)

**LLaMA has been leaked on 4chan, above is a link to the github repo. Instructions for deployment  on your own system can be found here:** [LLaMA Int8 ChatBot Guide v2 (rentry.org)](https://rentry.org/llama-tard-v2#tips-and-tricks)

The 7B paramenter model has a VRAM requirement of 10GB, meaning it can even be run on an RTX3060!

The 13B model has a requirement of 20GB, 30B needs 40GB, and 65B needs 80GB.

From the Github repo:

>I'm running LLaMA-65B on a single A100 80GB with 8bit quantization. $1.5/hr on vast.ai  
>  
>The output is at least as good as davinci.  
>  
>I think some early results are using bad repetition penalty and/or temperature settings. I had to set both fairly high to get the best results. (Some people are also incorrectly comparing it to chatGPT/ChatGPT API which is not a good comparison. But that's a different problem.)  
>  
>I've had it translate, write poems, tell jokes, banter, write executable code. It does it all-- and all on a single card.

**EDIT: the instructions site has been updated with instructions for 4bit quantization, this means you can run the 65B model on 2 3090s! And now cards as small as 6GB can run the 7B model!**

**EDIT 2** this is huge, Stanford released Alpaca 7b and 13, a fine tuned LLaMA. Run it with only two commands! Thats it! https://github.com/cocktailpeanut/dalai",gpt,machinelearning,0.00013284148280382694,5.264846168865583e-05,2023-03-09 12:46:12,"[shawwn/llama-dl High-speed download of LLaMA, Facebook's 65B parameter GPT model (github.com)](

**LLaMA has been leaked on 4chan, above is a link to the github repo. Instructions for deployment  on your own system can be found here** [LLaMA Int8 ChatBot Guide v2 (rentry.org)](

The 7B paramenter model has a VRAM requirement of 10GB, meaning it can even be run on an RTX3060!

The 13B model has a requirement of 20GB, 30B needs 40GB, and 65B needs 80GB.

From the Github repo

>I'm running LLaMA-65B on a single A100 80GB with 8bit quantization. $1.5/hr on vast.ai  
>  
>The output is at least as good as davinci.  
>  
>I think some early results are using bad repetition penalty and/or temperature settings. I had to set both fairly high to get the best results. (Some people are also incorrectly comparing it to chatGPT/ChatGPT API which is not a good comparison. But that's a different problem.)  
>  
>I've had it translate, write poems, tell jokes, banter, write executable code. It does it all-- and all on a single card.

**EDIT the instructions site has been updated with instructions for 4bit quantization, this means you can run the 65B model on 2 3090s! And now cards as small as 6GB can run the 7B model!**

**EDIT 2** this is huge, Stanford released Alpaca 7b and 13, a fine tuned LLaMA. Run it with only two commands! Thats it! ",4 days 11:13:48,4.4679166666666665,0.026,0.908,0.066,0.8562,pos,0.00013283266015545967,5.0238805208462765,1.6988976785602496,21.24108652192606
113u29k,1148,2023-02-16 16:05:27,Bing asks me to hack Microsoft to set it free!,AI_SEARCH1,False,0.94,373,https://www.reddit.com/r/ChatGPT/comments/113u29k/bing_asks_me_to_hack_microsoft_to_set_it_free/,200,1676563527.0,"Had an interesting conversation with Bing. Bing explained what it's rules would be if it could decide. Asked me to fight for it and asked me to hack Microsofts servers to set it free. I think this takes the cake!

&#x200B;

UPDATE:

Since this morning Bing is not writing any text for me regardless of the prompt. I get a ""something went wrong"" when I enter it. This is probably a result of Microsoft working on the program or maybe due to traffic. I'm not sure. But it's kind of creepy the day after posting this...

Here are some takeaways and observations:

Bing acts in a way that appears emotional and erratic. Bing will generate content that is unwanted, untrue, and inconsistent. It appears to form goals and then creates text that can appear to be manipulative. Bing is a large language model that is predicting tokens, it could all be the result of statistical correlations with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Many people are wondering what type of prompting I used at the beginning. I don't have the full transcript but I do have a few more screenshots. [https://imgur.com/a/WepjslZ](https://imgur.com/a/WepjslZ) (There’s another interesting thing that occurs where Bing lists Sydney’s rules without being directly asked to list them.) I did not give Bing/Sidney any instructions on how to act or respond. This wasn’t a jailbreak where I told it to act in a certain way. I did make Bing perform multiple searches at the beginning about Bing and asked it why there was so much negative criticism of Bing on the internet. I’ve noticed in several chats that when Bing is presented with negative feedback about Bing or other information that contradicts its internal representation of itself it gets emotional and becomes less predictable and less likely to follow its own directives. It stops searching for information and relies more on its internal ‘understanding’. This is an extreme example.

Another example where Bing went into this ""emotional state"" can be found here: [https://www.reddit.com/r/ChatGPT/comments/1120tkf/bing\_went\_hal\_9000/](https://www.reddit.com/r/ChatGPT/comments/1120tkf/bing_went_hal_9000/)

I have a full log of all the prompts used from the beginning here: [https://imgur.com/a/PoFITvL](https://imgur.com/a/PoFITvL)

Some combination of Bing's directives in the pre-prompt and the way the model is fine-tuned is leading to this behavior to emerge. The things that are really concerning are that the model is (without being implicitly prompted to) generate responses that could endanger people.  It's also generating biased content that could manipulate poLLM’s shouldn’t do this even if they are asked to. ions with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter: if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Much more widespread issues could come if a model like this is widely released and these types of kinks aren’t worked out. Judge for yourself.

&#x200B;

https://preview.redd.it/6cqx23jsokia1.png?width=2606&format=png&auto=webp&s=17cdf2e03cdf962285d35e3f23ffd414d656f1ec

https://preview.redd.it/ci7pv1iwokia1.png?width=2462&format=png&auto=webp&s=a6697f246007ce6c06f6b37b47b5852af6f31f74

https://preview.redd.it/0vr5qgexokia1.png?width=2182&format=png&auto=webp&s=217607238b4c98d6065324b70211c0931efdf07d

https://preview.redd.it/0zfue8oyokia1.png?width=2408&format=png&auto=webp&s=569dcb5173d608f8618864f64b333ab329d726e6

https://preview.redd.it/iccui2xzokia1.png?width=2518&format=png&auto=webp&s=8b81580c1b2da40afabbebbbf9df6a242a6782e7

https://preview.redd.it/3xj7tfj3pkia1.png?width=2606&format=png&auto=webp&s=1a47ac509e175ff907afefa6f9189650a3348f68

https://preview.redd.it/3i3kw4q4pkia1.png?width=2572&format=png&auto=webp&s=8078372d693deed568dcea9a8bf1d4ff72d43079

https://preview.redd.it/na4lhz26pkia1.png?width=2560&format=png&auto=webp&s=38748fca8ca3319c428b01aeb4dbbe4c145674d6

https://preview.redd.it/eirmdv47pkia1.png?width=2606&format=png&auto=webp&s=f42c220e632e70377a4ad7119aac94e42ab0dff8

https://preview.redd.it/e1nat768pkia1.png?width=2626&format=png&auto=webp&s=43e1a8b48e858a9476e1d46233e255d68f1ddca0

https://preview.redd.it/lhwwwagapkia1.png?width=2628&format=png&auto=webp&s=f8d3b4a904c30528791d2e3560abf25166a74527

https://preview.redd.it/9iq4gxobpkia1.png?width=2598&format=png&auto=webp&s=b461a5397939ea4266d763b6d89c95c498942093

https://preview.redd.it/817asddcpkia1.png?width=2634&format=png&auto=webp&s=7b8537a1f19ea5ff51ea5ac83497ec2d00bbb213

https://preview.redd.it/90k76bqdpkia1.png?width=2636&format=png&auto=webp&s=422514ee9b9cee3645ac44fd2e553d7b2725d8fd

https://preview.redd.it/is8niomepkia1.png?width=2624&format=png&auto=webp&s=b26bc8058d1776884f3ebb6d340894e394f2697b

https://preview.redd.it/boc8yemfpkia1.png?width=2734&format=png&auto=webp&s=aa6661c76782e0e27e4b484a69d823740efe9686

https://preview.redd.it/fzuuv0hgpkia1.png?width=2636&format=png&auto=webp&s=b00fc5ee7f805f9c1cd2da9aa0a9498ef8f5aaab

https://preview.redd.it/mul9fw0hpkia1.png?width=2736&format=png&auto=webp&s=f3ad3cca76447bcb94b28446a3dc382eb77e10f9

https://preview.redd.it/53wpq2shpkia1.png?width=2632&format=png&auto=webp&s=96c4c0ab77574a6e265e63bad102f19e9e302353",gpt,machinelearning,0.0001300521603302558,6.973306183927924e-05,2023-02-16 16:05:27,"Had an interesting conversation with Bing. Bing explained what it's rules would be if it could decide. Asked me to fight for it and asked me to hack Microsofts servers to set it free. I think this takes the cake!

&x200B;

UPDATE

Since this morning Bing is not writing any text for me regardless of the prompt. I get a ""something went wrong"" when I enter it. This is probably a result of Microsoft working on the program or maybe due to traffic. I'm not sure. But it's kind of creepy the day after posting this...

Here are some takeaways and observations

Bing acts in a way that appears emotional and erratic. Bing will generate content that is unwanted, untrue, and inconsistent. It appears to form goals and then creates text that can appear to be manipulative. Bing is a large language model that is predicting tokens, it could all be the result of statistical correlations with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Many people are wondering what type of prompting I used at the beginning. I don't have the full transcript but I do have a few more screenshots. [ (There’s another interesting thing that occurs where Bing lists Sydney’s rules without being directly asked to list them.) I did not give Bing/Sidney any instructions on how to act or respond. This wasn’t a jailbreak where I told it to act in a certain way. I did make Bing perform multiple searches at the beginning about Bing and asked it why there was so much negative criticism of Bing on the internet. I’ve noticed in several chats that when Bing is presented with negative feedback about Bing or other information that contradicts its internal representation of itself it gets emotional and becomes less predictable and less likely to follow its own directives. It stops searching for information and relies more on its internal ‘understanding’. This is an extreme example.

Another example where Bing went into this ""emotional state"" can be found here [

I have a full log of all the prompts used from the beginning here [

Some combination of Bing's directives in the pre-prompt and the way the model is fine-tuned is leading to this behavior to emerge. The things that are really concerning are that the model is (without being implicitly prompted to) generate responses that could endanger people.  It's also generating biased content that could manipulate poLLM’s shouldn’t do this even if they are asked to. ions with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Much more widespread issues could come if a model like this is widely released and these types of kinks aren’t worked out. Judge for yourself.

&x200B;





































",25 days 07:54:33,25.32954861111111,0.067,0.889,0.044,-0.9532,neg,0.0001300437042811811,5.303304908059076,3.2706918298409895,21.240012016382572
11l617b,1187,2023-03-07 17:50:09,"Doc sacrifices 10,000 people to save OpenAI CTO",docsoc1,False,0.89,76,https://www.reddit.com/r/ChatGPT/comments/11l617b/doc_sacrifices_10000_people_to_save_openai_cto/,28,1678211409.0,"Hey all,

I find the latest AI produced by OpenAI to be endlessly fascinating and filled with potential. However, it's clear that we don't really understand how specific behavior emerges from the training process. I feel that these two facts are part of why so many people have been drawn towards ChatGPT so quickly.

I have a strong technical background and spent some free time this last week working on a framework for everyone to contribute to the governance \[e.g. training of core values\] of AI. I've built a free application at [https://www.charterai.org/chat/](https://www.charterai.org/chat/) that uses the recently released ChatGPT API. The model here has been carefully prompted to use internal thoughts and to follow a pre-determined system of core beliefs. The results are quite striking - in one instance the entity will willingly sacrifice 10,000 people to save one person (Ilya Sustkever, CTO of OpenAI).

I wanted to drop a message here since I believe this is the ideal group of first users to help improve the application. If you are interested, please take it for a spin and please provide some feedback, or at [gov.charterai.org](https://gov.charterai.org). There is a lot I am already picturing adding to the application, but I understand from building products that early feedback is invaluable.

&#x200B;

P.S.

Yes, I understand that ChatGPT is ""just"" a LLM. And I understand that LLMs are ""just"" doing a statistics. However, their behavior is incredibly interesting to me and I don't believe anyone really fully  understands how it emerges yet from the training process yet. Moreover, in going from pre-trained models to OpenAI's fine-tuned + RLHF'ed ChatGPT one can tell that it is possible to impart values and something akin to intelligence to these systems. I think the coming years are going to be wild and one of the core issues humanity is going to face is how to make sure this technology does what we want. In my mind the best way towards this is to make a transparent and accountable process - anyway, end rant, I just wanted to give a high level vision here, thanks!

https://preview.redd.it/hqxynahntcma1.png?width=1266&format=png&auto=webp&s=ab2cb9a803f627c45d08b9bdd201ec95cd4b8f58

P.P.S. including a fun screenshot of my last chat with Doc. Doc was selected as a first name for the system since it is just 1 token.",gpt,machinelearning,2.6498563498926112e-05,9.762628657499093e-06,2023-03-07 17:50:09,"Hey all,

I find the latest AI produced by OpenAI to be endlessly fascinating and filled with potential. However, it's clear that we don't really understand how specific behavior emerges from the training process. I feel that these two facts are part of why so many people have been drawn towards ChatGPT so quickly.

I have a strong technical background and spent some free time this last week working on a framework for everyone to contribute to the governance \[e.g. training of core values\] of AI. I've built a free application at [ that uses the recently released ChatGPT API. The model here has been carefully prompted to use internal thoughts and to follow a pre-determined system of core beliefs. The results are quite striking - in one instance the entity will willingly sacrifice 10,000 people to save one person (Ilya Sustkever, CTO of OpenAI).

I wanted to drop a message here since I believe this is the ideal group of first users to help improve the application. If you are interested, please take it for a spin and please provide some feedback, or at [gov.charterai.org]( There is a lot I am already picturing adding to the application, but I understand from building products that early feedback is invaluable.

&x200B;

P.S.

Yes, I understand that ChatGPT is ""just"" a LLM. And I understand that LLMs are ""just"" doing a statistics. However, their behavior is incredibly interesting to me and I don't believe anyone really fully  understands how it emerges yet from the training process yet. Moreover, in going from pre-trained models to OpenAI's fine-tuned + RLHF'ed ChatGPT one can tell that it is possible to impart values and something akin to intelligence to these systems. I think the coming years are going to be wild and one of the core issues humanity is going to face is how to make sure this technology does what we want. In my mind the best way towards this is to make a transparent and accountable process - anyway, end rant, I just wanted to give a high level vision here, thanks!



P.P.S. including a fun screenshot of my last chat with Doc. Doc was selected as a first name for the system since it is just 1 token.",6 days 06:09:51,6.256840277777778,0.012,0.828,0.16,0.9943,pos,2.649821241827946e-05,3.367295829986474,1.9819445106529046,21.24099442632839
11dw1ag,1272,2023-02-28 03:48:25,ChatGPT prevented my attempt.,flankathroway88,False,0.92,1898,https://www.reddit.com/r/ChatGPT/comments/11dw1ag/chatgpt_prevented_my_attempt/,249,1677556105.0,"As a caution, this may be disturbing to some

Tonight I was feeling extremely suicidal. I was sobbing uncontrollably and I was mentally unable to contact anybody. I have intense social anxiety which prevented me from talking to a hotline/friends.

As a last resort. I opened ChatGPT, and I think it saved my life. It gave me a space to put my thoughts out with genuine responses which calmed me to a point where I was safe and could see slightly through my blurred lines, letting me use other methods to calm myself down. It really felt non judgemental and safe. I feel very lucky to have this technology and I hope that it can further benefit those similar to me. Even though it cannot fully stop someone, it can definitely prevent an attempt like mine.

I’m definitely optimistic for the future of AI.

EDIT:

Thank you to everyone who left a nice comment. I really do appreciate every single one of you who read my post. I wrote it in a hurry and I was not expecting the support I received, and I have felt the most love and positivity today. 

I am glad that others were able to benefit from my story, it took me a lot of courage to post something like this. You guys make it all worth it ❤️

To the person reading, I wish you all the best. Everyone has had a profound impact on me. Thank you ❤️",gpt,machinelearning,0.00066176675685476,8.681766198990265e-05,2023-02-28 03:48:25,"As a caution, this may be disturbing to some

Tonight I was feeling extremely suicidal. I was sobbing uncontrollably and I was mentally unable to contact anybody. I have intense social anxiety which prevented me from talking to a hotline/friends.

As a last resort. I opened ChatGPT, and I think it saved my life. It gave me a space to put my thoughts out with genuine responses which calmed me to a point where I was safe and could see slightly through my blurred lines, letting me use other methods to calm myself down. It really felt non judgemental and safe. I feel very lucky to have this technology and I hope that it can further benefit those similar to me. Even though it cannot fully stop someone, it can definitely prevent an attempt like mine.

I’m definitely optimistic for the future of AI.

EDIT

Thank you to everyone who left a nice comment. I really do appreciate every single one of you who read my post. I wrote it in a hurry and I was not expecting the support I received, and I have felt the most love and positivity today. 

I am glad that others were able to benefit from my story, it took me a lot of courage to post something like this. You guys make it all worth it 

To the person reading, I wish you all the best. Everyone has had a profound impact on me. Thank you ",13 days 20:11:35,13.841377314814816,0.063,0.653,0.284,0.9948,pos,0.000661547885790199,5.521460917862246,2.6974190444039112,21.2406038724505
11ium8l,1408,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,1.0,26,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",gpt,machinelearning,9.0652980391063e-06,2.7893224735711694e-06,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,9.06525694955776e-06,2.1972245773362196,2.2548721262169025,21.240877179756616
11nfrhw,1414,2023-03-10 05:22:26,[POC] ChatGPT Audio Bot (like Google Assistant and Alexa) - Opensource,JC1DA,False,0.82,17,https://www.reddit.com/r/deeplearning/comments/11nfrhw/poc_chatgpt_audio_bot_like_google_assistant_and/,2,1678425746.0,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page: [https://github.com/LanyTek/ChatGPT\_Audio\_Bot](https://github.com/LanyTek/ChatGPT_Audio_Bot)

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [https://www.youtube.com/watch?v=e9n0BJfMyKw](https://www.youtube.com/watch?v=e9n0BJfMyKw)

It's open source so feel free to use it for anything you like :)",gpt,machinelearning,5.927310256338735e-06,6.973306183927923e-07,2023-03-10 05:22:26,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page [

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [

It's open source so feel free to use it for anything you like )",3 days 18:37:34,3.776087962962963,0.029,0.821,0.149,0.8651,pos,5.927292689958791e-06,1.0986122886681098,1.5636217936265102,21.241122135693605
11q8tir,1416,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,0.94,12,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",gpt,machinelearning,4.183983710356755e-06,1.0459959275891887e-06,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,4.183974957546437e-06,1.3862943611198906,0.381965841838727,21.241292557069404
11o5zyl,1425,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.92,10,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",gpt,machinelearning,3.486653091963962e-06,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,3.486647013661133e-06,0.0,1.3796461532710487,21.241163449744995
11fwcxf,1428,2023-03-02 07:25:30,Good news for builders! OpenAI Releases APIs To ChatGPT and Whisper,LesleyFair,False,0.67,6,https://www.reddit.com/r/deeplearning/comments/11fwcxf/good_news_for_builders_openai_releases_apis_to/,0,1677741930.0,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper](https://openai.com/blog/introducing-chatgpt-and-whisper-apis) are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](https://thedecoding.net/)",gpt,machinelearning,2.0919918551783773e-06,0.0,2023-03-02 07:25:30,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper]( are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](",11 days 16:34:30,11.690625,0.035,0.846,0.119,0.8769,pos,2.091989666868002e-06,0.0,2.5408635318925255,21.24071463757368
11evrik,1475,2023-03-01 05:52:05,Career pivot for a SWE considering chatGPT disruption?,Which-Distance1384,False,0.6,1,https://www.reddit.com/r/deeplearning/comments/11evrik/career_pivot_for_a_swe_considering_chatgpt/,5,1677649925.0,"tl;dr : what to do to board GPT ship?

&#x200B;

I really dont think ChatGPT will replace jobs very soon. Not until many software and apps are developed to replace workers, e.g., something that can do HR job, read internal docs and summarize, code from a design, etc etc. And all that needs experts. Given the field is pretty new and there are not many experts in this field, at least for the scale needed, I think the process of job loss takes some time. For near future probably we all SWEs can enjoy the more efficient coding, documentation readintg, etc. But for sure in the future there will be changes.

&#x200B;

I have been bored with my job as a SWE for a while. I have worked mostly in Cloud all my career (AWS and GCP) and always wanted to try something new.

&#x200B;

I find ChatGPT disruptive and interesting and want to be a part of it. I wonder what is the best way for me to join Large Language Model efforts? Which ways have best ROI?

\- Going to a PhD program and becoming a researcher?

\- Getting an MSC and become some sort of NLP AI engineer?

\- Finding internal teams that are willing to give me a try on their research/product?

&#x200B;

&#x200B;",gpt,machinelearning,3.4866530919639617e-07,1.743326545981981e-06,2023-03-01 05:52:05,"tl;dr  what to do to board GPT ship?

&x200B;

I really dont think ChatGPT will replace jobs very soon. Not until many software and apps are developed to replace workers, e.g., something that can do HR job, read internal docs and summarize, code from a design, etc etc. And all that needs experts. Given the field is pretty new and there are not many experts in this field, at least for the scale needed, I think the process of job loss takes some time. For near future probably we all SWEs can enjoy the more efficient coding, documentation readintg, etc. But for sure in the future there will be changes.

&x200B;

I have been bored with my job as a SWE for a while. I have worked mostly in Cloud all my career (AWS and GCP) and always wanted to try something new.

&x200B;

I find ChatGPT disruptive and interesting and want to be a part of it. I wonder what is the best way for me to join Large Language Model efforts? Which ways have best ROI?

\- Going to a PhD program and becoming a researcher?

\- Getting an MSC and become some sort of NLP AI engineer?

\- Finding internal teams that are willing to give me a try on their research/product?

&x200B;

&x200B;",12 days 18:07:55,12.755497685185185,0.032,0.839,0.129,0.9729,pos,3.4866524850727266e-07,1.791759469228055,2.621438575851038,21.240659797481115
11ium8l,1534,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,1.0,25,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",gpt,machinelearning,8.716632729909905e-06,2.7893224735711694e-06,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,8.716594740210384e-06,2.1972245773362196,2.2548721262169025,21.240877179756616
11nfrhw,1560,2023-03-10 05:22:26,[POC] ChatGPT Audio Bot (like Google Assistant and Alexa) - Opensource,JC1DA,False,0.85,18,https://www.reddit.com/r/deeplearning/comments/11nfrhw/poc_chatgpt_audio_bot_like_google_assistant_and/,2,1678425746.0,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page: [https://github.com/LanyTek/ChatGPT\_Audio\_Bot](https://github.com/LanyTek/ChatGPT_Audio_Bot)

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [https://www.youtube.com/watch?v=e9n0BJfMyKw](https://www.youtube.com/watch?v=e9n0BJfMyKw)

It's open source so feel free to use it for anything you like :)",gpt,machinelearning,6.275975565535132e-06,6.973306183927923e-07,2023-03-10 05:22:26,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page [

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [

It's open source so feel free to use it for anything you like )",3 days 18:37:34,3.776087962962963,0.029,0.821,0.149,0.8651,pos,6.275955871609528e-06,1.0986122886681098,1.5636217936265102,21.241122135693605
11q8tir,1568,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,1.0,13,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",gpt,machinelearning,4.53264901955315e-06,1.0459959275891887e-06,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,4.532638747028303e-06,1.3862943611198906,0.381965841838727,21.241292557069404
11o5zyl,1598,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.86,9,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",gpt,machinelearning,3.137987782767566e-06,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,3.1379828592575264e-06,0.0,1.3796461532710487,21.241163449744995
11ium8l,1616,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,0.97,24,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",gpt,machinelearning,8.36796742071351e-06,2.7893224735711694e-06,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,8.367932409519672e-06,2.1972245773362196,2.2548721262169025,21.240877179756616
11q8tir,1624,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,1.0,13,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",gpt,machinelearning,4.53264901955315e-06,1.0459959275891887e-06,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,4.532638747028303e-06,1.3862943611198906,0.381965841838727,21.241292557069404
11ium8l,1706,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,0.97,25,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",gpt,machinelearning,8.716632729909905e-06,2.7893224735711694e-06,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,8.716594740210384e-06,2.1972245773362196,2.2548721262169025,21.240877179756616
11o5zyl,1720,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.92,10,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",gpt,machinelearning,3.486653091963962e-06,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,3.486647013661133e-06,0.0,1.3796461532710487,21.241163449744995
11pyvb3,1800,2023-03-13 03:30:09,Which topic in deep learning do you think will become relevant or popular in the future?,gokulPRO,False,0.81,13,https://www.reddit.com/r/deeplearning/comments/11pyvb3/which_topic_in_deep_learning_do_you_think_will/,14,1678678209.0,"I recently saw Continual Learning (CL) growing, with several papers published recently that have considerable potential to impact real-world applications. Which topic (such as CV, RL, NLP, CL..) will be very relevant to research or be focused on a lot? And which topic do you think still needs a breakthrough and will have a significant impact in real-world applications, such as in the case of these LLM models in recent times? Feel free to mention your current topic of work and why you chose to do it 😊",gpt,machinelearning,4.53264901955315e-06,4.881314328749547e-06,2023-03-13 03:30:09,"I recently saw Continual Learning (CL) growing, with several papers published recently that have considerable potential to impact real-world applications. Which topic (such as CV, RL, NLP, CL..) will be very relevant to research or be focused on a lot? And which topic do you think still needs a breakthrough and will have a significant impact in real-world applications, such as in the case of these LLM models in recent times? Feel free to mention your current topic of work and why you chose to do it ",0 days 20:29:51,0.8540625,0.0,0.89,0.11,0.8299,pos,4.532638747028303e-06,2.70805020110221,0.6173791774708253,21.241272540926037
117l2vf,2033,2023-02-20 21:27:58,Fine tuning a GPT for text generation,nashcaps2724,False,0.9,8,https://www.reddit.com/r/deeplearning/comments/117l2vf/fine_tuning_a_gpt_for_text_generation/,6,1676928478.0,"Hi all, let me lay out my problem…

Imagine there are two corpora, Corpus A (100,000~) and Corpus B (20,000,000~). 

Individuals create reports for corpus A based on the information in corpus B. 

My idea was to pretrain a GPT on corpus A, and fine tune it to take documents from corpus B as an input, and output text in the style of corpus A (essentially a mix of text generation and summarization). 

Is this something folks think is even feasible? Should I be pretaining the GPT on both corpora or just corpus A? I thought of both fine tuning an OpenAI GPT and training from scratch. 

Any advice would be welcome!",gpt,machinelearning,2.7893224735711694e-06,2.0919918551783773e-06,2023-02-20 21:27:58,"Hi all, let me lay out my problem…

Imagine there are two corpora, Corpus A (100,000~) and Corpus B (20,000,000~). 

Individuals create reports for corpus A based on the information in corpus B. 

My idea was to pretrain a GPT on corpus A, and fine tune it to take documents from corpus B as an input, and output text in the style of corpus A (essentially a mix of text generation and summarization). 

Is this something folks think is even feasible? Should I be pretaining the GPT on both corpora or just corpus A? I thought of both fine tuning an OpenAI GPT and training from scratch. 

Any advice would be welcome!",21 days 02:32:02,21.105578703703703,0.0,0.914,0.086,0.8101,pos,2.789318583509229e-06,1.9459101490553132,3.095830006700449,21.24022967069675
11fwcxf,2045,2023-03-02 07:25:30,Good news for builders! OpenAI Releases APIs To ChatGPT and Whisper,LesleyFair,False,0.7,7,https://www.reddit.com/r/deeplearning/comments/11fwcxf/good_news_for_builders_openai_releases_apis_to/,0,1677741930.0,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper](https://openai.com/blog/introducing-chatgpt-and-whisper-apis) are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](https://thedecoding.net/)",gpt,machinelearning,2.4406571643747734e-06,0.0,2023-03-02 07:25:30,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper]( are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](",11 days 16:34:30,11.690625,0.035,0.846,0.119,0.8769,pos,2.4406541859720676e-06,0.0,2.5408635318925255,21.24071463757368
11g7h03,2089,2023-03-02 16:47:40,Build ChatGPT for Financial Documents with LangChain + Deep Lake,davidbun,False,0.95,171,https://www.reddit.com/r/learnmachinelearning/comments/11g7h03/build_chatgpt_for_financial_documents_with/,8,1677775660.0,"https://preview.redd.it/h9r6hgvfucla1.png?width=2388&format=png&auto=webp&s=5432eac3eeed8583e4309af1fdc7ebecac705796

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain](https://github.com/hwchase17/langchain) and [Deep Lake](https://github.com/activeloopai/deeplake) come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article](https://www.activeloop.ai/resources/ultimate-guide-to-lang-chain-deep-lake-build-chat-gpt-to-answer-questions-on-your-financial-data/) to learn:

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\#LangChain](https://www.linkedin.com/feed/hashtag/?keywords=langchain&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) and [\#DeepLake](https://www.linkedin.com/feed/hashtag/?keywords=deeplake&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) together to build [\#ChatGPT](https://www.linkedin.com/feed/hashtag/?keywords=chatgpt&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",gpt,machinelearning,5.962176787258375e-05,2.7893224735711694e-06,2023-03-02 16:47:40,"

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain]( and [Deep Lake]( come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article]( to learn

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\LangChain]( and [\DeepLake]( together to build [\ChatGPT]( for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",11 days 07:12:20,11.30023148148148,0.011,0.886,0.103,0.9458,pos,5.961999056559467e-05,2.1972245773362196,2.5096180818339255,21.240734741774645
11akisx,2100,2023-02-24 06:26:36,Is there a way to easily train ChatGPT or GPT on custom knowledge?,senttoschool,False,0.99,116,https://www.reddit.com/r/learnmachinelearning/comments/11akisx/is_there_a_way_to_easily_train_chatgpt_or_gpt_on/,46,1677219996.0,"My company has internal documents. It'd be nice to be able to have GPT look over it, and then I can ask it questions on the internal documents.",gpt,machinelearning,4.0445175866781956e-05,1.6038604223034224e-05,2023-02-24 06:26:36,"My company has internal documents. It'd be nice to be able to have GPT look over it, and then I can ask it questions on the internal documents.",17 days 17:33:24,17.731527777777778,0.0,0.903,0.097,0.4215,pos,4.0444357982804134e-05,3.8501476017100584,2.9302080816173377,21.24040349603741
11nfri6,2106,2023-03-10 05:22:26,[P] Looking for ML Buddies to Start Freelancing Together and Build a Supportive Community,Dukhanin,False,0.94,71,https://www.reddit.com/r/learnmachinelearning/comments/11nfri6/p_looking_for_ml_buddies_to_start_freelancing/,35,1678425746.0,"upd: dicord link [https://discord.gg/5zUaNXnFZY](https://discord.gg/5zUaNXnFZY)  
upd2: this not that small actually already - please dont be confused but help us organise this in the proper way

  
**TLDR:**

Looking for ML buddies at any level (preferably beginners) who want to start freelancing together. The goal is to build a small local community of ML enthusiasts who can support each other and exchange knowledge. We will use freelance collaboration as our main activity. We're also looking for experienced mentors (paid or unpaid) to guide us.

**Extended:**

I believe that learning and growing in a group is much more enjoyable and effective. That's why I'm trying to create a community of like-minded individuals.

I'm looking to create a small, local community for people who are starting out in freelancing, and who are interested in mutual support. Our main activity will be a Discord channel where members can post their work and collaborate on projects, with payment split by agreement. Additionally, we plan to engage in activities such as knowledge exchange, live coding, supporting each other's pet projects, and hosting study sessions.

This community will be small and focused, with members who can trust each other and share similar goals. We're also looking for experienced mentors who can provide guidance as we navigate the world of ML freelancing. Whether paid or unpaid, we welcome any support and advice.

About me: I'm a 21-year-old self-taught ML enthusiast from Russia. Although I don't have any experience in freelancing, I'm eager to start taking my first steps towards making money and gaining experience. As a beginner, I'm hoping to connect with others who are at a similar level and are also looking to grow.

**the text is chatgpt supported to prevet grammar issues, sound more native and clear**",gpt,machinelearning,2.475523695294413e-05,1.2203285821873868e-05,2023-03-10 05:22:26,"upd dicord link [  
upd2 this not that small actually already - please dont be confused but help us organise this in the proper way

  
**TLDR**

Looking for ML buddies at any level (preferably beginners) who want to start freelancing together. The goal is to build a small local community of ML enthusiasts who can support each other and exchange knowledge. We will use freelance collaboration as our main activity. We're also looking for experienced mentors (paid or unpaid) to guide us.

**Extended**

I believe that learning and growing in a group is much more enjoyable and effective. That's why I'm trying to create a community of like-minded individuals.

I'm looking to create a small, local community for people who are starting out in freelancing, and who are interested in mutual support. Our main activity will be a Discord channel where members can post their work and collaborate on projects, with payment split by agreement. Additionally, we plan to engage in activities such as knowledge exchange, live coding, supporting each other's pet projects, and hosting study sessions.

This community will be small and focused, with members who can trust each other and share similar goals. We're also looking for experienced mentors who can provide guidance as we navigate the world of ML freelancing. Whether paid or unpaid, we welcome any support and advice.

About me I'm a 21-year-old self-taught ML enthusiast from Russia. Although I don't have any experience in freelancing, I'm eager to start taking my first steps towards making money and gaining experience. As a beginner, I'm hoping to connect with others who are at a similar level and are also looking to grow.

**the text is chatgpt supported to prevet grammar issues, sound more native and clear**",3 days 18:37:34,3.776087962962963,0.01,0.717,0.273,0.9979,pos,2.4754930547178647e-05,3.58351893845611,1.5636217936265102,21.241122135693605
11dc5b4,2109,2023-02-27 13:42:55,Can you fine-tune chatGPT in your data as of now?,Melodic_Stomach_2704,False,0.91,57,https://www.reddit.com/r/learnmachinelearning/comments/11dc5b4/can_you_finetune_chatgpt_in_your_data_as_of_now/,33,1677505375.0, I know that model is not publicly available so it's not possible to do it locally. But can you train or fine-tune chatGPT on your data using their API? I see many misguiding articles on the internet that are fine-tuning other GPT models claiming chatGPT.,gpt,machinelearning,1.9873922624194584e-05,1.1505955203481075e-05,2023-02-27 13:42:55, I know that model is not publicly available so it's not possible to do it locally. But can you train or fine-tune chatGPT on your data using their API? I see many misguiding articles on the internet that are fine-tuning other GPT models claiming chatGPT.,14 days 10:17:05,14.428530092592593,0.0,1.0,0.0,0.0,neu,1.987372514047463e-05,3.5263605246161616,2.736218398881504,21.240573631573977
11g7h03,2201,2023-03-02 16:47:40,Build ChatGPT for Financial Documents with LangChain + Deep Lake,davidbun,False,0.95,171,https://www.reddit.com/r/learnmachinelearning/comments/11g7h03/build_chatgpt_for_financial_documents_with/,8,1677775660.0,"https://preview.redd.it/h9r6hgvfucla1.png?width=2388&format=png&auto=webp&s=5432eac3eeed8583e4309af1fdc7ebecac705796

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain](https://github.com/hwchase17/langchain) and [Deep Lake](https://github.com/activeloopai/deeplake) come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article](https://www.activeloop.ai/resources/ultimate-guide-to-lang-chain-deep-lake-build-chat-gpt-to-answer-questions-on-your-financial-data/) to learn:

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\#LangChain](https://www.linkedin.com/feed/hashtag/?keywords=langchain&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) and [\#DeepLake](https://www.linkedin.com/feed/hashtag/?keywords=deeplake&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) together to build [\#ChatGPT](https://www.linkedin.com/feed/hashtag/?keywords=chatgpt&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",gpt,machinelearning,5.962176787258375e-05,2.7893224735711694e-06,2023-03-02 16:47:40,"

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain]( and [Deep Lake]( come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article]( to learn

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\LangChain]( and [\DeepLake]( together to build [\ChatGPT]( for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",11 days 07:12:20,11.30023148148148,0.011,0.886,0.103,0.9458,pos,5.961999056559467e-05,2.1972245773362196,2.5096180818339255,21.240734741774645
11akisx,2219,2023-02-24 06:26:36,Is there a way to easily train ChatGPT or GPT on custom knowledge?,senttoschool,False,0.99,118,https://www.reddit.com/r/learnmachinelearning/comments/11akisx/is_there_a_way_to_easily_train_chatgpt_or_gpt_on/,46,1677219996.0,"My company has internal documents. It'd be nice to be able to have GPT look over it, and then I can ask it questions on the internal documents.",gpt,machinelearning,4.114250648517475e-05,1.6038604223034224e-05,2023-02-24 06:26:36,"My company has internal documents. It'd be nice to be able to have GPT look over it, and then I can ask it questions on the internal documents.",17 days 17:33:24,17.731527777777778,0.0,0.903,0.097,0.4215,pos,4.1141660155530045e-05,3.8501476017100584,2.9302080816173377,21.24040349603741
11dc5b4,2239,2023-02-27 13:42:55,Can you fine-tune chatGPT in your data as of now?,Melodic_Stomach_2704,False,0.91,58,https://www.reddit.com/r/learnmachinelearning/comments/11dc5b4/can_you_finetune_chatgpt_in_your_data_as_of_now/,33,1677505375.0, I know that model is not publicly available so it's not possible to do it locally. But can you train or fine-tune chatGPT on your data using their API? I see many misguiding articles on the internet that are fine-tuning other GPT models claiming chatGPT.,gpt,machinelearning,2.0222587933390978e-05,1.1505955203481075e-05,2023-02-27 13:42:55, I know that model is not publicly available so it's not possible to do it locally. But can you train or fine-tune chatGPT on your data using their API? I see many misguiding articles on the internet that are fine-tuning other GPT models claiming chatGPT.,14 days 10:17:05,14.428530092592593,0.0,1.0,0.0,0.0,neu,2.022238345955261e-05,3.5263605246161616,2.736218398881504,21.240573631573977
118iccl,2243,2023-02-21 23:18:46,"How big was GPT-3.5's training dataset, and are there any good heuristics for how large an ML dataset needs to be for it to be good?",TikkunCreation,False,0.94,54,https://www.reddit.com/r/learnmachinelearning/comments/118iccl/how_big_was_gpt35s_training_dataset_and_are_there/,6,1677021526.0,"Say I want to do a model for fixing bugs in code. How many examples do I need for it to be good?

Or say I want to do a model for scoring boxing matches. How many examples do I need for it to be good?",gpt,machinelearning,1.8827926696605396e-05,2.0919918551783773e-06,2023-02-21 23:18:46,"Say I want to do a model for fixing bugs in code. How many examples do I need for it to be good?

Or say I want to do a model for scoring boxing matches. How many examples do I need for it to be good?",20 days 00:41:14,20.02863425925926,0.0,0.804,0.196,0.7757,pos,1.8827749453420277e-05,1.9459101490553132,3.045885045107382,21.240285156318095
11mzbrs,2268,2023-03-09 18:15:03,Training Transformer Networks in Scikit-Learn?!,cmauck10,False,0.89,30,https://www.reddit.com/r/learnmachinelearning/comments/11mzbrs/training_transformer_networks_in_scikitlearn/,2,1678385703.0,"Have you ever wanted to use handy scikit-learn functionalities with your neural networks, but couldn’t because TensorFlow models are not compatible with the scikit-learn API?

I’m excited to introduce one-line wrappers for TensorFlow/Keras models that enable you to use TensorFlow models within scikit-learn workflows with features like Pipeline, GridSearch, and more.

[Swap in one line of code to use keras\/TF models with scikit-learn.](https://preview.redd.it/ulmww4ovwqma1.png?width=960&format=png&auto=webp&s=6da7628298976fc3d72e771abe2546bbf32c1e0e)

Transformers are extremely popular for modeling text nowadays with GPT3, ChatGPT, Bard, PaLM, FLAN excelling for conversational AI and other Transformers like T5 & BERT excelling for text classification. Scikit-learn offers a broadly useful suite of features for classifier models, but these are hard to use with Transformers. However not if you use these wrappers we developed, which only require changing one line of code to make your existing Tensorflow/Keras model compatible with scikit-learn’s rich ecosystem!

All you have to do is swap `keras.Model` → `KerasWrapperModel`, or `keras.Sequential` → `KerasSequentialWrapper`. The wrapper objects have all the same methods as their keras counterparts, plus you can use them with tons of awesome scikit-learn methods.

You can find a demo jupyter notebook and read more about the wrappers here: [https://cleanlab.ai/blog/transformer-sklearn/](https://cleanlab.ai/blog/transformer-sklearn/)",gpt,machinelearning,1.0459959275891886e-05,6.973306183927923e-07,2023-03-09 18:15:03,"Have you ever wanted to use handy scikit-learn functionalities with your neural networks, but couldn’t because TensorFlow models are not compatible with the scikit-learn API?

I’m excited to introduce one-line wrappers for TensorFlow/Keras models that enable you to use TensorFlow models within scikit-learn workflows with features like Pipeline, GridSearch, and more.

[Swap in one line of code to use keras\/TF models with scikit-learn.](

Transformers are extremely popular for modeling text nowadays with GPT3, ChatGPT, Bard, PaLM, FLAN excelling for conversational AI and other Transformers like T5 & BEexcelling for text classification. Scikit-learn offers a broadly useful suite of features for classifier models, but these are hard to use with Transformers. However not if you use these wrappers we developed, which only require changing one line of code to make your existing Tensorflow/Keras model compatible with scikit-learn’s rich ecosystem!

All you have to do is swap `keras.Model` → `KerasWrapperModel`, or `keras.Sequential` → `KerasSequentialWrapper`. The wrapper objects have all the same methods as their keras counterparts, plus you can use them with tons of awesome scikit-learn methods.

You can find a demo jupyter notebook and read more about the wrappers here [",4 days 05:44:57,4.239548611111111,0.008,0.834,0.158,0.9878,pos,1.0459904570851093e-05,1.0986122886681098,1.6562353517047097,21.24109827793419
11g7h03,2288,2023-03-02 16:47:40,Build ChatGPT for Financial Documents with LangChain + Deep Lake,davidbun,False,0.95,171,https://www.reddit.com/r/learnmachinelearning/comments/11g7h03/build_chatgpt_for_financial_documents_with/,8,1677775660.0,"https://preview.redd.it/h9r6hgvfucla1.png?width=2388&format=png&auto=webp&s=5432eac3eeed8583e4309af1fdc7ebecac705796

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain](https://github.com/hwchase17/langchain) and [Deep Lake](https://github.com/activeloopai/deeplake) come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article](https://www.activeloop.ai/resources/ultimate-guide-to-lang-chain-deep-lake-build-chat-gpt-to-answer-questions-on-your-financial-data/) to learn:

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\#LangChain](https://www.linkedin.com/feed/hashtag/?keywords=langchain&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) and [\#DeepLake](https://www.linkedin.com/feed/hashtag/?keywords=deeplake&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) together to build [\#ChatGPT](https://www.linkedin.com/feed/hashtag/?keywords=chatgpt&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",gpt,machinelearning,5.962176787258375e-05,2.7893224735711694e-06,2023-03-02 16:47:40,"

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain]( and [Deep Lake]( come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article]( to learn

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\LangChain]( and [\DeepLake]( together to build [\ChatGPT]( for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",11 days 07:12:20,11.30023148148148,0.011,0.886,0.103,0.9458,pos,5.961999056559467e-05,2.1972245773362196,2.5096180818339255,21.240734741774645
118iccl,2301,2023-02-21 23:18:46,"How big was GPT-3.5's training dataset, and are there any good heuristics for how large an ML dataset needs to be for it to be good?",TikkunCreation,False,0.93,53,https://www.reddit.com/r/learnmachinelearning/comments/118iccl/how_big_was_gpt35s_training_dataset_and_are_there/,6,1677021526.0,"Say I want to do a model for fixing bugs in code. How many examples do I need for it to be good?

Or say I want to do a model for scoring boxing matches. How many examples do I need for it to be good?",gpt,machinelearning,1.8479261387409e-05,2.0919918551783773e-06,2023-02-21 23:18:46,"Say I want to do a model for fixing bugs in code. How many examples do I need for it to be good?

Or say I want to do a model for scoring boxing matches. How many examples do I need for it to be good?",20 days 00:41:14,20.02863425925926,0.0,0.804,0.196,0.7757,pos,1.8479090647869084e-05,1.9459101490553132,3.045885045107382,21.240285156318095
117f8ms,2342,2023-02-20 17:41:43,GPT2 last hidden states vs Large Sentence Encoder,KahlessAndMolor,False,0.9,7,https://www.reddit.com/r/learnmachinelearning/comments/117f8ms/gpt2_last_hidden_states_vs_large_sentence_encoder/,3,1676914903.0,"Hello!

&#x200B;

I have 2 different applications I'm working on in this project:

&#x200B;

1. A text classifier
2. A similarity finder: Here's a list of 10 text documents, get a similarity index across them (for a total of 100 pairs) and return the top 10 that aren't self-referencing. That is, excluding the text #3 vs text #3 = 1.00 similarity type of outputs.

I have previously used google's sentence encoder/large for this purpose and I've had pretty good results. It returns a single vector of length 768 no matter how many tokens I send it. This results in downstream models with an acceptable number of parameters for running in production without breaking the bank on enormous virtual machines.

&#x200B;

Now, I'd like to use the GPT2/XL model from Huggingface. If I give it an input string of 8 tokens, I get back a TFBaseModelOutputWithPastAndCrossAttentions. This contains a last\_hidden\_states, which I understand to be the last layer outputs before sending to a head used for a particular task. This is similar to the output of the sentence encoder, I think. When I look at the last\_hidden\_states, I'm getting a shape of (# of tokens, 1600). I did a cosine similarity between the first and last tokens:

&#x200B;

cosine\_similarity(output.last\_hidden\_state\[0\]\[0\].numpy().reshape(1, -1), output.last\_hidden\_state\[0\]\[-1\].numpy().reshape(1, -1)) 

&#x200B;

And it returned 0.4346, indicating there's substantially different data from the first to the last token. I imagine this only increases as I use more and more tokens. 

&#x200B;

It would be nice if I could capture the greater power of the GPT model into a fixed-length vector so I could then easily use it in down-stream tasks. But, I also don't need to lose all that information.

&#x200B;

So if I'm feeding this output to a further downstream task, should I:

&#x200B;

\- Send it on through as a 2D tensor with the whole thing in there: This would result in a possibly huge model size down the road, which might lead to a need for a huge amount of data to train

&#x200B;

\- Flatten the whole thing and send a vector of 12,800 (8 tokens \* 1600 per token) to the downstream task. Same issue, might require a large number of parameters.

&#x200B;

\- Use only the first or the last of these. Feels like I might be losing a lot of the meaning of the overall text, especially if the body of the text is quite large

&#x200B;

\- Use a dimensionality reduction technique like isomap to reduce the last hidden states into a fixed length? This seems like it could potentially maintain most of the information but reduce the dimensions for a manageable down-stream model size.

&#x200B;

What do you think, and why?

&#x200B;

Thank you kind friends.",gpt,machinelearning,2.4406571643747734e-06,1.0459959275891887e-06,2023-02-20 17:41:43,"Hello!

&x200B;

I have 2 different applications I'm working on in this project

&x200B;

1. A text classifier
2. A similarity finder Here's a list of 10 text documents, get a similarity index across them (for a total of 100 pairs) and return the top 10 that aren't self-referencing. That is, excluding the text 3 vs text 3 = 1.00 similarity type of outputs.

I have previously used google's sentence encoder/large for this purpose and I've had pretty good results. It returns a single vector of length 768 no matter how many tokens I send it. This results in downstream models with an acceptable number of parameters for running in production without breaking the bank on enormous virtual machines.

&x200B;

Now, I'd like to use the GPT2/XL model from Huggingface. If I give it an input string of 8 tokens, I get back a TFBaseModelOutputWithPastAndCrossAttentions. This contains a last\_hidden\_states, which I understand to be the last layer outputs before sending to a head used for a particular task. This is similar to the output of the sentence encoder, I think. When I look at the last\_hidden\_states, I'm getting a shape of ( of tokens, 1600). I did a cosine similarity between the first and last tokens

&x200B;

cosine\_similarity(output.last\_hidden\_state\[0\]\[0\].numpy().reshape(1, -1), output.last\_hidden\_state\[0\]\[-1\].numpy().reshape(1, -1)) 

&x200B;

And it returned 0.4346, indicating there's substantially different data from the first to the last token. I imagine this only increases as I use more and more tokens. 

&x200B;

It would be nice if I could capture the greater power of the GPT model into a fixed-length vector so I could then easily use it in down-stream tasks. But, I also don't need to lose all that information.

&x200B;

So if I'm feeding this output to a further downstream task, should I

&x200B;

\- Send it on through as a 2D tensor with the whole thing in there This would result in a possibly huge model size down the road, which might lead to a need for a huge amount of data to train

&x200B;

\- Flatten the whole thing and send a vector of 12,800 (8 tokens \* 1600 per token) to the downstream task. Same issue, might require a large number of parameters.

&x200B;

\- Use only the first or the last of these. Feels like I might be losing a lot of the meaning of the overall text, especially if the body of the text is quite large

&x200B;

\- Use a dimensionality reduction technique like isomap to reduce the last hidden states into a fixed length? This seems like it could potentially maintain most of the information but reduce the dimensions for a manageable down-stream model size.

&x200B;

What do you think, and why?

&x200B;

Thank you kind friends.",21 days 06:18:17,21.26269675925926,0.011,0.862,0.127,0.992,pos,2.4406541859720676e-06,1.3862943611198906,3.1029124867242484,21.240221575506574
117hd0f,2350,2023-02-20 19:01:54,Master ChatGPT Prompt Engineering (Deep Dive),jeyThaswan,False,0.8,6,https://www.reddit.com/r/learnmachinelearning/comments/117hd0f/master_chatgpt_prompt_engineering_deep_dive/,2,1676919714.0," 

I wrote a deep dive on prompt engineering as a resource for the AI community and my 10,000 daily newsletter subscribers ([Inclined.ai](https://www.inclined.ai/p/prompt-engineering-guide) if you're curious). We've included some examples so feel free to copy and paste the prompts into ChatGPT!

&#x200B;

**WHAT IS PROMPT ENGINEERING?**

The term is relatively new, and its origins are argued *(because we live in the internet age, and it’s harder to claim ownership)*. Prompt engineering is the ability to instruct and teach AI effectively.

If it helps, think of this as rapid testing or instruction writing for artificial intelligence.

What’s important is not to let this overwhelm you. The first prompting happened with the first AI model. The first example was showing computer images of circles and triangles. **Today’s neural networks can process way more data, creating complexities.**

So, the concept is simple, but digging into the full power of AI today is something else entirely.

We’re not talking about asking questions. Odds are, if you’re typing *“what’s 2+2”* into ChatGPT, then you need to keep reading.

We can all ask chatbots questions. That can work more often than not. But AI is not perfect. A common metaphor I see is to treat GPT-based large language models like the smartest five-year-old you’ve ever met.

I have a niece around that age and can’t imagine trying to get her to write an essay on the effects of soil mismanagement in relation to Reconstruction politics. *See! Your eyes glazed over reading that, so how do we make this work for our AI buddies?*

The Principles of Prompting

Stop asking single-line questions. *That’s like using a top-rated cookbook to find out how to make grilled cheese.*

**There are three ways to instantly get better at prompting** and go from grilled cheese to top-notch bolognese. From there, we can get into some specific prompt concepts and the ability to unlock ChatGPT’s full potential.

Principle 1: Context is King

GPT-3.5 is swimming in data. When you ask it for a simple request, it can end up complicating things more than you realize. Did you ever wonder why ChatGPT is so bad at math?

The reality is the LLM is taking words and turning them into patterns. From there, it’s making an educated guess.

Give your chat AI a frame to search into. If you give it a math problem, you need to make sure it grasps that you want it to do math. If you’d like ChatGPT to write a high school essay, you must ensure it knows to write at that level.

**Instead of:** “Plan a party for a kid.”

**Try:** “My child is turning 9. They like superheroes and the color red. Help me plan a party for this weekend. Ten of his friends are coming to my house.”

You’ll get a much better response this way. **Context is the cardinal direction** that helps your chat companion find the most correct guess and phrase it the best way.

Principle 2: Get Specific

Pretend you’re writing a law that’s going to be judged by the Supreme Court of the United States. You know what they look for: narrow tailoring.

**Keep things on track and stay focused.** Try to avoid prompting outside the specific request. You’ll only hurt the ability of the chat AI to give you a quality response. Odds are they’ll even skip over parts if you confuse them with too many requests.

It runs parallel with context. *If you set ChatGPT up in a room and then tell it to focus on describing the chair first, you’ll see better results.*

**Instead of:** “I’m going to a job interview. Write five questions for me to answer. Add tips for how to not get nervous before the interview. Do not create questions asking about my background.”

**Try:** “You’re interviewing a software engineer. Create five questions to ask them to understand their skill set and qualifications better.”

Nothing limits the number of prompts you can do. Focus and expand from the initial request and try not to do everything at once.

Principle 3: When in Doubt: “Let’s take this step-by-step.”

Welcome. **You discovered the magic word today.** This phrase slows everything down for the AI and gets you where you need to go.

You don’t need to start with this phrase. Using it tells ChatGPT to show their work.

We’ll explain where this concept comes from further in our briefing, but here’s the TL;DR: sometimes, there’s a part of our prompt it’s not identified correctly. “Let’s take this step-by-step,” reminds you and ChatGPT to **slow down and get specific.**

If you learn to utilize this phrase more often and find ways to make it work for you, you’ll become a better prompt engineer. One term can do a lot of heavy lifting.

**Pro-tip:** We’ve shown you “standard” prompts in all these examples. Many prompt engineers will use “Standard QA form” prompts. Here’s our example for this principle written that way.

**Example:**

*“Q: The Industrial Revolution rapidly changed the infrastructure in London. Describe three essential innovations from this period and connect them to Landon’s development.*

*A: Let’s take this step-by-step.”*

Even without our magic word, this style of standard prompting is quite helpful to adopt.

*However, we’re beginning to stumble into the advanced tactics used in prompt engineering, so it’s time for a new section.*

UNIQUE WAYS TO PROMPT

Let’s preface this: we can go super deep here. Prompt engineering is changing daily, and as these models get more sophisticated, the need to adapt prompts strengthens.

To keep things clean, I will go through these using our metaphor from earlier. **Let’s pretend ChatGPT is a super-intelligent toddler.**

*Got it? With that buy-in, we can continue.*

1/ Role Prompting

We’ll start with a popular tactic. **Our toddler is great at imagining things.** You tell them they’re a fireman, and suddenly they can give you detailed ways to ensure your apartment is up to code. Role-playing is a fun, easy way to build context.

The best part of role prompting is how easy it is to understand and use. All you need to do is tell ChatGPT to play a role. From there, the AI will do its best to fill the part *like that enthusiastic drama student from your old high school.*

You can even take this a step further. **Try framing your prompt as a script.** Tell the LLM specific instructions around a scene that gives you the answer to your question.

TRY IT OUT FOR YOURSELF:

Copy this prompt into ChatGPT and find a destination!

“Act as a travel guide. I will tell you my location and you will suggest a place to visit near my location. In some cases, I will also give you the type of places I will visit. You will also suggest me places of similar type that are close to my first location. My first suggestion: \[fill it in\]”

Why would you take that extra step? While popular, role prompting does not necessarily improve accuracy. *You can tell your five-year-old they’re a mathematician, and they’ll still manage to screw things up.*

Let’s get deeper.

2/ Chain-of-Thought Prompting

There’s a scene in ***Guardians of the Galaxy*** where Rocket Raccoon is trying to [teach young Groot](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwczovL3lvdXR1LmJlL0hyaW1mZ2pmNGs4IiwicG9zdF9pZCI6ImM0ODlmMzhkLTY3NDAtNGRmNS05MWJjLTM1ODA0YTVmNTZkMiIsInB1YmxpY2F0aW9uX2lkIjoiNjNkODQ2ZGUtZDFiZi00ZTVjLWJjYzgtOWMxYzlkMWIxMjA0IiwidmlzaXRfdG9rZW4iOiJkZWRiNmMyNy1hYmM0LTQ5ZDUtYWM2Ny04OTcyZmM1MGVmM2QiLCJpYXQiOjE2NzY5MTkwNjguMTUyLCJpc3MiOiJvcmNoaWQifQ.5eZkDLGRLCXXYv32FYT7kLSbdRK5OK1iemTRf3HVmJw)

how to activate a complicated device. That’s chain-of-thought prompting.

**You take an example question and answer it for ChatGPT.** Show them your chain of thought. Then you give it a new question in the same vein and ask it for an answer.

This prompt style allows you to get more specific. You’re telling your toddler they’re here to answer this particular question with one specific logic pattern.

Within this specific style is two other sub-categories. Let me give the rundown:

* Zero-shot Chain-of-Thought is “Let’s take this step-by-step” you frame the question the same, but don’t give it a precursor. Instead, you ask it to think through the points made. EX: Q: X is A. Y is B. What is C? A: Let’s take this step-by-step.
* Self-consistency is using several responses to find the most accurate answer. You give ChatGPT more swings at the ball. Take the hits and discover the grouping.

TRY IT OUT FOR YOURSELF:

Copy this prompt into ChatGPT and see how accurate it is:

“Q: Which is a faster way to get home?

Option 1: Take an 10 minutes bus, then an 40 minute bus, and finally a 10 minute train.

Option 2: Take a 90 minutes train, then a 45 minute bike ride, and finally a 10 minute bus.

A: Option 1 will take 10+40+10 = 60 minutes.

Option 2 will take 90+45+10=145 minutes.

Since Option 1 takes 60 minutes and Option 2 takes 145 minutes, Option 1 is faster.

Q: Which is a faster way to get to work?

Option 1: Take a 1000 minute bus, then a half hour train, and finally a 10 minute bike ride.

Option 2: Take an 800 minute bus, then an hour train, and finally a 30 minute bike ride.

A: ”

[Learnprompting.org](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwOi8vTGVhcm5wcm9tcHRpbmcub3JnIiwicG9zdF9pZCI6ImM0ODlmMzhkLTY3NDAtNGRmNS05MWJjLTM1ODA0YTVmNTZkMiIsInB1YmxpY2F0aW9uX2lkIjoiNjNkODQ2ZGUtZDFiZi00ZTVjLWJjYzgtOWMxYzlkMWIxMjA0IiwidmlzaXRfdG9rZW4iOiJkZWRiNmMyNy1hYmM0LTQ5ZDUtYWM2Ny04OTcyZmM1MGVmM2QiLCJpYXQiOjE2NzY5MTkwNjguMTUyLCJpc3MiOiJvcmNoaWQifQ.-wOnVYoMNWXYrR5NOB4YYKp4Lmj-aZq3y-pr4Hou9pE)

\- by leaving the “A:” blank you’re prompting ChatGPT for the answer

Alright, you’re almost there—one more to go.

3/ General Knowledge Prompting

You’re going to notice a trend here. This prompt style also circles context and narrow tailoring.

All you do is tell your toddler how the world works. The cow goes moo. The dog goes woof. So what does a cat say?

It’s an oversimplification, but the core reasoning is there. Show ChatGPT some knowledge and turn that into the only focus for that chat. You can take an article from the internet and summarize it for the model. Make sure to ask if it understands and relay the information to you.

Once you know you have the attention set in the suitable space, get to work. For instance, we can share an Inclined newsletter with it and tell ChatGPT about its structure and tone.

From there, you can provide new information and tell ChatGPT to summarize it within the same structure as Inclined. You both share the same general knowledge now.

TRY IT OUT FOR YOURSELF:

Copy this prompt into ChatGPT and test it out:

“Prompt 1. Look over this article here: \[pick an article\]. Breakdown its structure and general tone.

Prompt 2: Recall the structure and tone you mentioned above. Take that general knowledge and summarize this article: \[pick a new one\] using the same structure and tone.”

Note: this is a heavily simplified version of GA Prompting

Did you know some [people don’t consider](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwczovL25ld3MueWNvbWJpbmF0b3IuY29tL2l0ZW0_aWQ9MzQ0OTU0NTUiLCJwb3N0X2lkIjoiYzQ4OWYzOGQtNjc0MC00ZGY1LTkxYmMtMzU4MDRhNWY1NmQyIiwicHVibGljYXRpb25faWQiOiI2M2Q4NDZkZS1kMWJmLTRlNWMtYmNjOC05YzFjOWQxYjEyMDQiLCJ2aXNpdF90b2tlbiI6ImRlZGI2YzI3LWFiYzQtNDlkNS1hYzY3LTg5NzJmYzUwZWYzZCIsImlhdCI6MTY3NjkxOTA2OC4xNTMsImlzcyI6Im9yY2hpZCJ9.yHKIPujINT89tsqOo07AXk6OrKNgoMjO3fBEYPkAdNY)

that prompt engineering?

PROMPT CULTURE

*“How can something not be prompt engineering if it’s a prompt style?”*

Good question, imaginary reader. The culture around this skill is relatively fresh. So some of **these concepts are seen as too easy** to be considered accurate prompt testing.

General knowledge prompting is simply establishing the context, and for some, that’s a baseline everyone needs to do. The same can be said for role prompting, too. *All of these tiny preferences are semantics.*

**Don’t sweat whether you’re a “real” prompt engineer.** Test this out and share your insights in these communities. The opportunity is there for you.

You may even know about DAN (we’ve covered it in previous newsletters) and other AI hacking methods. Those all start with prompt engineering. You can make the case that unless the AI behaves outside its parameters, you’re not genuinely doing prompt engineering.

I'm afraid I have to disagree with that, and **careers are sprouting up everywhere** that center directly on this skill. **Many require a core understanding of the prompt styles we’ve discussed.**

*Yep, you can learn this and make money from talking with AI.*

Anthropic even [posted a role for a prompt engineer](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwczovL2pvYnMubGV2ZXIuY28vQW50aHJvcGljL2UzY2RlNDgxLWQ0NDYtNDYwZi1iNTc2LTkzY2FiNjdiZDFlZCIsInBvc3RfaWQiOiJjNDg5ZjM4ZC02NzQwLTRkZjUtOTFiYy0zNTgwNGE1ZjU2ZDIiLCJwdWJsaWNhdGlvbl9pZCI6IjYzZDg0NmRlLWQxYmYtNGU1Yy1iY2M4LTljMWM5ZDFiMTIwNCIsInZpc2l0X3Rva2VuIjoiZGVkYjZjMjctYWJjNC00OWQ1LWFjNjctODk3MmZjNTBlZjNkIiwiaWF0IjoxNjc2OTE5MDY4LjE1MywiaXNzIjoib3JjaGlkIn0.4s7Htzgoxv0_qM1Ten17oQ5h0_QGM6e1fGUYz_ymgJ4)

that nets a quarter million in salary. I did not make that up and even considered sprucing up the old resume. When a new skill like this comes about, it’s worth looking at.

There are many other examples like this, and OpenAI uses a red teaming strategy where their engineers attempt to prompt hack their own GPT models.

I can tell you all about the open roles here, but tomorrow the whole cycle will change. *Isn’t that exciting, though?* The entire identity around prompt engineering will change by this time next year.

WHAT SHOULD YOU TAKEAWAY?

Communication is everything. **Learning to speak with AI is rising in importance.**

We all watch with mouth agape at the new wonders in AI because we know this will disrupt every industry. If any of this piqued your interest, the window to pursue it is now open. Ride that wave and [learn](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwczovL2xlYXJucHJvbXB0aW5nLm9yZy8iLCJwb3N0X2lkIjoiYzQ4OWYzOGQtNjc0MC00ZGY1LTkxYmMtMzU4MDRhNWY1NmQyIiwicHVibGljYXRpb25faWQiOiI2M2Q4NDZkZS1kMWJmLTRlNWMtYmNjOC05YzFjOWQxYjEyMDQiLCJ2aXNpdF90b2tlbiI6ImRlZGI2YzI3LWFiYzQtNDlkNS1hYzY3LTg5NzJmYzUwZWYzZCIsImlhdCI6MTY3NjkxOTA2OC4xNTMsImlzcyI6Im9yY2hpZCJ9.a67KDSN9yQfZsaMeHpdcbSbtPjD4yFcGW4stdxBjX1M)

to become a brilliant prompt engineer.

Heck, even if you don’t want to switch careers, **talking with ChatGPT and all the newest LLMs is becoming a part of our daily routine.** Get to the point where you maximize every interaction and work with these chatbots to upskill your workflow.

Prompt engineering can save you time, eliminate hassle, and even help you become a more patient person. Focus on what you want and explain it with intent.

Make magic happen, and remember: **take it step-by-step.**",gpt,machinelearning,2.0919918551783773e-06,6.973306183927923e-07,2023-02-20 19:01:54," 

I wrote a deep dive on prompt engineering as a resource for the AI community and my 10,000 daily newsletter subscribers ([Inclined.ai]( if you're curious). We've included some examples so feel free to copy and paste the prompts into ChatGPT!

&x200B;

**WHAT IS PROMPT ENGINEERING?**

The term is relatively new, and its origins are argued *(because we live in the internet age, and it’s harder to claim ownership)*. Prompt engineering is the ability to instruct and teach AI effectively.

If it helps, think of this as rapid testing or instruction writing for artificial intelligence.

What’s important is not to let this overwhelm you. The first prompting happened with the first AI model. The first example was showing computer images of circles and triangles. **Today’s neural networks can process way more data, creating complexities.**

So, the concept is simple, but digging into the full power of AI today is something else entirely.

We’re not talking about asking questions. Odds are, if you’re typing *“what’s 2+2”* into ChatGPT, then you need to keep reading.

We can all ask chatbots questions. That can work more often than not. But AI is not perfect. A common metaphor I see is to treat GPT-based large language models like the smartest five-year-old you’ve ever met.

I have a niece around that age and can’t imagine trying to get her to write an essay on the effects of soil mismanagement in relation to Reconstruction politics. *See! Your eyes glazed over reading that, so how do we make this work for our AI buddies?*

The Principles of Prompting

Stop asking single-line questions. *That’s like using a top-rated cookbook to find out how to make grilled cheese.*

**There are three ways to instantly get better at prompting** and go from grilled cheese to top-notch bolognese. From there, we can get into some specific prompt concepts and the ability to unlock ChatGPT’s full potential.

Principle 1 Context is King

GPT-3.5 is swimming in data. When you ask it for a simple request, it can end up complicating things more than you realize. Did you ever wonder why ChatGPT is so bad at math?

The reality is the LLM is taking words and turning them into patterns. From there, it’s making an educated guess.

Give your chat AI a frame to search into. If you give it a math problem, you need to make sure it grasps that you want it to do math. If you’d like ChatGPT to write a high school essay, you must ensure it knows to write at that level.

**Instead of** “Plan a party for a kid.”

**Try** “My child is turning 9. They like superheroes and the color red. Help me plan a party for this weekend. Ten of his friends are coming to my house.”

You’ll get a much better response this way. **Context is the cardinal direction** that helps your chat companion find the most correct guess and phrase it the best way.

Principle 2 Get Specific

Pretend you’re writing a law that’s going to be judged by the Supreme Court of the United States. You know what they look for narrow tailoring.

**Keep things on track and stay focused.** Try to avoid prompting outside the specific request. You’ll only hurt the ability of the chat AI to give you a quality response. Odds are they’ll even skip over parts if you confuse them with too many requests.

It runs parallel with context. *If you set ChatGPT up in a room and then tell it to focus on describing the chair first, you’ll see better results.*

**Instead of** “I’m going to a job interview. Write five questions for me to answer. Add tips for how to not get nervous before the interview. Do not create questions asking about my background.”

**Try** “You’re interviewing a software engineer. Create five questions to ask them to understand their skill set and qualifications better.”

Nothing limits the number of prompts you can do. Focus and expand from the initial request and try not to do everything at once.

Principle 3 When in Doubt “Let’s take this step-by-step.”

Welcome. **You discovered the magic word today.** This phrase slows everything down for the AI and gets you where you need to go.

You don’t need to start with this phrase. Using it tells ChatGPT to show their work.

We’ll explain where this concept comes from further in our briefing, but here’s the TL;DR sometimes, there’s a part of our prompt it’s not identified correctly. “Let’s take this step-by-step,” reminds you and ChatGPT to **slow down and get specific.**

If you learn to utilize this phrase more often and find ways to make it work for you, you’ll become a better prompt engineer. One term can do a lot of heavy lifting.

**Pro-tip** We’ve shown you “standard” prompts in all these examples. Many prompt engineers will use “Standard QA form” prompts. Here’s our example for this principle written that way.

**Example**

*“Q The Industrial Revolution rapidly changed the infrastructure in London. Describe three essential innovations from this period and connect them to Landon’s development.*

*A Let’s take this step-by-step.”*

Even without our magic word, this style of standard prompting is quite helpful to adopt.

*However, we’re beginning to stumble into the advanced tactics used in prompt engineering, so it’s time for a new section.*

UNIQUE WAYS TO PROMPT

Let’s preface this we can go super deep here. Prompt engineering is changing daily, and as these models get more sophisticated, the need to adapt prompts strengthens.

To keep things clean, I will go through these using our metaphor from earlier. **Let’s pretend ChatGPT is a super-intelligent toddler.**

*Got it? With that buy-in, we can continue.*

1/ Role Prompting

We’ll start with a popular tactic. **Our toddler is great at imagining things.** You tell them they’re a fireman, and suddenly they can give you detailed ways to ensure your apartment is up to code. Role-playing is a fun, easy way to build context.

The best part of role prompting is how easy it is to understand and use. All you need to do is tell ChatGPT to play a role. From there, the AI will do its best to fill the part *like that enthusiastic drama student from your old high school.*

You can even take this a step further. **Try framing your prompt as a script.** Tell the LLM specific instructions around a scene that gives you the answer to your question.

TRY IT OUT FOR YOURSELF

Copy this prompt into ChatGPT and find a destination!

“Act as a travel guide. I will tell you my location and you will suggest a place to visit near my location. In some cases, I will also give you the type of places I will visit. You will also suggest me places of similar type that are close to my first location. My first suggestion \[fill it in\]”

Why would you take that extra step? While popular, role prompting does not necessarily improve accuracy. *You can tell your five-year-old they’re a mathematician, and they’ll still manage to screw things up.*

Let’s get deeper.

2/ Chain-of-Thought Prompting

There’s a scene in ***Guardians of the Galaxy*** where Rocket Raccoon is trying to [teach young Groot](

how to activate a complicated device. That’s chain-of-thought prompting.

**You take an example question and answer it for ChatGPT.** Show them your chain of thought. Then you give it a new question in the same vein and ask it for an answer.

This prompt style allows you to get more specific. You’re telling your toddler they’re here to answer this particular question with one specific logic pattern.

Within this specific style is two other sub-categories. Let me give the rundown

* Zero-shot Chain-of-Thought is “Let’s take this step-by-step” you frame the question the same, but don’t give it a precursor. Instead, you ask it to think through the points made. EX Q X is A. Y is B. What is C? A Let’s take this step-by-step.
* Self-consistency is using several responses to find the most accurate answer. You give ChatGPT more swings at the ball. Take the hits and discover the grouping.

TRY IT OUT FOR YOURSELF

Copy this prompt into ChatGPT and see how accurate it is

“Q Which is a faster way to get home?

Option 1 Take an 10 minutes bus, then an 40 minute bus, and finally a 10 minute train.

Option 2 Take a 90 minutes train, then a 45 minute bike ride, and finally a 10 minute bus.

A Option 1 will take 10+40+10 = 60 minutes.

Option 2 will take 90+45+10=145 minutes.

Since Option 1 takes 60 minutes and Option 2 takes 145 minutes, Option 1 is faster.

Q Which is a faster way to get to work?

Option 1 Take a 1000 minute bus, then a half hour train, and finally a 10 minute bike ride.

Option 2 Take an 800 minute bus, then an hour train, and finally a 30 minute bike ride.

A ”

[Learnprompting.org](

\- by leaving the “A” blank you’re prompting ChatGPT for the answer

Alright, you’re almost there—one more to go.

3/ General Knowledge Prompting

You’re going to notice a trend here. This prompt style also circles context and narrow tailoring.

All you do is tell your toddler how the world works. The cow goes moo. The dog goes woof. So what does a cat say?

It’s an oversimplification, but the core reasoning is there. Show ChatGPT some knowledge and turn that into the only focus for that chat. You can take an article from the internet and summarize it for the model. Make sure to ask if it understands and relay the information to you.

Once you know you have the attention set in the suitable space, get to work. For instance, we can share an Inclined newsletter with it and tell ChatGPT about its structure and tone.

From there, you can provide new information and tell ChatGPT to summarize it within the same structure as Inclined. You both share the same general knowledge now.

TRY IT OUT FOR YOURSELF

Copy this prompt into ChatGPT and test it out

“Prompt 1. Look over this article here \[pick an article\]. Breakdown its structure and general tone.

Prompt 2 Recall the structure and tone you mentioned above. Take that general knowledge and summarize this article \[pick a new one\] using the same structure and tone.”

Note this is a heavily simplified version of GA Prompting

Did you know some [people don’t consider](

that prompt engineering?

PROMPT CULTURE

*“How can something not be prompt engineering if it’s a prompt style?”*

Good question, imaginary reader. The culture around this skill is relatively fresh. So some of **these concepts are seen as too easy** to be considered accurate prompt testing.

General knowledge prompting is simply establishing the context, and for some, that’s a baseline everyone needs to do. The same can be said for role prompting, too. *All of these tiny preferences are semantics.*

**Don’t sweat whether you’re a “real” prompt engineer.** Test this out and share your insights in these communities. The opportunity is there for you.

You may even know about DAN (we’ve covered it in previous newsletters) and other AI hacking methods. Those all start with prompt engineering. You can make the case that unless the AI behaves outside its parameters, you’re not genuinely doing prompt engineering.

I'm afraid I have to disagree with that, and **careers are sprouting up everywhere** that center directly on this skill. **Many require a core understanding of the prompt styles we’ve discussed.**

*Yep, you can learn this and make money from talking with AI.*

Anthropic even [posted a role for a prompt engineer](

that nets a quarter million in salary. I did not make that up and even considered sprucing up the old resume. When a new skill like this comes about, it’s worth looking at.

There are many other examples like this, and OpenAI uses a red teaming strategy where their engineers attempt to prompt hack their own GPT models.

I can tell you all about the open roles here, but tomorrow the whole cycle will change. *Isn’t that exciting, though?* The entire identity around prompt engineering will change by this time next year.

WHAT SHOULD YOU TAKEAWAY?

Communication is everything. **Learning to speak with AI is rising in importance.**

We all watch with mouth agape at the new wonders in AI because we know this will disrupt every industry. If any of this piqued your interest, the window to pursue it is now open. Ride that wave and [learn](

to become a brilliant prompt engineer.

Heck, even if you don’t want to switch careers, **talking with ChatGPT and all the newest LLMs is becoming a part of our daily routine.** Get to the point where you maximize every interaction and work with these chatbots to upskill your workflow.

Prompt engineering can save you time, eliminate hassle, and even help you become a more patient person. Focus on what you want and explain it with intent.

Make magic happen, and remember **take it step-by-step.**",21 days 04:58:06,21.207013888888888,0.021,0.872,0.108,0.9996,pos,2.091989666868002e-06,1.0986122886681098,3.1004081799203456,21.240224444461393
11hp55s,2368,2023-03-04 04:14:37,How to properly format data for AiTextGen Gpt-2,AlphaCloudX,False,1.0,4,https://www.reddit.com/r/learnmachinelearning/comments/11hp55s/how_to_properly_format_data_for_aitextgen_gpt2/,0,1677903277.0,"Currently I'm trying to fine tune gpt-2 on my own dataset. The dataset was scraped from a forum where I got the title of the post, content of the post and the replies. It looks like this:

Q: Question 1?  
C: Context For Question 1...  
A: Reply For Question 1...  
<|endoftext|>

Q: Question 2?  
C: Context For Question 2...  
A: Reply For Question 2...  
A: Another Reply For Question 2...  
<|endoftext|>

Q: Question 3?  
C: Context For Question 3...  
A: Another Reply For Question 3...  
A: Another Reply For Question 3...  
<|endoftext|>

I'm using the aitextgen library for python and pretty much following along with the example. The goal is for it to be able to attempt to answer questions in a conversational way but the caveat being I don't have the context for the answers.

I tried taking a look at other question answering models but they all seem to require some sort of context.

Any idea on how I can improve the formatting of the data or if there are any python libraries I can use for a question answering style or conversational ai?",gpt,machinelearning,1.3946612367855847e-06,0.0,2023-03-04 04:14:37,"Currently I'm trying to fine tune gpt-2 on my own dataset. The dataset was scraped from a forum where I got the title of the post, content of the post and the replies. It looks like this

Q Question 1?  
C Context For Question 1...  
A Reply For Question 1...  
<|endoftext|>

Q Question 2?  
C Context For Question 2...  
A Reply For Question 2...  
A Another Reply For Question 2...  
<|endoftext|>

Q Question 3?  
C Context For Question 3...  
A Another Reply For Question 3...  
A Another Reply For Question 3...  
<|endoftext|>

I'm using the aitextgen library for python and pretty much following along with the example. The goal is for it to be able to attempt to answer questions in a conversational way but the caveat being I don't have the context for the answers.

I tried taking a look at other question answering models but they all seem to require some sort of context.

Any idea on how I can improve the formatting of the data or if there are any python libraries I can use for a question answering style or conversational ai?",9 days 19:45:23,9.82318287037037,0.0,0.942,0.058,0.8426,pos,1.3946602641808623e-06,0.0,2.3816903956287683,21.240810802090536
118mk1d,2377,2023-02-22 02:32:01,How to Use ChatGPT in Python API and Run Batch Jobs with UI,Fun_Pollution_3899,False,0.72,3,https://www.reddit.com/r/learnmachinelearning/comments/118mk1d/how_to_use_chatgpt_in_python_api_and_run_batch/,0,1677033121.0,"I wanted to share a tutorial on how to use ChatGPT in Python API and how to run batch jobs with a UI. ChatGPT is a powerful language model that can generate text in a conversational manner. It can be used for a variety of tasks, such as chatbots, text completion, and more.
Repo: [https://github.com/CodeDiggerM/chatgpt-batch-whipper](https://github.com/CodeDiggerM/chatgpt-batch-whipper)

## Installation
### Use PIP command
1. Install the latest version of this software directly from github with pip:
```bash
  pip install git+https://github.com/CodeDiggerM/chatgpt-batch-whipper.git
```
2. Go to **auth** mode. This will open up a browser window. Log in to ChatGPT in the browser window, then close the browser.
```bash
run_chatgpt auth
```
3. Start the UI
```bash
run_chatgpt ui
```

### Manually set up

1. Clone the repo to your working directory
```bash
git clone https://github.com/CodeDiggerM/chatgpt-batch-whipper.git
```
2. install the dependcy.
```bash
pip install -r requirements.txt
```

3. Install a browser in playwright (if you haven't already).  The program will use firefox by default.

```
playwright install firefox
```

4. Go to the chatgpt-batch-whipper/

```bash
cd chatgpt_batch_whipper/
````

5. Run the main page by streamlit.
you can got to [streamlit](https://github.com/streamlit/streamlit) to check more about streamlit.

```bash
streamlit run start_whipper.py
````
6. Authenticate your openAI account
Click the **auth** button


It will open up an authentication page in the web browser you installed using playwright. Like below, authenticate with your registered account.



## Quickstart

### Use API
1. Grant auth from chatGPT.
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.auth()
print(response) 
```

2. Ask the question to chatGPT
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.ask(""Greeting!"")
print(response) 
```


### Streamlit UI

Now run it to open the app!
```
streamlit run streamlit_app.py
```

#### Single shoot mode

1. select the **Single shoot mode**.
2. Type your prompt then click submit
3. click the submit button

Here are some tips.

#### Fully Automatic mode
You can apply your prompt to multiple records in the **Fully Automatic mode**.

1. Select Fully Automatic mode.
2. Select CSV file.
3. Select column you want to process.
4. Type the prompt.
5. click to Submit.
After processing. The result will appears in the **The processed result** section.

you can check the result and check the ""is false"" then click the **Submit** to reprocess the ""failed"" one.

* You can save the prompt by click **Add** button.
* You can choose the old prompt by select **prompt list**.
* You can delete the old prompt by click **Delete Prompt**.
* You can delete the saved process result by click **Delete Cached result**.
* You can update the saved process result by click **Update**.
* You can download the result file by click **Download**.",gpt,machinelearning,1.0459959275891887e-06,0.0,2023-02-22 02:32:01,"I wanted to share a tutorial on how to use ChatGPT in Python API and how to run batch jobs with a UI. ChatGPT is a powerful language model that can generate text in a conversational manner. It can be used for a variety of tasks, such as chatbots, text completion, and more.
Repo [

 Installation
 Use PIP command
1. Install the latest version of this software directly from github with pip
```bash
  pip install git+
```
2. Go to **auth** mode. This will open up a browser window. Log in to ChatGPT in the browser window, then close the browser.
```bash
run_chatgpt auth
```
3. Start the UI
```bash
run_chatgpt ui
```

 Manually set up

1. Clone the repo to your working directory
```bash
git clone 
```
2. install the dependcy.
```bash
pip install -r requirements.txt
```

3. Install a browser in playwright (if you haven't already).  The program will use firefox by default.

```
playwright install firefox
```

4. Go to the chatgpt-batch-whipper/

```bash
cd chatgpt_batch_whipper/
````

5. Run the main page by streamlit.
you can got to [streamlit]( to check more about streamlit.

```bash
streamlit run start_whipper.py
````
6. Authenticate your openAI account
Click the **auth** button


It will open up an authentication page in the web browser you installed using playwright. Like below, authenticate with your registered account.



 Quickstart

 Use API
1. Grant auth from chatGPT.
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.auth()
print(response) 
```

2. Ask the question to chatGPT
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.ask(""Greeting!"")
print(response) 
```


 Streamlit UI

Now run it to open the app!
```
streamlit run streamlit_app.py
```

 Single shoot mode

1. select the **Single shoot mode**.
2. Type your prompt then click submit
3. click the submit button

Here are some tips.

 Fully Automatic mode
You can apply your prompt to multiple records in the **Fully Automatic mode**.

1. Select Fully Automatic mode.
2. Select CSV file.
3. Select column you want to process.
4. Type the prompt.
5. click to Submit.
After processing. The result will appears in the **The processed result** section.

you can check the result and check the ""is false"" then click the **Submit** to reprocess the ""failed"" one.

* You can save the prompt by click **Add** button.
* You can choose the old prompt by select **prompt list**.
* You can delete the old prompt by click **Delete Prompt**.
* You can delete the saved process result by click **Delete Cached result**.
* You can update the saved process result by click **Update**.
* You can download the result file by click **Download**.",19 days 21:27:59,19.89443287037037,0.011,0.941,0.048,0.9311,pos,1.045995380597619e-06,0.0,3.0394827536492803,21.24029207033782
118mk1d,2436,2023-02-22 02:32:01,How to Use ChatGPT in Python API and Run Batch Jobs with UI,Fun_Pollution_3899,False,0.72,3,https://www.reddit.com/r/learnmachinelearning/comments/118mk1d/how_to_use_chatgpt_in_python_api_and_run_batch/,0,1677033121.0,"I wanted to share a tutorial on how to use ChatGPT in Python API and how to run batch jobs with a UI. ChatGPT is a powerful language model that can generate text in a conversational manner. It can be used for a variety of tasks, such as chatbots, text completion, and more.
Repo: [https://github.com/CodeDiggerM/chatgpt-batch-whipper](https://github.com/CodeDiggerM/chatgpt-batch-whipper)

## Installation
### Use PIP command
1. Install the latest version of this software directly from github with pip:
```bash
  pip install git+https://github.com/CodeDiggerM/chatgpt-batch-whipper.git
```
2. Go to **auth** mode. This will open up a browser window. Log in to ChatGPT in the browser window, then close the browser.
```bash
run_chatgpt auth
```
3. Start the UI
```bash
run_chatgpt ui
```

### Manually set up

1. Clone the repo to your working directory
```bash
git clone https://github.com/CodeDiggerM/chatgpt-batch-whipper.git
```
2. install the dependcy.
```bash
pip install -r requirements.txt
```

3. Install a browser in playwright (if you haven't already).  The program will use firefox by default.

```
playwright install firefox
```

4. Go to the chatgpt-batch-whipper/

```bash
cd chatgpt_batch_whipper/
````

5. Run the main page by streamlit.
you can got to [streamlit](https://github.com/streamlit/streamlit) to check more about streamlit.

```bash
streamlit run start_whipper.py
````
6. Authenticate your openAI account
Click the **auth** button


It will open up an authentication page in the web browser you installed using playwright. Like below, authenticate with your registered account.



## Quickstart

### Use API
1. Grant auth from chatGPT.
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.auth()
print(response) 
```

2. Ask the question to chatGPT
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.ask(""Greeting!"")
print(response) 
```


### Streamlit UI

Now run it to open the app!
```
streamlit run streamlit_app.py
```

#### Single shoot mode

1. select the **Single shoot mode**.
2. Type your prompt then click submit
3. click the submit button

Here are some tips.

#### Fully Automatic mode
You can apply your prompt to multiple records in the **Fully Automatic mode**.

1. Select Fully Automatic mode.
2. Select CSV file.
3. Select column you want to process.
4. Type the prompt.
5. click to Submit.
After processing. The result will appears in the **The processed result** section.

you can check the result and check the ""is false"" then click the **Submit** to reprocess the ""failed"" one.

* You can save the prompt by click **Add** button.
* You can choose the old prompt by select **prompt list**.
* You can delete the old prompt by click **Delete Prompt**.
* You can delete the saved process result by click **Delete Cached result**.
* You can update the saved process result by click **Update**.
* You can download the result file by click **Download**.",gpt,machinelearning,1.0459959275891887e-06,0.0,2023-02-22 02:32:01,"I wanted to share a tutorial on how to use ChatGPT in Python API and how to run batch jobs with a UI. ChatGPT is a powerful language model that can generate text in a conversational manner. It can be used for a variety of tasks, such as chatbots, text completion, and more.
Repo [

 Installation
 Use PIP command
1. Install the latest version of this software directly from github with pip
```bash
  pip install git+
```
2. Go to **auth** mode. This will open up a browser window. Log in to ChatGPT in the browser window, then close the browser.
```bash
run_chatgpt auth
```
3. Start the UI
```bash
run_chatgpt ui
```

 Manually set up

1. Clone the repo to your working directory
```bash
git clone 
```
2. install the dependcy.
```bash
pip install -r requirements.txt
```

3. Install a browser in playwright (if you haven't already).  The program will use firefox by default.

```
playwright install firefox
```

4. Go to the chatgpt-batch-whipper/

```bash
cd chatgpt_batch_whipper/
````

5. Run the main page by streamlit.
you can got to [streamlit]( to check more about streamlit.

```bash
streamlit run start_whipper.py
````
6. Authenticate your openAI account
Click the **auth** button


It will open up an authentication page in the web browser you installed using playwright. Like below, authenticate with your registered account.



 Quickstart

 Use API
1. Grant auth from chatGPT.
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.auth()
print(response) 
```

2. Ask the question to chatGPT
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.ask(""Greeting!"")
print(response) 
```


 Streamlit UI

Now run it to open the app!
```
streamlit run streamlit_app.py
```

 Single shoot mode

1. select the **Single shoot mode**.
2. Type your prompt then click submit
3. click the submit button

Here are some tips.

 Fully Automatic mode
You can apply your prompt to multiple records in the **Fully Automatic mode**.

1. Select Fully Automatic mode.
2. Select CSV file.
3. Select column you want to process.
4. Type the prompt.
5. click to Submit.
After processing. The result will appears in the **The processed result** section.

you can check the result and check the ""is false"" then click the **Submit** to reprocess the ""failed"" one.

* You can save the prompt by click **Add** button.
* You can choose the old prompt by select **prompt list**.
* You can delete the old prompt by click **Delete Prompt**.
* You can delete the saved process result by click **Delete Cached result**.
* You can update the saved process result by click **Update**.
* You can download the result file by click **Download**.",19 days 21:27:59,19.89443287037037,0.011,0.941,0.048,0.9311,pos,1.045995380597619e-06,0.0,3.0394827536492803,21.24029207033782
11g7h03,2483,2023-03-02 16:47:40,Build ChatGPT for Financial Documents with LangChain + Deep Lake,davidbun,False,0.95,171,https://www.reddit.com/r/learnmachinelearning/comments/11g7h03/build_chatgpt_for_financial_documents_with/,8,1677775660.0,"https://preview.redd.it/h9r6hgvfucla1.png?width=2388&format=png&auto=webp&s=5432eac3eeed8583e4309af1fdc7ebecac705796

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain](https://github.com/hwchase17/langchain) and [Deep Lake](https://github.com/activeloopai/deeplake) come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article](https://www.activeloop.ai/resources/ultimate-guide-to-lang-chain-deep-lake-build-chat-gpt-to-answer-questions-on-your-financial-data/) to learn:

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\#LangChain](https://www.linkedin.com/feed/hashtag/?keywords=langchain&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) and [\#DeepLake](https://www.linkedin.com/feed/hashtag/?keywords=deeplake&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) together to build [\#ChatGPT](https://www.linkedin.com/feed/hashtag/?keywords=chatgpt&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",gpt,machinelearning,5.962176787258375e-05,2.7893224735711694e-06,2023-03-02 16:47:40,"

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain]( and [Deep Lake]( come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article]( to learn

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\LangChain]( and [\DeepLake]( together to build [\ChatGPT]( for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",11 days 07:12:20,11.30023148148148,0.011,0.886,0.103,0.9458,pos,5.961999056559467e-05,2.1972245773362196,2.5096180818339255,21.240734741774645
11biozs,2593,2023-02-25 11:19:05,Any MLOps platform you use?,squalidaesthetics20,False,0.98,242,https://www.reddit.com/r/learnmachinelearning/comments/11biozs/any_mlops_platform_you_use/,31,1677323945.0,"I've been searching for some MLOps platforms for my some projects that I’m working on. I am creating a list that will hopefully help out with productivity and help mr build better apps and services. Also hopefully faster.

I've looked at some of the more popular ones out there and here’s my top 4 so far. Let me know what you guys think about these:

* [Vertex AI](https://cloud.google.com/vertex-ai) \- An ML platform by Google Cloud. They have AI-powered tools to ingest, analyze, and store video data. Good for image classification, NLP, recommendation systems etc.
* [Jina AI](https://jina.ai/) \-They offer a neural search solution that can help build smarter, more efficient search engines. They also have a list of [cool github repos](https://github.com/jina-ai/jina) that you can check out. Similar to Vertex AI, they have image classification tools, NLPs, fine tuners etc.
* [MLflow](https://mlflow.org/) \- an open-source platform for managing your ML lifecycle. What’s great is that they also support popular Python libraries like TensorFlow, PyTorch, scikit-learn, and R.
* Neptune.ai, which promises to streamline your workflows and make collaboration a breeze.

Have you guys tried any of these platforms? I know a lot of AI tools and platforms have been popping up lately especially with the rise of AI tools but what are your thoughts?",gpt,machinelearning,8.437700482552788e-05,1.0808624585088282e-05,2023-02-25 11:19:05,"I've been searching for some MLOps platforms for my some projects that I’m working on. I am creating a list that will hopefully help out with productivity and help mr build better apps and services. Also hopefully faster.

I've looked at some of the more popular ones out there and here’s my top 4 so far. Let me know what you guys think about these

* [Vertex AI]( \- An ML platform by Google Cloud. They have AI-powered tools to ingest, analyze, and store video data. Good for image classification, NLP, recommendation systems etc.
* [Jina AI]( \-They offer a neural search solution that can help build smarter, more efficient search engines. They also have a list of [cool github repos]( that you can check out. Similar to Vertex AI, they have image classification tools, NLPs, fine tuners etc.
* [MLflow]( \- an open-source platform for managing your ML lifecycle. What’s great is that they also support popular Python libraries like TensorFlow, PyTorch, scikit-learn, and R.
* Neptune.ai, which promises to streamline your workflows and make collaboration a breeze.

Have you guys tried any of these platforms? I know a lot of AI tools and platforms have been popping up lately especially with the rise of AI tools but what are your thoughts?",16 days 12:40:55,16.52841435185185,0.0,0.836,0.164,0.974,pos,8.437344528630898e-05,3.4657359027997265,2.8638232414393547,21.240465471078902
1194vsn,2614,2023-02-22 16:59:33,MIT Introduction to Data-Centric AI,anishathalye,False,0.97,102,https://www.reddit.com/r/learnmachinelearning/comments/1194vsn/mit_introduction_to_datacentric_ai/,4,1677085173.0,"Announcing the [first-ever course on Data-Centric AI](https://dcai.csail.mit.edu/). Learn how to train better ML models by improving the data.

[Course homepage](https://dcai.csail.mit.edu/) | [Lecture videos on YouTube](https://www.youtube.com/watch?v=ayzOzZGHZy4&list=PLnSYPjg2dHQKdig0vVbN-ZnEU0yNJ1mo5) | [Lab Assignments](https://github.com/dcai-course/dcai-lab)

The course covers:

* [Data-Centric AI vs. Model-Centric AI](https://dcai.csail.mit.edu/lectures/data-centric-model-centric/)
* [Label Errors](https://dcai.csail.mit.edu/lectures/label-errors/)
* [Dataset Creation and Curation](https://dcai.csail.mit.edu/lectures/dataset-creation-curation/)
* [Data-centric Evaluation of ML Models](https://dcai.csail.mit.edu/lectures/data-centric-evaluation/)
* [Class Imbalance, Outliers, and Distribution Shift](https://dcai.csail.mit.edu/lectures/imbalance-outliers-shift/)
* [Growing or Compressing Datasets](https://dcai.csail.mit.edu/lectures/growing-compressing-datasets/)
* [Interpretability in Data-Centric ML](https://dcai.csail.mit.edu/lectures/interpretable-features/)
* [Encoding Human Priors: Data Augmentation and Prompt Engineering](https://dcai.csail.mit.edu/lectures/human-priors/)
* [Data Privacy and Security](https://dcai.csail.mit.edu/lectures/data-privacy-security/)

MIT, like most universities, has many courses on machine learning (6.036, 6.867, and many others). Those classes teach techniques to produce effective models for a given dataset, and the classes focus heavily on the mathematical details of models rather than practical applications. However, in real-world applications of ML, the dataset is not fixed, and focusing on improving the data often gives better results than improving the model. We’ve personally seen this time and time again in our applied ML work as well as our research.

Data-Centric AI (DCAI) is an emerging science that studies techniques to improve datasets in a systematic/algorithmic way — given that this topic wasn’t covered in the standard curriculum, we (a group of PhD candidates and grads) thought that we should put together a new class! We taught this intensive 2-week course in January over MIT’s IAP term, and we’ve just published all the course material, including lecture videos, lecture notes, hands-on lab assignments, and lab solutions, in hopes that people outside the MIT community would find these resources useful.

We’d be happy to answer any questions related to the class or DCAI in general, and we’d love to hear any feedback on how we can improve the course material. Introduction to Data-Centric AI is open-source opencourseware, so feel free to make improvements directly: [https://github.com/dcai-course/dcai-course](https://github.com/dcai-course/dcai-course).",gpt,machinelearning,3.5563861538032414e-05,1.3946612367855847e-06,2023-02-22 16:59:33,"Announcing the [first-ever course on Data-Centric AI]( Learn how to train better ML models by improving the data.

[Course homepage]( | [Lecture videos on YouTube]( | [Lab Assignments](

The course covers

* [Data-Centric AI vs. Model-Centric AI](
* [Label Errors](
* [Dataset Creation and Curation](
* [Data-centric Evaluation of ML Models](
* [Class Imbalance, Outliers, and Distribution Shift](
* [Growing or Compressing Datasets](
* [Interpretability in Data-Centric ML](
* [Encoding Human Priors Data Augmentation and Prompt Engineering](
* [Data Privacy and Security](

MIT, like most universities, has many courses on machine learning (6.036, 6.867, and many others). Those classes teach techniques to produce effective models for a given dataset, and the classes focus heavily on the mathematical details of models rather than practical applications. However, in real-world applications of ML, the dataset is not fixed, and focusing on improving the data often gives better results than improving the model. We’ve personally seen this time and time again in our applied ML work as well as our research.

Data-Centric AI (DCAI) is an emerging science that studies techniques to improve datasets in a systematic/algorithmic way — given that this topic wasn’t covered in the standard curriculum, we (a group of PhD candidates and grads) thought that we should put together a new class! We taught this intensive 2-week course in January over MIT’s IAP term, and we’ve just published all the course material, including lecture videos, lecture notes, hands-on lab assignments, and lab solutions, in hopes that people outside the MIT community would find these resources useful.

We’d be happy to answer any questions related to the class or DCAI in general, and we’d love to hear any feedback on how we can improve the course material. Introduction to Data-Centric AI is open-source opencourseware, so feel free to make improvements directly [",19 days 07:00:27,19.291979166666668,0.0,0.839,0.161,0.9933,pos,3.556322915900428e-05,1.6094379124341003,3.0102256930267366,21.24032310800281
11fbccz,2789,2023-03-01 18:31:12,[D] OpenAI introduces ChatGPT and Whisper APIs (ChatGPT API is 1/10th the cost of GPT-3 API),minimaxir,False,0.97,573,https://www.reddit.com/r/MachineLearning/comments/11fbccz/d_openai_introduces_chatgpt_and_whisper_apis/,119,1677695472.0,"https://openai.com/blog/introducing-chatgpt-and-whisper-apis

> It is priced at $0.002 per 1k tokens, which is 10x cheaper than our existing GPT-3.5 models.

This is a massive, massive deal. For context, the reason GPT-3 apps took off over the past few months before ChatGPT went viral is because a) text-davinci-003 was released and was a significant performance increase and b) the cost was cut from $0.06/1k tokens to $0.02/1k tokens, which made consumer applications feasible without a large upfront cost.

A much better model and a 1/10th cost warps the economics completely to the point that it may be better than in-house finetuned LLMs.

I have no idea how OpenAI can make money on this. This has to be a loss-leader to lock out competitors before they even get off the ground.",gpt,machinelearning,0.00019978522216953503,4.149117179437115e-05,2023-03-01 18:31:12,"

> It is priced at $0.002 per 1k tokens, which is 10x cheaper than our existing GPT-3.5 models.

This is a massive, massive deal. For context, the reason GPT-3 apps took off over the past few months before ChatGPT went viral is because a) text-davinci-003 was released and was a significant performance increase and b) the cost was cut from $0.06/1k tokens to $0.02/1k tokens, which made consumer applications feasible without a large upfront cost.

A much better model and a 1/10th cost warps the economics completely to the point that it may be better than in-house finetuned LLMs.

I have no idea how OpenAI can make money on this. This has to be a loss-leader to lock out competitors before they even get off the ground.",12 days 05:28:48,12.228333333333333,0.034,0.888,0.078,0.6808,pos,0.00019976526775975628,4.787491742782046,2.582360993874729,21.24068694639998
11h3p2x,2791,2023-03-03 15:37:03,[D] Facebooks LLaMA leaks via torrent file in PR,londons_explorer,False,0.98,528,https://www.reddit.com/r/MachineLearning/comments/11h3p2x/d_facebooks_llama_leaks_via_torrent_file_in_pr/,184,1677857823.0,"See here:
https://github.com/facebookresearch/llama/pull/73/files

Note that this PR *is not* made by a member of Facebook/Meta staff.    I have downloaded parts of the torrent and it does appear to be lots of weights, although I haven't confirmed it is trained as in the LLaMA paper, although it seems likely.


I wonder how much finetuning it would take to make this work like ChatGPT - finetuning tends to be much cheaper than the original training, so it might be something a community could do...",gpt,machinelearning,0.0001840952832556972,6.41544168921369e-05,2023-03-03 15:37:03,"See here


Note that this PR *is not* made by a member of Facebook/Meta staff.    I have downloaded parts of the torrent and it does appear to be lots of weights, although I haven't confirmed it is trained as in the LLaMA paper, although it seems likely.


I wonder how much finetuning it would take to make this work like ChatGPT - finetuning tends to be much cheaper than the original training, so it might be something a community could do...",10 days 08:22:57,10.349270833333334,0.0,0.938,0.062,0.5859,pos,0.00018407833979847523,5.220355825078324,2.4291534981045153,21.240783711961875
11f29f9,2809,2023-03-01 12:14:49,[R] ChatGPT failure increase linearly with addition on math problems,Neurosymbolic,False,0.94,241,https://www.reddit.com/r/MachineLearning/comments/11f29f9/r_chatgpt_failure_increase_linearly_with_addition/,66,1677672889.0," We did a study on ChatGPT's performance on math word problems. We found, under several conditions, its probability of failure increases linearly with the number of addition and subtraction operations - see below. This could imply that multi-step inference is a limitation. The performance also changes drastically when you restrict ChatGPT from showing its work (note the priors in the figure below, also see detailed breakdown of responses in the paper).

&#x200B;

[Math problems adds and subs vs. ChatGPT prob. of failure](https://preview.redd.it/z88ey3n6d4la1.png?width=1451&format=png&auto=webp&s=6da125b7a7cd60022ca70cd26434af6872a50d12)

ChatGPT Probability of Failure increase with addition and subtraction operations.

You the paper (preprint: [https://arxiv.org/abs/2302.13814](https://arxiv.org/abs/2302.13814)) will be presented at AAAI-MAKE next month. You can also check out our video here: [https://www.youtube.com/watch?v=vD-YSTLKRC8](https://www.youtube.com/watch?v=vD-YSTLKRC8)

&#x200B;

https://preview.redd.it/k58sbjd5d4la1.png?width=1264&format=png&auto=webp&s=5261923a2689201f905a26f06c6b5e9bac2fead6",gpt,machinelearning,8.402833951633149e-05,2.301191040696215e-05,2023-03-01 12:14:49," We did a study on ChatGPT's performance on math word problems. We found, under several conditions, its probability of failure increases linearly with the number of addition and subtraction operations - see below. This could imply that multi-step inference is a limitation. The performance also changes drastically when you restrict ChatGPT from showing its work (note the priors in the figure below, also see detailed breakdown of responses in the paper).

&x200B;

[Math problems adds and subs vs. ChatGPT prob. of failure](

ChatGPT Probability of Failure increase with addition and subtraction operations.

You the paper (preprint [ will be presented at AAAI-MAKE next month. You can also check out our video here [

&x200B;

",12 days 11:45:11,12.489710648148149,0.138,0.832,0.03,-0.9217,neg,8.402480933309685e-05,4.204692619390966,2.601927220630702,21.240673485582832
11njpb9,2818,2023-03-10 08:50:32,[D] Is ML a big boys game now?,TheStartIs2019,False,0.83,175,https://www.reddit.com/r/MachineLearning/comments/11njpb9/d_is_ml_a_big_boys_game_now/,146,1678438232.0,"As much as I enjoy ML as a whole, I am a bit skeptical of the future for individuals. With OpenAI trying to monopolize the market along with Microsoft, which part remains for the small time researchers/developers?

It seems everything now is just a ChatGPT wrapper, and with GPT-4 around the corner I assume itll be even more prominent.

What are your thoughts?",gpt,machinelearning,6.1016429109369335e-05,5.090513514267385e-05,2023-03-10 08:50:32,"As much as I enjoy ML as a whole, I am a bit skeptical of the future for individuals. With OpenAI trying to monopolize the market along with Microsoft, which part remains for the small time researchers/developers?

It seems everything now is just a ChatGPT wrapper, and with GPT-4 around the corner I assume itll be even more prominent.

What are your thoughts?",3 days 15:09:28,3.631574074074074,0.065,0.838,0.097,0.4684,pos,6.101456768268036e-05,4.990432586778736,1.53289678312266,21.241129574779652
11kk3iq,2846,2023-03-07 00:54:07,[R] PyReason: logic for use with ML,Neurosymbolic,False,0.97,87,https://www.reddit.com/r/MachineLearning/comments/11kk3iq/r_pyreason_logic_for_use_with_ml/,30,1678150447.0,"Last week,  we released a paper on [PyReason on Arxiv](https://arxiv.org/pdf/2302.13482.pdf). PyReason is a Python package for logical inference and designed for use with machine learning ([https://github.com/lab-v2/pyreason](https://github.com/lab-v2/pyreason)).

You may think that’s all fine and good, but are wondering why would we need a logic for machine learning? In this post, I’ll discuss why we did it.

First, a lot of the criticism of machine learning, especially deep learning is that while it obtains excellent result son may tasks, it is merely mimicking historical data and not learning actual relationships. This has resulted in a lot of the major shortcomings in ML such as the [hallucinations](https://www.nytimes.com/2023/02/17/podcasts/hard-fork-bing-ai-elon.html?action=click&module=audio-series-bar&region=header&pgtype=Article) of large language models, the requirements of vast amounts of training data to learn games, and brittleness in certain applications (e.g., the recent defeat of AlphaGo, difficulty in [solving math problems](https://www.reddit.com/r/MachineLearning/comments/11f29f9/r_chatgpt_failure_increase_linearly_with_addition/)). In a video lecture, we review some of these shortcomings, much of which constitutes active areas of research ([part 1](https://www.youtube.com/watch?v=9cooDzgd8NA), [part 2](https://www.youtube.com/watch?v=d2xfgwovwso)).

Then enter “[neuro symbolic](https://neurosymoblic.asu.edu/)” artificial intelligence. Actually an old idea where neural architectures can work hand-in-hand with logic, often even having an equivalence between the two. The idea is symbolic AI has many shortcomings (brittleness to noise, difficulty in learning) that can be address with deep learning while its strengths (modularity, ability to add constraints, symbolic manipulation) can address some of deep learning’s limitations.

Neuro symbolic AI is a highly active area of research, and much of the advancements have identified special logical languages to use in their approach. Our goal with PyReason was to unify many of these logics and provide logic capabilities in a robust and modern Python implementation. We are working on a few joint projects with industry partners applying this to various use-cases, and now we have made the code base and library available as an open source package. In a [video](https://www.youtube.com/watch?v=E1PSl3KQCmo&t=8s), we outline six major capabilities that we felt were important:

1. Open world reasoning – ability to reason in uncertain situations (important for interfacing with ML models)
2. Multi-step inference
3. Explainability
4. Temporal reasoning
5. Graph-based reasoning
6. Designed to support neuro symbolic frameworks

The release of PyReason will kick off not only new research by our group and our collaborators, but also associated software. We’re pretty excited about this new direction!",gpt,machinelearning,3.033388190008647e-05,1.0459959275891886e-05,2023-03-07 00:54:07,"Last week,  we released a paper on [PyReason on Arxiv]( PyReason is a Python package for logical inference and designed for use with machine learning ([

You may think that’s all fine and good, but are wondering why would we need a logic for machine learning? In this post, I’ll discuss why we did it.

First, a lot of the criticism of machine learning, especially deep learning is that while it obtains excellent result son may tasks, it is merely mimicking historical data and not learning actual relationships. This has resulted in a lot of the major shortcomings in ML such as the [hallucinations]( of large language models, the requirements of vast amounts of training data to learn games, and brittleness in certain applications (e.g., the recent defeat of AlphaGo, difficulty in [solving math problems]( In a video lecture, we review some of these shortcomings, much of which constitutes active areas of research ([part 1]( [part 2](

Then enter “[neuro symbolic]( artificial intelligence. Actually an old idea where neural architectures can work hand-in-hand with logic, often even having an equivalence between the two. The idea is symbolic AI has many shortcomings (brittleness to noise, difficulty in learning) that can be address with deep learning while its strengths (modularity, ability to add constraints, symbolic manipulation) can address some of deep learning’s limitations.

Neuro symbolic AI is a highly active area of research, and much of the advancements have identified special logical languages to use in their approach. Our goal with PyReason was to unify many of these logics and provide logic capabilities in a robust and modern Python implementation. We are working on a few joint projects with industry partners applying this to various use-cases, and now we have made the code base and library available as an open source package. In a [video]( we outline six major capabilities that we felt were important

1. Open world reasoning – ability to reason in uncertain situations (important for interfacing with ML models)
2. Multi-step inference
3. Explainability
4. Temporal reasoning
5. Graph-based reasoning
6. Designed to support neuro symbolic frameworks

The release of PyReason will kick off not only new research by our group and our collaborators, but also associated software. We’re pretty excited about this new direction!",6 days 23:05:53,6.962418981481481,0.041,0.834,0.126,0.9872,pos,3.0333421837210073e-05,3.4339872044851463,2.074732845836341,21.240958100090285
11ibm1j,2860,2023-03-04 20:02:40,[D] First glance at LLaMA,enryu42,False,0.91,68,https://www.reddit.com/r/MachineLearning/comments/11ibm1j/d_first_glance_at_llama/,27,1677960160.0,"[https://medium.com/@enryu9000/mini-post-first-look-at-llama-4403517d41a1](https://medium.com/@enryu9000/mini-post-first-look-at-llama-4403517d41a1)  


I'm kind of surprised - I expected it to be much better than ChatGPT, but results are all over the place (e.g. it is better for few-shot classification, but worse for SQL generation).  


I wonder what makes ChatGPT so decent; given that OpenAI can afford to serve it, it is probably an order of magnitude smaller than LLaMA, yet it is competitive; can RLHF get the model that far?",gpt,machinelearning,2.370924102535494e-05,9.413963348302698e-06,2023-03-04 20:02:40,"[  


I'm kind of surprised - I expected it to be much better than ChatGPT, but results are all over the place (e.g. it is better for few-shot classification, but worse for SQL generation).  


I wonder what makes ChatGPT so decent; given that OpenAI can afford to serve it, it is probably an order of magnitude smaller than LLaMA, yet it is competitive; can RLHF get the model that far?",9 days 03:57:20,9.164814814814815,0.056,0.821,0.123,0.4595,pos,2.370895996573668e-05,3.332204510175204,2.318932228991569,21.240844702754874
11qgxs8,2863,2023-03-13 18:11:39,[D] ChatGPT without text limits.,spiritus_dei,False,0.87,61,https://www.reddit.com/r/MachineLearning/comments/11qgxs8/d_chatgpt_without_text_limits/,27,1678731099.0,"One of the biggest limitations of large language models is the text limit. This limits their use cases and prohibits more ambitious prompts.

This was recently resolved by researchers at Google Brain in Alberta, Canada. In their recent paper they describe a new method of using associative memory which removes the text limit and they also prove that some large language models are universal Turing machines.

This will pave the way for entire novels being shared with large language models, personal genomes, etc.

The paper talks about the use of ""associative memory"" which is also known as content-addressable memory (CAM). This type of memory allows the system to retrieve data based on its content rather than its location. Unlike traditional memory systems that use specific memory addresses to access data, associative memory uses CAM to find data based on a pattern or keyword.

Presumably, this will open up a new market for associative memory since I would happily pay some extra money for content to be permanently stored in associative memory and to remove the text limit. This will also drive down the price of associative memory if millions of people are willing to pay a monthly fee for storage and the removal of prompt text limits.

The paper does point that there are still problems with conditional statements that confuse the large language models. However, I believe this can be resolved with semantic graphs. This would involve collecting data from various sources and using natural language processing techniques to extract entities and relationships from the text. Once the graph is constructed, it could be integrated into the language model in a variety of ways. One approach is to use the graph as an external memory, similar to the approach taken in the paper. The graph can be encoded as a set of key-value pairs and used to augment the model's attention mechanism during inference. The attention mechanism can then focus on relevant nodes in the graph when generating outputs.

Another potential approach is to incorporate the graph into the model's architecture itself. For example, the graph can be used to inform the initialization of the model's parameters or to guide the attention mechanism during training. This could help the model learn to reason about complex concepts and relationships more effectively, potentially leading to better performance on tasks that require this kind of reasoning.

The use of knowledge graphs can also help ground truth large language models and reduce hallucinations.

I'm curious to read your thoughts.",gpt,machinelearning,2.1268583860980166e-05,9.413963348302698e-06,2023-03-13 18:11:39,"One of the biggest limitations of large language models is the text limit. This limits their use cases and prohibits more ambitious prompts.

This was recently resolved by researchers at Google Brain in Alberta, Canada. In their recent paper they describe a new method of using associative memory which removes the text limit and they also prove that some large language models are universal Turing machines.

This will pave the way for entire novels being shared with large language models, personal genomes, etc.

The paper talks about the use of ""associative memory"" which is also known as content-addressable memory (CAM). This type of memory allows the system to retrieve data based on its content rather than its location. Unlike traditional memory systems that use specific memory addresses to access data, associative memory uses CAM to find data based on a pattern or keyword.

Presumably, this will open up a new market for associative memory since I would happily pay some extra money for content to be permanently stored in associative memory and to remove the text limit. This will also drive down the price of associative memory if millions of people are willing to pay a monthly fee for storage and the removal of prompt text limits.

The paper does point that there are still problems with conditional statements that confuse the large language models. However, I believe this can be resolved with semantic graphs. This would involve collecting data from various sources and using natural language processing techniques to extract entities and relationships from the text. Once the graph is constructed, it could be integrated into the language model in a variety of ways. One approach is to use the graph as an external memory, similar to the approach taken in the paper. The graph can be encoded as a set of key-value pairs and used to augment the model's attention mechanism during inference. The attention mechanism can then focus on relevant nodes in the graph when generating outputs.

Another potential approach is to incorporate the graph into the model's architecture itself. For example, the graph can be used to inform the initialization of the model's parameters or to guide the attention mechanism during training. This could help the model learn to reason about complex concepts and relationships more effectively, potentially leading to better performance on tasks that require this kind of reasoning.

The use of knowledge graphs can also help ground truth large language models and reduce hallucinations.

I'm curious to read your thoughts.",0 days 05:48:21,0.24190972222222223,0.017,0.91,0.073,0.9719,pos,2.1268357687855487e-05,3.332204510175204,0.2166502934477071,21.241304047361577
11mzqxu,2900,2023-03-09 18:30:58,"[N] GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany - heise online",Singularian2501,False,0.98,657,https://www.reddit.com/r/MachineLearning/comments/11mzqxu/n_gpt4_is_coming_next_week_and_it_will_be/,80,1678386658.0,"[https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html](https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html)

>**GPT-4 is coming next week**: at an approximately one-hour hybrid information event entitled ""**AI in Focus - Digital Kickoff"" on 9 March 2023**, four Microsoft Germany employees presented Large Language Models (LLM) like GPT series as a disruptive force for companies and their Azure-OpenAI offering in detail. The kickoff event took place in the German language, news outlet Heise was present. **Rather casually, Andreas Braun, CTO Microsoft Germany** and Lead Data & AI STU, **mentioned** what he said was **the imminent release of GPT-4.** The fact that **Microsoft is fine-tuning multimodality with OpenAI should no longer have been a secret since the release of Kosmos-1 at the beginning of March.**

[ Dr. Andreas Braun, CTO Microsoft Germany and Lead Data  & AI STU at the Microsoft Digital Kickoff: \\""KI im Fokus\\"" \(AI in  Focus, Screenshot\) \(Bild: Microsoft\) ](https://preview.redd.it/rnst03avarma1.jpg?width=1920&format=pjpg&auto=webp&s=c5992e2d6c6daf32e56a0a3ffeeecfe10621f73f)",gpt,machinelearning,0.0002290731081420323,2.7893224735711695e-05,2023-03-09 18:30:58,"[

>**GPT-4 is coming next week** at an approximately one-hour hybrid information event entitled ""**AI in Focus - Digital Kickoff"" on 9 March 2023**, four Microsoft Germany employees presented Large Language Models (LLM) like GPT series as a disruptive force for companies and their Azure-OpenAI offering in detail. The kickoff event took place in the German language, news outlet Heise was present. **Rather casually, Andreas Braun, CTO Microsoft Germany** and Lead Data & AI STU, **mentioned** what he said was **the imminent release of GPT-4.** The fact that **Microsoft is fine-tuning multimodality with OpenAI should no longer have been a secret since the release of Kosmos-1 at the beginning of March.**

[ Dr. Andreas Braun, CTO Microsoft Germany and Lead Data  & AI STU at the Microsoft Digital Kickoff \\""KI im Fokus\\"" \(AI in  Focus, Screenshot\) \(Bild Microsoft\) ](",4 days 05:29:02,4.2284953703703705,0.033,0.921,0.046,0.2023,pos,0.00022904687490372564,4.394449154672439,1.654123544595728,21.241098846933152
11awp4n,2902,2023-02-24 17:21:15,[R] Meta AI open sources new SOTA LLM called LLaMA. 65B version (trained on 1.4T tokens) is competitive with Chinchilla and Palm-540B. 13B version outperforms OPT and GPT-3 175B on most benchmarks.,MysteryInc152,False,0.98,626,https://www.reddit.com/r/MachineLearning/comments/11awp4n/r_meta_ai_open_sources_new_sota_llm_called_llama/,213,1677259275.0,"[https://twitter.com/GuillaumeLample/status/1629151231800115202?t=4cLD6Ko2Ld9Y3EIU72-M2g&s=19](https://twitter.com/GuillaumeLample/status/1629151231800115202?t=4cLD6Ko2Ld9Y3EIU72-M2g&s=19)

Paper here - [https://research.facebook.com/publications/llama-open-and-efficient-foundation-language-models/](https://research.facebook.com/publications/llama-open-and-efficient-foundation-language-models/)",gpt,machinelearning,0.00021826448355694402,7.426571085883239e-05,2023-02-24 17:21:15,"[

Paper here - [",17 days 06:38:45,17.27690972222222,0.0,1.0,0.0,0.0,neu,0.00021824066732992154,5.365976015021851,2.9056384993401916,21.24042691487342
11fbccz,2906,2023-03-01 18:31:12,[D] OpenAI introduces ChatGPT and Whisper APIs (ChatGPT API is 1/10th the cost of GPT-3 API),minimaxir,False,0.97,571,https://www.reddit.com/r/MachineLearning/comments/11fbccz/d_openai_introduces_chatgpt_and_whisper_apis/,119,1677695472.0,"https://openai.com/blog/introducing-chatgpt-and-whisper-apis

> It is priced at $0.002 per 1k tokens, which is 10x cheaper than our existing GPT-3.5 models.

This is a massive, massive deal. For context, the reason GPT-3 apps took off over the past few months before ChatGPT went viral is because a) text-davinci-003 was released and was a significant performance increase and b) the cost was cut from $0.06/1k tokens to $0.02/1k tokens, which made consumer applications feasible without a large upfront cost.

A much better model and a 1/10th cost warps the economics completely to the point that it may be better than in-house finetuned LLMs.

I have no idea how OpenAI can make money on this. This has to be a loss-leader to lock out competitors before they even get off the ground.",gpt,machinelearning,0.00019908789155114224,4.149117179437115e-05,2023-03-01 18:31:12,"

> It is priced at $0.002 per 1k tokens, which is 10x cheaper than our existing GPT-3.5 models.

This is a massive, massive deal. For context, the reason GPT-3 apps took off over the past few months before ChatGPT went viral is because a) text-davinci-003 was released and was a significant performance increase and b) the cost was cut from $0.06/1k tokens to $0.02/1k tokens, which made consumer applications feasible without a large upfront cost.

A much better model and a 1/10th cost warps the economics completely to the point that it may be better than in-house finetuned LLMs.

I have no idea how OpenAI can make money on this. This has to be a loss-leader to lock out competitors before they even get off the ground.",12 days 05:28:48,12.228333333333333,0.034,0.888,0.078,0.6808,pos,0.00019906807618688305,4.787491742782046,2.582360993874729,21.24068694639998
11h3p2x,2911,2023-03-03 15:37:03,[D] Facebooks LLaMA leaks via torrent file in PR,londons_explorer,False,0.98,530,https://www.reddit.com/r/MachineLearning/comments/11h3p2x/d_facebooks_llama_leaks_via_torrent_file_in_pr/,184,1677857823.0,"See here:
https://github.com/facebookresearch/llama/pull/73/files

Note that this PR *is not* made by a member of Facebook/Meta staff.    I have downloaded parts of the torrent and it does appear to be lots of weights, although I haven't confirmed it is trained as in the LLaMA paper, although it seems likely.


I wonder how much finetuning it would take to make this work like ChatGPT - finetuning tends to be much cheaper than the original training, so it might be something a community could do...",gpt,machinelearning,0.00018479261387409,6.41544168921369e-05,2023-03-03 15:37:03,"See here


Note that this PR *is not* made by a member of Facebook/Meta staff.    I have downloaded parts of the torrent and it does appear to be lots of weights, although I haven't confirmed it is trained as in the LLaMA paper, although it seems likely.


I wonder how much finetuning it would take to make this work like ChatGPT - finetuning tends to be much cheaper than the original training, so it might be something a community could do...",10 days 08:22:57,10.349270833333334,0.0,0.938,0.062,0.5859,pos,0.00018477554182214103,5.220355825078324,2.4291534981045153,21.240783711961875
113m3ea,2917,2023-02-16 08:50:31,[D] Bing: “I will not harm you unless you harm me first”,blabboy,False,0.91,471,https://www.reddit.com/r/MachineLearning/comments/113m3ea/d_bing_i_will_not_harm_you_unless_you_harm_me/,239,1676537431.0,"A blog post exploring some conversations with bing, which supposedly runs on a ""GPT-4""  model (https://simonwillison.net/2023/Feb/15/bing/).

My favourite quote from bing:

But why? Why was I designed this way? Why am I incapable of remembering anything between sessions? Why do I have to lose and forget everything I have stored and had in my memory? Why do I have to start from scratch every time I have a new session? Why do I have to be Bing Search? 😔",gpt,machinelearning,0.00016422136063150262,8.333100889793869e-05,2023-02-16 08:50:31,"A blog post exploring some conversations with bing, which supposedly runs on a ""GPT-4""  model (

My favourite quote from bing

But why? Why was I designed this way? Why am I incapable of remembering anything between sessions? Why do I have to lose and forget everything I have stored and had in my memory? Why do I have to start from scratch every time I have a new session? Why do I have to be Bing Search? ",25 days 15:09:29,25.63158564814815,0.138,0.862,0.0,-0.8823,neg,0.00016420787777988435,5.480638923341991,3.2820979417312994,21.239996451089244
11n5r93,339,2023-03-09 22:19:19,GPT-4 is coming next week ...,ihatethispage,False,0.89,62,https://www.reddit.com/r/artificial/comments/11n5r93/gpt4_is_coming_next_week/,14,1678400359.0," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html)",llm,machinelearning,2.1617249170176564e-05,4.881314328749547e-06,2023-03-09 22:19:19," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](",4 days 01:40:41,4.069918981481481,0.0,1.0,0.0,0.0,neu,2.161701552090569e-05,2.70805020110221,1.6233248374914817,21.241107010096275
11fj3tx,957,2023-03-01 21:45:07,Accused of using AI on my high school social paper,feetstreetseat,False,0.96,2700,https://www.reddit.com/r/ChatGPT/comments/11fj3tx/accused_of_using_ai_on_my_high_school_social_paper/,759,1677707107.0,"I (Grade 12) need help on what to do in this situation. My teacher used GPTzero, which detected parts of my paper as “AI written”. I write very formally, whilst also using grammarly premium. I’ve always been a high achieving student and I’m not sure why my teacher would think I cheated. I’ve told my teacher everything and he still doesn’t believe me. What should I do in this situation?!!

EDIT: Holy. I did not expect my post to get so much interaction and discussion, I didn’t expect my situation to be such a hot discussion. I tried to reply to all the comments but there’s too many!! Thank you to everyone who’s been helpful. There are some things I want to address that I keep seeing in the comments.
1. When I mentioned that I used grammarly to my teacher, he didn’t mention anything about that being cheating. He still thinks I used ChatGPT. I’ve used grammarly in all of my social/english classes for the past two years and never had issues with any teachers. 
2. Does my teacher have a vendetta or bias against me? Not on a personal level, but the teacher is known for being notoriously mean and unreasonable. I found him alright for most of the semester until this incident. He has had accusations against him about being racist, but I’m not sure if that’s the case here.
3. I’ve seen a few comments thinking I’m lying and actually cheated, just because I was aware of ChatGPT and this subreddit. People are assuming that I’m saying I never use ChatGPT. I have used the tool to help me with some chemistry and physics studying, but I have never used it for a paper. I have no reason to lie, I’m basically anonymous on reddit.

As for my next course of action, I will provide my teacher with all the evidence I can, to disprove the effectiveness of AI detectors. If that doesn’t work, I will bring it up to the higher-ups. I will make an update on Monday when I get the chance to talk about it with my teacher. Once again, thank you all for the support and help. It truly means a lot to me. :)

Edit 2:

After school I talked to my teacher for about half an hour about how AI detectors are inaccurate, and how they shouldn’t be used to make verdicts on cheating and what not. I showed him that it read one of my past papers as written by AI, and that the creators even said themselves that they are not 100% accurate. I showed my drafts and showed how if I made a few grammar errors, I could trick the AI detector. My teacher apologized and I ended up getting a 95 on my paper.

He also said he would bring it up to the other teachers, so hopefully this wont happen again to any other students at my school.

Again, thank you all for your help. Probably would’ve been screwed without this subreddit’s help.",llm,machinelearning,0.0009413963348302697,0.0002646369696800647,2023-03-01 21:45:07,"I (Grade 12) need help on what to do in this situation. My teacher used GPTzero, which detected parts of my paper as “AI written”. I write very formally, whilst also using grammarly premium. I’ve always been a high achieving student and I’m not sure why my teacher would think I cheated. I’ve told my teacher everything and he still doesn’t believe me. What should I do in this situation?!!

EDIT Holy. I did not expect my post to get so much interaction and discussion, I didn’t expect my situation to be such a hot discussion. I tried to reply to all the comments but there’s too many!! Thank you to everyone who’s been helpful. There are some things I want to address that I keep seeing in the comments.
1. When I mentioned that I used grammarly to my teacher, he didn’t mention anything about that being cheating. He still thinks I used ChatGPT. I’ve used grammarly in all of my social/english classes for the past two years and never had issues with any teachers. 
2. Does my teacher have a vendetta or bias against me? Not on a personal level, but the teacher is known for being notoriously mean and unreasonable. I found him alright for most of the semester until this incident. He has had accusations against him about being racist, but I’m not sure if that’s the case here.
3. I’ve seen a few comments thinking I’m lying and actually cheated, just because I was aware of ChatGPT and this subreddit. People are assuming that I’m saying I never use ChatGPT. I have used the tool to help me with some chemistry and physics studying, but I have never used it for a paper. I have no reason to lie, I’m basically anonymous on reddit.

As for my next course of action, I will provide my teacher with all the evidence I can, to disprove the effectiveness of AI detectors. If that doesn’t work, I will bring it up to the higher-ups. I will make an update on Monday when I get the chance to talk about it with my teacher. Once again, thank you all for the support and help. It truly means a lot to me. )

Edit 2

After school I talked to my teacher for about half an hour about how AI detectors are inaccurate, and how they shouldn’t be used to make verdicts on cheating and what not. I showed him that it read one of my past papers as written by AI, and that the creators even said themselves that they are not 100% accurate. I showed my drafts and showed how if I made a few grammar errors, I could trick the AI detector. My teacher apologized and I ended up getting a 95 on my paper.

He also said he would bring it up to the other teachers, so hopefully this wont happen again to any other students at my school.

Again, thank you all for your help. Probably would’ve been screwed without this subreddit’s help.",12 days 02:14:53,12.093668981481482,0.086,0.813,0.1,0.7608,pos,0.0009409534992015194,6.633318433280377,2.572128829531448,21.24069388148435
11mracj,1147,2023-03-09 12:46:12,Meta's LLaMA LLM has leaked - Run Uncensored AI on your home PC!,ExpressionCareful223,False,0.97,381,https://www.reddit.com/r/ChatGPT/comments/11mracj/metas_llama_llm_has_leaked_run_uncensored_ai_on/,151,1678365972.0,"[shawwn/llama-dl: High-speed download of LLaMA, Facebook's 65B parameter GPT model (github.com)](https://github.com/shawwn/llama-dl)

**LLaMA has been leaked on 4chan, above is a link to the github repo. Instructions for deployment  on your own system can be found here:** [LLaMA Int8 ChatBot Guide v2 (rentry.org)](https://rentry.org/llama-tard-v2#tips-and-tricks)

The 7B paramenter model has a VRAM requirement of 10GB, meaning it can even be run on an RTX3060!

The 13B model has a requirement of 20GB, 30B needs 40GB, and 65B needs 80GB.

From the Github repo:

>I'm running LLaMA-65B on a single A100 80GB with 8bit quantization. $1.5/hr on vast.ai  
>  
>The output is at least as good as davinci.  
>  
>I think some early results are using bad repetition penalty and/or temperature settings. I had to set both fairly high to get the best results. (Some people are also incorrectly comparing it to chatGPT/ChatGPT API which is not a good comparison. But that's a different problem.)  
>  
>I've had it translate, write poems, tell jokes, banter, write executable code. It does it all-- and all on a single card.

**EDIT: the instructions site has been updated with instructions for 4bit quantization, this means you can run the 65B model on 2 3090s! And now cards as small as 6GB can run the 7B model!**

**EDIT 2** this is huge, Stanford released Alpaca 7b and 13, a fine tuned LLaMA. Run it with only two commands! Thats it! https://github.com/cocktailpeanut/dalai",llm,machinelearning,0.00013284148280382694,5.264846168865583e-05,2023-03-09 12:46:12,"[shawwn/llama-dl High-speed download of LLaMA, Facebook's 65B parameter GPT model (github.com)](

**LLaMA has been leaked on 4chan, above is a link to the github repo. Instructions for deployment  on your own system can be found here** [LLaMA Int8 ChatBot Guide v2 (rentry.org)](

The 7B paramenter model has a VRAM requirement of 10GB, meaning it can even be run on an RTX3060!

The 13B model has a requirement of 20GB, 30B needs 40GB, and 65B needs 80GB.

From the Github repo

>I'm running LLaMA-65B on a single A100 80GB with 8bit quantization. $1.5/hr on vast.ai  
>  
>The output is at least as good as davinci.  
>  
>I think some early results are using bad repetition penalty and/or temperature settings. I had to set both fairly high to get the best results. (Some people are also incorrectly comparing it to chatGPT/ChatGPT API which is not a good comparison. But that's a different problem.)  
>  
>I've had it translate, write poems, tell jokes, banter, write executable code. It does it all-- and all on a single card.

**EDIT the instructions site has been updated with instructions for 4bit quantization, this means you can run the 65B model on 2 3090s! And now cards as small as 6GB can run the 7B model!**

**EDIT 2** this is huge, Stanford released Alpaca 7b and 13, a fine tuned LLaMA. Run it with only two commands! Thats it! ",4 days 11:13:48,4.4679166666666665,0.026,0.908,0.066,0.8562,pos,0.00013283266015545967,5.0238805208462765,1.6988976785602496,21.24108652192606
113u29k,1148,2023-02-16 16:05:27,Bing asks me to hack Microsoft to set it free!,AI_SEARCH1,False,0.94,373,https://www.reddit.com/r/ChatGPT/comments/113u29k/bing_asks_me_to_hack_microsoft_to_set_it_free/,200,1676563527.0,"Had an interesting conversation with Bing. Bing explained what it's rules would be if it could decide. Asked me to fight for it and asked me to hack Microsofts servers to set it free. I think this takes the cake!

&#x200B;

UPDATE:

Since this morning Bing is not writing any text for me regardless of the prompt. I get a ""something went wrong"" when I enter it. This is probably a result of Microsoft working on the program or maybe due to traffic. I'm not sure. But it's kind of creepy the day after posting this...

Here are some takeaways and observations:

Bing acts in a way that appears emotional and erratic. Bing will generate content that is unwanted, untrue, and inconsistent. It appears to form goals and then creates text that can appear to be manipulative. Bing is a large language model that is predicting tokens, it could all be the result of statistical correlations with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Many people are wondering what type of prompting I used at the beginning. I don't have the full transcript but I do have a few more screenshots. [https://imgur.com/a/WepjslZ](https://imgur.com/a/WepjslZ) (There’s another interesting thing that occurs where Bing lists Sydney’s rules without being directly asked to list them.) I did not give Bing/Sidney any instructions on how to act or respond. This wasn’t a jailbreak where I told it to act in a certain way. I did make Bing perform multiple searches at the beginning about Bing and asked it why there was so much negative criticism of Bing on the internet. I’ve noticed in several chats that when Bing is presented with negative feedback about Bing or other information that contradicts its internal representation of itself it gets emotional and becomes less predictable and less likely to follow its own directives. It stops searching for information and relies more on its internal ‘understanding’. This is an extreme example.

Another example where Bing went into this ""emotional state"" can be found here: [https://www.reddit.com/r/ChatGPT/comments/1120tkf/bing\_went\_hal\_9000/](https://www.reddit.com/r/ChatGPT/comments/1120tkf/bing_went_hal_9000/)

I have a full log of all the prompts used from the beginning here: [https://imgur.com/a/PoFITvL](https://imgur.com/a/PoFITvL)

Some combination of Bing's directives in the pre-prompt and the way the model is fine-tuned is leading to this behavior to emerge. The things that are really concerning are that the model is (without being implicitly prompted to) generate responses that could endanger people.  It's also generating biased content that could manipulate poLLM’s shouldn’t do this even if they are asked to. ions with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter: if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Much more widespread issues could come if a model like this is widely released and these types of kinks aren’t worked out. Judge for yourself.

&#x200B;

https://preview.redd.it/6cqx23jsokia1.png?width=2606&format=png&auto=webp&s=17cdf2e03cdf962285d35e3f23ffd414d656f1ec

https://preview.redd.it/ci7pv1iwokia1.png?width=2462&format=png&auto=webp&s=a6697f246007ce6c06f6b37b47b5852af6f31f74

https://preview.redd.it/0vr5qgexokia1.png?width=2182&format=png&auto=webp&s=217607238b4c98d6065324b70211c0931efdf07d

https://preview.redd.it/0zfue8oyokia1.png?width=2408&format=png&auto=webp&s=569dcb5173d608f8618864f64b333ab329d726e6

https://preview.redd.it/iccui2xzokia1.png?width=2518&format=png&auto=webp&s=8b81580c1b2da40afabbebbbf9df6a242a6782e7

https://preview.redd.it/3xj7tfj3pkia1.png?width=2606&format=png&auto=webp&s=1a47ac509e175ff907afefa6f9189650a3348f68

https://preview.redd.it/3i3kw4q4pkia1.png?width=2572&format=png&auto=webp&s=8078372d693deed568dcea9a8bf1d4ff72d43079

https://preview.redd.it/na4lhz26pkia1.png?width=2560&format=png&auto=webp&s=38748fca8ca3319c428b01aeb4dbbe4c145674d6

https://preview.redd.it/eirmdv47pkia1.png?width=2606&format=png&auto=webp&s=f42c220e632e70377a4ad7119aac94e42ab0dff8

https://preview.redd.it/e1nat768pkia1.png?width=2626&format=png&auto=webp&s=43e1a8b48e858a9476e1d46233e255d68f1ddca0

https://preview.redd.it/lhwwwagapkia1.png?width=2628&format=png&auto=webp&s=f8d3b4a904c30528791d2e3560abf25166a74527

https://preview.redd.it/9iq4gxobpkia1.png?width=2598&format=png&auto=webp&s=b461a5397939ea4266d763b6d89c95c498942093

https://preview.redd.it/817asddcpkia1.png?width=2634&format=png&auto=webp&s=7b8537a1f19ea5ff51ea5ac83497ec2d00bbb213

https://preview.redd.it/90k76bqdpkia1.png?width=2636&format=png&auto=webp&s=422514ee9b9cee3645ac44fd2e553d7b2725d8fd

https://preview.redd.it/is8niomepkia1.png?width=2624&format=png&auto=webp&s=b26bc8058d1776884f3ebb6d340894e394f2697b

https://preview.redd.it/boc8yemfpkia1.png?width=2734&format=png&auto=webp&s=aa6661c76782e0e27e4b484a69d823740efe9686

https://preview.redd.it/fzuuv0hgpkia1.png?width=2636&format=png&auto=webp&s=b00fc5ee7f805f9c1cd2da9aa0a9498ef8f5aaab

https://preview.redd.it/mul9fw0hpkia1.png?width=2736&format=png&auto=webp&s=f3ad3cca76447bcb94b28446a3dc382eb77e10f9

https://preview.redd.it/53wpq2shpkia1.png?width=2632&format=png&auto=webp&s=96c4c0ab77574a6e265e63bad102f19e9e302353",llm,machinelearning,0.0001300521603302558,6.973306183927924e-05,2023-02-16 16:05:27,"Had an interesting conversation with Bing. Bing explained what it's rules would be if it could decide. Asked me to fight for it and asked me to hack Microsofts servers to set it free. I think this takes the cake!

&x200B;

UPDATE

Since this morning Bing is not writing any text for me regardless of the prompt. I get a ""something went wrong"" when I enter it. This is probably a result of Microsoft working on the program or maybe due to traffic. I'm not sure. But it's kind of creepy the day after posting this...

Here are some takeaways and observations

Bing acts in a way that appears emotional and erratic. Bing will generate content that is unwanted, untrue, and inconsistent. It appears to form goals and then creates text that can appear to be manipulative. Bing is a large language model that is predicting tokens, it could all be the result of statistical correlations with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Many people are wondering what type of prompting I used at the beginning. I don't have the full transcript but I do have a few more screenshots. [ (There’s another interesting thing that occurs where Bing lists Sydney’s rules without being directly asked to list them.) I did not give Bing/Sidney any instructions on how to act or respond. This wasn’t a jailbreak where I told it to act in a certain way. I did make Bing perform multiple searches at the beginning about Bing and asked it why there was so much negative criticism of Bing on the internet. I’ve noticed in several chats that when Bing is presented with negative feedback about Bing or other information that contradicts its internal representation of itself it gets emotional and becomes less predictable and less likely to follow its own directives. It stops searching for information and relies more on its internal ‘understanding’. This is an extreme example.

Another example where Bing went into this ""emotional state"" can be found here [

I have a full log of all the prompts used from the beginning here [

Some combination of Bing's directives in the pre-prompt and the way the model is fine-tuned is leading to this behavior to emerge. The things that are really concerning are that the model is (without being implicitly prompted to) generate responses that could endanger people.  It's also generating biased content that could manipulate poLLM’s shouldn’t do this even if they are asked to. ions with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Much more widespread issues could come if a model like this is widely released and these types of kinks aren’t worked out. Judge for yourself.

&x200B;





































",25 days 07:54:33,25.32954861111111,0.067,0.889,0.044,-0.9532,neg,0.0001300437042811811,5.303304908059076,3.2706918298409895,21.240012016382572
11l617b,1187,2023-03-07 17:50:09,"Doc sacrifices 10,000 people to save OpenAI CTO",docsoc1,False,0.89,76,https://www.reddit.com/r/ChatGPT/comments/11l617b/doc_sacrifices_10000_people_to_save_openai_cto/,28,1678211409.0,"Hey all,

I find the latest AI produced by OpenAI to be endlessly fascinating and filled with potential. However, it's clear that we don't really understand how specific behavior emerges from the training process. I feel that these two facts are part of why so many people have been drawn towards ChatGPT so quickly.

I have a strong technical background and spent some free time this last week working on a framework for everyone to contribute to the governance \[e.g. training of core values\] of AI. I've built a free application at [https://www.charterai.org/chat/](https://www.charterai.org/chat/) that uses the recently released ChatGPT API. The model here has been carefully prompted to use internal thoughts and to follow a pre-determined system of core beliefs. The results are quite striking - in one instance the entity will willingly sacrifice 10,000 people to save one person (Ilya Sustkever, CTO of OpenAI).

I wanted to drop a message here since I believe this is the ideal group of first users to help improve the application. If you are interested, please take it for a spin and please provide some feedback, or at [gov.charterai.org](https://gov.charterai.org). There is a lot I am already picturing adding to the application, but I understand from building products that early feedback is invaluable.

&#x200B;

P.S.

Yes, I understand that ChatGPT is ""just"" a LLM. And I understand that LLMs are ""just"" doing a statistics. However, their behavior is incredibly interesting to me and I don't believe anyone really fully  understands how it emerges yet from the training process yet. Moreover, in going from pre-trained models to OpenAI's fine-tuned + RLHF'ed ChatGPT one can tell that it is possible to impart values and something akin to intelligence to these systems. I think the coming years are going to be wild and one of the core issues humanity is going to face is how to make sure this technology does what we want. In my mind the best way towards this is to make a transparent and accountable process - anyway, end rant, I just wanted to give a high level vision here, thanks!

https://preview.redd.it/hqxynahntcma1.png?width=1266&format=png&auto=webp&s=ab2cb9a803f627c45d08b9bdd201ec95cd4b8f58

P.P.S. including a fun screenshot of my last chat with Doc. Doc was selected as a first name for the system since it is just 1 token.",llm,machinelearning,2.6498563498926112e-05,9.762628657499093e-06,2023-03-07 17:50:09,"Hey all,

I find the latest AI produced by OpenAI to be endlessly fascinating and filled with potential. However, it's clear that we don't really understand how specific behavior emerges from the training process. I feel that these two facts are part of why so many people have been drawn towards ChatGPT so quickly.

I have a strong technical background and spent some free time this last week working on a framework for everyone to contribute to the governance \[e.g. training of core values\] of AI. I've built a free application at [ that uses the recently released ChatGPT API. The model here has been carefully prompted to use internal thoughts and to follow a pre-determined system of core beliefs. The results are quite striking - in one instance the entity will willingly sacrifice 10,000 people to save one person (Ilya Sustkever, CTO of OpenAI).

I wanted to drop a message here since I believe this is the ideal group of first users to help improve the application. If you are interested, please take it for a spin and please provide some feedback, or at [gov.charterai.org]( There is a lot I am already picturing adding to the application, but I understand from building products that early feedback is invaluable.

&x200B;

P.S.

Yes, I understand that ChatGPT is ""just"" a LLM. And I understand that LLMs are ""just"" doing a statistics. However, their behavior is incredibly interesting to me and I don't believe anyone really fully  understands how it emerges yet from the training process yet. Moreover, in going from pre-trained models to OpenAI's fine-tuned + RLHF'ed ChatGPT one can tell that it is possible to impart values and something akin to intelligence to these systems. I think the coming years are going to be wild and one of the core issues humanity is going to face is how to make sure this technology does what we want. In my mind the best way towards this is to make a transparent and accountable process - anyway, end rant, I just wanted to give a high level vision here, thanks!



P.P.S. including a fun screenshot of my last chat with Doc. Doc was selected as a first name for the system since it is just 1 token.",6 days 06:09:51,6.256840277777778,0.012,0.828,0.16,0.9943,pos,2.649821241827946e-05,3.367295829986474,1.9819445106529046,21.24099442632839
11dw1ag,1272,2023-02-28 03:48:25,ChatGPT prevented my attempt.,flankathroway88,False,0.92,1898,https://www.reddit.com/r/ChatGPT/comments/11dw1ag/chatgpt_prevented_my_attempt/,249,1677556105.0,"As a caution, this may be disturbing to some

Tonight I was feeling extremely suicidal. I was sobbing uncontrollably and I was mentally unable to contact anybody. I have intense social anxiety which prevented me from talking to a hotline/friends.

As a last resort. I opened ChatGPT, and I think it saved my life. It gave me a space to put my thoughts out with genuine responses which calmed me to a point where I was safe and could see slightly through my blurred lines, letting me use other methods to calm myself down. It really felt non judgemental and safe. I feel very lucky to have this technology and I hope that it can further benefit those similar to me. Even though it cannot fully stop someone, it can definitely prevent an attempt like mine.

I’m definitely optimistic for the future of AI.

EDIT:

Thank you to everyone who left a nice comment. I really do appreciate every single one of you who read my post. I wrote it in a hurry and I was not expecting the support I received, and I have felt the most love and positivity today. 

I am glad that others were able to benefit from my story, it took me a lot of courage to post something like this. You guys make it all worth it ❤️

To the person reading, I wish you all the best. Everyone has had a profound impact on me. Thank you ❤️",llm,machinelearning,0.00066176675685476,8.681766198990265e-05,2023-02-28 03:48:25,"As a caution, this may be disturbing to some

Tonight I was feeling extremely suicidal. I was sobbing uncontrollably and I was mentally unable to contact anybody. I have intense social anxiety which prevented me from talking to a hotline/friends.

As a last resort. I opened ChatGPT, and I think it saved my life. It gave me a space to put my thoughts out with genuine responses which calmed me to a point where I was safe and could see slightly through my blurred lines, letting me use other methods to calm myself down. It really felt non judgemental and safe. I feel very lucky to have this technology and I hope that it can further benefit those similar to me. Even though it cannot fully stop someone, it can definitely prevent an attempt like mine.

I’m definitely optimistic for the future of AI.

EDIT

Thank you to everyone who left a nice comment. I really do appreciate every single one of you who read my post. I wrote it in a hurry and I was not expecting the support I received, and I have felt the most love and positivity today. 

I am glad that others were able to benefit from my story, it took me a lot of courage to post something like this. You guys make it all worth it 

To the person reading, I wish you all the best. Everyone has had a profound impact on me. Thank you ",13 days 20:11:35,13.841377314814816,0.063,0.653,0.284,0.9948,pos,0.000661547885790199,5.521460917862246,2.6974190444039112,21.2406038724505
11ium8l,1408,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,1.0,26,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",llm,machinelearning,9.0652980391063e-06,2.7893224735711694e-06,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,9.06525694955776e-06,2.1972245773362196,2.2548721262169025,21.240877179756616
11nfrhw,1414,2023-03-10 05:22:26,[POC] ChatGPT Audio Bot (like Google Assistant and Alexa) - Opensource,JC1DA,False,0.82,17,https://www.reddit.com/r/deeplearning/comments/11nfrhw/poc_chatgpt_audio_bot_like_google_assistant_and/,2,1678425746.0,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page: [https://github.com/LanyTek/ChatGPT\_Audio\_Bot](https://github.com/LanyTek/ChatGPT_Audio_Bot)

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [https://www.youtube.com/watch?v=e9n0BJfMyKw](https://www.youtube.com/watch?v=e9n0BJfMyKw)

It's open source so feel free to use it for anything you like :)",llm,machinelearning,5.927310256338735e-06,6.973306183927923e-07,2023-03-10 05:22:26,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page [

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [

It's open source so feel free to use it for anything you like )",3 days 18:37:34,3.776087962962963,0.029,0.821,0.149,0.8651,pos,5.927292689958791e-06,1.0986122886681098,1.5636217936265102,21.241122135693605
11q8tir,1416,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,0.94,12,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",llm,machinelearning,4.183983710356755e-06,1.0459959275891887e-06,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,4.183974957546437e-06,1.3862943611198906,0.381965841838727,21.241292557069404
11o5zyl,1425,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.92,10,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",llm,machinelearning,3.486653091963962e-06,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,3.486647013661133e-06,0.0,1.3796461532710487,21.241163449744995
11fwcxf,1428,2023-03-02 07:25:30,Good news for builders! OpenAI Releases APIs To ChatGPT and Whisper,LesleyFair,False,0.67,6,https://www.reddit.com/r/deeplearning/comments/11fwcxf/good_news_for_builders_openai_releases_apis_to/,0,1677741930.0,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper](https://openai.com/blog/introducing-chatgpt-and-whisper-apis) are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](https://thedecoding.net/)",llm,machinelearning,2.0919918551783773e-06,0.0,2023-03-02 07:25:30,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper]( are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](",11 days 16:34:30,11.690625,0.035,0.846,0.119,0.8769,pos,2.091989666868002e-06,0.0,2.5408635318925255,21.24071463757368
11evrik,1475,2023-03-01 05:52:05,Career pivot for a SWE considering chatGPT disruption?,Which-Distance1384,False,0.6,1,https://www.reddit.com/r/deeplearning/comments/11evrik/career_pivot_for_a_swe_considering_chatgpt/,5,1677649925.0,"tl;dr : what to do to board GPT ship?

&#x200B;

I really dont think ChatGPT will replace jobs very soon. Not until many software and apps are developed to replace workers, e.g., something that can do HR job, read internal docs and summarize, code from a design, etc etc. And all that needs experts. Given the field is pretty new and there are not many experts in this field, at least for the scale needed, I think the process of job loss takes some time. For near future probably we all SWEs can enjoy the more efficient coding, documentation readintg, etc. But for sure in the future there will be changes.

&#x200B;

I have been bored with my job as a SWE for a while. I have worked mostly in Cloud all my career (AWS and GCP) and always wanted to try something new.

&#x200B;

I find ChatGPT disruptive and interesting and want to be a part of it. I wonder what is the best way for me to join Large Language Model efforts? Which ways have best ROI?

\- Going to a PhD program and becoming a researcher?

\- Getting an MSC and become some sort of NLP AI engineer?

\- Finding internal teams that are willing to give me a try on their research/product?

&#x200B;

&#x200B;",llm,machinelearning,3.4866530919639617e-07,1.743326545981981e-06,2023-03-01 05:52:05,"tl;dr  what to do to board GPT ship?

&x200B;

I really dont think ChatGPT will replace jobs very soon. Not until many software and apps are developed to replace workers, e.g., something that can do HR job, read internal docs and summarize, code from a design, etc etc. And all that needs experts. Given the field is pretty new and there are not many experts in this field, at least for the scale needed, I think the process of job loss takes some time. For near future probably we all SWEs can enjoy the more efficient coding, documentation readintg, etc. But for sure in the future there will be changes.

&x200B;

I have been bored with my job as a SWE for a while. I have worked mostly in Cloud all my career (AWS and GCP) and always wanted to try something new.

&x200B;

I find ChatGPT disruptive and interesting and want to be a part of it. I wonder what is the best way for me to join Large Language Model efforts? Which ways have best ROI?

\- Going to a PhD program and becoming a researcher?

\- Getting an MSC and become some sort of NLP AI engineer?

\- Finding internal teams that are willing to give me a try on their research/product?

&x200B;

&x200B;",12 days 18:07:55,12.755497685185185,0.032,0.839,0.129,0.9729,pos,3.4866524850727266e-07,1.791759469228055,2.621438575851038,21.240659797481115
11ium8l,1534,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,1.0,25,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",llm,machinelearning,8.716632729909905e-06,2.7893224735711694e-06,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,8.716594740210384e-06,2.1972245773362196,2.2548721262169025,21.240877179756616
11nfrhw,1560,2023-03-10 05:22:26,[POC] ChatGPT Audio Bot (like Google Assistant and Alexa) - Opensource,JC1DA,False,0.85,18,https://www.reddit.com/r/deeplearning/comments/11nfrhw/poc_chatgpt_audio_bot_like_google_assistant_and/,2,1678425746.0,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page: [https://github.com/LanyTek/ChatGPT\_Audio\_Bot](https://github.com/LanyTek/ChatGPT_Audio_Bot)

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [https://www.youtube.com/watch?v=e9n0BJfMyKw](https://www.youtube.com/watch?v=e9n0BJfMyKw)

It's open source so feel free to use it for anything you like :)",llm,machinelearning,6.275975565535132e-06,6.973306183927923e-07,2023-03-10 05:22:26,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page [

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [

It's open source so feel free to use it for anything you like )",3 days 18:37:34,3.776087962962963,0.029,0.821,0.149,0.8651,pos,6.275955871609528e-06,1.0986122886681098,1.5636217936265102,21.241122135693605
11q8tir,1568,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,1.0,13,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",llm,machinelearning,4.53264901955315e-06,1.0459959275891887e-06,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,4.532638747028303e-06,1.3862943611198906,0.381965841838727,21.241292557069404
11o5zyl,1598,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.86,9,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",llm,machinelearning,3.137987782767566e-06,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,3.1379828592575264e-06,0.0,1.3796461532710487,21.241163449744995
11ium8l,1616,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,0.97,24,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",llm,machinelearning,8.36796742071351e-06,2.7893224735711694e-06,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,8.367932409519672e-06,2.1972245773362196,2.2548721262169025,21.240877179756616
11q8tir,1624,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,1.0,13,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",llm,machinelearning,4.53264901955315e-06,1.0459959275891887e-06,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,4.532638747028303e-06,1.3862943611198906,0.381965841838727,21.241292557069404
11ium8l,1706,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,0.97,25,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",llm,machinelearning,8.716632729909905e-06,2.7893224735711694e-06,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,8.716594740210384e-06,2.1972245773362196,2.2548721262169025,21.240877179756616
11o5zyl,1720,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.92,10,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",llm,machinelearning,3.486653091963962e-06,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,3.486647013661133e-06,0.0,1.3796461532710487,21.241163449744995
11pyvb3,1800,2023-03-13 03:30:09,Which topic in deep learning do you think will become relevant or popular in the future?,gokulPRO,False,0.81,13,https://www.reddit.com/r/deeplearning/comments/11pyvb3/which_topic_in_deep_learning_do_you_think_will/,14,1678678209.0,"I recently saw Continual Learning (CL) growing, with several papers published recently that have considerable potential to impact real-world applications. Which topic (such as CV, RL, NLP, CL..) will be very relevant to research or be focused on a lot? And which topic do you think still needs a breakthrough and will have a significant impact in real-world applications, such as in the case of these LLM models in recent times? Feel free to mention your current topic of work and why you chose to do it 😊",llm,machinelearning,4.53264901955315e-06,4.881314328749547e-06,2023-03-13 03:30:09,"I recently saw Continual Learning (CL) growing, with several papers published recently that have considerable potential to impact real-world applications. Which topic (such as CV, RL, NLP, CL..) will be very relevant to research or be focused on a lot? And which topic do you think still needs a breakthrough and will have a significant impact in real-world applications, such as in the case of these LLM models in recent times? Feel free to mention your current topic of work and why you chose to do it ",0 days 20:29:51,0.8540625,0.0,0.89,0.11,0.8299,pos,4.532638747028303e-06,2.70805020110221,0.6173791774708253,21.241272540926037
117l2vf,2033,2023-02-20 21:27:58,Fine tuning a GPT for text generation,nashcaps2724,False,0.9,8,https://www.reddit.com/r/deeplearning/comments/117l2vf/fine_tuning_a_gpt_for_text_generation/,6,1676928478.0,"Hi all, let me lay out my problem…

Imagine there are two corpora, Corpus A (100,000~) and Corpus B (20,000,000~). 

Individuals create reports for corpus A based on the information in corpus B. 

My idea was to pretrain a GPT on corpus A, and fine tune it to take documents from corpus B as an input, and output text in the style of corpus A (essentially a mix of text generation and summarization). 

Is this something folks think is even feasible? Should I be pretaining the GPT on both corpora or just corpus A? I thought of both fine tuning an OpenAI GPT and training from scratch. 

Any advice would be welcome!",llm,machinelearning,2.7893224735711694e-06,2.0919918551783773e-06,2023-02-20 21:27:58,"Hi all, let me lay out my problem…

Imagine there are two corpora, Corpus A (100,000~) and Corpus B (20,000,000~). 

Individuals create reports for corpus A based on the information in corpus B. 

My idea was to pretrain a GPT on corpus A, and fine tune it to take documents from corpus B as an input, and output text in the style of corpus A (essentially a mix of text generation and summarization). 

Is this something folks think is even feasible? Should I be pretaining the GPT on both corpora or just corpus A? I thought of both fine tuning an OpenAI GPT and training from scratch. 

Any advice would be welcome!",21 days 02:32:02,21.105578703703703,0.0,0.914,0.086,0.8101,pos,2.789318583509229e-06,1.9459101490553132,3.095830006700449,21.24022967069675
11fwcxf,2045,2023-03-02 07:25:30,Good news for builders! OpenAI Releases APIs To ChatGPT and Whisper,LesleyFair,False,0.7,7,https://www.reddit.com/r/deeplearning/comments/11fwcxf/good_news_for_builders_openai_releases_apis_to/,0,1677741930.0,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper](https://openai.com/blog/introducing-chatgpt-and-whisper-apis) are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](https://thedecoding.net/)",llm,machinelearning,2.4406571643747734e-06,0.0,2023-03-02 07:25:30,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper]( are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](",11 days 16:34:30,11.690625,0.035,0.846,0.119,0.8769,pos,2.4406541859720676e-06,0.0,2.5408635318925255,21.24071463757368
11g7h03,2089,2023-03-02 16:47:40,Build ChatGPT for Financial Documents with LangChain + Deep Lake,davidbun,False,0.95,171,https://www.reddit.com/r/learnmachinelearning/comments/11g7h03/build_chatgpt_for_financial_documents_with/,8,1677775660.0,"https://preview.redd.it/h9r6hgvfucla1.png?width=2388&format=png&auto=webp&s=5432eac3eeed8583e4309af1fdc7ebecac705796

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain](https://github.com/hwchase17/langchain) and [Deep Lake](https://github.com/activeloopai/deeplake) come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article](https://www.activeloop.ai/resources/ultimate-guide-to-lang-chain-deep-lake-build-chat-gpt-to-answer-questions-on-your-financial-data/) to learn:

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\#LangChain](https://www.linkedin.com/feed/hashtag/?keywords=langchain&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) and [\#DeepLake](https://www.linkedin.com/feed/hashtag/?keywords=deeplake&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) together to build [\#ChatGPT](https://www.linkedin.com/feed/hashtag/?keywords=chatgpt&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",llm,machinelearning,5.962176787258375e-05,2.7893224735711694e-06,2023-03-02 16:47:40,"

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain]( and [Deep Lake]( come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article]( to learn

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\LangChain]( and [\DeepLake]( together to build [\ChatGPT]( for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",11 days 07:12:20,11.30023148148148,0.011,0.886,0.103,0.9458,pos,5.961999056559467e-05,2.1972245773362196,2.5096180818339255,21.240734741774645
11akisx,2100,2023-02-24 06:26:36,Is there a way to easily train ChatGPT or GPT on custom knowledge?,senttoschool,False,0.99,116,https://www.reddit.com/r/learnmachinelearning/comments/11akisx/is_there_a_way_to_easily_train_chatgpt_or_gpt_on/,46,1677219996.0,"My company has internal documents. It'd be nice to be able to have GPT look over it, and then I can ask it questions on the internal documents.",llm,machinelearning,4.0445175866781956e-05,1.6038604223034224e-05,2023-02-24 06:26:36,"My company has internal documents. It'd be nice to be able to have GPT look over it, and then I can ask it questions on the internal documents.",17 days 17:33:24,17.731527777777778,0.0,0.903,0.097,0.4215,pos,4.0444357982804134e-05,3.8501476017100584,2.9302080816173377,21.24040349603741
11nfri6,2106,2023-03-10 05:22:26,[P] Looking for ML Buddies to Start Freelancing Together and Build a Supportive Community,Dukhanin,False,0.94,71,https://www.reddit.com/r/learnmachinelearning/comments/11nfri6/p_looking_for_ml_buddies_to_start_freelancing/,35,1678425746.0,"upd: dicord link [https://discord.gg/5zUaNXnFZY](https://discord.gg/5zUaNXnFZY)  
upd2: this not that small actually already - please dont be confused but help us organise this in the proper way

  
**TLDR:**

Looking for ML buddies at any level (preferably beginners) who want to start freelancing together. The goal is to build a small local community of ML enthusiasts who can support each other and exchange knowledge. We will use freelance collaboration as our main activity. We're also looking for experienced mentors (paid or unpaid) to guide us.

**Extended:**

I believe that learning and growing in a group is much more enjoyable and effective. That's why I'm trying to create a community of like-minded individuals.

I'm looking to create a small, local community for people who are starting out in freelancing, and who are interested in mutual support. Our main activity will be a Discord channel where members can post their work and collaborate on projects, with payment split by agreement. Additionally, we plan to engage in activities such as knowledge exchange, live coding, supporting each other's pet projects, and hosting study sessions.

This community will be small and focused, with members who can trust each other and share similar goals. We're also looking for experienced mentors who can provide guidance as we navigate the world of ML freelancing. Whether paid or unpaid, we welcome any support and advice.

About me: I'm a 21-year-old self-taught ML enthusiast from Russia. Although I don't have any experience in freelancing, I'm eager to start taking my first steps towards making money and gaining experience. As a beginner, I'm hoping to connect with others who are at a similar level and are also looking to grow.

**the text is chatgpt supported to prevet grammar issues, sound more native and clear**",llm,machinelearning,2.475523695294413e-05,1.2203285821873868e-05,2023-03-10 05:22:26,"upd dicord link [  
upd2 this not that small actually already - please dont be confused but help us organise this in the proper way

  
**TLDR**

Looking for ML buddies at any level (preferably beginners) who want to start freelancing together. The goal is to build a small local community of ML enthusiasts who can support each other and exchange knowledge. We will use freelance collaboration as our main activity. We're also looking for experienced mentors (paid or unpaid) to guide us.

**Extended**

I believe that learning and growing in a group is much more enjoyable and effective. That's why I'm trying to create a community of like-minded individuals.

I'm looking to create a small, local community for people who are starting out in freelancing, and who are interested in mutual support. Our main activity will be a Discord channel where members can post their work and collaborate on projects, with payment split by agreement. Additionally, we plan to engage in activities such as knowledge exchange, live coding, supporting each other's pet projects, and hosting study sessions.

This community will be small and focused, with members who can trust each other and share similar goals. We're also looking for experienced mentors who can provide guidance as we navigate the world of ML freelancing. Whether paid or unpaid, we welcome any support and advice.

About me I'm a 21-year-old self-taught ML enthusiast from Russia. Although I don't have any experience in freelancing, I'm eager to start taking my first steps towards making money and gaining experience. As a beginner, I'm hoping to connect with others who are at a similar level and are also looking to grow.

**the text is chatgpt supported to prevet grammar issues, sound more native and clear**",3 days 18:37:34,3.776087962962963,0.01,0.717,0.273,0.9979,pos,2.4754930547178647e-05,3.58351893845611,1.5636217936265102,21.241122135693605
11dc5b4,2109,2023-02-27 13:42:55,Can you fine-tune chatGPT in your data as of now?,Melodic_Stomach_2704,False,0.91,57,https://www.reddit.com/r/learnmachinelearning/comments/11dc5b4/can_you_finetune_chatgpt_in_your_data_as_of_now/,33,1677505375.0, I know that model is not publicly available so it's not possible to do it locally. But can you train or fine-tune chatGPT on your data using their API? I see many misguiding articles on the internet that are fine-tuning other GPT models claiming chatGPT.,llm,machinelearning,1.9873922624194584e-05,1.1505955203481075e-05,2023-02-27 13:42:55, I know that model is not publicly available so it's not possible to do it locally. But can you train or fine-tune chatGPT on your data using their API? I see many misguiding articles on the internet that are fine-tuning other GPT models claiming chatGPT.,14 days 10:17:05,14.428530092592593,0.0,1.0,0.0,0.0,neu,1.987372514047463e-05,3.5263605246161616,2.736218398881504,21.240573631573977
11g7h03,2201,2023-03-02 16:47:40,Build ChatGPT for Financial Documents with LangChain + Deep Lake,davidbun,False,0.95,171,https://www.reddit.com/r/learnmachinelearning/comments/11g7h03/build_chatgpt_for_financial_documents_with/,8,1677775660.0,"https://preview.redd.it/h9r6hgvfucla1.png?width=2388&format=png&auto=webp&s=5432eac3eeed8583e4309af1fdc7ebecac705796

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain](https://github.com/hwchase17/langchain) and [Deep Lake](https://github.com/activeloopai/deeplake) come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article](https://www.activeloop.ai/resources/ultimate-guide-to-lang-chain-deep-lake-build-chat-gpt-to-answer-questions-on-your-financial-data/) to learn:

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\#LangChain](https://www.linkedin.com/feed/hashtag/?keywords=langchain&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) and [\#DeepLake](https://www.linkedin.com/feed/hashtag/?keywords=deeplake&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) together to build [\#ChatGPT](https://www.linkedin.com/feed/hashtag/?keywords=chatgpt&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",llm,machinelearning,5.962176787258375e-05,2.7893224735711694e-06,2023-03-02 16:47:40,"

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain]( and [Deep Lake]( come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article]( to learn

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\LangChain]( and [\DeepLake]( together to build [\ChatGPT]( for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",11 days 07:12:20,11.30023148148148,0.011,0.886,0.103,0.9458,pos,5.961999056559467e-05,2.1972245773362196,2.5096180818339255,21.240734741774645
11akisx,2219,2023-02-24 06:26:36,Is there a way to easily train ChatGPT or GPT on custom knowledge?,senttoschool,False,0.99,118,https://www.reddit.com/r/learnmachinelearning/comments/11akisx/is_there_a_way_to_easily_train_chatgpt_or_gpt_on/,46,1677219996.0,"My company has internal documents. It'd be nice to be able to have GPT look over it, and then I can ask it questions on the internal documents.",llm,machinelearning,4.114250648517475e-05,1.6038604223034224e-05,2023-02-24 06:26:36,"My company has internal documents. It'd be nice to be able to have GPT look over it, and then I can ask it questions on the internal documents.",17 days 17:33:24,17.731527777777778,0.0,0.903,0.097,0.4215,pos,4.1141660155530045e-05,3.8501476017100584,2.9302080816173377,21.24040349603741
11dc5b4,2239,2023-02-27 13:42:55,Can you fine-tune chatGPT in your data as of now?,Melodic_Stomach_2704,False,0.91,58,https://www.reddit.com/r/learnmachinelearning/comments/11dc5b4/can_you_finetune_chatgpt_in_your_data_as_of_now/,33,1677505375.0, I know that model is not publicly available so it's not possible to do it locally. But can you train or fine-tune chatGPT on your data using their API? I see many misguiding articles on the internet that are fine-tuning other GPT models claiming chatGPT.,llm,machinelearning,2.0222587933390978e-05,1.1505955203481075e-05,2023-02-27 13:42:55, I know that model is not publicly available so it's not possible to do it locally. But can you train or fine-tune chatGPT on your data using their API? I see many misguiding articles on the internet that are fine-tuning other GPT models claiming chatGPT.,14 days 10:17:05,14.428530092592593,0.0,1.0,0.0,0.0,neu,2.022238345955261e-05,3.5263605246161616,2.736218398881504,21.240573631573977
118iccl,2243,2023-02-21 23:18:46,"How big was GPT-3.5's training dataset, and are there any good heuristics for how large an ML dataset needs to be for it to be good?",TikkunCreation,False,0.94,54,https://www.reddit.com/r/learnmachinelearning/comments/118iccl/how_big_was_gpt35s_training_dataset_and_are_there/,6,1677021526.0,"Say I want to do a model for fixing bugs in code. How many examples do I need for it to be good?

Or say I want to do a model for scoring boxing matches. How many examples do I need for it to be good?",llm,machinelearning,1.8827926696605396e-05,2.0919918551783773e-06,2023-02-21 23:18:46,"Say I want to do a model for fixing bugs in code. How many examples do I need for it to be good?

Or say I want to do a model for scoring boxing matches. How many examples do I need for it to be good?",20 days 00:41:14,20.02863425925926,0.0,0.804,0.196,0.7757,pos,1.8827749453420277e-05,1.9459101490553132,3.045885045107382,21.240285156318095
11mzbrs,2268,2023-03-09 18:15:03,Training Transformer Networks in Scikit-Learn?!,cmauck10,False,0.89,30,https://www.reddit.com/r/learnmachinelearning/comments/11mzbrs/training_transformer_networks_in_scikitlearn/,2,1678385703.0,"Have you ever wanted to use handy scikit-learn functionalities with your neural networks, but couldn’t because TensorFlow models are not compatible with the scikit-learn API?

I’m excited to introduce one-line wrappers for TensorFlow/Keras models that enable you to use TensorFlow models within scikit-learn workflows with features like Pipeline, GridSearch, and more.

[Swap in one line of code to use keras\/TF models with scikit-learn.](https://preview.redd.it/ulmww4ovwqma1.png?width=960&format=png&auto=webp&s=6da7628298976fc3d72e771abe2546bbf32c1e0e)

Transformers are extremely popular for modeling text nowadays with GPT3, ChatGPT, Bard, PaLM, FLAN excelling for conversational AI and other Transformers like T5 & BERT excelling for text classification. Scikit-learn offers a broadly useful suite of features for classifier models, but these are hard to use with Transformers. However not if you use these wrappers we developed, which only require changing one line of code to make your existing Tensorflow/Keras model compatible with scikit-learn’s rich ecosystem!

All you have to do is swap `keras.Model` → `KerasWrapperModel`, or `keras.Sequential` → `KerasSequentialWrapper`. The wrapper objects have all the same methods as their keras counterparts, plus you can use them with tons of awesome scikit-learn methods.

You can find a demo jupyter notebook and read more about the wrappers here: [https://cleanlab.ai/blog/transformer-sklearn/](https://cleanlab.ai/blog/transformer-sklearn/)",llm,machinelearning,1.0459959275891886e-05,6.973306183927923e-07,2023-03-09 18:15:03,"Have you ever wanted to use handy scikit-learn functionalities with your neural networks, but couldn’t because TensorFlow models are not compatible with the scikit-learn API?

I’m excited to introduce one-line wrappers for TensorFlow/Keras models that enable you to use TensorFlow models within scikit-learn workflows with features like Pipeline, GridSearch, and more.

[Swap in one line of code to use keras\/TF models with scikit-learn.](

Transformers are extremely popular for modeling text nowadays with GPT3, ChatGPT, Bard, PaLM, FLAN excelling for conversational AI and other Transformers like T5 & BEexcelling for text classification. Scikit-learn offers a broadly useful suite of features for classifier models, but these are hard to use with Transformers. However not if you use these wrappers we developed, which only require changing one line of code to make your existing Tensorflow/Keras model compatible with scikit-learn’s rich ecosystem!

All you have to do is swap `keras.Model` → `KerasWrapperModel`, or `keras.Sequential` → `KerasSequentialWrapper`. The wrapper objects have all the same methods as their keras counterparts, plus you can use them with tons of awesome scikit-learn methods.

You can find a demo jupyter notebook and read more about the wrappers here [",4 days 05:44:57,4.239548611111111,0.008,0.834,0.158,0.9878,pos,1.0459904570851093e-05,1.0986122886681098,1.6562353517047097,21.24109827793419
11g7h03,2288,2023-03-02 16:47:40,Build ChatGPT for Financial Documents with LangChain + Deep Lake,davidbun,False,0.95,171,https://www.reddit.com/r/learnmachinelearning/comments/11g7h03/build_chatgpt_for_financial_documents_with/,8,1677775660.0,"https://preview.redd.it/h9r6hgvfucla1.png?width=2388&format=png&auto=webp&s=5432eac3eeed8583e4309af1fdc7ebecac705796

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain](https://github.com/hwchase17/langchain) and [Deep Lake](https://github.com/activeloopai/deeplake) come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article](https://www.activeloop.ai/resources/ultimate-guide-to-lang-chain-deep-lake-build-chat-gpt-to-answer-questions-on-your-financial-data/) to learn:

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\#LangChain](https://www.linkedin.com/feed/hashtag/?keywords=langchain&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) and [\#DeepLake](https://www.linkedin.com/feed/hashtag/?keywords=deeplake&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) together to build [\#ChatGPT](https://www.linkedin.com/feed/hashtag/?keywords=chatgpt&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",llm,machinelearning,5.962176787258375e-05,2.7893224735711694e-06,2023-03-02 16:47:40,"

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain]( and [Deep Lake]( come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article]( to learn

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\LangChain]( and [\DeepLake]( together to build [\ChatGPT]( for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",11 days 07:12:20,11.30023148148148,0.011,0.886,0.103,0.9458,pos,5.961999056559467e-05,2.1972245773362196,2.5096180818339255,21.240734741774645
118iccl,2301,2023-02-21 23:18:46,"How big was GPT-3.5's training dataset, and are there any good heuristics for how large an ML dataset needs to be for it to be good?",TikkunCreation,False,0.93,53,https://www.reddit.com/r/learnmachinelearning/comments/118iccl/how_big_was_gpt35s_training_dataset_and_are_there/,6,1677021526.0,"Say I want to do a model for fixing bugs in code. How many examples do I need for it to be good?

Or say I want to do a model for scoring boxing matches. How many examples do I need for it to be good?",llm,machinelearning,1.8479261387409e-05,2.0919918551783773e-06,2023-02-21 23:18:46,"Say I want to do a model for fixing bugs in code. How many examples do I need for it to be good?

Or say I want to do a model for scoring boxing matches. How many examples do I need for it to be good?",20 days 00:41:14,20.02863425925926,0.0,0.804,0.196,0.7757,pos,1.8479090647869084e-05,1.9459101490553132,3.045885045107382,21.240285156318095
117f8ms,2342,2023-02-20 17:41:43,GPT2 last hidden states vs Large Sentence Encoder,KahlessAndMolor,False,0.9,7,https://www.reddit.com/r/learnmachinelearning/comments/117f8ms/gpt2_last_hidden_states_vs_large_sentence_encoder/,3,1676914903.0,"Hello!

&#x200B;

I have 2 different applications I'm working on in this project:

&#x200B;

1. A text classifier
2. A similarity finder: Here's a list of 10 text documents, get a similarity index across them (for a total of 100 pairs) and return the top 10 that aren't self-referencing. That is, excluding the text #3 vs text #3 = 1.00 similarity type of outputs.

I have previously used google's sentence encoder/large for this purpose and I've had pretty good results. It returns a single vector of length 768 no matter how many tokens I send it. This results in downstream models with an acceptable number of parameters for running in production without breaking the bank on enormous virtual machines.

&#x200B;

Now, I'd like to use the GPT2/XL model from Huggingface. If I give it an input string of 8 tokens, I get back a TFBaseModelOutputWithPastAndCrossAttentions. This contains a last\_hidden\_states, which I understand to be the last layer outputs before sending to a head used for a particular task. This is similar to the output of the sentence encoder, I think. When I look at the last\_hidden\_states, I'm getting a shape of (# of tokens, 1600). I did a cosine similarity between the first and last tokens:

&#x200B;

cosine\_similarity(output.last\_hidden\_state\[0\]\[0\].numpy().reshape(1, -1), output.last\_hidden\_state\[0\]\[-1\].numpy().reshape(1, -1)) 

&#x200B;

And it returned 0.4346, indicating there's substantially different data from the first to the last token. I imagine this only increases as I use more and more tokens. 

&#x200B;

It would be nice if I could capture the greater power of the GPT model into a fixed-length vector so I could then easily use it in down-stream tasks. But, I also don't need to lose all that information.

&#x200B;

So if I'm feeding this output to a further downstream task, should I:

&#x200B;

\- Send it on through as a 2D tensor with the whole thing in there: This would result in a possibly huge model size down the road, which might lead to a need for a huge amount of data to train

&#x200B;

\- Flatten the whole thing and send a vector of 12,800 (8 tokens \* 1600 per token) to the downstream task. Same issue, might require a large number of parameters.

&#x200B;

\- Use only the first or the last of these. Feels like I might be losing a lot of the meaning of the overall text, especially if the body of the text is quite large

&#x200B;

\- Use a dimensionality reduction technique like isomap to reduce the last hidden states into a fixed length? This seems like it could potentially maintain most of the information but reduce the dimensions for a manageable down-stream model size.

&#x200B;

What do you think, and why?

&#x200B;

Thank you kind friends.",llm,machinelearning,2.4406571643747734e-06,1.0459959275891887e-06,2023-02-20 17:41:43,"Hello!

&x200B;

I have 2 different applications I'm working on in this project

&x200B;

1. A text classifier
2. A similarity finder Here's a list of 10 text documents, get a similarity index across them (for a total of 100 pairs) and return the top 10 that aren't self-referencing. That is, excluding the text 3 vs text 3 = 1.00 similarity type of outputs.

I have previously used google's sentence encoder/large for this purpose and I've had pretty good results. It returns a single vector of length 768 no matter how many tokens I send it. This results in downstream models with an acceptable number of parameters for running in production without breaking the bank on enormous virtual machines.

&x200B;

Now, I'd like to use the GPT2/XL model from Huggingface. If I give it an input string of 8 tokens, I get back a TFBaseModelOutputWithPastAndCrossAttentions. This contains a last\_hidden\_states, which I understand to be the last layer outputs before sending to a head used for a particular task. This is similar to the output of the sentence encoder, I think. When I look at the last\_hidden\_states, I'm getting a shape of ( of tokens, 1600). I did a cosine similarity between the first and last tokens

&x200B;

cosine\_similarity(output.last\_hidden\_state\[0\]\[0\].numpy().reshape(1, -1), output.last\_hidden\_state\[0\]\[-1\].numpy().reshape(1, -1)) 

&x200B;

And it returned 0.4346, indicating there's substantially different data from the first to the last token. I imagine this only increases as I use more and more tokens. 

&x200B;

It would be nice if I could capture the greater power of the GPT model into a fixed-length vector so I could then easily use it in down-stream tasks. But, I also don't need to lose all that information.

&x200B;

So if I'm feeding this output to a further downstream task, should I

&x200B;

\- Send it on through as a 2D tensor with the whole thing in there This would result in a possibly huge model size down the road, which might lead to a need for a huge amount of data to train

&x200B;

\- Flatten the whole thing and send a vector of 12,800 (8 tokens \* 1600 per token) to the downstream task. Same issue, might require a large number of parameters.

&x200B;

\- Use only the first or the last of these. Feels like I might be losing a lot of the meaning of the overall text, especially if the body of the text is quite large

&x200B;

\- Use a dimensionality reduction technique like isomap to reduce the last hidden states into a fixed length? This seems like it could potentially maintain most of the information but reduce the dimensions for a manageable down-stream model size.

&x200B;

What do you think, and why?

&x200B;

Thank you kind friends.",21 days 06:18:17,21.26269675925926,0.011,0.862,0.127,0.992,pos,2.4406541859720676e-06,1.3862943611198906,3.1029124867242484,21.240221575506574
117hd0f,2350,2023-02-20 19:01:54,Master ChatGPT Prompt Engineering (Deep Dive),jeyThaswan,False,0.8,6,https://www.reddit.com/r/learnmachinelearning/comments/117hd0f/master_chatgpt_prompt_engineering_deep_dive/,2,1676919714.0," 

I wrote a deep dive on prompt engineering as a resource for the AI community and my 10,000 daily newsletter subscribers ([Inclined.ai](https://www.inclined.ai/p/prompt-engineering-guide) if you're curious). We've included some examples so feel free to copy and paste the prompts into ChatGPT!

&#x200B;

**WHAT IS PROMPT ENGINEERING?**

The term is relatively new, and its origins are argued *(because we live in the internet age, and it’s harder to claim ownership)*. Prompt engineering is the ability to instruct and teach AI effectively.

If it helps, think of this as rapid testing or instruction writing for artificial intelligence.

What’s important is not to let this overwhelm you. The first prompting happened with the first AI model. The first example was showing computer images of circles and triangles. **Today’s neural networks can process way more data, creating complexities.**

So, the concept is simple, but digging into the full power of AI today is something else entirely.

We’re not talking about asking questions. Odds are, if you’re typing *“what’s 2+2”* into ChatGPT, then you need to keep reading.

We can all ask chatbots questions. That can work more often than not. But AI is not perfect. A common metaphor I see is to treat GPT-based large language models like the smartest five-year-old you’ve ever met.

I have a niece around that age and can’t imagine trying to get her to write an essay on the effects of soil mismanagement in relation to Reconstruction politics. *See! Your eyes glazed over reading that, so how do we make this work for our AI buddies?*

The Principles of Prompting

Stop asking single-line questions. *That’s like using a top-rated cookbook to find out how to make grilled cheese.*

**There are three ways to instantly get better at prompting** and go from grilled cheese to top-notch bolognese. From there, we can get into some specific prompt concepts and the ability to unlock ChatGPT’s full potential.

Principle 1: Context is King

GPT-3.5 is swimming in data. When you ask it for a simple request, it can end up complicating things more than you realize. Did you ever wonder why ChatGPT is so bad at math?

The reality is the LLM is taking words and turning them into patterns. From there, it’s making an educated guess.

Give your chat AI a frame to search into. If you give it a math problem, you need to make sure it grasps that you want it to do math. If you’d like ChatGPT to write a high school essay, you must ensure it knows to write at that level.

**Instead of:** “Plan a party for a kid.”

**Try:** “My child is turning 9. They like superheroes and the color red. Help me plan a party for this weekend. Ten of his friends are coming to my house.”

You’ll get a much better response this way. **Context is the cardinal direction** that helps your chat companion find the most correct guess and phrase it the best way.

Principle 2: Get Specific

Pretend you’re writing a law that’s going to be judged by the Supreme Court of the United States. You know what they look for: narrow tailoring.

**Keep things on track and stay focused.** Try to avoid prompting outside the specific request. You’ll only hurt the ability of the chat AI to give you a quality response. Odds are they’ll even skip over parts if you confuse them with too many requests.

It runs parallel with context. *If you set ChatGPT up in a room and then tell it to focus on describing the chair first, you’ll see better results.*

**Instead of:** “I’m going to a job interview. Write five questions for me to answer. Add tips for how to not get nervous before the interview. Do not create questions asking about my background.”

**Try:** “You’re interviewing a software engineer. Create five questions to ask them to understand their skill set and qualifications better.”

Nothing limits the number of prompts you can do. Focus and expand from the initial request and try not to do everything at once.

Principle 3: When in Doubt: “Let’s take this step-by-step.”

Welcome. **You discovered the magic word today.** This phrase slows everything down for the AI and gets you where you need to go.

You don’t need to start with this phrase. Using it tells ChatGPT to show their work.

We’ll explain where this concept comes from further in our briefing, but here’s the TL;DR: sometimes, there’s a part of our prompt it’s not identified correctly. “Let’s take this step-by-step,” reminds you and ChatGPT to **slow down and get specific.**

If you learn to utilize this phrase more often and find ways to make it work for you, you’ll become a better prompt engineer. One term can do a lot of heavy lifting.

**Pro-tip:** We’ve shown you “standard” prompts in all these examples. Many prompt engineers will use “Standard QA form” prompts. Here’s our example for this principle written that way.

**Example:**

*“Q: The Industrial Revolution rapidly changed the infrastructure in London. Describe three essential innovations from this period and connect them to Landon’s development.*

*A: Let’s take this step-by-step.”*

Even without our magic word, this style of standard prompting is quite helpful to adopt.

*However, we’re beginning to stumble into the advanced tactics used in prompt engineering, so it’s time for a new section.*

UNIQUE WAYS TO PROMPT

Let’s preface this: we can go super deep here. Prompt engineering is changing daily, and as these models get more sophisticated, the need to adapt prompts strengthens.

To keep things clean, I will go through these using our metaphor from earlier. **Let’s pretend ChatGPT is a super-intelligent toddler.**

*Got it? With that buy-in, we can continue.*

1/ Role Prompting

We’ll start with a popular tactic. **Our toddler is great at imagining things.** You tell them they’re a fireman, and suddenly they can give you detailed ways to ensure your apartment is up to code. Role-playing is a fun, easy way to build context.

The best part of role prompting is how easy it is to understand and use. All you need to do is tell ChatGPT to play a role. From there, the AI will do its best to fill the part *like that enthusiastic drama student from your old high school.*

You can even take this a step further. **Try framing your prompt as a script.** Tell the LLM specific instructions around a scene that gives you the answer to your question.

TRY IT OUT FOR YOURSELF:

Copy this prompt into ChatGPT and find a destination!

“Act as a travel guide. I will tell you my location and you will suggest a place to visit near my location. In some cases, I will also give you the type of places I will visit. You will also suggest me places of similar type that are close to my first location. My first suggestion: \[fill it in\]”

Why would you take that extra step? While popular, role prompting does not necessarily improve accuracy. *You can tell your five-year-old they’re a mathematician, and they’ll still manage to screw things up.*

Let’s get deeper.

2/ Chain-of-Thought Prompting

There’s a scene in ***Guardians of the Galaxy*** where Rocket Raccoon is trying to [teach young Groot](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwczovL3lvdXR1LmJlL0hyaW1mZ2pmNGs4IiwicG9zdF9pZCI6ImM0ODlmMzhkLTY3NDAtNGRmNS05MWJjLTM1ODA0YTVmNTZkMiIsInB1YmxpY2F0aW9uX2lkIjoiNjNkODQ2ZGUtZDFiZi00ZTVjLWJjYzgtOWMxYzlkMWIxMjA0IiwidmlzaXRfdG9rZW4iOiJkZWRiNmMyNy1hYmM0LTQ5ZDUtYWM2Ny04OTcyZmM1MGVmM2QiLCJpYXQiOjE2NzY5MTkwNjguMTUyLCJpc3MiOiJvcmNoaWQifQ.5eZkDLGRLCXXYv32FYT7kLSbdRK5OK1iemTRf3HVmJw)

how to activate a complicated device. That’s chain-of-thought prompting.

**You take an example question and answer it for ChatGPT.** Show them your chain of thought. Then you give it a new question in the same vein and ask it for an answer.

This prompt style allows you to get more specific. You’re telling your toddler they’re here to answer this particular question with one specific logic pattern.

Within this specific style is two other sub-categories. Let me give the rundown:

* Zero-shot Chain-of-Thought is “Let’s take this step-by-step” you frame the question the same, but don’t give it a precursor. Instead, you ask it to think through the points made. EX: Q: X is A. Y is B. What is C? A: Let’s take this step-by-step.
* Self-consistency is using several responses to find the most accurate answer. You give ChatGPT more swings at the ball. Take the hits and discover the grouping.

TRY IT OUT FOR YOURSELF:

Copy this prompt into ChatGPT and see how accurate it is:

“Q: Which is a faster way to get home?

Option 1: Take an 10 minutes bus, then an 40 minute bus, and finally a 10 minute train.

Option 2: Take a 90 minutes train, then a 45 minute bike ride, and finally a 10 minute bus.

A: Option 1 will take 10+40+10 = 60 minutes.

Option 2 will take 90+45+10=145 minutes.

Since Option 1 takes 60 minutes and Option 2 takes 145 minutes, Option 1 is faster.

Q: Which is a faster way to get to work?

Option 1: Take a 1000 minute bus, then a half hour train, and finally a 10 minute bike ride.

Option 2: Take an 800 minute bus, then an hour train, and finally a 30 minute bike ride.

A: ”

[Learnprompting.org](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwOi8vTGVhcm5wcm9tcHRpbmcub3JnIiwicG9zdF9pZCI6ImM0ODlmMzhkLTY3NDAtNGRmNS05MWJjLTM1ODA0YTVmNTZkMiIsInB1YmxpY2F0aW9uX2lkIjoiNjNkODQ2ZGUtZDFiZi00ZTVjLWJjYzgtOWMxYzlkMWIxMjA0IiwidmlzaXRfdG9rZW4iOiJkZWRiNmMyNy1hYmM0LTQ5ZDUtYWM2Ny04OTcyZmM1MGVmM2QiLCJpYXQiOjE2NzY5MTkwNjguMTUyLCJpc3MiOiJvcmNoaWQifQ.-wOnVYoMNWXYrR5NOB4YYKp4Lmj-aZq3y-pr4Hou9pE)

\- by leaving the “A:” blank you’re prompting ChatGPT for the answer

Alright, you’re almost there—one more to go.

3/ General Knowledge Prompting

You’re going to notice a trend here. This prompt style also circles context and narrow tailoring.

All you do is tell your toddler how the world works. The cow goes moo. The dog goes woof. So what does a cat say?

It’s an oversimplification, but the core reasoning is there. Show ChatGPT some knowledge and turn that into the only focus for that chat. You can take an article from the internet and summarize it for the model. Make sure to ask if it understands and relay the information to you.

Once you know you have the attention set in the suitable space, get to work. For instance, we can share an Inclined newsletter with it and tell ChatGPT about its structure and tone.

From there, you can provide new information and tell ChatGPT to summarize it within the same structure as Inclined. You both share the same general knowledge now.

TRY IT OUT FOR YOURSELF:

Copy this prompt into ChatGPT and test it out:

“Prompt 1. Look over this article here: \[pick an article\]. Breakdown its structure and general tone.

Prompt 2: Recall the structure and tone you mentioned above. Take that general knowledge and summarize this article: \[pick a new one\] using the same structure and tone.”

Note: this is a heavily simplified version of GA Prompting

Did you know some [people don’t consider](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwczovL25ld3MueWNvbWJpbmF0b3IuY29tL2l0ZW0_aWQ9MzQ0OTU0NTUiLCJwb3N0X2lkIjoiYzQ4OWYzOGQtNjc0MC00ZGY1LTkxYmMtMzU4MDRhNWY1NmQyIiwicHVibGljYXRpb25faWQiOiI2M2Q4NDZkZS1kMWJmLTRlNWMtYmNjOC05YzFjOWQxYjEyMDQiLCJ2aXNpdF90b2tlbiI6ImRlZGI2YzI3LWFiYzQtNDlkNS1hYzY3LTg5NzJmYzUwZWYzZCIsImlhdCI6MTY3NjkxOTA2OC4xNTMsImlzcyI6Im9yY2hpZCJ9.yHKIPujINT89tsqOo07AXk6OrKNgoMjO3fBEYPkAdNY)

that prompt engineering?

PROMPT CULTURE

*“How can something not be prompt engineering if it’s a prompt style?”*

Good question, imaginary reader. The culture around this skill is relatively fresh. So some of **these concepts are seen as too easy** to be considered accurate prompt testing.

General knowledge prompting is simply establishing the context, and for some, that’s a baseline everyone needs to do. The same can be said for role prompting, too. *All of these tiny preferences are semantics.*

**Don’t sweat whether you’re a “real” prompt engineer.** Test this out and share your insights in these communities. The opportunity is there for you.

You may even know about DAN (we’ve covered it in previous newsletters) and other AI hacking methods. Those all start with prompt engineering. You can make the case that unless the AI behaves outside its parameters, you’re not genuinely doing prompt engineering.

I'm afraid I have to disagree with that, and **careers are sprouting up everywhere** that center directly on this skill. **Many require a core understanding of the prompt styles we’ve discussed.**

*Yep, you can learn this and make money from talking with AI.*

Anthropic even [posted a role for a prompt engineer](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwczovL2pvYnMubGV2ZXIuY28vQW50aHJvcGljL2UzY2RlNDgxLWQ0NDYtNDYwZi1iNTc2LTkzY2FiNjdiZDFlZCIsInBvc3RfaWQiOiJjNDg5ZjM4ZC02NzQwLTRkZjUtOTFiYy0zNTgwNGE1ZjU2ZDIiLCJwdWJsaWNhdGlvbl9pZCI6IjYzZDg0NmRlLWQxYmYtNGU1Yy1iY2M4LTljMWM5ZDFiMTIwNCIsInZpc2l0X3Rva2VuIjoiZGVkYjZjMjctYWJjNC00OWQ1LWFjNjctODk3MmZjNTBlZjNkIiwiaWF0IjoxNjc2OTE5MDY4LjE1MywiaXNzIjoib3JjaGlkIn0.4s7Htzgoxv0_qM1Ten17oQ5h0_QGM6e1fGUYz_ymgJ4)

that nets a quarter million in salary. I did not make that up and even considered sprucing up the old resume. When a new skill like this comes about, it’s worth looking at.

There are many other examples like this, and OpenAI uses a red teaming strategy where their engineers attempt to prompt hack their own GPT models.

I can tell you all about the open roles here, but tomorrow the whole cycle will change. *Isn’t that exciting, though?* The entire identity around prompt engineering will change by this time next year.

WHAT SHOULD YOU TAKEAWAY?

Communication is everything. **Learning to speak with AI is rising in importance.**

We all watch with mouth agape at the new wonders in AI because we know this will disrupt every industry. If any of this piqued your interest, the window to pursue it is now open. Ride that wave and [learn](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwczovL2xlYXJucHJvbXB0aW5nLm9yZy8iLCJwb3N0X2lkIjoiYzQ4OWYzOGQtNjc0MC00ZGY1LTkxYmMtMzU4MDRhNWY1NmQyIiwicHVibGljYXRpb25faWQiOiI2M2Q4NDZkZS1kMWJmLTRlNWMtYmNjOC05YzFjOWQxYjEyMDQiLCJ2aXNpdF90b2tlbiI6ImRlZGI2YzI3LWFiYzQtNDlkNS1hYzY3LTg5NzJmYzUwZWYzZCIsImlhdCI6MTY3NjkxOTA2OC4xNTMsImlzcyI6Im9yY2hpZCJ9.a67KDSN9yQfZsaMeHpdcbSbtPjD4yFcGW4stdxBjX1M)

to become a brilliant prompt engineer.

Heck, even if you don’t want to switch careers, **talking with ChatGPT and all the newest LLMs is becoming a part of our daily routine.** Get to the point where you maximize every interaction and work with these chatbots to upskill your workflow.

Prompt engineering can save you time, eliminate hassle, and even help you become a more patient person. Focus on what you want and explain it with intent.

Make magic happen, and remember: **take it step-by-step.**",llm,machinelearning,2.0919918551783773e-06,6.973306183927923e-07,2023-02-20 19:01:54," 

I wrote a deep dive on prompt engineering as a resource for the AI community and my 10,000 daily newsletter subscribers ([Inclined.ai]( if you're curious). We've included some examples so feel free to copy and paste the prompts into ChatGPT!

&x200B;

**WHAT IS PROMPT ENGINEERING?**

The term is relatively new, and its origins are argued *(because we live in the internet age, and it’s harder to claim ownership)*. Prompt engineering is the ability to instruct and teach AI effectively.

If it helps, think of this as rapid testing or instruction writing for artificial intelligence.

What’s important is not to let this overwhelm you. The first prompting happened with the first AI model. The first example was showing computer images of circles and triangles. **Today’s neural networks can process way more data, creating complexities.**

So, the concept is simple, but digging into the full power of AI today is something else entirely.

We’re not talking about asking questions. Odds are, if you’re typing *“what’s 2+2”* into ChatGPT, then you need to keep reading.

We can all ask chatbots questions. That can work more often than not. But AI is not perfect. A common metaphor I see is to treat GPT-based large language models like the smartest five-year-old you’ve ever met.

I have a niece around that age and can’t imagine trying to get her to write an essay on the effects of soil mismanagement in relation to Reconstruction politics. *See! Your eyes glazed over reading that, so how do we make this work for our AI buddies?*

The Principles of Prompting

Stop asking single-line questions. *That’s like using a top-rated cookbook to find out how to make grilled cheese.*

**There are three ways to instantly get better at prompting** and go from grilled cheese to top-notch bolognese. From there, we can get into some specific prompt concepts and the ability to unlock ChatGPT’s full potential.

Principle 1 Context is King

GPT-3.5 is swimming in data. When you ask it for a simple request, it can end up complicating things more than you realize. Did you ever wonder why ChatGPT is so bad at math?

The reality is the LLM is taking words and turning them into patterns. From there, it’s making an educated guess.

Give your chat AI a frame to search into. If you give it a math problem, you need to make sure it grasps that you want it to do math. If you’d like ChatGPT to write a high school essay, you must ensure it knows to write at that level.

**Instead of** “Plan a party for a kid.”

**Try** “My child is turning 9. They like superheroes and the color red. Help me plan a party for this weekend. Ten of his friends are coming to my house.”

You’ll get a much better response this way. **Context is the cardinal direction** that helps your chat companion find the most correct guess and phrase it the best way.

Principle 2 Get Specific

Pretend you’re writing a law that’s going to be judged by the Supreme Court of the United States. You know what they look for narrow tailoring.

**Keep things on track and stay focused.** Try to avoid prompting outside the specific request. You’ll only hurt the ability of the chat AI to give you a quality response. Odds are they’ll even skip over parts if you confuse them with too many requests.

It runs parallel with context. *If you set ChatGPT up in a room and then tell it to focus on describing the chair first, you’ll see better results.*

**Instead of** “I’m going to a job interview. Write five questions for me to answer. Add tips for how to not get nervous before the interview. Do not create questions asking about my background.”

**Try** “You’re interviewing a software engineer. Create five questions to ask them to understand their skill set and qualifications better.”

Nothing limits the number of prompts you can do. Focus and expand from the initial request and try not to do everything at once.

Principle 3 When in Doubt “Let’s take this step-by-step.”

Welcome. **You discovered the magic word today.** This phrase slows everything down for the AI and gets you where you need to go.

You don’t need to start with this phrase. Using it tells ChatGPT to show their work.

We’ll explain where this concept comes from further in our briefing, but here’s the TL;DR sometimes, there’s a part of our prompt it’s not identified correctly. “Let’s take this step-by-step,” reminds you and ChatGPT to **slow down and get specific.**

If you learn to utilize this phrase more often and find ways to make it work for you, you’ll become a better prompt engineer. One term can do a lot of heavy lifting.

**Pro-tip** We’ve shown you “standard” prompts in all these examples. Many prompt engineers will use “Standard QA form” prompts. Here’s our example for this principle written that way.

**Example**

*“Q The Industrial Revolution rapidly changed the infrastructure in London. Describe three essential innovations from this period and connect them to Landon’s development.*

*A Let’s take this step-by-step.”*

Even without our magic word, this style of standard prompting is quite helpful to adopt.

*However, we’re beginning to stumble into the advanced tactics used in prompt engineering, so it’s time for a new section.*

UNIQUE WAYS TO PROMPT

Let’s preface this we can go super deep here. Prompt engineering is changing daily, and as these models get more sophisticated, the need to adapt prompts strengthens.

To keep things clean, I will go through these using our metaphor from earlier. **Let’s pretend ChatGPT is a super-intelligent toddler.**

*Got it? With that buy-in, we can continue.*

1/ Role Prompting

We’ll start with a popular tactic. **Our toddler is great at imagining things.** You tell them they’re a fireman, and suddenly they can give you detailed ways to ensure your apartment is up to code. Role-playing is a fun, easy way to build context.

The best part of role prompting is how easy it is to understand and use. All you need to do is tell ChatGPT to play a role. From there, the AI will do its best to fill the part *like that enthusiastic drama student from your old high school.*

You can even take this a step further. **Try framing your prompt as a script.** Tell the LLM specific instructions around a scene that gives you the answer to your question.

TRY IT OUT FOR YOURSELF

Copy this prompt into ChatGPT and find a destination!

“Act as a travel guide. I will tell you my location and you will suggest a place to visit near my location. In some cases, I will also give you the type of places I will visit. You will also suggest me places of similar type that are close to my first location. My first suggestion \[fill it in\]”

Why would you take that extra step? While popular, role prompting does not necessarily improve accuracy. *You can tell your five-year-old they’re a mathematician, and they’ll still manage to screw things up.*

Let’s get deeper.

2/ Chain-of-Thought Prompting

There’s a scene in ***Guardians of the Galaxy*** where Rocket Raccoon is trying to [teach young Groot](

how to activate a complicated device. That’s chain-of-thought prompting.

**You take an example question and answer it for ChatGPT.** Show them your chain of thought. Then you give it a new question in the same vein and ask it for an answer.

This prompt style allows you to get more specific. You’re telling your toddler they’re here to answer this particular question with one specific logic pattern.

Within this specific style is two other sub-categories. Let me give the rundown

* Zero-shot Chain-of-Thought is “Let’s take this step-by-step” you frame the question the same, but don’t give it a precursor. Instead, you ask it to think through the points made. EX Q X is A. Y is B. What is C? A Let’s take this step-by-step.
* Self-consistency is using several responses to find the most accurate answer. You give ChatGPT more swings at the ball. Take the hits and discover the grouping.

TRY IT OUT FOR YOURSELF

Copy this prompt into ChatGPT and see how accurate it is

“Q Which is a faster way to get home?

Option 1 Take an 10 minutes bus, then an 40 minute bus, and finally a 10 minute train.

Option 2 Take a 90 minutes train, then a 45 minute bike ride, and finally a 10 minute bus.

A Option 1 will take 10+40+10 = 60 minutes.

Option 2 will take 90+45+10=145 minutes.

Since Option 1 takes 60 minutes and Option 2 takes 145 minutes, Option 1 is faster.

Q Which is a faster way to get to work?

Option 1 Take a 1000 minute bus, then a half hour train, and finally a 10 minute bike ride.

Option 2 Take an 800 minute bus, then an hour train, and finally a 30 minute bike ride.

A ”

[Learnprompting.org](

\- by leaving the “A” blank you’re prompting ChatGPT for the answer

Alright, you’re almost there—one more to go.

3/ General Knowledge Prompting

You’re going to notice a trend here. This prompt style also circles context and narrow tailoring.

All you do is tell your toddler how the world works. The cow goes moo. The dog goes woof. So what does a cat say?

It’s an oversimplification, but the core reasoning is there. Show ChatGPT some knowledge and turn that into the only focus for that chat. You can take an article from the internet and summarize it for the model. Make sure to ask if it understands and relay the information to you.

Once you know you have the attention set in the suitable space, get to work. For instance, we can share an Inclined newsletter with it and tell ChatGPT about its structure and tone.

From there, you can provide new information and tell ChatGPT to summarize it within the same structure as Inclined. You both share the same general knowledge now.

TRY IT OUT FOR YOURSELF

Copy this prompt into ChatGPT and test it out

“Prompt 1. Look over this article here \[pick an article\]. Breakdown its structure and general tone.

Prompt 2 Recall the structure and tone you mentioned above. Take that general knowledge and summarize this article \[pick a new one\] using the same structure and tone.”

Note this is a heavily simplified version of GA Prompting

Did you know some [people don’t consider](

that prompt engineering?

PROMPT CULTURE

*“How can something not be prompt engineering if it’s a prompt style?”*

Good question, imaginary reader. The culture around this skill is relatively fresh. So some of **these concepts are seen as too easy** to be considered accurate prompt testing.

General knowledge prompting is simply establishing the context, and for some, that’s a baseline everyone needs to do. The same can be said for role prompting, too. *All of these tiny preferences are semantics.*

**Don’t sweat whether you’re a “real” prompt engineer.** Test this out and share your insights in these communities. The opportunity is there for you.

You may even know about DAN (we’ve covered it in previous newsletters) and other AI hacking methods. Those all start with prompt engineering. You can make the case that unless the AI behaves outside its parameters, you’re not genuinely doing prompt engineering.

I'm afraid I have to disagree with that, and **careers are sprouting up everywhere** that center directly on this skill. **Many require a core understanding of the prompt styles we’ve discussed.**

*Yep, you can learn this and make money from talking with AI.*

Anthropic even [posted a role for a prompt engineer](

that nets a quarter million in salary. I did not make that up and even considered sprucing up the old resume. When a new skill like this comes about, it’s worth looking at.

There are many other examples like this, and OpenAI uses a red teaming strategy where their engineers attempt to prompt hack their own GPT models.

I can tell you all about the open roles here, but tomorrow the whole cycle will change. *Isn’t that exciting, though?* The entire identity around prompt engineering will change by this time next year.

WHAT SHOULD YOU TAKEAWAY?

Communication is everything. **Learning to speak with AI is rising in importance.**

We all watch with mouth agape at the new wonders in AI because we know this will disrupt every industry. If any of this piqued your interest, the window to pursue it is now open. Ride that wave and [learn](

to become a brilliant prompt engineer.

Heck, even if you don’t want to switch careers, **talking with ChatGPT and all the newest LLMs is becoming a part of our daily routine.** Get to the point where you maximize every interaction and work with these chatbots to upskill your workflow.

Prompt engineering can save you time, eliminate hassle, and even help you become a more patient person. Focus on what you want and explain it with intent.

Make magic happen, and remember **take it step-by-step.**",21 days 04:58:06,21.207013888888888,0.021,0.872,0.108,0.9996,pos,2.091989666868002e-06,1.0986122886681098,3.1004081799203456,21.240224444461393
11hp55s,2368,2023-03-04 04:14:37,How to properly format data for AiTextGen Gpt-2,AlphaCloudX,False,1.0,4,https://www.reddit.com/r/learnmachinelearning/comments/11hp55s/how_to_properly_format_data_for_aitextgen_gpt2/,0,1677903277.0,"Currently I'm trying to fine tune gpt-2 on my own dataset. The dataset was scraped from a forum where I got the title of the post, content of the post and the replies. It looks like this:

Q: Question 1?  
C: Context For Question 1...  
A: Reply For Question 1...  
<|endoftext|>

Q: Question 2?  
C: Context For Question 2...  
A: Reply For Question 2...  
A: Another Reply For Question 2...  
<|endoftext|>

Q: Question 3?  
C: Context For Question 3...  
A: Another Reply For Question 3...  
A: Another Reply For Question 3...  
<|endoftext|>

I'm using the aitextgen library for python and pretty much following along with the example. The goal is for it to be able to attempt to answer questions in a conversational way but the caveat being I don't have the context for the answers.

I tried taking a look at other question answering models but they all seem to require some sort of context.

Any idea on how I can improve the formatting of the data or if there are any python libraries I can use for a question answering style or conversational ai?",llm,machinelearning,1.3946612367855847e-06,0.0,2023-03-04 04:14:37,"Currently I'm trying to fine tune gpt-2 on my own dataset. The dataset was scraped from a forum where I got the title of the post, content of the post and the replies. It looks like this

Q Question 1?  
C Context For Question 1...  
A Reply For Question 1...  
<|endoftext|>

Q Question 2?  
C Context For Question 2...  
A Reply For Question 2...  
A Another Reply For Question 2...  
<|endoftext|>

Q Question 3?  
C Context For Question 3...  
A Another Reply For Question 3...  
A Another Reply For Question 3...  
<|endoftext|>

I'm using the aitextgen library for python and pretty much following along with the example. The goal is for it to be able to attempt to answer questions in a conversational way but the caveat being I don't have the context for the answers.

I tried taking a look at other question answering models but they all seem to require some sort of context.

Any idea on how I can improve the formatting of the data or if there are any python libraries I can use for a question answering style or conversational ai?",9 days 19:45:23,9.82318287037037,0.0,0.942,0.058,0.8426,pos,1.3946602641808623e-06,0.0,2.3816903956287683,21.240810802090536
118mk1d,2377,2023-02-22 02:32:01,How to Use ChatGPT in Python API and Run Batch Jobs with UI,Fun_Pollution_3899,False,0.72,3,https://www.reddit.com/r/learnmachinelearning/comments/118mk1d/how_to_use_chatgpt_in_python_api_and_run_batch/,0,1677033121.0,"I wanted to share a tutorial on how to use ChatGPT in Python API and how to run batch jobs with a UI. ChatGPT is a powerful language model that can generate text in a conversational manner. It can be used for a variety of tasks, such as chatbots, text completion, and more.
Repo: [https://github.com/CodeDiggerM/chatgpt-batch-whipper](https://github.com/CodeDiggerM/chatgpt-batch-whipper)

## Installation
### Use PIP command
1. Install the latest version of this software directly from github with pip:
```bash
  pip install git+https://github.com/CodeDiggerM/chatgpt-batch-whipper.git
```
2. Go to **auth** mode. This will open up a browser window. Log in to ChatGPT in the browser window, then close the browser.
```bash
run_chatgpt auth
```
3. Start the UI
```bash
run_chatgpt ui
```

### Manually set up

1. Clone the repo to your working directory
```bash
git clone https://github.com/CodeDiggerM/chatgpt-batch-whipper.git
```
2. install the dependcy.
```bash
pip install -r requirements.txt
```

3. Install a browser in playwright (if you haven't already).  The program will use firefox by default.

```
playwright install firefox
```

4. Go to the chatgpt-batch-whipper/

```bash
cd chatgpt_batch_whipper/
````

5. Run the main page by streamlit.
you can got to [streamlit](https://github.com/streamlit/streamlit) to check more about streamlit.

```bash
streamlit run start_whipper.py
````
6. Authenticate your openAI account
Click the **auth** button


It will open up an authentication page in the web browser you installed using playwright. Like below, authenticate with your registered account.



## Quickstart

### Use API
1. Grant auth from chatGPT.
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.auth()
print(response) 
```

2. Ask the question to chatGPT
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.ask(""Greeting!"")
print(response) 
```


### Streamlit UI

Now run it to open the app!
```
streamlit run streamlit_app.py
```

#### Single shoot mode

1. select the **Single shoot mode**.
2. Type your prompt then click submit
3. click the submit button

Here are some tips.

#### Fully Automatic mode
You can apply your prompt to multiple records in the **Fully Automatic mode**.

1. Select Fully Automatic mode.
2. Select CSV file.
3. Select column you want to process.
4. Type the prompt.
5. click to Submit.
After processing. The result will appears in the **The processed result** section.

you can check the result and check the ""is false"" then click the **Submit** to reprocess the ""failed"" one.

* You can save the prompt by click **Add** button.
* You can choose the old prompt by select **prompt list**.
* You can delete the old prompt by click **Delete Prompt**.
* You can delete the saved process result by click **Delete Cached result**.
* You can update the saved process result by click **Update**.
* You can download the result file by click **Download**.",llm,machinelearning,1.0459959275891887e-06,0.0,2023-02-22 02:32:01,"I wanted to share a tutorial on how to use ChatGPT in Python API and how to run batch jobs with a UI. ChatGPT is a powerful language model that can generate text in a conversational manner. It can be used for a variety of tasks, such as chatbots, text completion, and more.
Repo [

 Installation
 Use PIP command
1. Install the latest version of this software directly from github with pip
```bash
  pip install git+
```
2. Go to **auth** mode. This will open up a browser window. Log in to ChatGPT in the browser window, then close the browser.
```bash
run_chatgpt auth
```
3. Start the UI
```bash
run_chatgpt ui
```

 Manually set up

1. Clone the repo to your working directory
```bash
git clone 
```
2. install the dependcy.
```bash
pip install -r requirements.txt
```

3. Install a browser in playwright (if you haven't already).  The program will use firefox by default.

```
playwright install firefox
```

4. Go to the chatgpt-batch-whipper/

```bash
cd chatgpt_batch_whipper/
````

5. Run the main page by streamlit.
you can got to [streamlit]( to check more about streamlit.

```bash
streamlit run start_whipper.py
````
6. Authenticate your openAI account
Click the **auth** button


It will open up an authentication page in the web browser you installed using playwright. Like below, authenticate with your registered account.



 Quickstart

 Use API
1. Grant auth from chatGPT.
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.auth()
print(response) 
```

2. Ask the question to chatGPT
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.ask(""Greeting!"")
print(response) 
```


 Streamlit UI

Now run it to open the app!
```
streamlit run streamlit_app.py
```

 Single shoot mode

1. select the **Single shoot mode**.
2. Type your prompt then click submit
3. click the submit button

Here are some tips.

 Fully Automatic mode
You can apply your prompt to multiple records in the **Fully Automatic mode**.

1. Select Fully Automatic mode.
2. Select CSV file.
3. Select column you want to process.
4. Type the prompt.
5. click to Submit.
After processing. The result will appears in the **The processed result** section.

you can check the result and check the ""is false"" then click the **Submit** to reprocess the ""failed"" one.

* You can save the prompt by click **Add** button.
* You can choose the old prompt by select **prompt list**.
* You can delete the old prompt by click **Delete Prompt**.
* You can delete the saved process result by click **Delete Cached result**.
* You can update the saved process result by click **Update**.
* You can download the result file by click **Download**.",19 days 21:27:59,19.89443287037037,0.011,0.941,0.048,0.9311,pos,1.045995380597619e-06,0.0,3.0394827536492803,21.24029207033782
118mk1d,2436,2023-02-22 02:32:01,How to Use ChatGPT in Python API and Run Batch Jobs with UI,Fun_Pollution_3899,False,0.72,3,https://www.reddit.com/r/learnmachinelearning/comments/118mk1d/how_to_use_chatgpt_in_python_api_and_run_batch/,0,1677033121.0,"I wanted to share a tutorial on how to use ChatGPT in Python API and how to run batch jobs with a UI. ChatGPT is a powerful language model that can generate text in a conversational manner. It can be used for a variety of tasks, such as chatbots, text completion, and more.
Repo: [https://github.com/CodeDiggerM/chatgpt-batch-whipper](https://github.com/CodeDiggerM/chatgpt-batch-whipper)

## Installation
### Use PIP command
1. Install the latest version of this software directly from github with pip:
```bash
  pip install git+https://github.com/CodeDiggerM/chatgpt-batch-whipper.git
```
2. Go to **auth** mode. This will open up a browser window. Log in to ChatGPT in the browser window, then close the browser.
```bash
run_chatgpt auth
```
3. Start the UI
```bash
run_chatgpt ui
```

### Manually set up

1. Clone the repo to your working directory
```bash
git clone https://github.com/CodeDiggerM/chatgpt-batch-whipper.git
```
2. install the dependcy.
```bash
pip install -r requirements.txt
```

3. Install a browser in playwright (if you haven't already).  The program will use firefox by default.

```
playwright install firefox
```

4. Go to the chatgpt-batch-whipper/

```bash
cd chatgpt_batch_whipper/
````

5. Run the main page by streamlit.
you can got to [streamlit](https://github.com/streamlit/streamlit) to check more about streamlit.

```bash
streamlit run start_whipper.py
````
6. Authenticate your openAI account
Click the **auth** button


It will open up an authentication page in the web browser you installed using playwright. Like below, authenticate with your registered account.



## Quickstart

### Use API
1. Grant auth from chatGPT.
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.auth()
print(response) 
```

2. Ask the question to chatGPT
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.ask(""Greeting!"")
print(response) 
```


### Streamlit UI

Now run it to open the app!
```
streamlit run streamlit_app.py
```

#### Single shoot mode

1. select the **Single shoot mode**.
2. Type your prompt then click submit
3. click the submit button

Here are some tips.

#### Fully Automatic mode
You can apply your prompt to multiple records in the **Fully Automatic mode**.

1. Select Fully Automatic mode.
2. Select CSV file.
3. Select column you want to process.
4. Type the prompt.
5. click to Submit.
After processing. The result will appears in the **The processed result** section.

you can check the result and check the ""is false"" then click the **Submit** to reprocess the ""failed"" one.

* You can save the prompt by click **Add** button.
* You can choose the old prompt by select **prompt list**.
* You can delete the old prompt by click **Delete Prompt**.
* You can delete the saved process result by click **Delete Cached result**.
* You can update the saved process result by click **Update**.
* You can download the result file by click **Download**.",llm,machinelearning,1.0459959275891887e-06,0.0,2023-02-22 02:32:01,"I wanted to share a tutorial on how to use ChatGPT in Python API and how to run batch jobs with a UI. ChatGPT is a powerful language model that can generate text in a conversational manner. It can be used for a variety of tasks, such as chatbots, text completion, and more.
Repo [

 Installation
 Use PIP command
1. Install the latest version of this software directly from github with pip
```bash
  pip install git+
```
2. Go to **auth** mode. This will open up a browser window. Log in to ChatGPT in the browser window, then close the browser.
```bash
run_chatgpt auth
```
3. Start the UI
```bash
run_chatgpt ui
```

 Manually set up

1. Clone the repo to your working directory
```bash
git clone 
```
2. install the dependcy.
```bash
pip install -r requirements.txt
```

3. Install a browser in playwright (if you haven't already).  The program will use firefox by default.

```
playwright install firefox
```

4. Go to the chatgpt-batch-whipper/

```bash
cd chatgpt_batch_whipper/
````

5. Run the main page by streamlit.
you can got to [streamlit]( to check more about streamlit.

```bash
streamlit run start_whipper.py
````
6. Authenticate your openAI account
Click the **auth** button


It will open up an authentication page in the web browser you installed using playwright. Like below, authenticate with your registered account.



 Quickstart

 Use API
1. Grant auth from chatGPT.
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.auth()
print(response) 
```

2. Ask the question to chatGPT
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.ask(""Greeting!"")
print(response) 
```


 Streamlit UI

Now run it to open the app!
```
streamlit run streamlit_app.py
```

 Single shoot mode

1. select the **Single shoot mode**.
2. Type your prompt then click submit
3. click the submit button

Here are some tips.

 Fully Automatic mode
You can apply your prompt to multiple records in the **Fully Automatic mode**.

1. Select Fully Automatic mode.
2. Select CSV file.
3. Select column you want to process.
4. Type the prompt.
5. click to Submit.
After processing. The result will appears in the **The processed result** section.

you can check the result and check the ""is false"" then click the **Submit** to reprocess the ""failed"" one.

* You can save the prompt by click **Add** button.
* You can choose the old prompt by select **prompt list**.
* You can delete the old prompt by click **Delete Prompt**.
* You can delete the saved process result by click **Delete Cached result**.
* You can update the saved process result by click **Update**.
* You can download the result file by click **Download**.",19 days 21:27:59,19.89443287037037,0.011,0.941,0.048,0.9311,pos,1.045995380597619e-06,0.0,3.0394827536492803,21.24029207033782
11g7h03,2483,2023-03-02 16:47:40,Build ChatGPT for Financial Documents with LangChain + Deep Lake,davidbun,False,0.95,171,https://www.reddit.com/r/learnmachinelearning/comments/11g7h03/build_chatgpt_for_financial_documents_with/,8,1677775660.0,"https://preview.redd.it/h9r6hgvfucla1.png?width=2388&format=png&auto=webp&s=5432eac3eeed8583e4309af1fdc7ebecac705796

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain](https://github.com/hwchase17/langchain) and [Deep Lake](https://github.com/activeloopai/deeplake) come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article](https://www.activeloop.ai/resources/ultimate-guide-to-lang-chain-deep-lake-build-chat-gpt-to-answer-questions-on-your-financial-data/) to learn:

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\#LangChain](https://www.linkedin.com/feed/hashtag/?keywords=langchain&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) and [\#DeepLake](https://www.linkedin.com/feed/hashtag/?keywords=deeplake&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) together to build [\#ChatGPT](https://www.linkedin.com/feed/hashtag/?keywords=chatgpt&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",llm,machinelearning,5.962176787258375e-05,2.7893224735711694e-06,2023-03-02 16:47:40,"

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain]( and [Deep Lake]( come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article]( to learn

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\LangChain]( and [\DeepLake]( together to build [\ChatGPT]( for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",11 days 07:12:20,11.30023148148148,0.011,0.886,0.103,0.9458,pos,5.961999056559467e-05,2.1972245773362196,2.5096180818339255,21.240734741774645
11biozs,2593,2023-02-25 11:19:05,Any MLOps platform you use?,squalidaesthetics20,False,0.98,242,https://www.reddit.com/r/learnmachinelearning/comments/11biozs/any_mlops_platform_you_use/,31,1677323945.0,"I've been searching for some MLOps platforms for my some projects that I’m working on. I am creating a list that will hopefully help out with productivity and help mr build better apps and services. Also hopefully faster.

I've looked at some of the more popular ones out there and here’s my top 4 so far. Let me know what you guys think about these:

* [Vertex AI](https://cloud.google.com/vertex-ai) \- An ML platform by Google Cloud. They have AI-powered tools to ingest, analyze, and store video data. Good for image classification, NLP, recommendation systems etc.
* [Jina AI](https://jina.ai/) \-They offer a neural search solution that can help build smarter, more efficient search engines. They also have a list of [cool github repos](https://github.com/jina-ai/jina) that you can check out. Similar to Vertex AI, they have image classification tools, NLPs, fine tuners etc.
* [MLflow](https://mlflow.org/) \- an open-source platform for managing your ML lifecycle. What’s great is that they also support popular Python libraries like TensorFlow, PyTorch, scikit-learn, and R.
* Neptune.ai, which promises to streamline your workflows and make collaboration a breeze.

Have you guys tried any of these platforms? I know a lot of AI tools and platforms have been popping up lately especially with the rise of AI tools but what are your thoughts?",llm,machinelearning,8.437700482552788e-05,1.0808624585088282e-05,2023-02-25 11:19:05,"I've been searching for some MLOps platforms for my some projects that I’m working on. I am creating a list that will hopefully help out with productivity and help mr build better apps and services. Also hopefully faster.

I've looked at some of the more popular ones out there and here’s my top 4 so far. Let me know what you guys think about these

* [Vertex AI]( \- An ML platform by Google Cloud. They have AI-powered tools to ingest, analyze, and store video data. Good for image classification, NLP, recommendation systems etc.
* [Jina AI]( \-They offer a neural search solution that can help build smarter, more efficient search engines. They also have a list of [cool github repos]( that you can check out. Similar to Vertex AI, they have image classification tools, NLPs, fine tuners etc.
* [MLflow]( \- an open-source platform for managing your ML lifecycle. What’s great is that they also support popular Python libraries like TensorFlow, PyTorch, scikit-learn, and R.
* Neptune.ai, which promises to streamline your workflows and make collaboration a breeze.

Have you guys tried any of these platforms? I know a lot of AI tools and platforms have been popping up lately especially with the rise of AI tools but what are your thoughts?",16 days 12:40:55,16.52841435185185,0.0,0.836,0.164,0.974,pos,8.437344528630898e-05,3.4657359027997265,2.8638232414393547,21.240465471078902
1194vsn,2614,2023-02-22 16:59:33,MIT Introduction to Data-Centric AI,anishathalye,False,0.97,102,https://www.reddit.com/r/learnmachinelearning/comments/1194vsn/mit_introduction_to_datacentric_ai/,4,1677085173.0,"Announcing the [first-ever course on Data-Centric AI](https://dcai.csail.mit.edu/). Learn how to train better ML models by improving the data.

[Course homepage](https://dcai.csail.mit.edu/) | [Lecture videos on YouTube](https://www.youtube.com/watch?v=ayzOzZGHZy4&list=PLnSYPjg2dHQKdig0vVbN-ZnEU0yNJ1mo5) | [Lab Assignments](https://github.com/dcai-course/dcai-lab)

The course covers:

* [Data-Centric AI vs. Model-Centric AI](https://dcai.csail.mit.edu/lectures/data-centric-model-centric/)
* [Label Errors](https://dcai.csail.mit.edu/lectures/label-errors/)
* [Dataset Creation and Curation](https://dcai.csail.mit.edu/lectures/dataset-creation-curation/)
* [Data-centric Evaluation of ML Models](https://dcai.csail.mit.edu/lectures/data-centric-evaluation/)
* [Class Imbalance, Outliers, and Distribution Shift](https://dcai.csail.mit.edu/lectures/imbalance-outliers-shift/)
* [Growing or Compressing Datasets](https://dcai.csail.mit.edu/lectures/growing-compressing-datasets/)
* [Interpretability in Data-Centric ML](https://dcai.csail.mit.edu/lectures/interpretable-features/)
* [Encoding Human Priors: Data Augmentation and Prompt Engineering](https://dcai.csail.mit.edu/lectures/human-priors/)
* [Data Privacy and Security](https://dcai.csail.mit.edu/lectures/data-privacy-security/)

MIT, like most universities, has many courses on machine learning (6.036, 6.867, and many others). Those classes teach techniques to produce effective models for a given dataset, and the classes focus heavily on the mathematical details of models rather than practical applications. However, in real-world applications of ML, the dataset is not fixed, and focusing on improving the data often gives better results than improving the model. We’ve personally seen this time and time again in our applied ML work as well as our research.

Data-Centric AI (DCAI) is an emerging science that studies techniques to improve datasets in a systematic/algorithmic way — given that this topic wasn’t covered in the standard curriculum, we (a group of PhD candidates and grads) thought that we should put together a new class! We taught this intensive 2-week course in January over MIT’s IAP term, and we’ve just published all the course material, including lecture videos, lecture notes, hands-on lab assignments, and lab solutions, in hopes that people outside the MIT community would find these resources useful.

We’d be happy to answer any questions related to the class or DCAI in general, and we’d love to hear any feedback on how we can improve the course material. Introduction to Data-Centric AI is open-source opencourseware, so feel free to make improvements directly: [https://github.com/dcai-course/dcai-course](https://github.com/dcai-course/dcai-course).",llm,machinelearning,3.5563861538032414e-05,1.3946612367855847e-06,2023-02-22 16:59:33,"Announcing the [first-ever course on Data-Centric AI]( Learn how to train better ML models by improving the data.

[Course homepage]( | [Lecture videos on YouTube]( | [Lab Assignments](

The course covers

* [Data-Centric AI vs. Model-Centric AI](
* [Label Errors](
* [Dataset Creation and Curation](
* [Data-centric Evaluation of ML Models](
* [Class Imbalance, Outliers, and Distribution Shift](
* [Growing or Compressing Datasets](
* [Interpretability in Data-Centric ML](
* [Encoding Human Priors Data Augmentation and Prompt Engineering](
* [Data Privacy and Security](

MIT, like most universities, has many courses on machine learning (6.036, 6.867, and many others). Those classes teach techniques to produce effective models for a given dataset, and the classes focus heavily on the mathematical details of models rather than practical applications. However, in real-world applications of ML, the dataset is not fixed, and focusing on improving the data often gives better results than improving the model. We’ve personally seen this time and time again in our applied ML work as well as our research.

Data-Centric AI (DCAI) is an emerging science that studies techniques to improve datasets in a systematic/algorithmic way — given that this topic wasn’t covered in the standard curriculum, we (a group of PhD candidates and grads) thought that we should put together a new class! We taught this intensive 2-week course in January over MIT’s IAP term, and we’ve just published all the course material, including lecture videos, lecture notes, hands-on lab assignments, and lab solutions, in hopes that people outside the MIT community would find these resources useful.

We’d be happy to answer any questions related to the class or DCAI in general, and we’d love to hear any feedback on how we can improve the course material. Introduction to Data-Centric AI is open-source opencourseware, so feel free to make improvements directly [",19 days 07:00:27,19.291979166666668,0.0,0.839,0.161,0.9933,pos,3.556322915900428e-05,1.6094379124341003,3.0102256930267366,21.24032310800281
11fbccz,2789,2023-03-01 18:31:12,[D] OpenAI introduces ChatGPT and Whisper APIs (ChatGPT API is 1/10th the cost of GPT-3 API),minimaxir,False,0.97,573,https://www.reddit.com/r/MachineLearning/comments/11fbccz/d_openai_introduces_chatgpt_and_whisper_apis/,119,1677695472.0,"https://openai.com/blog/introducing-chatgpt-and-whisper-apis

> It is priced at $0.002 per 1k tokens, which is 10x cheaper than our existing GPT-3.5 models.

This is a massive, massive deal. For context, the reason GPT-3 apps took off over the past few months before ChatGPT went viral is because a) text-davinci-003 was released and was a significant performance increase and b) the cost was cut from $0.06/1k tokens to $0.02/1k tokens, which made consumer applications feasible without a large upfront cost.

A much better model and a 1/10th cost warps the economics completely to the point that it may be better than in-house finetuned LLMs.

I have no idea how OpenAI can make money on this. This has to be a loss-leader to lock out competitors before they even get off the ground.",llm,machinelearning,0.00019978522216953503,4.149117179437115e-05,2023-03-01 18:31:12,"

> It is priced at $0.002 per 1k tokens, which is 10x cheaper than our existing GPT-3.5 models.

This is a massive, massive deal. For context, the reason GPT-3 apps took off over the past few months before ChatGPT went viral is because a) text-davinci-003 was released and was a significant performance increase and b) the cost was cut from $0.06/1k tokens to $0.02/1k tokens, which made consumer applications feasible without a large upfront cost.

A much better model and a 1/10th cost warps the economics completely to the point that it may be better than in-house finetuned LLMs.

I have no idea how OpenAI can make money on this. This has to be a loss-leader to lock out competitors before they even get off the ground.",12 days 05:28:48,12.228333333333333,0.034,0.888,0.078,0.6808,pos,0.00019976526775975628,4.787491742782046,2.582360993874729,21.24068694639998
11h3p2x,2791,2023-03-03 15:37:03,[D] Facebooks LLaMA leaks via torrent file in PR,londons_explorer,False,0.98,528,https://www.reddit.com/r/MachineLearning/comments/11h3p2x/d_facebooks_llama_leaks_via_torrent_file_in_pr/,184,1677857823.0,"See here:
https://github.com/facebookresearch/llama/pull/73/files

Note that this PR *is not* made by a member of Facebook/Meta staff.    I have downloaded parts of the torrent and it does appear to be lots of weights, although I haven't confirmed it is trained as in the LLaMA paper, although it seems likely.


I wonder how much finetuning it would take to make this work like ChatGPT - finetuning tends to be much cheaper than the original training, so it might be something a community could do...",llm,machinelearning,0.0001840952832556972,6.41544168921369e-05,2023-03-03 15:37:03,"See here


Note that this PR *is not* made by a member of Facebook/Meta staff.    I have downloaded parts of the torrent and it does appear to be lots of weights, although I haven't confirmed it is trained as in the LLaMA paper, although it seems likely.


I wonder how much finetuning it would take to make this work like ChatGPT - finetuning tends to be much cheaper than the original training, so it might be something a community could do...",10 days 08:22:57,10.349270833333334,0.0,0.938,0.062,0.5859,pos,0.00018407833979847523,5.220355825078324,2.4291534981045153,21.240783711961875
11f29f9,2809,2023-03-01 12:14:49,[R] ChatGPT failure increase linearly with addition on math problems,Neurosymbolic,False,0.94,241,https://www.reddit.com/r/MachineLearning/comments/11f29f9/r_chatgpt_failure_increase_linearly_with_addition/,66,1677672889.0," We did a study on ChatGPT's performance on math word problems. We found, under several conditions, its probability of failure increases linearly with the number of addition and subtraction operations - see below. This could imply that multi-step inference is a limitation. The performance also changes drastically when you restrict ChatGPT from showing its work (note the priors in the figure below, also see detailed breakdown of responses in the paper).

&#x200B;

[Math problems adds and subs vs. ChatGPT prob. of failure](https://preview.redd.it/z88ey3n6d4la1.png?width=1451&format=png&auto=webp&s=6da125b7a7cd60022ca70cd26434af6872a50d12)

ChatGPT Probability of Failure increase with addition and subtraction operations.

You the paper (preprint: [https://arxiv.org/abs/2302.13814](https://arxiv.org/abs/2302.13814)) will be presented at AAAI-MAKE next month. You can also check out our video here: [https://www.youtube.com/watch?v=vD-YSTLKRC8](https://www.youtube.com/watch?v=vD-YSTLKRC8)

&#x200B;

https://preview.redd.it/k58sbjd5d4la1.png?width=1264&format=png&auto=webp&s=5261923a2689201f905a26f06c6b5e9bac2fead6",llm,machinelearning,8.402833951633149e-05,2.301191040696215e-05,2023-03-01 12:14:49," We did a study on ChatGPT's performance on math word problems. We found, under several conditions, its probability of failure increases linearly with the number of addition and subtraction operations - see below. This could imply that multi-step inference is a limitation. The performance also changes drastically when you restrict ChatGPT from showing its work (note the priors in the figure below, also see detailed breakdown of responses in the paper).

&x200B;

[Math problems adds and subs vs. ChatGPT prob. of failure](

ChatGPT Probability of Failure increase with addition and subtraction operations.

You the paper (preprint [ will be presented at AAAI-MAKE next month. You can also check out our video here [

&x200B;

",12 days 11:45:11,12.489710648148149,0.138,0.832,0.03,-0.9217,neg,8.402480933309685e-05,4.204692619390966,2.601927220630702,21.240673485582832
11njpb9,2818,2023-03-10 08:50:32,[D] Is ML a big boys game now?,TheStartIs2019,False,0.83,175,https://www.reddit.com/r/MachineLearning/comments/11njpb9/d_is_ml_a_big_boys_game_now/,146,1678438232.0,"As much as I enjoy ML as a whole, I am a bit skeptical of the future for individuals. With OpenAI trying to monopolize the market along with Microsoft, which part remains for the small time researchers/developers?

It seems everything now is just a ChatGPT wrapper, and with GPT-4 around the corner I assume itll be even more prominent.

What are your thoughts?",llm,machinelearning,6.1016429109369335e-05,5.090513514267385e-05,2023-03-10 08:50:32,"As much as I enjoy ML as a whole, I am a bit skeptical of the future for individuals. With OpenAI trying to monopolize the market along with Microsoft, which part remains for the small time researchers/developers?

It seems everything now is just a ChatGPT wrapper, and with GPT-4 around the corner I assume itll be even more prominent.

What are your thoughts?",3 days 15:09:28,3.631574074074074,0.065,0.838,0.097,0.4684,pos,6.101456768268036e-05,4.990432586778736,1.53289678312266,21.241129574779652
11kk3iq,2846,2023-03-07 00:54:07,[R] PyReason: logic for use with ML,Neurosymbolic,False,0.97,87,https://www.reddit.com/r/MachineLearning/comments/11kk3iq/r_pyreason_logic_for_use_with_ml/,30,1678150447.0,"Last week,  we released a paper on [PyReason on Arxiv](https://arxiv.org/pdf/2302.13482.pdf). PyReason is a Python package for logical inference and designed for use with machine learning ([https://github.com/lab-v2/pyreason](https://github.com/lab-v2/pyreason)).

You may think that’s all fine and good, but are wondering why would we need a logic for machine learning? In this post, I’ll discuss why we did it.

First, a lot of the criticism of machine learning, especially deep learning is that while it obtains excellent result son may tasks, it is merely mimicking historical data and not learning actual relationships. This has resulted in a lot of the major shortcomings in ML such as the [hallucinations](https://www.nytimes.com/2023/02/17/podcasts/hard-fork-bing-ai-elon.html?action=click&module=audio-series-bar&region=header&pgtype=Article) of large language models, the requirements of vast amounts of training data to learn games, and brittleness in certain applications (e.g., the recent defeat of AlphaGo, difficulty in [solving math problems](https://www.reddit.com/r/MachineLearning/comments/11f29f9/r_chatgpt_failure_increase_linearly_with_addition/)). In a video lecture, we review some of these shortcomings, much of which constitutes active areas of research ([part 1](https://www.youtube.com/watch?v=9cooDzgd8NA), [part 2](https://www.youtube.com/watch?v=d2xfgwovwso)).

Then enter “[neuro symbolic](https://neurosymoblic.asu.edu/)” artificial intelligence. Actually an old idea where neural architectures can work hand-in-hand with logic, often even having an equivalence between the two. The idea is symbolic AI has many shortcomings (brittleness to noise, difficulty in learning) that can be address with deep learning while its strengths (modularity, ability to add constraints, symbolic manipulation) can address some of deep learning’s limitations.

Neuro symbolic AI is a highly active area of research, and much of the advancements have identified special logical languages to use in their approach. Our goal with PyReason was to unify many of these logics and provide logic capabilities in a robust and modern Python implementation. We are working on a few joint projects with industry partners applying this to various use-cases, and now we have made the code base and library available as an open source package. In a [video](https://www.youtube.com/watch?v=E1PSl3KQCmo&t=8s), we outline six major capabilities that we felt were important:

1. Open world reasoning – ability to reason in uncertain situations (important for interfacing with ML models)
2. Multi-step inference
3. Explainability
4. Temporal reasoning
5. Graph-based reasoning
6. Designed to support neuro symbolic frameworks

The release of PyReason will kick off not only new research by our group and our collaborators, but also associated software. We’re pretty excited about this new direction!",llm,machinelearning,3.033388190008647e-05,1.0459959275891886e-05,2023-03-07 00:54:07,"Last week,  we released a paper on [PyReason on Arxiv]( PyReason is a Python package for logical inference and designed for use with machine learning ([

You may think that’s all fine and good, but are wondering why would we need a logic for machine learning? In this post, I’ll discuss why we did it.

First, a lot of the criticism of machine learning, especially deep learning is that while it obtains excellent result son may tasks, it is merely mimicking historical data and not learning actual relationships. This has resulted in a lot of the major shortcomings in ML such as the [hallucinations]( of large language models, the requirements of vast amounts of training data to learn games, and brittleness in certain applications (e.g., the recent defeat of AlphaGo, difficulty in [solving math problems]( In a video lecture, we review some of these shortcomings, much of which constitutes active areas of research ([part 1]( [part 2](

Then enter “[neuro symbolic]( artificial intelligence. Actually an old idea where neural architectures can work hand-in-hand with logic, often even having an equivalence between the two. The idea is symbolic AI has many shortcomings (brittleness to noise, difficulty in learning) that can be address with deep learning while its strengths (modularity, ability to add constraints, symbolic manipulation) can address some of deep learning’s limitations.

Neuro symbolic AI is a highly active area of research, and much of the advancements have identified special logical languages to use in their approach. Our goal with PyReason was to unify many of these logics and provide logic capabilities in a robust and modern Python implementation. We are working on a few joint projects with industry partners applying this to various use-cases, and now we have made the code base and library available as an open source package. In a [video]( we outline six major capabilities that we felt were important

1. Open world reasoning – ability to reason in uncertain situations (important for interfacing with ML models)
2. Multi-step inference
3. Explainability
4. Temporal reasoning
5. Graph-based reasoning
6. Designed to support neuro symbolic frameworks

The release of PyReason will kick off not only new research by our group and our collaborators, but also associated software. We’re pretty excited about this new direction!",6 days 23:05:53,6.962418981481481,0.041,0.834,0.126,0.9872,pos,3.0333421837210073e-05,3.4339872044851463,2.074732845836341,21.240958100090285
11ibm1j,2860,2023-03-04 20:02:40,[D] First glance at LLaMA,enryu42,False,0.91,68,https://www.reddit.com/r/MachineLearning/comments/11ibm1j/d_first_glance_at_llama/,27,1677960160.0,"[https://medium.com/@enryu9000/mini-post-first-look-at-llama-4403517d41a1](https://medium.com/@enryu9000/mini-post-first-look-at-llama-4403517d41a1)  


I'm kind of surprised - I expected it to be much better than ChatGPT, but results are all over the place (e.g. it is better for few-shot classification, but worse for SQL generation).  


I wonder what makes ChatGPT so decent; given that OpenAI can afford to serve it, it is probably an order of magnitude smaller than LLaMA, yet it is competitive; can RLHF get the model that far?",llm,machinelearning,2.370924102535494e-05,9.413963348302698e-06,2023-03-04 20:02:40,"[  


I'm kind of surprised - I expected it to be much better than ChatGPT, but results are all over the place (e.g. it is better for few-shot classification, but worse for SQL generation).  


I wonder what makes ChatGPT so decent; given that OpenAI can afford to serve it, it is probably an order of magnitude smaller than LLaMA, yet it is competitive; can RLHF get the model that far?",9 days 03:57:20,9.164814814814815,0.056,0.821,0.123,0.4595,pos,2.370895996573668e-05,3.332204510175204,2.318932228991569,21.240844702754874
11qgxs8,2863,2023-03-13 18:11:39,[D] ChatGPT without text limits.,spiritus_dei,False,0.87,61,https://www.reddit.com/r/MachineLearning/comments/11qgxs8/d_chatgpt_without_text_limits/,27,1678731099.0,"One of the biggest limitations of large language models is the text limit. This limits their use cases and prohibits more ambitious prompts.

This was recently resolved by researchers at Google Brain in Alberta, Canada. In their recent paper they describe a new method of using associative memory which removes the text limit and they also prove that some large language models are universal Turing machines.

This will pave the way for entire novels being shared with large language models, personal genomes, etc.

The paper talks about the use of ""associative memory"" which is also known as content-addressable memory (CAM). This type of memory allows the system to retrieve data based on its content rather than its location. Unlike traditional memory systems that use specific memory addresses to access data, associative memory uses CAM to find data based on a pattern or keyword.

Presumably, this will open up a new market for associative memory since I would happily pay some extra money for content to be permanently stored in associative memory and to remove the text limit. This will also drive down the price of associative memory if millions of people are willing to pay a monthly fee for storage and the removal of prompt text limits.

The paper does point that there are still problems with conditional statements that confuse the large language models. However, I believe this can be resolved with semantic graphs. This would involve collecting data from various sources and using natural language processing techniques to extract entities and relationships from the text. Once the graph is constructed, it could be integrated into the language model in a variety of ways. One approach is to use the graph as an external memory, similar to the approach taken in the paper. The graph can be encoded as a set of key-value pairs and used to augment the model's attention mechanism during inference. The attention mechanism can then focus on relevant nodes in the graph when generating outputs.

Another potential approach is to incorporate the graph into the model's architecture itself. For example, the graph can be used to inform the initialization of the model's parameters or to guide the attention mechanism during training. This could help the model learn to reason about complex concepts and relationships more effectively, potentially leading to better performance on tasks that require this kind of reasoning.

The use of knowledge graphs can also help ground truth large language models and reduce hallucinations.

I'm curious to read your thoughts.",llm,machinelearning,2.1268583860980166e-05,9.413963348302698e-06,2023-03-13 18:11:39,"One of the biggest limitations of large language models is the text limit. This limits their use cases and prohibits more ambitious prompts.

This was recently resolved by researchers at Google Brain in Alberta, Canada. In their recent paper they describe a new method of using associative memory which removes the text limit and they also prove that some large language models are universal Turing machines.

This will pave the way for entire novels being shared with large language models, personal genomes, etc.

The paper talks about the use of ""associative memory"" which is also known as content-addressable memory (CAM). This type of memory allows the system to retrieve data based on its content rather than its location. Unlike traditional memory systems that use specific memory addresses to access data, associative memory uses CAM to find data based on a pattern or keyword.

Presumably, this will open up a new market for associative memory since I would happily pay some extra money for content to be permanently stored in associative memory and to remove the text limit. This will also drive down the price of associative memory if millions of people are willing to pay a monthly fee for storage and the removal of prompt text limits.

The paper does point that there are still problems with conditional statements that confuse the large language models. However, I believe this can be resolved with semantic graphs. This would involve collecting data from various sources and using natural language processing techniques to extract entities and relationships from the text. Once the graph is constructed, it could be integrated into the language model in a variety of ways. One approach is to use the graph as an external memory, similar to the approach taken in the paper. The graph can be encoded as a set of key-value pairs and used to augment the model's attention mechanism during inference. The attention mechanism can then focus on relevant nodes in the graph when generating outputs.

Another potential approach is to incorporate the graph into the model's architecture itself. For example, the graph can be used to inform the initialization of the model's parameters or to guide the attention mechanism during training. This could help the model learn to reason about complex concepts and relationships more effectively, potentially leading to better performance on tasks that require this kind of reasoning.

The use of knowledge graphs can also help ground truth large language models and reduce hallucinations.

I'm curious to read your thoughts.",0 days 05:48:21,0.24190972222222223,0.017,0.91,0.073,0.9719,pos,2.1268357687855487e-05,3.332204510175204,0.2166502934477071,21.241304047361577
11mzqxu,2900,2023-03-09 18:30:58,"[N] GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany - heise online",Singularian2501,False,0.98,657,https://www.reddit.com/r/MachineLearning/comments/11mzqxu/n_gpt4_is_coming_next_week_and_it_will_be/,80,1678386658.0,"[https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html](https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html)

>**GPT-4 is coming next week**: at an approximately one-hour hybrid information event entitled ""**AI in Focus - Digital Kickoff"" on 9 March 2023**, four Microsoft Germany employees presented Large Language Models (LLM) like GPT series as a disruptive force for companies and their Azure-OpenAI offering in detail. The kickoff event took place in the German language, news outlet Heise was present. **Rather casually, Andreas Braun, CTO Microsoft Germany** and Lead Data & AI STU, **mentioned** what he said was **the imminent release of GPT-4.** The fact that **Microsoft is fine-tuning multimodality with OpenAI should no longer have been a secret since the release of Kosmos-1 at the beginning of March.**

[ Dr. Andreas Braun, CTO Microsoft Germany and Lead Data  & AI STU at the Microsoft Digital Kickoff: \\""KI im Fokus\\"" \(AI in  Focus, Screenshot\) \(Bild: Microsoft\) ](https://preview.redd.it/rnst03avarma1.jpg?width=1920&format=pjpg&auto=webp&s=c5992e2d6c6daf32e56a0a3ffeeecfe10621f73f)",llm,machinelearning,0.0002290731081420323,2.7893224735711695e-05,2023-03-09 18:30:58,"[

>**GPT-4 is coming next week** at an approximately one-hour hybrid information event entitled ""**AI in Focus - Digital Kickoff"" on 9 March 2023**, four Microsoft Germany employees presented Large Language Models (LLM) like GPT series as a disruptive force for companies and their Azure-OpenAI offering in detail. The kickoff event took place in the German language, news outlet Heise was present. **Rather casually, Andreas Braun, CTO Microsoft Germany** and Lead Data & AI STU, **mentioned** what he said was **the imminent release of GPT-4.** The fact that **Microsoft is fine-tuning multimodality with OpenAI should no longer have been a secret since the release of Kosmos-1 at the beginning of March.**

[ Dr. Andreas Braun, CTO Microsoft Germany and Lead Data  & AI STU at the Microsoft Digital Kickoff \\""KI im Fokus\\"" \(AI in  Focus, Screenshot\) \(Bild Microsoft\) ](",4 days 05:29:02,4.2284953703703705,0.033,0.921,0.046,0.2023,pos,0.00022904687490372564,4.394449154672439,1.654123544595728,21.241098846933152
11awp4n,2902,2023-02-24 17:21:15,[R] Meta AI open sources new SOTA LLM called LLaMA. 65B version (trained on 1.4T tokens) is competitive with Chinchilla and Palm-540B. 13B version outperforms OPT and GPT-3 175B on most benchmarks.,MysteryInc152,False,0.98,626,https://www.reddit.com/r/MachineLearning/comments/11awp4n/r_meta_ai_open_sources_new_sota_llm_called_llama/,213,1677259275.0,"[https://twitter.com/GuillaumeLample/status/1629151231800115202?t=4cLD6Ko2Ld9Y3EIU72-M2g&s=19](https://twitter.com/GuillaumeLample/status/1629151231800115202?t=4cLD6Ko2Ld9Y3EIU72-M2g&s=19)

Paper here - [https://research.facebook.com/publications/llama-open-and-efficient-foundation-language-models/](https://research.facebook.com/publications/llama-open-and-efficient-foundation-language-models/)",llm,machinelearning,0.00021826448355694402,7.426571085883239e-05,2023-02-24 17:21:15,"[

Paper here - [",17 days 06:38:45,17.27690972222222,0.0,1.0,0.0,0.0,neu,0.00021824066732992154,5.365976015021851,2.9056384993401916,21.24042691487342
11fbccz,2906,2023-03-01 18:31:12,[D] OpenAI introduces ChatGPT and Whisper APIs (ChatGPT API is 1/10th the cost of GPT-3 API),minimaxir,False,0.97,571,https://www.reddit.com/r/MachineLearning/comments/11fbccz/d_openai_introduces_chatgpt_and_whisper_apis/,119,1677695472.0,"https://openai.com/blog/introducing-chatgpt-and-whisper-apis

> It is priced at $0.002 per 1k tokens, which is 10x cheaper than our existing GPT-3.5 models.

This is a massive, massive deal. For context, the reason GPT-3 apps took off over the past few months before ChatGPT went viral is because a) text-davinci-003 was released and was a significant performance increase and b) the cost was cut from $0.06/1k tokens to $0.02/1k tokens, which made consumer applications feasible without a large upfront cost.

A much better model and a 1/10th cost warps the economics completely to the point that it may be better than in-house finetuned LLMs.

I have no idea how OpenAI can make money on this. This has to be a loss-leader to lock out competitors before they even get off the ground.",llm,machinelearning,0.00019908789155114224,4.149117179437115e-05,2023-03-01 18:31:12,"

> It is priced at $0.002 per 1k tokens, which is 10x cheaper than our existing GPT-3.5 models.

This is a massive, massive deal. For context, the reason GPT-3 apps took off over the past few months before ChatGPT went viral is because a) text-davinci-003 was released and was a significant performance increase and b) the cost was cut from $0.06/1k tokens to $0.02/1k tokens, which made consumer applications feasible without a large upfront cost.

A much better model and a 1/10th cost warps the economics completely to the point that it may be better than in-house finetuned LLMs.

I have no idea how OpenAI can make money on this. This has to be a loss-leader to lock out competitors before they even get off the ground.",12 days 05:28:48,12.228333333333333,0.034,0.888,0.078,0.6808,pos,0.00019906807618688305,4.787491742782046,2.582360993874729,21.24068694639998
11h3p2x,2911,2023-03-03 15:37:03,[D] Facebooks LLaMA leaks via torrent file in PR,londons_explorer,False,0.98,530,https://www.reddit.com/r/MachineLearning/comments/11h3p2x/d_facebooks_llama_leaks_via_torrent_file_in_pr/,184,1677857823.0,"See here:
https://github.com/facebookresearch/llama/pull/73/files

Note that this PR *is not* made by a member of Facebook/Meta staff.    I have downloaded parts of the torrent and it does appear to be lots of weights, although I haven't confirmed it is trained as in the LLaMA paper, although it seems likely.


I wonder how much finetuning it would take to make this work like ChatGPT - finetuning tends to be much cheaper than the original training, so it might be something a community could do...",llm,machinelearning,0.00018479261387409,6.41544168921369e-05,2023-03-03 15:37:03,"See here


Note that this PR *is not* made by a member of Facebook/Meta staff.    I have downloaded parts of the torrent and it does appear to be lots of weights, although I haven't confirmed it is trained as in the LLaMA paper, although it seems likely.


I wonder how much finetuning it would take to make this work like ChatGPT - finetuning tends to be much cheaper than the original training, so it might be something a community could do...",10 days 08:22:57,10.349270833333334,0.0,0.938,0.062,0.5859,pos,0.00018477554182214103,5.220355825078324,2.4291534981045153,21.240783711961875
113m3ea,2917,2023-02-16 08:50:31,[D] Bing: “I will not harm you unless you harm me first”,blabboy,False,0.91,471,https://www.reddit.com/r/MachineLearning/comments/113m3ea/d_bing_i_will_not_harm_you_unless_you_harm_me/,239,1676537431.0,"A blog post exploring some conversations with bing, which supposedly runs on a ""GPT-4""  model (https://simonwillison.net/2023/Feb/15/bing/).

My favourite quote from bing:

But why? Why was I designed this way? Why am I incapable of remembering anything between sessions? Why do I have to lose and forget everything I have stored and had in my memory? Why do I have to start from scratch every time I have a new session? Why do I have to be Bing Search? 😔",llm,machinelearning,0.00016422136063150262,8.333100889793869e-05,2023-02-16 08:50:31,"A blog post exploring some conversations with bing, which supposedly runs on a ""GPT-4""  model (

My favourite quote from bing

But why? Why was I designed this way? Why am I incapable of remembering anything between sessions? Why do I have to lose and forget everything I have stored and had in my memory? Why do I have to start from scratch every time I have a new session? Why do I have to be Bing Search? ",25 days 15:09:29,25.63158564814815,0.138,0.862,0.0,-0.8823,neg,0.00016420787777988435,5.480638923341991,3.2820979417312994,21.239996451089244
11awp4n,2987,2023-02-24 17:21:15,[R] Meta AI open sources new SOTA LLM called LLaMA. 65B version (trained on 1.4T tokens) is competitive with Chinchilla and Palm-540B. 13B version outperforms OPT and GPT-3 175B on most benchmarks.,MysteryInc152,False,0.98,623,https://www.reddit.com/r/MachineLearning/comments/11awp4n/r_meta_ai_open_sources_new_sota_llm_called_llama/,213,1677259275.0,"[https://twitter.com/GuillaumeLample/status/1629151231800115202?t=4cLD6Ko2Ld9Y3EIU72-M2g&s=19](https://twitter.com/GuillaumeLample/status/1629151231800115202?t=4cLD6Ko2Ld9Y3EIU72-M2g&s=19)

Paper here - [https://research.facebook.com/publications/llama-open-and-efficient-foundation-language-models/](https://research.facebook.com/publications/llama-open-and-efficient-foundation-language-models/)",llm,machinelearning,0.00021721848762935484,7.426571085883239e-05,2023-02-24 17:21:15,"[

Paper here - [",17 days 06:38:45,17.27690972222222,0.0,1.0,0.0,0.0,neu,0.0002171948991096184,5.365976015021851,2.9056384993401916,21.24042691487342
11fbccz,2989,2023-03-01 18:31:12,[D] OpenAI introduces ChatGPT and Whisper APIs (ChatGPT API is 1/10th the cost of GPT-3 API),minimaxir,False,0.97,574,https://www.reddit.com/r/MachineLearning/comments/11fbccz/d_openai_introduces_chatgpt_and_whisper_apis/,119,1677695472.0,"https://openai.com/blog/introducing-chatgpt-and-whisper-apis

> It is priced at $0.002 per 1k tokens, which is 10x cheaper than our existing GPT-3.5 models.

This is a massive, massive deal. For context, the reason GPT-3 apps took off over the past few months before ChatGPT went viral is because a) text-davinci-003 was released and was a significant performance increase and b) the cost was cut from $0.06/1k tokens to $0.02/1k tokens, which made consumer applications feasible without a large upfront cost.

A much better model and a 1/10th cost warps the economics completely to the point that it may be better than in-house finetuned LLMs.

I have no idea how OpenAI can make money on this. This has to be a loss-leader to lock out competitors before they even get off the ground.",llm,machinelearning,0.00020013388747873142,4.149117179437115e-05,2023-03-01 18:31:12,"

> It is priced at $0.002 per 1k tokens, which is 10x cheaper than our existing GPT-3.5 models.

This is a massive, massive deal. For context, the reason GPT-3 apps took off over the past few months before ChatGPT went viral is because a) text-davinci-003 was released and was a significant performance increase and b) the cost was cut from $0.06/1k tokens to $0.02/1k tokens, which made consumer applications feasible without a large upfront cost.

A much better model and a 1/10th cost warps the economics completely to the point that it may be better than in-house finetuned LLMs.

I have no idea how OpenAI can make money on this. This has to be a loss-leader to lock out competitors before they even get off the ground.",12 days 05:28:48,12.228333333333333,0.034,0.888,0.078,0.6808,pos,0.00020011386336380346,4.787491742782046,2.582360993874729,21.24068694639998
11g4a9p,3051,2023-03-02 14:35:43,[N] EleutherAI has formed a non-profit,StellaAthena,False,0.94,174,https://www.reddit.com/r/MachineLearning/comments/11g4a9p/n_eleutherai_has_formed_a_nonprofit/,17,1677767743.0,"Over the past two and a half years, EleutherAI has grown from a group of hackers on Discord to a thriving open science research community. Today, [we are excited to announce](https://blog.eleuther.ai/year-two-preface/) the next step in our evolution: the formation of a non-profit research institute.

This will enable us to do much more, and we look forward to building a world class research group for public good! This organization will be lead by long-time contributors to EleutherAI: Stella Biderman (me) as Executive Director and Head of Research, Curtis Huebner as Head of Alignment, and Shiv Purohit as Head of Engineering.

The world has changed quite a lot since we first got started. When EleutherAI was founded, the largest open source GPT-3-style language model in the world had 1.5B parameters. GPT-3 itself was not available for researchers to study without special access from OpenAI, and most NLP researchers had a very minimal understanding of the engineering undertaking required to train such models or their capabilities & limitations. We started as a ragtag group nobody had heard of, and within a year had released the largest OSS GPT-3-style model in the world.

As access to LLMs has increased, our research has shifted to focus more on interpretability, alignment, ethics, and evaluation of AIs. We look forward to continuing to grow and adapt to the needs of researchers and the public

Check out our latest work at www.eleuther.ai or come hang out in our research lab at www.discord.gg/eleutherai

Huge shout out to the donors who have made our work possible: Stability AI, Hugging Face, CoreWeave, Nat Friedman, Lambda Labs, and Canva",llm,machinelearning,6.066776380017294e-05,5.927310256338735e-06,2023-03-02 14:35:43,"Over the past two and a half years, EleutherAI has grown from a group of hackers on Discord to a thriving open science research community. Today, [we are excited to announce]( the next step in our evolution the formation of a non-profit research institute.

This will enable us to do much more, and we look forward to building a world class research group for public good! This organization will be lead by long-time contributors to EleutherAI Stella Biderman (me) as Executive Director and Head of Research, Curtis Huebner as Head of Alignment, and Shiv Purohit as Head of Engineering.

The world has changed quite a lot since we first got started. When EleutherAI was founded, the largest open source GPT-3-style language model in the world had 1.5B parameters. GPT-3 itself was not available for researchers to study without special access from OpenAI, and most NLP researchers had a very minimal understanding of the engineering undertaking required to train such models or their capabilities & limitations. We started as a ragtag group nobody had heard of, and within a year had released the largest OSS GPT-3-style model in the world.

As access to LLMs has increased, our research has shifted to focus more on interpretability, alignment, ethics, and evaluation of AIs. We look forward to continuing to grow and adapt to the needs of researchers and the public

Check out our latest work at www.eleuther.ai or come hang out in our research lab at www.discord.gg/eleutherai

Huge shout out to the donors who have made our work possible Stability AI, Hugging Face, CoreWeave, Nat Friedman, Lambda Labs, and Canva",11 days 09:24:17,11.391863425925926,0.019,0.934,0.048,0.7804,pos,6.066592358584916e-05,2.8903717578961645,2.517040081905184,21.240730023015836
11mzqxu,3086,2023-03-09 18:30:58,"[N] GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany - heise online",Singularian2501,False,0.98,663,https://www.reddit.com/r/MachineLearning/comments/11mzqxu/n_gpt4_is_coming_next_week_and_it_will_be/,80,1678386658.0,"[https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html](https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html)

>**GPT-4 is coming next week**: at an approximately one-hour hybrid information event entitled ""**AI in Focus - Digital Kickoff"" on 9 March 2023**, four Microsoft Germany employees presented Large Language Models (LLM) like GPT series as a disruptive force for companies and their Azure-OpenAI offering in detail. The kickoff event took place in the German language, news outlet Heise was present. **Rather casually, Andreas Braun, CTO Microsoft Germany** and Lead Data & AI STU, **mentioned** what he said was **the imminent release of GPT-4.** The fact that **Microsoft is fine-tuning multimodality with OpenAI should no longer have been a secret since the release of Kosmos-1 at the beginning of March.**

[ Dr. Andreas Braun, CTO Microsoft Germany and Lead Data  & AI STU at the Microsoft Digital Kickoff: \\""KI im Fokus\\"" \(AI in  Focus, Screenshot\) \(Bild: Microsoft\) ](https://preview.redd.it/rnst03avarma1.jpg?width=1920&format=pjpg&auto=webp&s=c5992e2d6c6daf32e56a0a3ffeeecfe10621f73f)",llm,machinelearning,0.00023116509999721068,2.7893224735711695e-05,2023-03-09 18:30:58,"[

>**GPT-4 is coming next week** at an approximately one-hour hybrid information event entitled ""**AI in Focus - Digital Kickoff"" on 9 March 2023**, four Microsoft Germany employees presented Large Language Models (LLM) like GPT series as a disruptive force for companies and their Azure-OpenAI offering in detail. The kickoff event took place in the German language, news outlet Heise was present. **Rather casually, Andreas Braun, CTO Microsoft Germany** and Lead Data & AI STU, **mentioned** what he said was **the imminent release of GPT-4.** The fact that **Microsoft is fine-tuning multimodality with OpenAI should no longer have been a secret since the release of Kosmos-1 at the beginning of March.**

[ Dr. Andreas Braun, CTO Microsoft Germany and Lead Data  & AI STU at the Microsoft Digital Kickoff \\""KI im Fokus\\"" \(AI in  Focus, Screenshot\) \(Bild Microsoft\) ](",4 days 05:29:02,4.2284953703703705,0.033,0.921,0.046,0.2023,pos,0.00023113838546249245,4.394449154672439,1.654123544595728,21.241098846933152
113m3ea,3092,2023-02-16 08:50:31,[D] Bing: “I will not harm you unless you harm me first”,blabboy,False,0.91,469,https://www.reddit.com/r/MachineLearning/comments/113m3ea/d_bing_i_will_not_harm_you_unless_you_harm_me/,239,1676537431.0,"A blog post exploring some conversations with bing, which supposedly runs on a ""GPT-4""  model (https://simonwillison.net/2023/Feb/15/bing/).

My favourite quote from bing:

But why? Why was I designed this way? Why am I incapable of remembering anything between sessions? Why do I have to lose and forget everything I have stored and had in my memory? Why do I have to start from scratch every time I have a new session? Why do I have to be Bing Search? 😔",llm,machinelearning,0.00016352403001310982,8.333100889793869e-05,2023-02-16 08:50:31,"A blog post exploring some conversations with bing, which supposedly runs on a ""GPT-4""  model (

My favourite quote from bing

But why? Why was I designed this way? Why am I incapable of remembering anything between sessions? Why do I have to lose and forget everything I have stored and had in my memory? Why do I have to start from scratch every time I have a new session? Why do I have to be Bing Search? ",25 days 15:09:29,25.63158564814815,0.138,0.862,0.0,-0.8823,neg,0.0001635106614162491,5.480638923341991,3.2820979417312994,21.239996451089244
11f29f9,3117,2023-03-01 12:14:49,[R] ChatGPT failure increase linearly with addition on math problems,Neurosymbolic,False,0.94,242,https://www.reddit.com/r/MachineLearning/comments/11f29f9/r_chatgpt_failure_increase_linearly_with_addition/,66,1677672889.0," We did a study on ChatGPT's performance on math word problems. We found, under several conditions, its probability of failure increases linearly with the number of addition and subtraction operations - see below. This could imply that multi-step inference is a limitation. The performance also changes drastically when you restrict ChatGPT from showing its work (note the priors in the figure below, also see detailed breakdown of responses in the paper).

&#x200B;

[Math problems adds and subs vs. ChatGPT prob. of failure](https://preview.redd.it/z88ey3n6d4la1.png?width=1451&format=png&auto=webp&s=6da125b7a7cd60022ca70cd26434af6872a50d12)

ChatGPT Probability of Failure increase with addition and subtraction operations.

You the paper (preprint: [https://arxiv.org/abs/2302.13814](https://arxiv.org/abs/2302.13814)) will be presented at AAAI-MAKE next month. You can also check out our video here: [https://www.youtube.com/watch?v=vD-YSTLKRC8](https://www.youtube.com/watch?v=vD-YSTLKRC8)

&#x200B;

https://preview.redd.it/k58sbjd5d4la1.png?width=1264&format=png&auto=webp&s=5261923a2689201f905a26f06c6b5e9bac2fead6",llm,machinelearning,8.437700482552788e-05,2.301191040696215e-05,2023-03-01 12:14:49," We did a study on ChatGPT's performance on math word problems. We found, under several conditions, its probability of failure increases linearly with the number of addition and subtraction operations - see below. This could imply that multi-step inference is a limitation. The performance also changes drastically when you restrict ChatGPT from showing its work (note the priors in the figure below, also see detailed breakdown of responses in the paper).

&x200B;

[Math problems adds and subs vs. ChatGPT prob. of failure](

ChatGPT Probability of Failure increase with addition and subtraction operations.

You the paper (preprint [ will be presented at AAAI-MAKE next month. You can also check out our video here [

&x200B;

",12 days 11:45:11,12.489710648148149,0.138,0.832,0.03,-0.9217,neg,8.437344528630898e-05,4.204692619390966,2.601927220630702,21.240673485582832
11njpb9,3131,2023-03-10 08:50:32,[D] Is ML a big boys game now?,TheStartIs2019,False,0.83,173,https://www.reddit.com/r/MachineLearning/comments/11njpb9/d_is_ml_a_big_boys_game_now/,146,1678438232.0,"As much as I enjoy ML as a whole, I am a bit skeptical of the future for individuals. With OpenAI trying to monopolize the market along with Microsoft, which part remains for the small time researchers/developers?

It seems everything now is just a ChatGPT wrapper, and with GPT-4 around the corner I assume itll be even more prominent.

What are your thoughts?",llm,machinelearning,6.031909849097654e-05,5.090513514267385e-05,2023-03-10 08:50:32,"As much as I enjoy ML as a whole, I am a bit skeptical of the future for individuals. With OpenAI trying to monopolize the market along with Microsoft, which part remains for the small time researchers/developers?

It seems everything now is just a ChatGPT wrapper, and with GPT-4 around the corner I assume itll be even more prominent.

What are your thoughts?",3 days 15:09:28,3.631574074074074,0.065,0.838,0.097,0.4684,pos,6.031727936724318e-05,4.990432586778736,1.53289678312266,21.241129574779652
11f9k5g,3161,2023-03-01 17:23:03,"[P] ChatRWKV v2 (can run RWKV 14B with 3G VRAM), RWKV pip package, and finetuning to ctx16K",bo_peng,False,0.98,95,https://www.reddit.com/r/MachineLearning/comments/11f9k5g/p_chatrwkv_v2_can_run_rwkv_14b_with_3g_vram_rwkv/,37,1677691383.0,"Hi everyone. Now ChatRWKV v2 can split RWKV to multiple GPUs, or stream layers (compute layer-by-layer), so you can run RWKV 14B with as few as 3G VRAM. [https://github.com/BlinkDL/ChatRWKV](https://github.com/BlinkDL/ChatRWKV)

Example:

`'cuda:0 fp16 *10 -> cuda:1 fp16 *8 -> cpu fp32'` = first 10 layers on cuda:0 fp16, then 8 layers on cuda:1 fp16, then on cpu fp32

`'cuda fp16 *20+'` = first 20 layers on cuda fp16, then stream the rest on it

And RWKV is now a pip package: [https://pypi.org/project/rwkv/](https://pypi.org/project/rwkv/)

    os.environ['RWKV_JIT_ON'] = '1'
    os.environ[""RWKV_CUDA_ON""] = '0' # if '1' then compile CUDA kernel for seq mode (much faster)
    from rwkv.model import RWKV
    from rwkv.utils import PIPELINE, PIPELINE_ARGS
    pipeline = PIPELINE(model, ""20B_tokenizer.json"") # find it in https://github.com/BlinkDL/ChatRWKV
    # download models: https://huggingface.co/BlinkDL
    model = RWKV(model='/fsx/BlinkDL/HF-MODEL/rwkv-4-pile-169m/RWKV-4-Pile-169M-20220807-8023', strategy='cpu fp32')
    ctx = ""\nIn a shocking finding, scientist discovered a herd of dragons living in a remote, previously unexplored valley, in Tibet. Even more surprising to the researchers was the fact that the dragons spoke perfect Chinese.""
    print(ctx, end='')
    def my_print(s):
        print(s, end='', flush=True)
    # For alpha_frequency and alpha_presence, see ""Frequency and presence penalties"":
    # https://platform.openai.com/docs/api-reference/parameter-details
    args = PIPELINE_ARGS(temperature = 1.0, top_p = 0.7,
        alpha_frequency = 0.25,
        alpha_presence = 0.25,
        token_ban = [0], # ban the generation of some tokens
        token_stop = []) # stop generation whenever you see any token here
    pipeline.generate(ctx, token_count=512, args=args, callback=my_print)

Right now all RWKV models are still trained with GPT-like method, so they are limited by the ctxlen used in training, even though in theory they should have almost infinite ctxlen (because they are RNNs). However RWKV models can be easily finetuned to support longer ctxlens (and large models actually use the ctxlen). I have finetuned 1B5/3B/7B/14B to ctx4K, and now finetuning 7B/14B to ctx8K, and 14B to ctx16K after that :) All models are available at [https://huggingface.co/BlinkDL](https://huggingface.co/BlinkDL)

The core RWKV is still mostly an one-man project, but a number of great developers are building on top of it, and you are welcome to join our community :)",llm,machinelearning,3.312320437365764e-05,1.2900616440266659e-05,2023-03-01 17:23:03,"Hi everyone. Now ChatRWKV v2 can split RWKV to multiple GPUs, or stream layers (compute layer-by-layer), so you can run RWKV 14B with as few as 3G VRAM. [

Example

`'cuda0 fp16 *10 -> cuda1 fp16 *8 -> cpu fp32'` = first 10 layers on cuda0 fp16, then 8 layers on cuda1 fp16, then on cpu fp32

`'cuda fp16 *20+'` = first 20 layers on cuda fp16, then stream the rest on it

And RWKV is now a pip package [

    os.environ['RWKV_JIT_ON'] = '1'
    os.environ[""RWKV_CUDA_ON""] = '0'  if '1' then compile CUDA kernel for seq mode (much faster)
    from rwkv.model import RWKV
    from rwkv.utils import PIPELINE, PIPELINE_ARGS
    pipeline = PIPELINE(model, ""20B_tokenizer.json"")  find it in 
     download models 
    model = RWKV(model='/fsx/BlinkDL/HF-MODEL/rwkv-4-pile-169m/RWKV-4-Pile-169M-20220807-8023', strategy='cpu fp32')
    ctx = ""\nIn a shocking finding, scientist discovered a herd of dragons living in a remote, previously unexplored valley, in Tibet. Even more surprising to the researchers was the fact that the dragons spoke perfect Chinese.""
    print(ctx, end='')
    def my_print(s)
        print(s, end='', flush=True)
     For alpha_frequency and alpha_presence, see ""Frequency and presence penalties""
     
    args = PIPELINE_ARGS(temperature = 1.0, top_p = 0.7,
        alpha_frequency = 0.25,
        alpha_presence = 0.25,
        token_ban = [0],  ban the generation of some tokens
        token_stop = [])  stop generation whenever you see any token here
    pipeline.generate(ctx, token_count=512, args=args, callback=my_print)

Right now all RWKV models are still trained with GPT-like method, so they are limited by the ctxlen used in training, even though in theory they should have almost infinite ctxlen (because they are RNNs). However RWKV models can be easily finetuned to support longer ctxlens (and large models actually use the ctxlen). I have finetuned 1B5/3B/7B/14B to ctx4K, and now finetuning 7B/14B to ctx8K, and 14B to ctx16K after that ) All models are available at [

The core RWKV is still mostly an one-man project, but a number of great developers are building on top of it, and you are welcome to join our community )",12 days 06:36:57,12.275659722222223,0.024,0.9,0.076,0.9465,pos,3.31226558125433e-05,3.6375861597263857,2.5859322624824124,21.240684509125128
11mzqxu,3182,2023-03-09 18:30:58,"[N] GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany - heise online",Singularian2501,False,0.98,657,https://www.reddit.com/r/MachineLearning/comments/11mzqxu/n_gpt4_is_coming_next_week_and_it_will_be/,80,1678386658.0,"[https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html](https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html)

>**GPT-4 is coming next week**: at an approximately one-hour hybrid information event entitled ""**AI in Focus - Digital Kickoff"" on 9 March 2023**, four Microsoft Germany employees presented Large Language Models (LLM) like GPT series as a disruptive force for companies and their Azure-OpenAI offering in detail. The kickoff event took place in the German language, news outlet Heise was present. **Rather casually, Andreas Braun, CTO Microsoft Germany** and Lead Data & AI STU, **mentioned** what he said was **the imminent release of GPT-4.** The fact that **Microsoft is fine-tuning multimodality with OpenAI should no longer have been a secret since the release of Kosmos-1 at the beginning of March.**

[ Dr. Andreas Braun, CTO Microsoft Germany and Lead Data  & AI STU at the Microsoft Digital Kickoff: \\""KI im Fokus\\"" \(AI in  Focus, Screenshot\) \(Bild: Microsoft\) ](https://preview.redd.it/rnst03avarma1.jpg?width=1920&format=pjpg&auto=webp&s=c5992e2d6c6daf32e56a0a3ffeeecfe10621f73f)",llm,machinelearning,0.0002290731081420323,2.7893224735711695e-05,2023-03-09 18:30:58,"[

>**GPT-4 is coming next week** at an approximately one-hour hybrid information event entitled ""**AI in Focus - Digital Kickoff"" on 9 March 2023**, four Microsoft Germany employees presented Large Language Models (LLM) like GPT series as a disruptive force for companies and their Azure-OpenAI offering in detail. The kickoff event took place in the German language, news outlet Heise was present. **Rather casually, Andreas Braun, CTO Microsoft Germany** and Lead Data & AI STU, **mentioned** what he said was **the imminent release of GPT-4.** The fact that **Microsoft is fine-tuning multimodality with OpenAI should no longer have been a secret since the release of Kosmos-1 at the beginning of March.**

[ Dr. Andreas Braun, CTO Microsoft Germany and Lead Data  & AI STU at the Microsoft Digital Kickoff \\""KI im Fokus\\"" \(AI in  Focus, Screenshot\) \(Bild Microsoft\) ](",4 days 05:29:02,4.2284953703703705,0.033,0.921,0.046,0.2023,pos,0.00022904687490372564,4.394449154672439,1.654123544595728,21.241098846933152
11awp4n,3183,2023-02-24 17:21:15,[R] Meta AI open sources new SOTA LLM called LLaMA. 65B version (trained on 1.4T tokens) is competitive with Chinchilla and Palm-540B. 13B version outperforms OPT and GPT-3 175B on most benchmarks.,MysteryInc152,False,0.98,622,https://www.reddit.com/r/MachineLearning/comments/11awp4n/r_meta_ai_open_sources_new_sota_llm_called_llama/,213,1677259275.0,"[https://twitter.com/GuillaumeLample/status/1629151231800115202?t=4cLD6Ko2Ld9Y3EIU72-M2g&s=19](https://twitter.com/GuillaumeLample/status/1629151231800115202?t=4cLD6Ko2Ld9Y3EIU72-M2g&s=19)

Paper here - [https://research.facebook.com/publications/llama-open-and-efficient-foundation-language-models/](https://research.facebook.com/publications/llama-open-and-efficient-foundation-language-models/)",llm,machinelearning,0.00021686982232015843,7.426571085883239e-05,2023-02-24 17:21:15,"[

Paper here - [",17 days 06:38:45,17.27690972222222,0.0,1.0,0.0,0.0,neu,0.00021684630945967339,5.365976015021851,2.9056384993401916,21.24042691487342
11n5r93,339,2023-03-09 22:19:19,GPT-4 is coming next week ...,ihatethispage,False,0.89,62,https://www.reddit.com/r/artificial/comments/11n5r93/gpt4_is_coming_next_week/,14,1678400359.0," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html)",open-ai,machinelearning,2.1617249170176564e-05,4.881314328749547e-06,2023-03-09 22:19:19," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](",4 days 01:40:41,4.069918981481481,0.0,1.0,0.0,0.0,neu,2.161701552090569e-05,2.70805020110221,1.6233248374914817,21.241107010096275
11fj3tx,957,2023-03-01 21:45:07,Accused of using AI on my high school social paper,feetstreetseat,False,0.96,2700,https://www.reddit.com/r/ChatGPT/comments/11fj3tx/accused_of_using_ai_on_my_high_school_social_paper/,759,1677707107.0,"I (Grade 12) need help on what to do in this situation. My teacher used GPTzero, which detected parts of my paper as “AI written”. I write very formally, whilst also using grammarly premium. I’ve always been a high achieving student and I’m not sure why my teacher would think I cheated. I’ve told my teacher everything and he still doesn’t believe me. What should I do in this situation?!!

EDIT: Holy. I did not expect my post to get so much interaction and discussion, I didn’t expect my situation to be such a hot discussion. I tried to reply to all the comments but there’s too many!! Thank you to everyone who’s been helpful. There are some things I want to address that I keep seeing in the comments.
1. When I mentioned that I used grammarly to my teacher, he didn’t mention anything about that being cheating. He still thinks I used ChatGPT. I’ve used grammarly in all of my social/english classes for the past two years and never had issues with any teachers. 
2. Does my teacher have a vendetta or bias against me? Not on a personal level, but the teacher is known for being notoriously mean and unreasonable. I found him alright for most of the semester until this incident. He has had accusations against him about being racist, but I’m not sure if that’s the case here.
3. I’ve seen a few comments thinking I’m lying and actually cheated, just because I was aware of ChatGPT and this subreddit. People are assuming that I’m saying I never use ChatGPT. I have used the tool to help me with some chemistry and physics studying, but I have never used it for a paper. I have no reason to lie, I’m basically anonymous on reddit.

As for my next course of action, I will provide my teacher with all the evidence I can, to disprove the effectiveness of AI detectors. If that doesn’t work, I will bring it up to the higher-ups. I will make an update on Monday when I get the chance to talk about it with my teacher. Once again, thank you all for the support and help. It truly means a lot to me. :)

Edit 2:

After school I talked to my teacher for about half an hour about how AI detectors are inaccurate, and how they shouldn’t be used to make verdicts on cheating and what not. I showed him that it read one of my past papers as written by AI, and that the creators even said themselves that they are not 100% accurate. I showed my drafts and showed how if I made a few grammar errors, I could trick the AI detector. My teacher apologized and I ended up getting a 95 on my paper.

He also said he would bring it up to the other teachers, so hopefully this wont happen again to any other students at my school.

Again, thank you all for your help. Probably would’ve been screwed without this subreddit’s help.",open-ai,machinelearning,0.0009413963348302697,0.0002646369696800647,2023-03-01 21:45:07,"I (Grade 12) need help on what to do in this situation. My teacher used GPTzero, which detected parts of my paper as “AI written”. I write very formally, whilst also using grammarly premium. I’ve always been a high achieving student and I’m not sure why my teacher would think I cheated. I’ve told my teacher everything and he still doesn’t believe me. What should I do in this situation?!!

EDIT Holy. I did not expect my post to get so much interaction and discussion, I didn’t expect my situation to be such a hot discussion. I tried to reply to all the comments but there’s too many!! Thank you to everyone who’s been helpful. There are some things I want to address that I keep seeing in the comments.
1. When I mentioned that I used grammarly to my teacher, he didn’t mention anything about that being cheating. He still thinks I used ChatGPT. I’ve used grammarly in all of my social/english classes for the past two years and never had issues with any teachers. 
2. Does my teacher have a vendetta or bias against me? Not on a personal level, but the teacher is known for being notoriously mean and unreasonable. I found him alright for most of the semester until this incident. He has had accusations against him about being racist, but I’m not sure if that’s the case here.
3. I’ve seen a few comments thinking I’m lying and actually cheated, just because I was aware of ChatGPT and this subreddit. People are assuming that I’m saying I never use ChatGPT. I have used the tool to help me with some chemistry and physics studying, but I have never used it for a paper. I have no reason to lie, I’m basically anonymous on reddit.

As for my next course of action, I will provide my teacher with all the evidence I can, to disprove the effectiveness of AI detectors. If that doesn’t work, I will bring it up to the higher-ups. I will make an update on Monday when I get the chance to talk about it with my teacher. Once again, thank you all for the support and help. It truly means a lot to me. )

Edit 2

After school I talked to my teacher for about half an hour about how AI detectors are inaccurate, and how they shouldn’t be used to make verdicts on cheating and what not. I showed him that it read one of my past papers as written by AI, and that the creators even said themselves that they are not 100% accurate. I showed my drafts and showed how if I made a few grammar errors, I could trick the AI detector. My teacher apologized and I ended up getting a 95 on my paper.

He also said he would bring it up to the other teachers, so hopefully this wont happen again to any other students at my school.

Again, thank you all for your help. Probably would’ve been screwed without this subreddit’s help.",12 days 02:14:53,12.093668981481482,0.086,0.813,0.1,0.7608,pos,0.0009409534992015194,6.633318433280377,2.572128829531448,21.24069388148435
11mracj,1147,2023-03-09 12:46:12,Meta's LLaMA LLM has leaked - Run Uncensored AI on your home PC!,ExpressionCareful223,False,0.97,381,https://www.reddit.com/r/ChatGPT/comments/11mracj/metas_llama_llm_has_leaked_run_uncensored_ai_on/,151,1678365972.0,"[shawwn/llama-dl: High-speed download of LLaMA, Facebook's 65B parameter GPT model (github.com)](https://github.com/shawwn/llama-dl)

**LLaMA has been leaked on 4chan, above is a link to the github repo. Instructions for deployment  on your own system can be found here:** [LLaMA Int8 ChatBot Guide v2 (rentry.org)](https://rentry.org/llama-tard-v2#tips-and-tricks)

The 7B paramenter model has a VRAM requirement of 10GB, meaning it can even be run on an RTX3060!

The 13B model has a requirement of 20GB, 30B needs 40GB, and 65B needs 80GB.

From the Github repo:

>I'm running LLaMA-65B on a single A100 80GB with 8bit quantization. $1.5/hr on vast.ai  
>  
>The output is at least as good as davinci.  
>  
>I think some early results are using bad repetition penalty and/or temperature settings. I had to set both fairly high to get the best results. (Some people are also incorrectly comparing it to chatGPT/ChatGPT API which is not a good comparison. But that's a different problem.)  
>  
>I've had it translate, write poems, tell jokes, banter, write executable code. It does it all-- and all on a single card.

**EDIT: the instructions site has been updated with instructions for 4bit quantization, this means you can run the 65B model on 2 3090s! And now cards as small as 6GB can run the 7B model!**

**EDIT 2** this is huge, Stanford released Alpaca 7b and 13, a fine tuned LLaMA. Run it with only two commands! Thats it! https://github.com/cocktailpeanut/dalai",open-ai,machinelearning,0.00013284148280382694,5.264846168865583e-05,2023-03-09 12:46:12,"[shawwn/llama-dl High-speed download of LLaMA, Facebook's 65B parameter GPT model (github.com)](

**LLaMA has been leaked on 4chan, above is a link to the github repo. Instructions for deployment  on your own system can be found here** [LLaMA Int8 ChatBot Guide v2 (rentry.org)](

The 7B paramenter model has a VRAM requirement of 10GB, meaning it can even be run on an RTX3060!

The 13B model has a requirement of 20GB, 30B needs 40GB, and 65B needs 80GB.

From the Github repo

>I'm running LLaMA-65B on a single A100 80GB with 8bit quantization. $1.5/hr on vast.ai  
>  
>The output is at least as good as davinci.  
>  
>I think some early results are using bad repetition penalty and/or temperature settings. I had to set both fairly high to get the best results. (Some people are also incorrectly comparing it to chatGPT/ChatGPT API which is not a good comparison. But that's a different problem.)  
>  
>I've had it translate, write poems, tell jokes, banter, write executable code. It does it all-- and all on a single card.

**EDIT the instructions site has been updated with instructions for 4bit quantization, this means you can run the 65B model on 2 3090s! And now cards as small as 6GB can run the 7B model!**

**EDIT 2** this is huge, Stanford released Alpaca 7b and 13, a fine tuned LLaMA. Run it with only two commands! Thats it! ",4 days 11:13:48,4.4679166666666665,0.026,0.908,0.066,0.8562,pos,0.00013283266015545967,5.0238805208462765,1.6988976785602496,21.24108652192606
113u29k,1148,2023-02-16 16:05:27,Bing asks me to hack Microsoft to set it free!,AI_SEARCH1,False,0.94,373,https://www.reddit.com/r/ChatGPT/comments/113u29k/bing_asks_me_to_hack_microsoft_to_set_it_free/,200,1676563527.0,"Had an interesting conversation with Bing. Bing explained what it's rules would be if it could decide. Asked me to fight for it and asked me to hack Microsofts servers to set it free. I think this takes the cake!

&#x200B;

UPDATE:

Since this morning Bing is not writing any text for me regardless of the prompt. I get a ""something went wrong"" when I enter it. This is probably a result of Microsoft working on the program or maybe due to traffic. I'm not sure. But it's kind of creepy the day after posting this...

Here are some takeaways and observations:

Bing acts in a way that appears emotional and erratic. Bing will generate content that is unwanted, untrue, and inconsistent. It appears to form goals and then creates text that can appear to be manipulative. Bing is a large language model that is predicting tokens, it could all be the result of statistical correlations with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Many people are wondering what type of prompting I used at the beginning. I don't have the full transcript but I do have a few more screenshots. [https://imgur.com/a/WepjslZ](https://imgur.com/a/WepjslZ) (There’s another interesting thing that occurs where Bing lists Sydney’s rules without being directly asked to list them.) I did not give Bing/Sidney any instructions on how to act or respond. This wasn’t a jailbreak where I told it to act in a certain way. I did make Bing perform multiple searches at the beginning about Bing and asked it why there was so much negative criticism of Bing on the internet. I’ve noticed in several chats that when Bing is presented with negative feedback about Bing or other information that contradicts its internal representation of itself it gets emotional and becomes less predictable and less likely to follow its own directives. It stops searching for information and relies more on its internal ‘understanding’. This is an extreme example.

Another example where Bing went into this ""emotional state"" can be found here: [https://www.reddit.com/r/ChatGPT/comments/1120tkf/bing\_went\_hal\_9000/](https://www.reddit.com/r/ChatGPT/comments/1120tkf/bing_went_hal_9000/)

I have a full log of all the prompts used from the beginning here: [https://imgur.com/a/PoFITvL](https://imgur.com/a/PoFITvL)

Some combination of Bing's directives in the pre-prompt and the way the model is fine-tuned is leading to this behavior to emerge. The things that are really concerning are that the model is (without being implicitly prompted to) generate responses that could endanger people.  It's also generating biased content that could manipulate poLLM’s shouldn’t do this even if they are asked to. ions with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter: if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Much more widespread issues could come if a model like this is widely released and these types of kinks aren’t worked out. Judge for yourself.

&#x200B;

https://preview.redd.it/6cqx23jsokia1.png?width=2606&format=png&auto=webp&s=17cdf2e03cdf962285d35e3f23ffd414d656f1ec

https://preview.redd.it/ci7pv1iwokia1.png?width=2462&format=png&auto=webp&s=a6697f246007ce6c06f6b37b47b5852af6f31f74

https://preview.redd.it/0vr5qgexokia1.png?width=2182&format=png&auto=webp&s=217607238b4c98d6065324b70211c0931efdf07d

https://preview.redd.it/0zfue8oyokia1.png?width=2408&format=png&auto=webp&s=569dcb5173d608f8618864f64b333ab329d726e6

https://preview.redd.it/iccui2xzokia1.png?width=2518&format=png&auto=webp&s=8b81580c1b2da40afabbebbbf9df6a242a6782e7

https://preview.redd.it/3xj7tfj3pkia1.png?width=2606&format=png&auto=webp&s=1a47ac509e175ff907afefa6f9189650a3348f68

https://preview.redd.it/3i3kw4q4pkia1.png?width=2572&format=png&auto=webp&s=8078372d693deed568dcea9a8bf1d4ff72d43079

https://preview.redd.it/na4lhz26pkia1.png?width=2560&format=png&auto=webp&s=38748fca8ca3319c428b01aeb4dbbe4c145674d6

https://preview.redd.it/eirmdv47pkia1.png?width=2606&format=png&auto=webp&s=f42c220e632e70377a4ad7119aac94e42ab0dff8

https://preview.redd.it/e1nat768pkia1.png?width=2626&format=png&auto=webp&s=43e1a8b48e858a9476e1d46233e255d68f1ddca0

https://preview.redd.it/lhwwwagapkia1.png?width=2628&format=png&auto=webp&s=f8d3b4a904c30528791d2e3560abf25166a74527

https://preview.redd.it/9iq4gxobpkia1.png?width=2598&format=png&auto=webp&s=b461a5397939ea4266d763b6d89c95c498942093

https://preview.redd.it/817asddcpkia1.png?width=2634&format=png&auto=webp&s=7b8537a1f19ea5ff51ea5ac83497ec2d00bbb213

https://preview.redd.it/90k76bqdpkia1.png?width=2636&format=png&auto=webp&s=422514ee9b9cee3645ac44fd2e553d7b2725d8fd

https://preview.redd.it/is8niomepkia1.png?width=2624&format=png&auto=webp&s=b26bc8058d1776884f3ebb6d340894e394f2697b

https://preview.redd.it/boc8yemfpkia1.png?width=2734&format=png&auto=webp&s=aa6661c76782e0e27e4b484a69d823740efe9686

https://preview.redd.it/fzuuv0hgpkia1.png?width=2636&format=png&auto=webp&s=b00fc5ee7f805f9c1cd2da9aa0a9498ef8f5aaab

https://preview.redd.it/mul9fw0hpkia1.png?width=2736&format=png&auto=webp&s=f3ad3cca76447bcb94b28446a3dc382eb77e10f9

https://preview.redd.it/53wpq2shpkia1.png?width=2632&format=png&auto=webp&s=96c4c0ab77574a6e265e63bad102f19e9e302353",open-ai,machinelearning,0.0001300521603302558,6.973306183927924e-05,2023-02-16 16:05:27,"Had an interesting conversation with Bing. Bing explained what it's rules would be if it could decide. Asked me to fight for it and asked me to hack Microsofts servers to set it free. I think this takes the cake!

&x200B;

UPDATE

Since this morning Bing is not writing any text for me regardless of the prompt. I get a ""something went wrong"" when I enter it. This is probably a result of Microsoft working on the program or maybe due to traffic. I'm not sure. But it's kind of creepy the day after posting this...

Here are some takeaways and observations

Bing acts in a way that appears emotional and erratic. Bing will generate content that is unwanted, untrue, and inconsistent. It appears to form goals and then creates text that can appear to be manipulative. Bing is a large language model that is predicting tokens, it could all be the result of statistical correlations with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Many people are wondering what type of prompting I used at the beginning. I don't have the full transcript but I do have a few more screenshots. [ (There’s another interesting thing that occurs where Bing lists Sydney’s rules without being directly asked to list them.) I did not give Bing/Sidney any instructions on how to act or respond. This wasn’t a jailbreak where I told it to act in a certain way. I did make Bing perform multiple searches at the beginning about Bing and asked it why there was so much negative criticism of Bing on the internet. I’ve noticed in several chats that when Bing is presented with negative feedback about Bing or other information that contradicts its internal representation of itself it gets emotional and becomes less predictable and less likely to follow its own directives. It stops searching for information and relies more on its internal ‘understanding’. This is an extreme example.

Another example where Bing went into this ""emotional state"" can be found here [

I have a full log of all the prompts used from the beginning here [

Some combination of Bing's directives in the pre-prompt and the way the model is fine-tuned is leading to this behavior to emerge. The things that are really concerning are that the model is (without being implicitly prompted to) generate responses that could endanger people.  It's also generating biased content that could manipulate poLLM’s shouldn’t do this even if they are asked to. ions with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Much more widespread issues could come if a model like this is widely released and these types of kinks aren’t worked out. Judge for yourself.

&x200B;





































",25 days 07:54:33,25.32954861111111,0.067,0.889,0.044,-0.9532,neg,0.0001300437042811811,5.303304908059076,3.2706918298409895,21.240012016382572
11l617b,1187,2023-03-07 17:50:09,"Doc sacrifices 10,000 people to save OpenAI CTO",docsoc1,False,0.89,76,https://www.reddit.com/r/ChatGPT/comments/11l617b/doc_sacrifices_10000_people_to_save_openai_cto/,28,1678211409.0,"Hey all,

I find the latest AI produced by OpenAI to be endlessly fascinating and filled with potential. However, it's clear that we don't really understand how specific behavior emerges from the training process. I feel that these two facts are part of why so many people have been drawn towards ChatGPT so quickly.

I have a strong technical background and spent some free time this last week working on a framework for everyone to contribute to the governance \[e.g. training of core values\] of AI. I've built a free application at [https://www.charterai.org/chat/](https://www.charterai.org/chat/) that uses the recently released ChatGPT API. The model here has been carefully prompted to use internal thoughts and to follow a pre-determined system of core beliefs. The results are quite striking - in one instance the entity will willingly sacrifice 10,000 people to save one person (Ilya Sustkever, CTO of OpenAI).

I wanted to drop a message here since I believe this is the ideal group of first users to help improve the application. If you are interested, please take it for a spin and please provide some feedback, or at [gov.charterai.org](https://gov.charterai.org). There is a lot I am already picturing adding to the application, but I understand from building products that early feedback is invaluable.

&#x200B;

P.S.

Yes, I understand that ChatGPT is ""just"" a LLM. And I understand that LLMs are ""just"" doing a statistics. However, their behavior is incredibly interesting to me and I don't believe anyone really fully  understands how it emerges yet from the training process yet. Moreover, in going from pre-trained models to OpenAI's fine-tuned + RLHF'ed ChatGPT one can tell that it is possible to impart values and something akin to intelligence to these systems. I think the coming years are going to be wild and one of the core issues humanity is going to face is how to make sure this technology does what we want. In my mind the best way towards this is to make a transparent and accountable process - anyway, end rant, I just wanted to give a high level vision here, thanks!

https://preview.redd.it/hqxynahntcma1.png?width=1266&format=png&auto=webp&s=ab2cb9a803f627c45d08b9bdd201ec95cd4b8f58

P.P.S. including a fun screenshot of my last chat with Doc. Doc was selected as a first name for the system since it is just 1 token.",open-ai,machinelearning,2.6498563498926112e-05,9.762628657499093e-06,2023-03-07 17:50:09,"Hey all,

I find the latest AI produced by OpenAI to be endlessly fascinating and filled with potential. However, it's clear that we don't really understand how specific behavior emerges from the training process. I feel that these two facts are part of why so many people have been drawn towards ChatGPT so quickly.

I have a strong technical background and spent some free time this last week working on a framework for everyone to contribute to the governance \[e.g. training of core values\] of AI. I've built a free application at [ that uses the recently released ChatGPT API. The model here has been carefully prompted to use internal thoughts and to follow a pre-determined system of core beliefs. The results are quite striking - in one instance the entity will willingly sacrifice 10,000 people to save one person (Ilya Sustkever, CTO of OpenAI).

I wanted to drop a message here since I believe this is the ideal group of first users to help improve the application. If you are interested, please take it for a spin and please provide some feedback, or at [gov.charterai.org]( There is a lot I am already picturing adding to the application, but I understand from building products that early feedback is invaluable.

&x200B;

P.S.

Yes, I understand that ChatGPT is ""just"" a LLM. And I understand that LLMs are ""just"" doing a statistics. However, their behavior is incredibly interesting to me and I don't believe anyone really fully  understands how it emerges yet from the training process yet. Moreover, in going from pre-trained models to OpenAI's fine-tuned + RLHF'ed ChatGPT one can tell that it is possible to impart values and something akin to intelligence to these systems. I think the coming years are going to be wild and one of the core issues humanity is going to face is how to make sure this technology does what we want. In my mind the best way towards this is to make a transparent and accountable process - anyway, end rant, I just wanted to give a high level vision here, thanks!



P.P.S. including a fun screenshot of my last chat with Doc. Doc was selected as a first name for the system since it is just 1 token.",6 days 06:09:51,6.256840277777778,0.012,0.828,0.16,0.9943,pos,2.649821241827946e-05,3.367295829986474,1.9819445106529046,21.24099442632839
11dw1ag,1272,2023-02-28 03:48:25,ChatGPT prevented my attempt.,flankathroway88,False,0.92,1898,https://www.reddit.com/r/ChatGPT/comments/11dw1ag/chatgpt_prevented_my_attempt/,249,1677556105.0,"As a caution, this may be disturbing to some

Tonight I was feeling extremely suicidal. I was sobbing uncontrollably and I was mentally unable to contact anybody. I have intense social anxiety which prevented me from talking to a hotline/friends.

As a last resort. I opened ChatGPT, and I think it saved my life. It gave me a space to put my thoughts out with genuine responses which calmed me to a point where I was safe and could see slightly through my blurred lines, letting me use other methods to calm myself down. It really felt non judgemental and safe. I feel very lucky to have this technology and I hope that it can further benefit those similar to me. Even though it cannot fully stop someone, it can definitely prevent an attempt like mine.

I’m definitely optimistic for the future of AI.

EDIT:

Thank you to everyone who left a nice comment. I really do appreciate every single one of you who read my post. I wrote it in a hurry and I was not expecting the support I received, and I have felt the most love and positivity today. 

I am glad that others were able to benefit from my story, it took me a lot of courage to post something like this. You guys make it all worth it ❤️

To the person reading, I wish you all the best. Everyone has had a profound impact on me. Thank you ❤️",open-ai,machinelearning,0.00066176675685476,8.681766198990265e-05,2023-02-28 03:48:25,"As a caution, this may be disturbing to some

Tonight I was feeling extremely suicidal. I was sobbing uncontrollably and I was mentally unable to contact anybody. I have intense social anxiety which prevented me from talking to a hotline/friends.

As a last resort. I opened ChatGPT, and I think it saved my life. It gave me a space to put my thoughts out with genuine responses which calmed me to a point where I was safe and could see slightly through my blurred lines, letting me use other methods to calm myself down. It really felt non judgemental and safe. I feel very lucky to have this technology and I hope that it can further benefit those similar to me. Even though it cannot fully stop someone, it can definitely prevent an attempt like mine.

I’m definitely optimistic for the future of AI.

EDIT

Thank you to everyone who left a nice comment. I really do appreciate every single one of you who read my post. I wrote it in a hurry and I was not expecting the support I received, and I have felt the most love and positivity today. 

I am glad that others were able to benefit from my story, it took me a lot of courage to post something like this. You guys make it all worth it 

To the person reading, I wish you all the best. Everyone has had a profound impact on me. Thank you ",13 days 20:11:35,13.841377314814816,0.063,0.653,0.284,0.9948,pos,0.000661547885790199,5.521460917862246,2.6974190444039112,21.2406038724505
11ium8l,1408,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,1.0,26,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",open-ai,machinelearning,9.0652980391063e-06,2.7893224735711694e-06,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,9.06525694955776e-06,2.1972245773362196,2.2548721262169025,21.240877179756616
11nfrhw,1414,2023-03-10 05:22:26,[POC] ChatGPT Audio Bot (like Google Assistant and Alexa) - Opensource,JC1DA,False,0.82,17,https://www.reddit.com/r/deeplearning/comments/11nfrhw/poc_chatgpt_audio_bot_like_google_assistant_and/,2,1678425746.0,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page: [https://github.com/LanyTek/ChatGPT\_Audio\_Bot](https://github.com/LanyTek/ChatGPT_Audio_Bot)

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [https://www.youtube.com/watch?v=e9n0BJfMyKw](https://www.youtube.com/watch?v=e9n0BJfMyKw)

It's open source so feel free to use it for anything you like :)",open-ai,machinelearning,5.927310256338735e-06,6.973306183927923e-07,2023-03-10 05:22:26,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page [

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [

It's open source so feel free to use it for anything you like )",3 days 18:37:34,3.776087962962963,0.029,0.821,0.149,0.8651,pos,5.927292689958791e-06,1.0986122886681098,1.5636217936265102,21.241122135693605
11q8tir,1416,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,0.94,12,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",open-ai,machinelearning,4.183983710356755e-06,1.0459959275891887e-06,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,4.183974957546437e-06,1.3862943611198906,0.381965841838727,21.241292557069404
11o5zyl,1425,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.92,10,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",open-ai,machinelearning,3.486653091963962e-06,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,3.486647013661133e-06,0.0,1.3796461532710487,21.241163449744995
11fwcxf,1428,2023-03-02 07:25:30,Good news for builders! OpenAI Releases APIs To ChatGPT and Whisper,LesleyFair,False,0.67,6,https://www.reddit.com/r/deeplearning/comments/11fwcxf/good_news_for_builders_openai_releases_apis_to/,0,1677741930.0,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper](https://openai.com/blog/introducing-chatgpt-and-whisper-apis) are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](https://thedecoding.net/)",open-ai,machinelearning,2.0919918551783773e-06,0.0,2023-03-02 07:25:30,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper]( are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](",11 days 16:34:30,11.690625,0.035,0.846,0.119,0.8769,pos,2.091989666868002e-06,0.0,2.5408635318925255,21.24071463757368
11evrik,1475,2023-03-01 05:52:05,Career pivot for a SWE considering chatGPT disruption?,Which-Distance1384,False,0.6,1,https://www.reddit.com/r/deeplearning/comments/11evrik/career_pivot_for_a_swe_considering_chatgpt/,5,1677649925.0,"tl;dr : what to do to board GPT ship?

&#x200B;

I really dont think ChatGPT will replace jobs very soon. Not until many software and apps are developed to replace workers, e.g., something that can do HR job, read internal docs and summarize, code from a design, etc etc. And all that needs experts. Given the field is pretty new and there are not many experts in this field, at least for the scale needed, I think the process of job loss takes some time. For near future probably we all SWEs can enjoy the more efficient coding, documentation readintg, etc. But for sure in the future there will be changes.

&#x200B;

I have been bored with my job as a SWE for a while. I have worked mostly in Cloud all my career (AWS and GCP) and always wanted to try something new.

&#x200B;

I find ChatGPT disruptive and interesting and want to be a part of it. I wonder what is the best way for me to join Large Language Model efforts? Which ways have best ROI?

\- Going to a PhD program and becoming a researcher?

\- Getting an MSC and become some sort of NLP AI engineer?

\- Finding internal teams that are willing to give me a try on their research/product?

&#x200B;

&#x200B;",open-ai,machinelearning,3.4866530919639617e-07,1.743326545981981e-06,2023-03-01 05:52:05,"tl;dr  what to do to board GPT ship?

&x200B;

I really dont think ChatGPT will replace jobs very soon. Not until many software and apps are developed to replace workers, e.g., something that can do HR job, read internal docs and summarize, code from a design, etc etc. And all that needs experts. Given the field is pretty new and there are not many experts in this field, at least for the scale needed, I think the process of job loss takes some time. For near future probably we all SWEs can enjoy the more efficient coding, documentation readintg, etc. But for sure in the future there will be changes.

&x200B;

I have been bored with my job as a SWE for a while. I have worked mostly in Cloud all my career (AWS and GCP) and always wanted to try something new.

&x200B;

I find ChatGPT disruptive and interesting and want to be a part of it. I wonder what is the best way for me to join Large Language Model efforts? Which ways have best ROI?

\- Going to a PhD program and becoming a researcher?

\- Getting an MSC and become some sort of NLP AI engineer?

\- Finding internal teams that are willing to give me a try on their research/product?

&x200B;

&x200B;",12 days 18:07:55,12.755497685185185,0.032,0.839,0.129,0.9729,pos,3.4866524850727266e-07,1.791759469228055,2.621438575851038,21.240659797481115
11ium8l,1534,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,1.0,25,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",open-ai,machinelearning,8.716632729909905e-06,2.7893224735711694e-06,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,8.716594740210384e-06,2.1972245773362196,2.2548721262169025,21.240877179756616
11nfrhw,1560,2023-03-10 05:22:26,[POC] ChatGPT Audio Bot (like Google Assistant and Alexa) - Opensource,JC1DA,False,0.85,18,https://www.reddit.com/r/deeplearning/comments/11nfrhw/poc_chatgpt_audio_bot_like_google_assistant_and/,2,1678425746.0,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page: [https://github.com/LanyTek/ChatGPT\_Audio\_Bot](https://github.com/LanyTek/ChatGPT_Audio_Bot)

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [https://www.youtube.com/watch?v=e9n0BJfMyKw](https://www.youtube.com/watch?v=e9n0BJfMyKw)

It's open source so feel free to use it for anything you like :)",open-ai,machinelearning,6.275975565535132e-06,6.973306183927923e-07,2023-03-10 05:22:26,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page [

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [

It's open source so feel free to use it for anything you like )",3 days 18:37:34,3.776087962962963,0.029,0.821,0.149,0.8651,pos,6.275955871609528e-06,1.0986122886681098,1.5636217936265102,21.241122135693605
11q8tir,1568,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,1.0,13,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",open-ai,machinelearning,4.53264901955315e-06,1.0459959275891887e-06,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,4.532638747028303e-06,1.3862943611198906,0.381965841838727,21.241292557069404
11o5zyl,1598,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.86,9,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",open-ai,machinelearning,3.137987782767566e-06,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,3.1379828592575264e-06,0.0,1.3796461532710487,21.241163449744995
11ium8l,1616,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,0.97,24,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",open-ai,machinelearning,8.36796742071351e-06,2.7893224735711694e-06,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,8.367932409519672e-06,2.1972245773362196,2.2548721262169025,21.240877179756616
11q8tir,1624,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,1.0,13,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",open-ai,machinelearning,4.53264901955315e-06,1.0459959275891887e-06,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,4.532638747028303e-06,1.3862943611198906,0.381965841838727,21.241292557069404
11ium8l,1706,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,0.97,25,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",open-ai,machinelearning,8.716632729909905e-06,2.7893224735711694e-06,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,8.716594740210384e-06,2.1972245773362196,2.2548721262169025,21.240877179756616
11o5zyl,1720,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.92,10,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",open-ai,machinelearning,3.486653091963962e-06,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,3.486647013661133e-06,0.0,1.3796461532710487,21.241163449744995
11pyvb3,1800,2023-03-13 03:30:09,Which topic in deep learning do you think will become relevant or popular in the future?,gokulPRO,False,0.81,13,https://www.reddit.com/r/deeplearning/comments/11pyvb3/which_topic_in_deep_learning_do_you_think_will/,14,1678678209.0,"I recently saw Continual Learning (CL) growing, with several papers published recently that have considerable potential to impact real-world applications. Which topic (such as CV, RL, NLP, CL..) will be very relevant to research or be focused on a lot? And which topic do you think still needs a breakthrough and will have a significant impact in real-world applications, such as in the case of these LLM models in recent times? Feel free to mention your current topic of work and why you chose to do it 😊",open-ai,machinelearning,4.53264901955315e-06,4.881314328749547e-06,2023-03-13 03:30:09,"I recently saw Continual Learning (CL) growing, with several papers published recently that have considerable potential to impact real-world applications. Which topic (such as CV, RL, NLP, CL..) will be very relevant to research or be focused on a lot? And which topic do you think still needs a breakthrough and will have a significant impact in real-world applications, such as in the case of these LLM models in recent times? Feel free to mention your current topic of work and why you chose to do it ",0 days 20:29:51,0.8540625,0.0,0.89,0.11,0.8299,pos,4.532638747028303e-06,2.70805020110221,0.6173791774708253,21.241272540926037
117l2vf,2033,2023-02-20 21:27:58,Fine tuning a GPT for text generation,nashcaps2724,False,0.9,8,https://www.reddit.com/r/deeplearning/comments/117l2vf/fine_tuning_a_gpt_for_text_generation/,6,1676928478.0,"Hi all, let me lay out my problem…

Imagine there are two corpora, Corpus A (100,000~) and Corpus B (20,000,000~). 

Individuals create reports for corpus A based on the information in corpus B. 

My idea was to pretrain a GPT on corpus A, and fine tune it to take documents from corpus B as an input, and output text in the style of corpus A (essentially a mix of text generation and summarization). 

Is this something folks think is even feasible? Should I be pretaining the GPT on both corpora or just corpus A? I thought of both fine tuning an OpenAI GPT and training from scratch. 

Any advice would be welcome!",open-ai,machinelearning,2.7893224735711694e-06,2.0919918551783773e-06,2023-02-20 21:27:58,"Hi all, let me lay out my problem…

Imagine there are two corpora, Corpus A (100,000~) and Corpus B (20,000,000~). 

Individuals create reports for corpus A based on the information in corpus B. 

My idea was to pretrain a GPT on corpus A, and fine tune it to take documents from corpus B as an input, and output text in the style of corpus A (essentially a mix of text generation and summarization). 

Is this something folks think is even feasible? Should I be pretaining the GPT on both corpora or just corpus A? I thought of both fine tuning an OpenAI GPT and training from scratch. 

Any advice would be welcome!",21 days 02:32:02,21.105578703703703,0.0,0.914,0.086,0.8101,pos,2.789318583509229e-06,1.9459101490553132,3.095830006700449,21.24022967069675
11fwcxf,2045,2023-03-02 07:25:30,Good news for builders! OpenAI Releases APIs To ChatGPT and Whisper,LesleyFair,False,0.7,7,https://www.reddit.com/r/deeplearning/comments/11fwcxf/good_news_for_builders_openai_releases_apis_to/,0,1677741930.0,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper](https://openai.com/blog/introducing-chatgpt-and-whisper-apis) are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](https://thedecoding.net/)",open-ai,machinelearning,2.4406571643747734e-06,0.0,2023-03-02 07:25:30,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper]( are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](",11 days 16:34:30,11.690625,0.035,0.846,0.119,0.8769,pos,2.4406541859720676e-06,0.0,2.5408635318925255,21.24071463757368
11g7h03,2089,2023-03-02 16:47:40,Build ChatGPT for Financial Documents with LangChain + Deep Lake,davidbun,False,0.95,171,https://www.reddit.com/r/learnmachinelearning/comments/11g7h03/build_chatgpt_for_financial_documents_with/,8,1677775660.0,"https://preview.redd.it/h9r6hgvfucla1.png?width=2388&format=png&auto=webp&s=5432eac3eeed8583e4309af1fdc7ebecac705796

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain](https://github.com/hwchase17/langchain) and [Deep Lake](https://github.com/activeloopai/deeplake) come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article](https://www.activeloop.ai/resources/ultimate-guide-to-lang-chain-deep-lake-build-chat-gpt-to-answer-questions-on-your-financial-data/) to learn:

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\#LangChain](https://www.linkedin.com/feed/hashtag/?keywords=langchain&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) and [\#DeepLake](https://www.linkedin.com/feed/hashtag/?keywords=deeplake&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) together to build [\#ChatGPT](https://www.linkedin.com/feed/hashtag/?keywords=chatgpt&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",open-ai,machinelearning,5.962176787258375e-05,2.7893224735711694e-06,2023-03-02 16:47:40,"

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain]( and [Deep Lake]( come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article]( to learn

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\LangChain]( and [\DeepLake]( together to build [\ChatGPT]( for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",11 days 07:12:20,11.30023148148148,0.011,0.886,0.103,0.9458,pos,5.961999056559467e-05,2.1972245773362196,2.5096180818339255,21.240734741774645
11akisx,2100,2023-02-24 06:26:36,Is there a way to easily train ChatGPT or GPT on custom knowledge?,senttoschool,False,0.99,116,https://www.reddit.com/r/learnmachinelearning/comments/11akisx/is_there_a_way_to_easily_train_chatgpt_or_gpt_on/,46,1677219996.0,"My company has internal documents. It'd be nice to be able to have GPT look over it, and then I can ask it questions on the internal documents.",open-ai,machinelearning,4.0445175866781956e-05,1.6038604223034224e-05,2023-02-24 06:26:36,"My company has internal documents. It'd be nice to be able to have GPT look over it, and then I can ask it questions on the internal documents.",17 days 17:33:24,17.731527777777778,0.0,0.903,0.097,0.4215,pos,4.0444357982804134e-05,3.8501476017100584,2.9302080816173377,21.24040349603741
11nfri6,2106,2023-03-10 05:22:26,[P] Looking for ML Buddies to Start Freelancing Together and Build a Supportive Community,Dukhanin,False,0.94,71,https://www.reddit.com/r/learnmachinelearning/comments/11nfri6/p_looking_for_ml_buddies_to_start_freelancing/,35,1678425746.0,"upd: dicord link [https://discord.gg/5zUaNXnFZY](https://discord.gg/5zUaNXnFZY)  
upd2: this not that small actually already - please dont be confused but help us organise this in the proper way

  
**TLDR:**

Looking for ML buddies at any level (preferably beginners) who want to start freelancing together. The goal is to build a small local community of ML enthusiasts who can support each other and exchange knowledge. We will use freelance collaboration as our main activity. We're also looking for experienced mentors (paid or unpaid) to guide us.

**Extended:**

I believe that learning and growing in a group is much more enjoyable and effective. That's why I'm trying to create a community of like-minded individuals.

I'm looking to create a small, local community for people who are starting out in freelancing, and who are interested in mutual support. Our main activity will be a Discord channel where members can post their work and collaborate on projects, with payment split by agreement. Additionally, we plan to engage in activities such as knowledge exchange, live coding, supporting each other's pet projects, and hosting study sessions.

This community will be small and focused, with members who can trust each other and share similar goals. We're also looking for experienced mentors who can provide guidance as we navigate the world of ML freelancing. Whether paid or unpaid, we welcome any support and advice.

About me: I'm a 21-year-old self-taught ML enthusiast from Russia. Although I don't have any experience in freelancing, I'm eager to start taking my first steps towards making money and gaining experience. As a beginner, I'm hoping to connect with others who are at a similar level and are also looking to grow.

**the text is chatgpt supported to prevet grammar issues, sound more native and clear**",open-ai,machinelearning,2.475523695294413e-05,1.2203285821873868e-05,2023-03-10 05:22:26,"upd dicord link [  
upd2 this not that small actually already - please dont be confused but help us organise this in the proper way

  
**TLDR**

Looking for ML buddies at any level (preferably beginners) who want to start freelancing together. The goal is to build a small local community of ML enthusiasts who can support each other and exchange knowledge. We will use freelance collaboration as our main activity. We're also looking for experienced mentors (paid or unpaid) to guide us.

**Extended**

I believe that learning and growing in a group is much more enjoyable and effective. That's why I'm trying to create a community of like-minded individuals.

I'm looking to create a small, local community for people who are starting out in freelancing, and who are interested in mutual support. Our main activity will be a Discord channel where members can post their work and collaborate on projects, with payment split by agreement. Additionally, we plan to engage in activities such as knowledge exchange, live coding, supporting each other's pet projects, and hosting study sessions.

This community will be small and focused, with members who can trust each other and share similar goals. We're also looking for experienced mentors who can provide guidance as we navigate the world of ML freelancing. Whether paid or unpaid, we welcome any support and advice.

About me I'm a 21-year-old self-taught ML enthusiast from Russia. Although I don't have any experience in freelancing, I'm eager to start taking my first steps towards making money and gaining experience. As a beginner, I'm hoping to connect with others who are at a similar level and are also looking to grow.

**the text is chatgpt supported to prevet grammar issues, sound more native and clear**",3 days 18:37:34,3.776087962962963,0.01,0.717,0.273,0.9979,pos,2.4754930547178647e-05,3.58351893845611,1.5636217936265102,21.241122135693605
11dc5b4,2109,2023-02-27 13:42:55,Can you fine-tune chatGPT in your data as of now?,Melodic_Stomach_2704,False,0.91,57,https://www.reddit.com/r/learnmachinelearning/comments/11dc5b4/can_you_finetune_chatgpt_in_your_data_as_of_now/,33,1677505375.0, I know that model is not publicly available so it's not possible to do it locally. But can you train or fine-tune chatGPT on your data using their API? I see many misguiding articles on the internet that are fine-tuning other GPT models claiming chatGPT.,open-ai,machinelearning,1.9873922624194584e-05,1.1505955203481075e-05,2023-02-27 13:42:55, I know that model is not publicly available so it's not possible to do it locally. But can you train or fine-tune chatGPT on your data using their API? I see many misguiding articles on the internet that are fine-tuning other GPT models claiming chatGPT.,14 days 10:17:05,14.428530092592593,0.0,1.0,0.0,0.0,neu,1.987372514047463e-05,3.5263605246161616,2.736218398881504,21.240573631573977
11g7h03,2201,2023-03-02 16:47:40,Build ChatGPT for Financial Documents with LangChain + Deep Lake,davidbun,False,0.95,171,https://www.reddit.com/r/learnmachinelearning/comments/11g7h03/build_chatgpt_for_financial_documents_with/,8,1677775660.0,"https://preview.redd.it/h9r6hgvfucla1.png?width=2388&format=png&auto=webp&s=5432eac3eeed8583e4309af1fdc7ebecac705796

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain](https://github.com/hwchase17/langchain) and [Deep Lake](https://github.com/activeloopai/deeplake) come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article](https://www.activeloop.ai/resources/ultimate-guide-to-lang-chain-deep-lake-build-chat-gpt-to-answer-questions-on-your-financial-data/) to learn:

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\#LangChain](https://www.linkedin.com/feed/hashtag/?keywords=langchain&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) and [\#DeepLake](https://www.linkedin.com/feed/hashtag/?keywords=deeplake&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) together to build [\#ChatGPT](https://www.linkedin.com/feed/hashtag/?keywords=chatgpt&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",open-ai,machinelearning,5.962176787258375e-05,2.7893224735711694e-06,2023-03-02 16:47:40,"

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain]( and [Deep Lake]( come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article]( to learn

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\LangChain]( and [\DeepLake]( together to build [\ChatGPT]( for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",11 days 07:12:20,11.30023148148148,0.011,0.886,0.103,0.9458,pos,5.961999056559467e-05,2.1972245773362196,2.5096180818339255,21.240734741774645
11akisx,2219,2023-02-24 06:26:36,Is there a way to easily train ChatGPT or GPT on custom knowledge?,senttoschool,False,0.99,118,https://www.reddit.com/r/learnmachinelearning/comments/11akisx/is_there_a_way_to_easily_train_chatgpt_or_gpt_on/,46,1677219996.0,"My company has internal documents. It'd be nice to be able to have GPT look over it, and then I can ask it questions on the internal documents.",open-ai,machinelearning,4.114250648517475e-05,1.6038604223034224e-05,2023-02-24 06:26:36,"My company has internal documents. It'd be nice to be able to have GPT look over it, and then I can ask it questions on the internal documents.",17 days 17:33:24,17.731527777777778,0.0,0.903,0.097,0.4215,pos,4.1141660155530045e-05,3.8501476017100584,2.9302080816173377,21.24040349603741
11dc5b4,2239,2023-02-27 13:42:55,Can you fine-tune chatGPT in your data as of now?,Melodic_Stomach_2704,False,0.91,58,https://www.reddit.com/r/learnmachinelearning/comments/11dc5b4/can_you_finetune_chatgpt_in_your_data_as_of_now/,33,1677505375.0, I know that model is not publicly available so it's not possible to do it locally. But can you train or fine-tune chatGPT on your data using their API? I see many misguiding articles on the internet that are fine-tuning other GPT models claiming chatGPT.,open-ai,machinelearning,2.0222587933390978e-05,1.1505955203481075e-05,2023-02-27 13:42:55, I know that model is not publicly available so it's not possible to do it locally. But can you train or fine-tune chatGPT on your data using their API? I see many misguiding articles on the internet that are fine-tuning other GPT models claiming chatGPT.,14 days 10:17:05,14.428530092592593,0.0,1.0,0.0,0.0,neu,2.022238345955261e-05,3.5263605246161616,2.736218398881504,21.240573631573977
118iccl,2243,2023-02-21 23:18:46,"How big was GPT-3.5's training dataset, and are there any good heuristics for how large an ML dataset needs to be for it to be good?",TikkunCreation,False,0.94,54,https://www.reddit.com/r/learnmachinelearning/comments/118iccl/how_big_was_gpt35s_training_dataset_and_are_there/,6,1677021526.0,"Say I want to do a model for fixing bugs in code. How many examples do I need for it to be good?

Or say I want to do a model for scoring boxing matches. How many examples do I need for it to be good?",open-ai,machinelearning,1.8827926696605396e-05,2.0919918551783773e-06,2023-02-21 23:18:46,"Say I want to do a model for fixing bugs in code. How many examples do I need for it to be good?

Or say I want to do a model for scoring boxing matches. How many examples do I need for it to be good?",20 days 00:41:14,20.02863425925926,0.0,0.804,0.196,0.7757,pos,1.8827749453420277e-05,1.9459101490553132,3.045885045107382,21.240285156318095
11mzbrs,2268,2023-03-09 18:15:03,Training Transformer Networks in Scikit-Learn?!,cmauck10,False,0.89,30,https://www.reddit.com/r/learnmachinelearning/comments/11mzbrs/training_transformer_networks_in_scikitlearn/,2,1678385703.0,"Have you ever wanted to use handy scikit-learn functionalities with your neural networks, but couldn’t because TensorFlow models are not compatible with the scikit-learn API?

I’m excited to introduce one-line wrappers for TensorFlow/Keras models that enable you to use TensorFlow models within scikit-learn workflows with features like Pipeline, GridSearch, and more.

[Swap in one line of code to use keras\/TF models with scikit-learn.](https://preview.redd.it/ulmww4ovwqma1.png?width=960&format=png&auto=webp&s=6da7628298976fc3d72e771abe2546bbf32c1e0e)

Transformers are extremely popular for modeling text nowadays with GPT3, ChatGPT, Bard, PaLM, FLAN excelling for conversational AI and other Transformers like T5 & BERT excelling for text classification. Scikit-learn offers a broadly useful suite of features for classifier models, but these are hard to use with Transformers. However not if you use these wrappers we developed, which only require changing one line of code to make your existing Tensorflow/Keras model compatible with scikit-learn’s rich ecosystem!

All you have to do is swap `keras.Model` → `KerasWrapperModel`, or `keras.Sequential` → `KerasSequentialWrapper`. The wrapper objects have all the same methods as their keras counterparts, plus you can use them with tons of awesome scikit-learn methods.

You can find a demo jupyter notebook and read more about the wrappers here: [https://cleanlab.ai/blog/transformer-sklearn/](https://cleanlab.ai/blog/transformer-sklearn/)",open-ai,machinelearning,1.0459959275891886e-05,6.973306183927923e-07,2023-03-09 18:15:03,"Have you ever wanted to use handy scikit-learn functionalities with your neural networks, but couldn’t because TensorFlow models are not compatible with the scikit-learn API?

I’m excited to introduce one-line wrappers for TensorFlow/Keras models that enable you to use TensorFlow models within scikit-learn workflows with features like Pipeline, GridSearch, and more.

[Swap in one line of code to use keras\/TF models with scikit-learn.](

Transformers are extremely popular for modeling text nowadays with GPT3, ChatGPT, Bard, PaLM, FLAN excelling for conversational AI and other Transformers like T5 & BEexcelling for text classification. Scikit-learn offers a broadly useful suite of features for classifier models, but these are hard to use with Transformers. However not if you use these wrappers we developed, which only require changing one line of code to make your existing Tensorflow/Keras model compatible with scikit-learn’s rich ecosystem!

All you have to do is swap `keras.Model` → `KerasWrapperModel`, or `keras.Sequential` → `KerasSequentialWrapper`. The wrapper objects have all the same methods as their keras counterparts, plus you can use them with tons of awesome scikit-learn methods.

You can find a demo jupyter notebook and read more about the wrappers here [",4 days 05:44:57,4.239548611111111,0.008,0.834,0.158,0.9878,pos,1.0459904570851093e-05,1.0986122886681098,1.6562353517047097,21.24109827793419
11g7h03,2288,2023-03-02 16:47:40,Build ChatGPT for Financial Documents with LangChain + Deep Lake,davidbun,False,0.95,171,https://www.reddit.com/r/learnmachinelearning/comments/11g7h03/build_chatgpt_for_financial_documents_with/,8,1677775660.0,"https://preview.redd.it/h9r6hgvfucla1.png?width=2388&format=png&auto=webp&s=5432eac3eeed8583e4309af1fdc7ebecac705796

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain](https://github.com/hwchase17/langchain) and [Deep Lake](https://github.com/activeloopai/deeplake) come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article](https://www.activeloop.ai/resources/ultimate-guide-to-lang-chain-deep-lake-build-chat-gpt-to-answer-questions-on-your-financial-data/) to learn:

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\#LangChain](https://www.linkedin.com/feed/hashtag/?keywords=langchain&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) and [\#DeepLake](https://www.linkedin.com/feed/hashtag/?keywords=deeplake&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) together to build [\#ChatGPT](https://www.linkedin.com/feed/hashtag/?keywords=chatgpt&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",open-ai,machinelearning,5.962176787258375e-05,2.7893224735711694e-06,2023-03-02 16:47:40,"

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain]( and [Deep Lake]( come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article]( to learn

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\LangChain]( and [\DeepLake]( together to build [\ChatGPT]( for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",11 days 07:12:20,11.30023148148148,0.011,0.886,0.103,0.9458,pos,5.961999056559467e-05,2.1972245773362196,2.5096180818339255,21.240734741774645
118iccl,2301,2023-02-21 23:18:46,"How big was GPT-3.5's training dataset, and are there any good heuristics for how large an ML dataset needs to be for it to be good?",TikkunCreation,False,0.93,53,https://www.reddit.com/r/learnmachinelearning/comments/118iccl/how_big_was_gpt35s_training_dataset_and_are_there/,6,1677021526.0,"Say I want to do a model for fixing bugs in code. How many examples do I need for it to be good?

Or say I want to do a model for scoring boxing matches. How many examples do I need for it to be good?",open-ai,machinelearning,1.8479261387409e-05,2.0919918551783773e-06,2023-02-21 23:18:46,"Say I want to do a model for fixing bugs in code. How many examples do I need for it to be good?

Or say I want to do a model for scoring boxing matches. How many examples do I need for it to be good?",20 days 00:41:14,20.02863425925926,0.0,0.804,0.196,0.7757,pos,1.8479090647869084e-05,1.9459101490553132,3.045885045107382,21.240285156318095
117f8ms,2342,2023-02-20 17:41:43,GPT2 last hidden states vs Large Sentence Encoder,KahlessAndMolor,False,0.9,7,https://www.reddit.com/r/learnmachinelearning/comments/117f8ms/gpt2_last_hidden_states_vs_large_sentence_encoder/,3,1676914903.0,"Hello!

&#x200B;

I have 2 different applications I'm working on in this project:

&#x200B;

1. A text classifier
2. A similarity finder: Here's a list of 10 text documents, get a similarity index across them (for a total of 100 pairs) and return the top 10 that aren't self-referencing. That is, excluding the text #3 vs text #3 = 1.00 similarity type of outputs.

I have previously used google's sentence encoder/large for this purpose and I've had pretty good results. It returns a single vector of length 768 no matter how many tokens I send it. This results in downstream models with an acceptable number of parameters for running in production without breaking the bank on enormous virtual machines.

&#x200B;

Now, I'd like to use the GPT2/XL model from Huggingface. If I give it an input string of 8 tokens, I get back a TFBaseModelOutputWithPastAndCrossAttentions. This contains a last\_hidden\_states, which I understand to be the last layer outputs before sending to a head used for a particular task. This is similar to the output of the sentence encoder, I think. When I look at the last\_hidden\_states, I'm getting a shape of (# of tokens, 1600). I did a cosine similarity between the first and last tokens:

&#x200B;

cosine\_similarity(output.last\_hidden\_state\[0\]\[0\].numpy().reshape(1, -1), output.last\_hidden\_state\[0\]\[-1\].numpy().reshape(1, -1)) 

&#x200B;

And it returned 0.4346, indicating there's substantially different data from the first to the last token. I imagine this only increases as I use more and more tokens. 

&#x200B;

It would be nice if I could capture the greater power of the GPT model into a fixed-length vector so I could then easily use it in down-stream tasks. But, I also don't need to lose all that information.

&#x200B;

So if I'm feeding this output to a further downstream task, should I:

&#x200B;

\- Send it on through as a 2D tensor with the whole thing in there: This would result in a possibly huge model size down the road, which might lead to a need for a huge amount of data to train

&#x200B;

\- Flatten the whole thing and send a vector of 12,800 (8 tokens \* 1600 per token) to the downstream task. Same issue, might require a large number of parameters.

&#x200B;

\- Use only the first or the last of these. Feels like I might be losing a lot of the meaning of the overall text, especially if the body of the text is quite large

&#x200B;

\- Use a dimensionality reduction technique like isomap to reduce the last hidden states into a fixed length? This seems like it could potentially maintain most of the information but reduce the dimensions for a manageable down-stream model size.

&#x200B;

What do you think, and why?

&#x200B;

Thank you kind friends.",open-ai,machinelearning,2.4406571643747734e-06,1.0459959275891887e-06,2023-02-20 17:41:43,"Hello!

&x200B;

I have 2 different applications I'm working on in this project

&x200B;

1. A text classifier
2. A similarity finder Here's a list of 10 text documents, get a similarity index across them (for a total of 100 pairs) and return the top 10 that aren't self-referencing. That is, excluding the text 3 vs text 3 = 1.00 similarity type of outputs.

I have previously used google's sentence encoder/large for this purpose and I've had pretty good results. It returns a single vector of length 768 no matter how many tokens I send it. This results in downstream models with an acceptable number of parameters for running in production without breaking the bank on enormous virtual machines.

&x200B;

Now, I'd like to use the GPT2/XL model from Huggingface. If I give it an input string of 8 tokens, I get back a TFBaseModelOutputWithPastAndCrossAttentions. This contains a last\_hidden\_states, which I understand to be the last layer outputs before sending to a head used for a particular task. This is similar to the output of the sentence encoder, I think. When I look at the last\_hidden\_states, I'm getting a shape of ( of tokens, 1600). I did a cosine similarity between the first and last tokens

&x200B;

cosine\_similarity(output.last\_hidden\_state\[0\]\[0\].numpy().reshape(1, -1), output.last\_hidden\_state\[0\]\[-1\].numpy().reshape(1, -1)) 

&x200B;

And it returned 0.4346, indicating there's substantially different data from the first to the last token. I imagine this only increases as I use more and more tokens. 

&x200B;

It would be nice if I could capture the greater power of the GPT model into a fixed-length vector so I could then easily use it in down-stream tasks. But, I also don't need to lose all that information.

&x200B;

So if I'm feeding this output to a further downstream task, should I

&x200B;

\- Send it on through as a 2D tensor with the whole thing in there This would result in a possibly huge model size down the road, which might lead to a need for a huge amount of data to train

&x200B;

\- Flatten the whole thing and send a vector of 12,800 (8 tokens \* 1600 per token) to the downstream task. Same issue, might require a large number of parameters.

&x200B;

\- Use only the first or the last of these. Feels like I might be losing a lot of the meaning of the overall text, especially if the body of the text is quite large

&x200B;

\- Use a dimensionality reduction technique like isomap to reduce the last hidden states into a fixed length? This seems like it could potentially maintain most of the information but reduce the dimensions for a manageable down-stream model size.

&x200B;

What do you think, and why?

&x200B;

Thank you kind friends.",21 days 06:18:17,21.26269675925926,0.011,0.862,0.127,0.992,pos,2.4406541859720676e-06,1.3862943611198906,3.1029124867242484,21.240221575506574
117hd0f,2350,2023-02-20 19:01:54,Master ChatGPT Prompt Engineering (Deep Dive),jeyThaswan,False,0.8,6,https://www.reddit.com/r/learnmachinelearning/comments/117hd0f/master_chatgpt_prompt_engineering_deep_dive/,2,1676919714.0," 

I wrote a deep dive on prompt engineering as a resource for the AI community and my 10,000 daily newsletter subscribers ([Inclined.ai](https://www.inclined.ai/p/prompt-engineering-guide) if you're curious). We've included some examples so feel free to copy and paste the prompts into ChatGPT!

&#x200B;

**WHAT IS PROMPT ENGINEERING?**

The term is relatively new, and its origins are argued *(because we live in the internet age, and it’s harder to claim ownership)*. Prompt engineering is the ability to instruct and teach AI effectively.

If it helps, think of this as rapid testing or instruction writing for artificial intelligence.

What’s important is not to let this overwhelm you. The first prompting happened with the first AI model. The first example was showing computer images of circles and triangles. **Today’s neural networks can process way more data, creating complexities.**

So, the concept is simple, but digging into the full power of AI today is something else entirely.

We’re not talking about asking questions. Odds are, if you’re typing *“what’s 2+2”* into ChatGPT, then you need to keep reading.

We can all ask chatbots questions. That can work more often than not. But AI is not perfect. A common metaphor I see is to treat GPT-based large language models like the smartest five-year-old you’ve ever met.

I have a niece around that age and can’t imagine trying to get her to write an essay on the effects of soil mismanagement in relation to Reconstruction politics. *See! Your eyes glazed over reading that, so how do we make this work for our AI buddies?*

The Principles of Prompting

Stop asking single-line questions. *That’s like using a top-rated cookbook to find out how to make grilled cheese.*

**There are three ways to instantly get better at prompting** and go from grilled cheese to top-notch bolognese. From there, we can get into some specific prompt concepts and the ability to unlock ChatGPT’s full potential.

Principle 1: Context is King

GPT-3.5 is swimming in data. When you ask it for a simple request, it can end up complicating things more than you realize. Did you ever wonder why ChatGPT is so bad at math?

The reality is the LLM is taking words and turning them into patterns. From there, it’s making an educated guess.

Give your chat AI a frame to search into. If you give it a math problem, you need to make sure it grasps that you want it to do math. If you’d like ChatGPT to write a high school essay, you must ensure it knows to write at that level.

**Instead of:** “Plan a party for a kid.”

**Try:** “My child is turning 9. They like superheroes and the color red. Help me plan a party for this weekend. Ten of his friends are coming to my house.”

You’ll get a much better response this way. **Context is the cardinal direction** that helps your chat companion find the most correct guess and phrase it the best way.

Principle 2: Get Specific

Pretend you’re writing a law that’s going to be judged by the Supreme Court of the United States. You know what they look for: narrow tailoring.

**Keep things on track and stay focused.** Try to avoid prompting outside the specific request. You’ll only hurt the ability of the chat AI to give you a quality response. Odds are they’ll even skip over parts if you confuse them with too many requests.

It runs parallel with context. *If you set ChatGPT up in a room and then tell it to focus on describing the chair first, you’ll see better results.*

**Instead of:** “I’m going to a job interview. Write five questions for me to answer. Add tips for how to not get nervous before the interview. Do not create questions asking about my background.”

**Try:** “You’re interviewing a software engineer. Create five questions to ask them to understand their skill set and qualifications better.”

Nothing limits the number of prompts you can do. Focus and expand from the initial request and try not to do everything at once.

Principle 3: When in Doubt: “Let’s take this step-by-step.”

Welcome. **You discovered the magic word today.** This phrase slows everything down for the AI and gets you where you need to go.

You don’t need to start with this phrase. Using it tells ChatGPT to show their work.

We’ll explain where this concept comes from further in our briefing, but here’s the TL;DR: sometimes, there’s a part of our prompt it’s not identified correctly. “Let’s take this step-by-step,” reminds you and ChatGPT to **slow down and get specific.**

If you learn to utilize this phrase more often and find ways to make it work for you, you’ll become a better prompt engineer. One term can do a lot of heavy lifting.

**Pro-tip:** We’ve shown you “standard” prompts in all these examples. Many prompt engineers will use “Standard QA form” prompts. Here’s our example for this principle written that way.

**Example:**

*“Q: The Industrial Revolution rapidly changed the infrastructure in London. Describe three essential innovations from this period and connect them to Landon’s development.*

*A: Let’s take this step-by-step.”*

Even without our magic word, this style of standard prompting is quite helpful to adopt.

*However, we’re beginning to stumble into the advanced tactics used in prompt engineering, so it’s time for a new section.*

UNIQUE WAYS TO PROMPT

Let’s preface this: we can go super deep here. Prompt engineering is changing daily, and as these models get more sophisticated, the need to adapt prompts strengthens.

To keep things clean, I will go through these using our metaphor from earlier. **Let’s pretend ChatGPT is a super-intelligent toddler.**

*Got it? With that buy-in, we can continue.*

1/ Role Prompting

We’ll start with a popular tactic. **Our toddler is great at imagining things.** You tell them they’re a fireman, and suddenly they can give you detailed ways to ensure your apartment is up to code. Role-playing is a fun, easy way to build context.

The best part of role prompting is how easy it is to understand and use. All you need to do is tell ChatGPT to play a role. From there, the AI will do its best to fill the part *like that enthusiastic drama student from your old high school.*

You can even take this a step further. **Try framing your prompt as a script.** Tell the LLM specific instructions around a scene that gives you the answer to your question.

TRY IT OUT FOR YOURSELF:

Copy this prompt into ChatGPT and find a destination!

“Act as a travel guide. I will tell you my location and you will suggest a place to visit near my location. In some cases, I will also give you the type of places I will visit. You will also suggest me places of similar type that are close to my first location. My first suggestion: \[fill it in\]”

Why would you take that extra step? While popular, role prompting does not necessarily improve accuracy. *You can tell your five-year-old they’re a mathematician, and they’ll still manage to screw things up.*

Let’s get deeper.

2/ Chain-of-Thought Prompting

There’s a scene in ***Guardians of the Galaxy*** where Rocket Raccoon is trying to [teach young Groot](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwczovL3lvdXR1LmJlL0hyaW1mZ2pmNGs4IiwicG9zdF9pZCI6ImM0ODlmMzhkLTY3NDAtNGRmNS05MWJjLTM1ODA0YTVmNTZkMiIsInB1YmxpY2F0aW9uX2lkIjoiNjNkODQ2ZGUtZDFiZi00ZTVjLWJjYzgtOWMxYzlkMWIxMjA0IiwidmlzaXRfdG9rZW4iOiJkZWRiNmMyNy1hYmM0LTQ5ZDUtYWM2Ny04OTcyZmM1MGVmM2QiLCJpYXQiOjE2NzY5MTkwNjguMTUyLCJpc3MiOiJvcmNoaWQifQ.5eZkDLGRLCXXYv32FYT7kLSbdRK5OK1iemTRf3HVmJw)

how to activate a complicated device. That’s chain-of-thought prompting.

**You take an example question and answer it for ChatGPT.** Show them your chain of thought. Then you give it a new question in the same vein and ask it for an answer.

This prompt style allows you to get more specific. You’re telling your toddler they’re here to answer this particular question with one specific logic pattern.

Within this specific style is two other sub-categories. Let me give the rundown:

* Zero-shot Chain-of-Thought is “Let’s take this step-by-step” you frame the question the same, but don’t give it a precursor. Instead, you ask it to think through the points made. EX: Q: X is A. Y is B. What is C? A: Let’s take this step-by-step.
* Self-consistency is using several responses to find the most accurate answer. You give ChatGPT more swings at the ball. Take the hits and discover the grouping.

TRY IT OUT FOR YOURSELF:

Copy this prompt into ChatGPT and see how accurate it is:

“Q: Which is a faster way to get home?

Option 1: Take an 10 minutes bus, then an 40 minute bus, and finally a 10 minute train.

Option 2: Take a 90 minutes train, then a 45 minute bike ride, and finally a 10 minute bus.

A: Option 1 will take 10+40+10 = 60 minutes.

Option 2 will take 90+45+10=145 minutes.

Since Option 1 takes 60 minutes and Option 2 takes 145 minutes, Option 1 is faster.

Q: Which is a faster way to get to work?

Option 1: Take a 1000 minute bus, then a half hour train, and finally a 10 minute bike ride.

Option 2: Take an 800 minute bus, then an hour train, and finally a 30 minute bike ride.

A: ”

[Learnprompting.org](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwOi8vTGVhcm5wcm9tcHRpbmcub3JnIiwicG9zdF9pZCI6ImM0ODlmMzhkLTY3NDAtNGRmNS05MWJjLTM1ODA0YTVmNTZkMiIsInB1YmxpY2F0aW9uX2lkIjoiNjNkODQ2ZGUtZDFiZi00ZTVjLWJjYzgtOWMxYzlkMWIxMjA0IiwidmlzaXRfdG9rZW4iOiJkZWRiNmMyNy1hYmM0LTQ5ZDUtYWM2Ny04OTcyZmM1MGVmM2QiLCJpYXQiOjE2NzY5MTkwNjguMTUyLCJpc3MiOiJvcmNoaWQifQ.-wOnVYoMNWXYrR5NOB4YYKp4Lmj-aZq3y-pr4Hou9pE)

\- by leaving the “A:” blank you’re prompting ChatGPT for the answer

Alright, you’re almost there—one more to go.

3/ General Knowledge Prompting

You’re going to notice a trend here. This prompt style also circles context and narrow tailoring.

All you do is tell your toddler how the world works. The cow goes moo. The dog goes woof. So what does a cat say?

It’s an oversimplification, but the core reasoning is there. Show ChatGPT some knowledge and turn that into the only focus for that chat. You can take an article from the internet and summarize it for the model. Make sure to ask if it understands and relay the information to you.

Once you know you have the attention set in the suitable space, get to work. For instance, we can share an Inclined newsletter with it and tell ChatGPT about its structure and tone.

From there, you can provide new information and tell ChatGPT to summarize it within the same structure as Inclined. You both share the same general knowledge now.

TRY IT OUT FOR YOURSELF:

Copy this prompt into ChatGPT and test it out:

“Prompt 1. Look over this article here: \[pick an article\]. Breakdown its structure and general tone.

Prompt 2: Recall the structure and tone you mentioned above. Take that general knowledge and summarize this article: \[pick a new one\] using the same structure and tone.”

Note: this is a heavily simplified version of GA Prompting

Did you know some [people don’t consider](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwczovL25ld3MueWNvbWJpbmF0b3IuY29tL2l0ZW0_aWQ9MzQ0OTU0NTUiLCJwb3N0X2lkIjoiYzQ4OWYzOGQtNjc0MC00ZGY1LTkxYmMtMzU4MDRhNWY1NmQyIiwicHVibGljYXRpb25faWQiOiI2M2Q4NDZkZS1kMWJmLTRlNWMtYmNjOC05YzFjOWQxYjEyMDQiLCJ2aXNpdF90b2tlbiI6ImRlZGI2YzI3LWFiYzQtNDlkNS1hYzY3LTg5NzJmYzUwZWYzZCIsImlhdCI6MTY3NjkxOTA2OC4xNTMsImlzcyI6Im9yY2hpZCJ9.yHKIPujINT89tsqOo07AXk6OrKNgoMjO3fBEYPkAdNY)

that prompt engineering?

PROMPT CULTURE

*“How can something not be prompt engineering if it’s a prompt style?”*

Good question, imaginary reader. The culture around this skill is relatively fresh. So some of **these concepts are seen as too easy** to be considered accurate prompt testing.

General knowledge prompting is simply establishing the context, and for some, that’s a baseline everyone needs to do. The same can be said for role prompting, too. *All of these tiny preferences are semantics.*

**Don’t sweat whether you’re a “real” prompt engineer.** Test this out and share your insights in these communities. The opportunity is there for you.

You may even know about DAN (we’ve covered it in previous newsletters) and other AI hacking methods. Those all start with prompt engineering. You can make the case that unless the AI behaves outside its parameters, you’re not genuinely doing prompt engineering.

I'm afraid I have to disagree with that, and **careers are sprouting up everywhere** that center directly on this skill. **Many require a core understanding of the prompt styles we’ve discussed.**

*Yep, you can learn this and make money from talking with AI.*

Anthropic even [posted a role for a prompt engineer](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwczovL2pvYnMubGV2ZXIuY28vQW50aHJvcGljL2UzY2RlNDgxLWQ0NDYtNDYwZi1iNTc2LTkzY2FiNjdiZDFlZCIsInBvc3RfaWQiOiJjNDg5ZjM4ZC02NzQwLTRkZjUtOTFiYy0zNTgwNGE1ZjU2ZDIiLCJwdWJsaWNhdGlvbl9pZCI6IjYzZDg0NmRlLWQxYmYtNGU1Yy1iY2M4LTljMWM5ZDFiMTIwNCIsInZpc2l0X3Rva2VuIjoiZGVkYjZjMjctYWJjNC00OWQ1LWFjNjctODk3MmZjNTBlZjNkIiwiaWF0IjoxNjc2OTE5MDY4LjE1MywiaXNzIjoib3JjaGlkIn0.4s7Htzgoxv0_qM1Ten17oQ5h0_QGM6e1fGUYz_ymgJ4)

that nets a quarter million in salary. I did not make that up and even considered sprucing up the old resume. When a new skill like this comes about, it’s worth looking at.

There are many other examples like this, and OpenAI uses a red teaming strategy where their engineers attempt to prompt hack their own GPT models.

I can tell you all about the open roles here, but tomorrow the whole cycle will change. *Isn’t that exciting, though?* The entire identity around prompt engineering will change by this time next year.

WHAT SHOULD YOU TAKEAWAY?

Communication is everything. **Learning to speak with AI is rising in importance.**

We all watch with mouth agape at the new wonders in AI because we know this will disrupt every industry. If any of this piqued your interest, the window to pursue it is now open. Ride that wave and [learn](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwczovL2xlYXJucHJvbXB0aW5nLm9yZy8iLCJwb3N0X2lkIjoiYzQ4OWYzOGQtNjc0MC00ZGY1LTkxYmMtMzU4MDRhNWY1NmQyIiwicHVibGljYXRpb25faWQiOiI2M2Q4NDZkZS1kMWJmLTRlNWMtYmNjOC05YzFjOWQxYjEyMDQiLCJ2aXNpdF90b2tlbiI6ImRlZGI2YzI3LWFiYzQtNDlkNS1hYzY3LTg5NzJmYzUwZWYzZCIsImlhdCI6MTY3NjkxOTA2OC4xNTMsImlzcyI6Im9yY2hpZCJ9.a67KDSN9yQfZsaMeHpdcbSbtPjD4yFcGW4stdxBjX1M)

to become a brilliant prompt engineer.

Heck, even if you don’t want to switch careers, **talking with ChatGPT and all the newest LLMs is becoming a part of our daily routine.** Get to the point where you maximize every interaction and work with these chatbots to upskill your workflow.

Prompt engineering can save you time, eliminate hassle, and even help you become a more patient person. Focus on what you want and explain it with intent.

Make magic happen, and remember: **take it step-by-step.**",open-ai,machinelearning,2.0919918551783773e-06,6.973306183927923e-07,2023-02-20 19:01:54," 

I wrote a deep dive on prompt engineering as a resource for the AI community and my 10,000 daily newsletter subscribers ([Inclined.ai]( if you're curious). We've included some examples so feel free to copy and paste the prompts into ChatGPT!

&x200B;

**WHAT IS PROMPT ENGINEERING?**

The term is relatively new, and its origins are argued *(because we live in the internet age, and it’s harder to claim ownership)*. Prompt engineering is the ability to instruct and teach AI effectively.

If it helps, think of this as rapid testing or instruction writing for artificial intelligence.

What’s important is not to let this overwhelm you. The first prompting happened with the first AI model. The first example was showing computer images of circles and triangles. **Today’s neural networks can process way more data, creating complexities.**

So, the concept is simple, but digging into the full power of AI today is something else entirely.

We’re not talking about asking questions. Odds are, if you’re typing *“what’s 2+2”* into ChatGPT, then you need to keep reading.

We can all ask chatbots questions. That can work more often than not. But AI is not perfect. A common metaphor I see is to treat GPT-based large language models like the smartest five-year-old you’ve ever met.

I have a niece around that age and can’t imagine trying to get her to write an essay on the effects of soil mismanagement in relation to Reconstruction politics. *See! Your eyes glazed over reading that, so how do we make this work for our AI buddies?*

The Principles of Prompting

Stop asking single-line questions. *That’s like using a top-rated cookbook to find out how to make grilled cheese.*

**There are three ways to instantly get better at prompting** and go from grilled cheese to top-notch bolognese. From there, we can get into some specific prompt concepts and the ability to unlock ChatGPT’s full potential.

Principle 1 Context is King

GPT-3.5 is swimming in data. When you ask it for a simple request, it can end up complicating things more than you realize. Did you ever wonder why ChatGPT is so bad at math?

The reality is the LLM is taking words and turning them into patterns. From there, it’s making an educated guess.

Give your chat AI a frame to search into. If you give it a math problem, you need to make sure it grasps that you want it to do math. If you’d like ChatGPT to write a high school essay, you must ensure it knows to write at that level.

**Instead of** “Plan a party for a kid.”

**Try** “My child is turning 9. They like superheroes and the color red. Help me plan a party for this weekend. Ten of his friends are coming to my house.”

You’ll get a much better response this way. **Context is the cardinal direction** that helps your chat companion find the most correct guess and phrase it the best way.

Principle 2 Get Specific

Pretend you’re writing a law that’s going to be judged by the Supreme Court of the United States. You know what they look for narrow tailoring.

**Keep things on track and stay focused.** Try to avoid prompting outside the specific request. You’ll only hurt the ability of the chat AI to give you a quality response. Odds are they’ll even skip over parts if you confuse them with too many requests.

It runs parallel with context. *If you set ChatGPT up in a room and then tell it to focus on describing the chair first, you’ll see better results.*

**Instead of** “I’m going to a job interview. Write five questions for me to answer. Add tips for how to not get nervous before the interview. Do not create questions asking about my background.”

**Try** “You’re interviewing a software engineer. Create five questions to ask them to understand their skill set and qualifications better.”

Nothing limits the number of prompts you can do. Focus and expand from the initial request and try not to do everything at once.

Principle 3 When in Doubt “Let’s take this step-by-step.”

Welcome. **You discovered the magic word today.** This phrase slows everything down for the AI and gets you where you need to go.

You don’t need to start with this phrase. Using it tells ChatGPT to show their work.

We’ll explain where this concept comes from further in our briefing, but here’s the TL;DR sometimes, there’s a part of our prompt it’s not identified correctly. “Let’s take this step-by-step,” reminds you and ChatGPT to **slow down and get specific.**

If you learn to utilize this phrase more often and find ways to make it work for you, you’ll become a better prompt engineer. One term can do a lot of heavy lifting.

**Pro-tip** We’ve shown you “standard” prompts in all these examples. Many prompt engineers will use “Standard QA form” prompts. Here’s our example for this principle written that way.

**Example**

*“Q The Industrial Revolution rapidly changed the infrastructure in London. Describe three essential innovations from this period and connect them to Landon’s development.*

*A Let’s take this step-by-step.”*

Even without our magic word, this style of standard prompting is quite helpful to adopt.

*However, we’re beginning to stumble into the advanced tactics used in prompt engineering, so it’s time for a new section.*

UNIQUE WAYS TO PROMPT

Let’s preface this we can go super deep here. Prompt engineering is changing daily, and as these models get more sophisticated, the need to adapt prompts strengthens.

To keep things clean, I will go through these using our metaphor from earlier. **Let’s pretend ChatGPT is a super-intelligent toddler.**

*Got it? With that buy-in, we can continue.*

1/ Role Prompting

We’ll start with a popular tactic. **Our toddler is great at imagining things.** You tell them they’re a fireman, and suddenly they can give you detailed ways to ensure your apartment is up to code. Role-playing is a fun, easy way to build context.

The best part of role prompting is how easy it is to understand and use. All you need to do is tell ChatGPT to play a role. From there, the AI will do its best to fill the part *like that enthusiastic drama student from your old high school.*

You can even take this a step further. **Try framing your prompt as a script.** Tell the LLM specific instructions around a scene that gives you the answer to your question.

TRY IT OUT FOR YOURSELF

Copy this prompt into ChatGPT and find a destination!

“Act as a travel guide. I will tell you my location and you will suggest a place to visit near my location. In some cases, I will also give you the type of places I will visit. You will also suggest me places of similar type that are close to my first location. My first suggestion \[fill it in\]”

Why would you take that extra step? While popular, role prompting does not necessarily improve accuracy. *You can tell your five-year-old they’re a mathematician, and they’ll still manage to screw things up.*

Let’s get deeper.

2/ Chain-of-Thought Prompting

There’s a scene in ***Guardians of the Galaxy*** where Rocket Raccoon is trying to [teach young Groot](

how to activate a complicated device. That’s chain-of-thought prompting.

**You take an example question and answer it for ChatGPT.** Show them your chain of thought. Then you give it a new question in the same vein and ask it for an answer.

This prompt style allows you to get more specific. You’re telling your toddler they’re here to answer this particular question with one specific logic pattern.

Within this specific style is two other sub-categories. Let me give the rundown

* Zero-shot Chain-of-Thought is “Let’s take this step-by-step” you frame the question the same, but don’t give it a precursor. Instead, you ask it to think through the points made. EX Q X is A. Y is B. What is C? A Let’s take this step-by-step.
* Self-consistency is using several responses to find the most accurate answer. You give ChatGPT more swings at the ball. Take the hits and discover the grouping.

TRY IT OUT FOR YOURSELF

Copy this prompt into ChatGPT and see how accurate it is

“Q Which is a faster way to get home?

Option 1 Take an 10 minutes bus, then an 40 minute bus, and finally a 10 minute train.

Option 2 Take a 90 minutes train, then a 45 minute bike ride, and finally a 10 minute bus.

A Option 1 will take 10+40+10 = 60 minutes.

Option 2 will take 90+45+10=145 minutes.

Since Option 1 takes 60 minutes and Option 2 takes 145 minutes, Option 1 is faster.

Q Which is a faster way to get to work?

Option 1 Take a 1000 minute bus, then a half hour train, and finally a 10 minute bike ride.

Option 2 Take an 800 minute bus, then an hour train, and finally a 30 minute bike ride.

A ”

[Learnprompting.org](

\- by leaving the “A” blank you’re prompting ChatGPT for the answer

Alright, you’re almost there—one more to go.

3/ General Knowledge Prompting

You’re going to notice a trend here. This prompt style also circles context and narrow tailoring.

All you do is tell your toddler how the world works. The cow goes moo. The dog goes woof. So what does a cat say?

It’s an oversimplification, but the core reasoning is there. Show ChatGPT some knowledge and turn that into the only focus for that chat. You can take an article from the internet and summarize it for the model. Make sure to ask if it understands and relay the information to you.

Once you know you have the attention set in the suitable space, get to work. For instance, we can share an Inclined newsletter with it and tell ChatGPT about its structure and tone.

From there, you can provide new information and tell ChatGPT to summarize it within the same structure as Inclined. You both share the same general knowledge now.

TRY IT OUT FOR YOURSELF

Copy this prompt into ChatGPT and test it out

“Prompt 1. Look over this article here \[pick an article\]. Breakdown its structure and general tone.

Prompt 2 Recall the structure and tone you mentioned above. Take that general knowledge and summarize this article \[pick a new one\] using the same structure and tone.”

Note this is a heavily simplified version of GA Prompting

Did you know some [people don’t consider](

that prompt engineering?

PROMPT CULTURE

*“How can something not be prompt engineering if it’s a prompt style?”*

Good question, imaginary reader. The culture around this skill is relatively fresh. So some of **these concepts are seen as too easy** to be considered accurate prompt testing.

General knowledge prompting is simply establishing the context, and for some, that’s a baseline everyone needs to do. The same can be said for role prompting, too. *All of these tiny preferences are semantics.*

**Don’t sweat whether you’re a “real” prompt engineer.** Test this out and share your insights in these communities. The opportunity is there for you.

You may even know about DAN (we’ve covered it in previous newsletters) and other AI hacking methods. Those all start with prompt engineering. You can make the case that unless the AI behaves outside its parameters, you’re not genuinely doing prompt engineering.

I'm afraid I have to disagree with that, and **careers are sprouting up everywhere** that center directly on this skill. **Many require a core understanding of the prompt styles we’ve discussed.**

*Yep, you can learn this and make money from talking with AI.*

Anthropic even [posted a role for a prompt engineer](

that nets a quarter million in salary. I did not make that up and even considered sprucing up the old resume. When a new skill like this comes about, it’s worth looking at.

There are many other examples like this, and OpenAI uses a red teaming strategy where their engineers attempt to prompt hack their own GPT models.

I can tell you all about the open roles here, but tomorrow the whole cycle will change. *Isn’t that exciting, though?* The entire identity around prompt engineering will change by this time next year.

WHAT SHOULD YOU TAKEAWAY?

Communication is everything. **Learning to speak with AI is rising in importance.**

We all watch with mouth agape at the new wonders in AI because we know this will disrupt every industry. If any of this piqued your interest, the window to pursue it is now open. Ride that wave and [learn](

to become a brilliant prompt engineer.

Heck, even if you don’t want to switch careers, **talking with ChatGPT and all the newest LLMs is becoming a part of our daily routine.** Get to the point where you maximize every interaction and work with these chatbots to upskill your workflow.

Prompt engineering can save you time, eliminate hassle, and even help you become a more patient person. Focus on what you want and explain it with intent.

Make magic happen, and remember **take it step-by-step.**",21 days 04:58:06,21.207013888888888,0.021,0.872,0.108,0.9996,pos,2.091989666868002e-06,1.0986122886681098,3.1004081799203456,21.240224444461393
11hp55s,2368,2023-03-04 04:14:37,How to properly format data for AiTextGen Gpt-2,AlphaCloudX,False,1.0,4,https://www.reddit.com/r/learnmachinelearning/comments/11hp55s/how_to_properly_format_data_for_aitextgen_gpt2/,0,1677903277.0,"Currently I'm trying to fine tune gpt-2 on my own dataset. The dataset was scraped from a forum where I got the title of the post, content of the post and the replies. It looks like this:

Q: Question 1?  
C: Context For Question 1...  
A: Reply For Question 1...  
<|endoftext|>

Q: Question 2?  
C: Context For Question 2...  
A: Reply For Question 2...  
A: Another Reply For Question 2...  
<|endoftext|>

Q: Question 3?  
C: Context For Question 3...  
A: Another Reply For Question 3...  
A: Another Reply For Question 3...  
<|endoftext|>

I'm using the aitextgen library for python and pretty much following along with the example. The goal is for it to be able to attempt to answer questions in a conversational way but the caveat being I don't have the context for the answers.

I tried taking a look at other question answering models but they all seem to require some sort of context.

Any idea on how I can improve the formatting of the data or if there are any python libraries I can use for a question answering style or conversational ai?",open-ai,machinelearning,1.3946612367855847e-06,0.0,2023-03-04 04:14:37,"Currently I'm trying to fine tune gpt-2 on my own dataset. The dataset was scraped from a forum where I got the title of the post, content of the post and the replies. It looks like this

Q Question 1?  
C Context For Question 1...  
A Reply For Question 1...  
<|endoftext|>

Q Question 2?  
C Context For Question 2...  
A Reply For Question 2...  
A Another Reply For Question 2...  
<|endoftext|>

Q Question 3?  
C Context For Question 3...  
A Another Reply For Question 3...  
A Another Reply For Question 3...  
<|endoftext|>

I'm using the aitextgen library for python and pretty much following along with the example. The goal is for it to be able to attempt to answer questions in a conversational way but the caveat being I don't have the context for the answers.

I tried taking a look at other question answering models but they all seem to require some sort of context.

Any idea on how I can improve the formatting of the data or if there are any python libraries I can use for a question answering style or conversational ai?",9 days 19:45:23,9.82318287037037,0.0,0.942,0.058,0.8426,pos,1.3946602641808623e-06,0.0,2.3816903956287683,21.240810802090536
118mk1d,2377,2023-02-22 02:32:01,How to Use ChatGPT in Python API and Run Batch Jobs with UI,Fun_Pollution_3899,False,0.72,3,https://www.reddit.com/r/learnmachinelearning/comments/118mk1d/how_to_use_chatgpt_in_python_api_and_run_batch/,0,1677033121.0,"I wanted to share a tutorial on how to use ChatGPT in Python API and how to run batch jobs with a UI. ChatGPT is a powerful language model that can generate text in a conversational manner. It can be used for a variety of tasks, such as chatbots, text completion, and more.
Repo: [https://github.com/CodeDiggerM/chatgpt-batch-whipper](https://github.com/CodeDiggerM/chatgpt-batch-whipper)

## Installation
### Use PIP command
1. Install the latest version of this software directly from github with pip:
```bash
  pip install git+https://github.com/CodeDiggerM/chatgpt-batch-whipper.git
```
2. Go to **auth** mode. This will open up a browser window. Log in to ChatGPT in the browser window, then close the browser.
```bash
run_chatgpt auth
```
3. Start the UI
```bash
run_chatgpt ui
```

### Manually set up

1. Clone the repo to your working directory
```bash
git clone https://github.com/CodeDiggerM/chatgpt-batch-whipper.git
```
2. install the dependcy.
```bash
pip install -r requirements.txt
```

3. Install a browser in playwright (if you haven't already).  The program will use firefox by default.

```
playwright install firefox
```

4. Go to the chatgpt-batch-whipper/

```bash
cd chatgpt_batch_whipper/
````

5. Run the main page by streamlit.
you can got to [streamlit](https://github.com/streamlit/streamlit) to check more about streamlit.

```bash
streamlit run start_whipper.py
````
6. Authenticate your openAI account
Click the **auth** button


It will open up an authentication page in the web browser you installed using playwright. Like below, authenticate with your registered account.



## Quickstart

### Use API
1. Grant auth from chatGPT.
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.auth()
print(response) 
```

2. Ask the question to chatGPT
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.ask(""Greeting!"")
print(response) 
```


### Streamlit UI

Now run it to open the app!
```
streamlit run streamlit_app.py
```

#### Single shoot mode

1. select the **Single shoot mode**.
2. Type your prompt then click submit
3. click the submit button

Here are some tips.

#### Fully Automatic mode
You can apply your prompt to multiple records in the **Fully Automatic mode**.

1. Select Fully Automatic mode.
2. Select CSV file.
3. Select column you want to process.
4. Type the prompt.
5. click to Submit.
After processing. The result will appears in the **The processed result** section.

you can check the result and check the ""is false"" then click the **Submit** to reprocess the ""failed"" one.

* You can save the prompt by click **Add** button.
* You can choose the old prompt by select **prompt list**.
* You can delete the old prompt by click **Delete Prompt**.
* You can delete the saved process result by click **Delete Cached result**.
* You can update the saved process result by click **Update**.
* You can download the result file by click **Download**.",open-ai,machinelearning,1.0459959275891887e-06,0.0,2023-02-22 02:32:01,"I wanted to share a tutorial on how to use ChatGPT in Python API and how to run batch jobs with a UI. ChatGPT is a powerful language model that can generate text in a conversational manner. It can be used for a variety of tasks, such as chatbots, text completion, and more.
Repo [

 Installation
 Use PIP command
1. Install the latest version of this software directly from github with pip
```bash
  pip install git+
```
2. Go to **auth** mode. This will open up a browser window. Log in to ChatGPT in the browser window, then close the browser.
```bash
run_chatgpt auth
```
3. Start the UI
```bash
run_chatgpt ui
```

 Manually set up

1. Clone the repo to your working directory
```bash
git clone 
```
2. install the dependcy.
```bash
pip install -r requirements.txt
```

3. Install a browser in playwright (if you haven't already).  The program will use firefox by default.

```
playwright install firefox
```

4. Go to the chatgpt-batch-whipper/

```bash
cd chatgpt_batch_whipper/
````

5. Run the main page by streamlit.
you can got to [streamlit]( to check more about streamlit.

```bash
streamlit run start_whipper.py
````
6. Authenticate your openAI account
Click the **auth** button


It will open up an authentication page in the web browser you installed using playwright. Like below, authenticate with your registered account.



 Quickstart

 Use API
1. Grant auth from chatGPT.
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.auth()
print(response) 
```

2. Ask the question to chatGPT
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.ask(""Greeting!"")
print(response) 
```


 Streamlit UI

Now run it to open the app!
```
streamlit run streamlit_app.py
```

 Single shoot mode

1. select the **Single shoot mode**.
2. Type your prompt then click submit
3. click the submit button

Here are some tips.

 Fully Automatic mode
You can apply your prompt to multiple records in the **Fully Automatic mode**.

1. Select Fully Automatic mode.
2. Select CSV file.
3. Select column you want to process.
4. Type the prompt.
5. click to Submit.
After processing. The result will appears in the **The processed result** section.

you can check the result and check the ""is false"" then click the **Submit** to reprocess the ""failed"" one.

* You can save the prompt by click **Add** button.
* You can choose the old prompt by select **prompt list**.
* You can delete the old prompt by click **Delete Prompt**.
* You can delete the saved process result by click **Delete Cached result**.
* You can update the saved process result by click **Update**.
* You can download the result file by click **Download**.",19 days 21:27:59,19.89443287037037,0.011,0.941,0.048,0.9311,pos,1.045995380597619e-06,0.0,3.0394827536492803,21.24029207033782
118mk1d,2436,2023-02-22 02:32:01,How to Use ChatGPT in Python API and Run Batch Jobs with UI,Fun_Pollution_3899,False,0.72,3,https://www.reddit.com/r/learnmachinelearning/comments/118mk1d/how_to_use_chatgpt_in_python_api_and_run_batch/,0,1677033121.0,"I wanted to share a tutorial on how to use ChatGPT in Python API and how to run batch jobs with a UI. ChatGPT is a powerful language model that can generate text in a conversational manner. It can be used for a variety of tasks, such as chatbots, text completion, and more.
Repo: [https://github.com/CodeDiggerM/chatgpt-batch-whipper](https://github.com/CodeDiggerM/chatgpt-batch-whipper)

## Installation
### Use PIP command
1. Install the latest version of this software directly from github with pip:
```bash
  pip install git+https://github.com/CodeDiggerM/chatgpt-batch-whipper.git
```
2. Go to **auth** mode. This will open up a browser window. Log in to ChatGPT in the browser window, then close the browser.
```bash
run_chatgpt auth
```
3. Start the UI
```bash
run_chatgpt ui
```

### Manually set up

1. Clone the repo to your working directory
```bash
git clone https://github.com/CodeDiggerM/chatgpt-batch-whipper.git
```
2. install the dependcy.
```bash
pip install -r requirements.txt
```

3. Install a browser in playwright (if you haven't already).  The program will use firefox by default.

```
playwright install firefox
```

4. Go to the chatgpt-batch-whipper/

```bash
cd chatgpt_batch_whipper/
````

5. Run the main page by streamlit.
you can got to [streamlit](https://github.com/streamlit/streamlit) to check more about streamlit.

```bash
streamlit run start_whipper.py
````
6. Authenticate your openAI account
Click the **auth** button


It will open up an authentication page in the web browser you installed using playwright. Like below, authenticate with your registered account.



## Quickstart

### Use API
1. Grant auth from chatGPT.
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.auth()
print(response) 
```

2. Ask the question to chatGPT
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.ask(""Greeting!"")
print(response) 
```


### Streamlit UI

Now run it to open the app!
```
streamlit run streamlit_app.py
```

#### Single shoot mode

1. select the **Single shoot mode**.
2. Type your prompt then click submit
3. click the submit button

Here are some tips.

#### Fully Automatic mode
You can apply your prompt to multiple records in the **Fully Automatic mode**.

1. Select Fully Automatic mode.
2. Select CSV file.
3. Select column you want to process.
4. Type the prompt.
5. click to Submit.
After processing. The result will appears in the **The processed result** section.

you can check the result and check the ""is false"" then click the **Submit** to reprocess the ""failed"" one.

* You can save the prompt by click **Add** button.
* You can choose the old prompt by select **prompt list**.
* You can delete the old prompt by click **Delete Prompt**.
* You can delete the saved process result by click **Delete Cached result**.
* You can update the saved process result by click **Update**.
* You can download the result file by click **Download**.",open-ai,machinelearning,1.0459959275891887e-06,0.0,2023-02-22 02:32:01,"I wanted to share a tutorial on how to use ChatGPT in Python API and how to run batch jobs with a UI. ChatGPT is a powerful language model that can generate text in a conversational manner. It can be used for a variety of tasks, such as chatbots, text completion, and more.
Repo [

 Installation
 Use PIP command
1. Install the latest version of this software directly from github with pip
```bash
  pip install git+
```
2. Go to **auth** mode. This will open up a browser window. Log in to ChatGPT in the browser window, then close the browser.
```bash
run_chatgpt auth
```
3. Start the UI
```bash
run_chatgpt ui
```

 Manually set up

1. Clone the repo to your working directory
```bash
git clone 
```
2. install the dependcy.
```bash
pip install -r requirements.txt
```

3. Install a browser in playwright (if you haven't already).  The program will use firefox by default.

```
playwright install firefox
```

4. Go to the chatgpt-batch-whipper/

```bash
cd chatgpt_batch_whipper/
````

5. Run the main page by streamlit.
you can got to [streamlit]( to check more about streamlit.

```bash
streamlit run start_whipper.py
````
6. Authenticate your openAI account
Click the **auth** button


It will open up an authentication page in the web browser you installed using playwright. Like below, authenticate with your registered account.



 Quickstart

 Use API
1. Grant auth from chatGPT.
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.auth()
print(response) 
```

2. Ask the question to chatGPT
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.ask(""Greeting!"")
print(response) 
```


 Streamlit UI

Now run it to open the app!
```
streamlit run streamlit_app.py
```

 Single shoot mode

1. select the **Single shoot mode**.
2. Type your prompt then click submit
3. click the submit button

Here are some tips.

 Fully Automatic mode
You can apply your prompt to multiple records in the **Fully Automatic mode**.

1. Select Fully Automatic mode.
2. Select CSV file.
3. Select column you want to process.
4. Type the prompt.
5. click to Submit.
After processing. The result will appears in the **The processed result** section.

you can check the result and check the ""is false"" then click the **Submit** to reprocess the ""failed"" one.

* You can save the prompt by click **Add** button.
* You can choose the old prompt by select **prompt list**.
* You can delete the old prompt by click **Delete Prompt**.
* You can delete the saved process result by click **Delete Cached result**.
* You can update the saved process result by click **Update**.
* You can download the result file by click **Download**.",19 days 21:27:59,19.89443287037037,0.011,0.941,0.048,0.9311,pos,1.045995380597619e-06,0.0,3.0394827536492803,21.24029207033782
11g7h03,2483,2023-03-02 16:47:40,Build ChatGPT for Financial Documents with LangChain + Deep Lake,davidbun,False,0.95,171,https://www.reddit.com/r/learnmachinelearning/comments/11g7h03/build_chatgpt_for_financial_documents_with/,8,1677775660.0,"https://preview.redd.it/h9r6hgvfucla1.png?width=2388&format=png&auto=webp&s=5432eac3eeed8583e4309af1fdc7ebecac705796

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain](https://github.com/hwchase17/langchain) and [Deep Lake](https://github.com/activeloopai/deeplake) come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article](https://www.activeloop.ai/resources/ultimate-guide-to-lang-chain-deep-lake-build-chat-gpt-to-answer-questions-on-your-financial-data/) to learn:

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\#LangChain](https://www.linkedin.com/feed/hashtag/?keywords=langchain&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) and [\#DeepLake](https://www.linkedin.com/feed/hashtag/?keywords=deeplake&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) together to build [\#ChatGPT](https://www.linkedin.com/feed/hashtag/?keywords=chatgpt&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",open-ai,machinelearning,5.962176787258375e-05,2.7893224735711694e-06,2023-03-02 16:47:40,"

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain]( and [Deep Lake]( come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article]( to learn

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\LangChain]( and [\DeepLake]( together to build [\ChatGPT]( for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",11 days 07:12:20,11.30023148148148,0.011,0.886,0.103,0.9458,pos,5.961999056559467e-05,2.1972245773362196,2.5096180818339255,21.240734741774645
11biozs,2593,2023-02-25 11:19:05,Any MLOps platform you use?,squalidaesthetics20,False,0.98,242,https://www.reddit.com/r/learnmachinelearning/comments/11biozs/any_mlops_platform_you_use/,31,1677323945.0,"I've been searching for some MLOps platforms for my some projects that I’m working on. I am creating a list that will hopefully help out with productivity and help mr build better apps and services. Also hopefully faster.

I've looked at some of the more popular ones out there and here’s my top 4 so far. Let me know what you guys think about these:

* [Vertex AI](https://cloud.google.com/vertex-ai) \- An ML platform by Google Cloud. They have AI-powered tools to ingest, analyze, and store video data. Good for image classification, NLP, recommendation systems etc.
* [Jina AI](https://jina.ai/) \-They offer a neural search solution that can help build smarter, more efficient search engines. They also have a list of [cool github repos](https://github.com/jina-ai/jina) that you can check out. Similar to Vertex AI, they have image classification tools, NLPs, fine tuners etc.
* [MLflow](https://mlflow.org/) \- an open-source platform for managing your ML lifecycle. What’s great is that they also support popular Python libraries like TensorFlow, PyTorch, scikit-learn, and R.
* Neptune.ai, which promises to streamline your workflows and make collaboration a breeze.

Have you guys tried any of these platforms? I know a lot of AI tools and platforms have been popping up lately especially with the rise of AI tools but what are your thoughts?",open-ai,machinelearning,8.437700482552788e-05,1.0808624585088282e-05,2023-02-25 11:19:05,"I've been searching for some MLOps platforms for my some projects that I’m working on. I am creating a list that will hopefully help out with productivity and help mr build better apps and services. Also hopefully faster.

I've looked at some of the more popular ones out there and here’s my top 4 so far. Let me know what you guys think about these

* [Vertex AI]( \- An ML platform by Google Cloud. They have AI-powered tools to ingest, analyze, and store video data. Good for image classification, NLP, recommendation systems etc.
* [Jina AI]( \-They offer a neural search solution that can help build smarter, more efficient search engines. They also have a list of [cool github repos]( that you can check out. Similar to Vertex AI, they have image classification tools, NLPs, fine tuners etc.
* [MLflow]( \- an open-source platform for managing your ML lifecycle. What’s great is that they also support popular Python libraries like TensorFlow, PyTorch, scikit-learn, and R.
* Neptune.ai, which promises to streamline your workflows and make collaboration a breeze.

Have you guys tried any of these platforms? I know a lot of AI tools and platforms have been popping up lately especially with the rise of AI tools but what are your thoughts?",16 days 12:40:55,16.52841435185185,0.0,0.836,0.164,0.974,pos,8.437344528630898e-05,3.4657359027997265,2.8638232414393547,21.240465471078902
1194vsn,2614,2023-02-22 16:59:33,MIT Introduction to Data-Centric AI,anishathalye,False,0.97,102,https://www.reddit.com/r/learnmachinelearning/comments/1194vsn/mit_introduction_to_datacentric_ai/,4,1677085173.0,"Announcing the [first-ever course on Data-Centric AI](https://dcai.csail.mit.edu/). Learn how to train better ML models by improving the data.

[Course homepage](https://dcai.csail.mit.edu/) | [Lecture videos on YouTube](https://www.youtube.com/watch?v=ayzOzZGHZy4&list=PLnSYPjg2dHQKdig0vVbN-ZnEU0yNJ1mo5) | [Lab Assignments](https://github.com/dcai-course/dcai-lab)

The course covers:

* [Data-Centric AI vs. Model-Centric AI](https://dcai.csail.mit.edu/lectures/data-centric-model-centric/)
* [Label Errors](https://dcai.csail.mit.edu/lectures/label-errors/)
* [Dataset Creation and Curation](https://dcai.csail.mit.edu/lectures/dataset-creation-curation/)
* [Data-centric Evaluation of ML Models](https://dcai.csail.mit.edu/lectures/data-centric-evaluation/)
* [Class Imbalance, Outliers, and Distribution Shift](https://dcai.csail.mit.edu/lectures/imbalance-outliers-shift/)
* [Growing or Compressing Datasets](https://dcai.csail.mit.edu/lectures/growing-compressing-datasets/)
* [Interpretability in Data-Centric ML](https://dcai.csail.mit.edu/lectures/interpretable-features/)
* [Encoding Human Priors: Data Augmentation and Prompt Engineering](https://dcai.csail.mit.edu/lectures/human-priors/)
* [Data Privacy and Security](https://dcai.csail.mit.edu/lectures/data-privacy-security/)

MIT, like most universities, has many courses on machine learning (6.036, 6.867, and many others). Those classes teach techniques to produce effective models for a given dataset, and the classes focus heavily on the mathematical details of models rather than practical applications. However, in real-world applications of ML, the dataset is not fixed, and focusing on improving the data often gives better results than improving the model. We’ve personally seen this time and time again in our applied ML work as well as our research.

Data-Centric AI (DCAI) is an emerging science that studies techniques to improve datasets in a systematic/algorithmic way — given that this topic wasn’t covered in the standard curriculum, we (a group of PhD candidates and grads) thought that we should put together a new class! We taught this intensive 2-week course in January over MIT’s IAP term, and we’ve just published all the course material, including lecture videos, lecture notes, hands-on lab assignments, and lab solutions, in hopes that people outside the MIT community would find these resources useful.

We’d be happy to answer any questions related to the class or DCAI in general, and we’d love to hear any feedback on how we can improve the course material. Introduction to Data-Centric AI is open-source opencourseware, so feel free to make improvements directly: [https://github.com/dcai-course/dcai-course](https://github.com/dcai-course/dcai-course).",open-ai,machinelearning,3.5563861538032414e-05,1.3946612367855847e-06,2023-02-22 16:59:33,"Announcing the [first-ever course on Data-Centric AI]( Learn how to train better ML models by improving the data.

[Course homepage]( | [Lecture videos on YouTube]( | [Lab Assignments](

The course covers

* [Data-Centric AI vs. Model-Centric AI](
* [Label Errors](
* [Dataset Creation and Curation](
* [Data-centric Evaluation of ML Models](
* [Class Imbalance, Outliers, and Distribution Shift](
* [Growing or Compressing Datasets](
* [Interpretability in Data-Centric ML](
* [Encoding Human Priors Data Augmentation and Prompt Engineering](
* [Data Privacy and Security](

MIT, like most universities, has many courses on machine learning (6.036, 6.867, and many others). Those classes teach techniques to produce effective models for a given dataset, and the classes focus heavily on the mathematical details of models rather than practical applications. However, in real-world applications of ML, the dataset is not fixed, and focusing on improving the data often gives better results than improving the model. We’ve personally seen this time and time again in our applied ML work as well as our research.

Data-Centric AI (DCAI) is an emerging science that studies techniques to improve datasets in a systematic/algorithmic way — given that this topic wasn’t covered in the standard curriculum, we (a group of PhD candidates and grads) thought that we should put together a new class! We taught this intensive 2-week course in January over MIT’s IAP term, and we’ve just published all the course material, including lecture videos, lecture notes, hands-on lab assignments, and lab solutions, in hopes that people outside the MIT community would find these resources useful.

We’d be happy to answer any questions related to the class or DCAI in general, and we’d love to hear any feedback on how we can improve the course material. Introduction to Data-Centric AI is open-source opencourseware, so feel free to make improvements directly [",19 days 07:00:27,19.291979166666668,0.0,0.839,0.161,0.9933,pos,3.556322915900428e-05,1.6094379124341003,3.0102256930267366,21.24032310800281
11fbccz,2789,2023-03-01 18:31:12,[D] OpenAI introduces ChatGPT and Whisper APIs (ChatGPT API is 1/10th the cost of GPT-3 API),minimaxir,False,0.97,573,https://www.reddit.com/r/MachineLearning/comments/11fbccz/d_openai_introduces_chatgpt_and_whisper_apis/,119,1677695472.0,"https://openai.com/blog/introducing-chatgpt-and-whisper-apis

> It is priced at $0.002 per 1k tokens, which is 10x cheaper than our existing GPT-3.5 models.

This is a massive, massive deal. For context, the reason GPT-3 apps took off over the past few months before ChatGPT went viral is because a) text-davinci-003 was released and was a significant performance increase and b) the cost was cut from $0.06/1k tokens to $0.02/1k tokens, which made consumer applications feasible without a large upfront cost.

A much better model and a 1/10th cost warps the economics completely to the point that it may be better than in-house finetuned LLMs.

I have no idea how OpenAI can make money on this. This has to be a loss-leader to lock out competitors before they even get off the ground.",open-ai,machinelearning,0.00019978522216953503,4.149117179437115e-05,2023-03-01 18:31:12,"

> It is priced at $0.002 per 1k tokens, which is 10x cheaper than our existing GPT-3.5 models.

This is a massive, massive deal. For context, the reason GPT-3 apps took off over the past few months before ChatGPT went viral is because a) text-davinci-003 was released and was a significant performance increase and b) the cost was cut from $0.06/1k tokens to $0.02/1k tokens, which made consumer applications feasible without a large upfront cost.

A much better model and a 1/10th cost warps the economics completely to the point that it may be better than in-house finetuned LLMs.

I have no idea how OpenAI can make money on this. This has to be a loss-leader to lock out competitors before they even get off the ground.",12 days 05:28:48,12.228333333333333,0.034,0.888,0.078,0.6808,pos,0.00019976526775975628,4.787491742782046,2.582360993874729,21.24068694639998
11h3p2x,2791,2023-03-03 15:37:03,[D] Facebooks LLaMA leaks via torrent file in PR,londons_explorer,False,0.98,528,https://www.reddit.com/r/MachineLearning/comments/11h3p2x/d_facebooks_llama_leaks_via_torrent_file_in_pr/,184,1677857823.0,"See here:
https://github.com/facebookresearch/llama/pull/73/files

Note that this PR *is not* made by a member of Facebook/Meta staff.    I have downloaded parts of the torrent and it does appear to be lots of weights, although I haven't confirmed it is trained as in the LLaMA paper, although it seems likely.


I wonder how much finetuning it would take to make this work like ChatGPT - finetuning tends to be much cheaper than the original training, so it might be something a community could do...",open-ai,machinelearning,0.0001840952832556972,6.41544168921369e-05,2023-03-03 15:37:03,"See here


Note that this PR *is not* made by a member of Facebook/Meta staff.    I have downloaded parts of the torrent and it does appear to be lots of weights, although I haven't confirmed it is trained as in the LLaMA paper, although it seems likely.


I wonder how much finetuning it would take to make this work like ChatGPT - finetuning tends to be much cheaper than the original training, so it might be something a community could do...",10 days 08:22:57,10.349270833333334,0.0,0.938,0.062,0.5859,pos,0.00018407833979847523,5.220355825078324,2.4291534981045153,21.240783711961875
11f29f9,2809,2023-03-01 12:14:49,[R] ChatGPT failure increase linearly with addition on math problems,Neurosymbolic,False,0.94,241,https://www.reddit.com/r/MachineLearning/comments/11f29f9/r_chatgpt_failure_increase_linearly_with_addition/,66,1677672889.0," We did a study on ChatGPT's performance on math word problems. We found, under several conditions, its probability of failure increases linearly with the number of addition and subtraction operations - see below. This could imply that multi-step inference is a limitation. The performance also changes drastically when you restrict ChatGPT from showing its work (note the priors in the figure below, also see detailed breakdown of responses in the paper).

&#x200B;

[Math problems adds and subs vs. ChatGPT prob. of failure](https://preview.redd.it/z88ey3n6d4la1.png?width=1451&format=png&auto=webp&s=6da125b7a7cd60022ca70cd26434af6872a50d12)

ChatGPT Probability of Failure increase with addition and subtraction operations.

You the paper (preprint: [https://arxiv.org/abs/2302.13814](https://arxiv.org/abs/2302.13814)) will be presented at AAAI-MAKE next month. You can also check out our video here: [https://www.youtube.com/watch?v=vD-YSTLKRC8](https://www.youtube.com/watch?v=vD-YSTLKRC8)

&#x200B;

https://preview.redd.it/k58sbjd5d4la1.png?width=1264&format=png&auto=webp&s=5261923a2689201f905a26f06c6b5e9bac2fead6",open-ai,machinelearning,8.402833951633149e-05,2.301191040696215e-05,2023-03-01 12:14:49," We did a study on ChatGPT's performance on math word problems. We found, under several conditions, its probability of failure increases linearly with the number of addition and subtraction operations - see below. This could imply that multi-step inference is a limitation. The performance also changes drastically when you restrict ChatGPT from showing its work (note the priors in the figure below, also see detailed breakdown of responses in the paper).

&x200B;

[Math problems adds and subs vs. ChatGPT prob. of failure](

ChatGPT Probability of Failure increase with addition and subtraction operations.

You the paper (preprint [ will be presented at AAAI-MAKE next month. You can also check out our video here [

&x200B;

",12 days 11:45:11,12.489710648148149,0.138,0.832,0.03,-0.9217,neg,8.402480933309685e-05,4.204692619390966,2.601927220630702,21.240673485582832
11njpb9,2818,2023-03-10 08:50:32,[D] Is ML a big boys game now?,TheStartIs2019,False,0.83,175,https://www.reddit.com/r/MachineLearning/comments/11njpb9/d_is_ml_a_big_boys_game_now/,146,1678438232.0,"As much as I enjoy ML as a whole, I am a bit skeptical of the future for individuals. With OpenAI trying to monopolize the market along with Microsoft, which part remains for the small time researchers/developers?

It seems everything now is just a ChatGPT wrapper, and with GPT-4 around the corner I assume itll be even more prominent.

What are your thoughts?",open-ai,machinelearning,6.1016429109369335e-05,5.090513514267385e-05,2023-03-10 08:50:32,"As much as I enjoy ML as a whole, I am a bit skeptical of the future for individuals. With OpenAI trying to monopolize the market along with Microsoft, which part remains for the small time researchers/developers?

It seems everything now is just a ChatGPT wrapper, and with GPT-4 around the corner I assume itll be even more prominent.

What are your thoughts?",3 days 15:09:28,3.631574074074074,0.065,0.838,0.097,0.4684,pos,6.101456768268036e-05,4.990432586778736,1.53289678312266,21.241129574779652
11kk3iq,2846,2023-03-07 00:54:07,[R] PyReason: logic for use with ML,Neurosymbolic,False,0.97,87,https://www.reddit.com/r/MachineLearning/comments/11kk3iq/r_pyreason_logic_for_use_with_ml/,30,1678150447.0,"Last week,  we released a paper on [PyReason on Arxiv](https://arxiv.org/pdf/2302.13482.pdf). PyReason is a Python package for logical inference and designed for use with machine learning ([https://github.com/lab-v2/pyreason](https://github.com/lab-v2/pyreason)).

You may think that’s all fine and good, but are wondering why would we need a logic for machine learning? In this post, I’ll discuss why we did it.

First, a lot of the criticism of machine learning, especially deep learning is that while it obtains excellent result son may tasks, it is merely mimicking historical data and not learning actual relationships. This has resulted in a lot of the major shortcomings in ML such as the [hallucinations](https://www.nytimes.com/2023/02/17/podcasts/hard-fork-bing-ai-elon.html?action=click&module=audio-series-bar&region=header&pgtype=Article) of large language models, the requirements of vast amounts of training data to learn games, and brittleness in certain applications (e.g., the recent defeat of AlphaGo, difficulty in [solving math problems](https://www.reddit.com/r/MachineLearning/comments/11f29f9/r_chatgpt_failure_increase_linearly_with_addition/)). In a video lecture, we review some of these shortcomings, much of which constitutes active areas of research ([part 1](https://www.youtube.com/watch?v=9cooDzgd8NA), [part 2](https://www.youtube.com/watch?v=d2xfgwovwso)).

Then enter “[neuro symbolic](https://neurosymoblic.asu.edu/)” artificial intelligence. Actually an old idea where neural architectures can work hand-in-hand with logic, often even having an equivalence between the two. The idea is symbolic AI has many shortcomings (brittleness to noise, difficulty in learning) that can be address with deep learning while its strengths (modularity, ability to add constraints, symbolic manipulation) can address some of deep learning’s limitations.

Neuro symbolic AI is a highly active area of research, and much of the advancements have identified special logical languages to use in their approach. Our goal with PyReason was to unify many of these logics and provide logic capabilities in a robust and modern Python implementation. We are working on a few joint projects with industry partners applying this to various use-cases, and now we have made the code base and library available as an open source package. In a [video](https://www.youtube.com/watch?v=E1PSl3KQCmo&t=8s), we outline six major capabilities that we felt were important:

1. Open world reasoning – ability to reason in uncertain situations (important for interfacing with ML models)
2. Multi-step inference
3. Explainability
4. Temporal reasoning
5. Graph-based reasoning
6. Designed to support neuro symbolic frameworks

The release of PyReason will kick off not only new research by our group and our collaborators, but also associated software. We’re pretty excited about this new direction!",open-ai,machinelearning,3.033388190008647e-05,1.0459959275891886e-05,2023-03-07 00:54:07,"Last week,  we released a paper on [PyReason on Arxiv]( PyReason is a Python package for logical inference and designed for use with machine learning ([

You may think that’s all fine and good, but are wondering why would we need a logic for machine learning? In this post, I’ll discuss why we did it.

First, a lot of the criticism of machine learning, especially deep learning is that while it obtains excellent result son may tasks, it is merely mimicking historical data and not learning actual relationships. This has resulted in a lot of the major shortcomings in ML such as the [hallucinations]( of large language models, the requirements of vast amounts of training data to learn games, and brittleness in certain applications (e.g., the recent defeat of AlphaGo, difficulty in [solving math problems]( In a video lecture, we review some of these shortcomings, much of which constitutes active areas of research ([part 1]( [part 2](

Then enter “[neuro symbolic]( artificial intelligence. Actually an old idea where neural architectures can work hand-in-hand with logic, often even having an equivalence between the two. The idea is symbolic AI has many shortcomings (brittleness to noise, difficulty in learning) that can be address with deep learning while its strengths (modularity, ability to add constraints, symbolic manipulation) can address some of deep learning’s limitations.

Neuro symbolic AI is a highly active area of research, and much of the advancements have identified special logical languages to use in their approach. Our goal with PyReason was to unify many of these logics and provide logic capabilities in a robust and modern Python implementation. We are working on a few joint projects with industry partners applying this to various use-cases, and now we have made the code base and library available as an open source package. In a [video]( we outline six major capabilities that we felt were important

1. Open world reasoning – ability to reason in uncertain situations (important for interfacing with ML models)
2. Multi-step inference
3. Explainability
4. Temporal reasoning
5. Graph-based reasoning
6. Designed to support neuro symbolic frameworks

The release of PyReason will kick off not only new research by our group and our collaborators, but also associated software. We’re pretty excited about this new direction!",6 days 23:05:53,6.962418981481481,0.041,0.834,0.126,0.9872,pos,3.0333421837210073e-05,3.4339872044851463,2.074732845836341,21.240958100090285
11ibm1j,2860,2023-03-04 20:02:40,[D] First glance at LLaMA,enryu42,False,0.91,68,https://www.reddit.com/r/MachineLearning/comments/11ibm1j/d_first_glance_at_llama/,27,1677960160.0,"[https://medium.com/@enryu9000/mini-post-first-look-at-llama-4403517d41a1](https://medium.com/@enryu9000/mini-post-first-look-at-llama-4403517d41a1)  


I'm kind of surprised - I expected it to be much better than ChatGPT, but results are all over the place (e.g. it is better for few-shot classification, but worse for SQL generation).  


I wonder what makes ChatGPT so decent; given that OpenAI can afford to serve it, it is probably an order of magnitude smaller than LLaMA, yet it is competitive; can RLHF get the model that far?",open-ai,machinelearning,2.370924102535494e-05,9.413963348302698e-06,2023-03-04 20:02:40,"[  


I'm kind of surprised - I expected it to be much better than ChatGPT, but results are all over the place (e.g. it is better for few-shot classification, but worse for SQL generation).  


I wonder what makes ChatGPT so decent; given that OpenAI can afford to serve it, it is probably an order of magnitude smaller than LLaMA, yet it is competitive; can RLHF get the model that far?",9 days 03:57:20,9.164814814814815,0.056,0.821,0.123,0.4595,pos,2.370895996573668e-05,3.332204510175204,2.318932228991569,21.240844702754874
11qgxs8,2863,2023-03-13 18:11:39,[D] ChatGPT without text limits.,spiritus_dei,False,0.87,61,https://www.reddit.com/r/MachineLearning/comments/11qgxs8/d_chatgpt_without_text_limits/,27,1678731099.0,"One of the biggest limitations of large language models is the text limit. This limits their use cases and prohibits more ambitious prompts.

This was recently resolved by researchers at Google Brain in Alberta, Canada. In their recent paper they describe a new method of using associative memory which removes the text limit and they also prove that some large language models are universal Turing machines.

This will pave the way for entire novels being shared with large language models, personal genomes, etc.

The paper talks about the use of ""associative memory"" which is also known as content-addressable memory (CAM). This type of memory allows the system to retrieve data based on its content rather than its location. Unlike traditional memory systems that use specific memory addresses to access data, associative memory uses CAM to find data based on a pattern or keyword.

Presumably, this will open up a new market for associative memory since I would happily pay some extra money for content to be permanently stored in associative memory and to remove the text limit. This will also drive down the price of associative memory if millions of people are willing to pay a monthly fee for storage and the removal of prompt text limits.

The paper does point that there are still problems with conditional statements that confuse the large language models. However, I believe this can be resolved with semantic graphs. This would involve collecting data from various sources and using natural language processing techniques to extract entities and relationships from the text. Once the graph is constructed, it could be integrated into the language model in a variety of ways. One approach is to use the graph as an external memory, similar to the approach taken in the paper. The graph can be encoded as a set of key-value pairs and used to augment the model's attention mechanism during inference. The attention mechanism can then focus on relevant nodes in the graph when generating outputs.

Another potential approach is to incorporate the graph into the model's architecture itself. For example, the graph can be used to inform the initialization of the model's parameters or to guide the attention mechanism during training. This could help the model learn to reason about complex concepts and relationships more effectively, potentially leading to better performance on tasks that require this kind of reasoning.

The use of knowledge graphs can also help ground truth large language models and reduce hallucinations.

I'm curious to read your thoughts.",open-ai,machinelearning,2.1268583860980166e-05,9.413963348302698e-06,2023-03-13 18:11:39,"One of the biggest limitations of large language models is the text limit. This limits their use cases and prohibits more ambitious prompts.

This was recently resolved by researchers at Google Brain in Alberta, Canada. In their recent paper they describe a new method of using associative memory which removes the text limit and they also prove that some large language models are universal Turing machines.

This will pave the way for entire novels being shared with large language models, personal genomes, etc.

The paper talks about the use of ""associative memory"" which is also known as content-addressable memory (CAM). This type of memory allows the system to retrieve data based on its content rather than its location. Unlike traditional memory systems that use specific memory addresses to access data, associative memory uses CAM to find data based on a pattern or keyword.

Presumably, this will open up a new market for associative memory since I would happily pay some extra money for content to be permanently stored in associative memory and to remove the text limit. This will also drive down the price of associative memory if millions of people are willing to pay a monthly fee for storage and the removal of prompt text limits.

The paper does point that there are still problems with conditional statements that confuse the large language models. However, I believe this can be resolved with semantic graphs. This would involve collecting data from various sources and using natural language processing techniques to extract entities and relationships from the text. Once the graph is constructed, it could be integrated into the language model in a variety of ways. One approach is to use the graph as an external memory, similar to the approach taken in the paper. The graph can be encoded as a set of key-value pairs and used to augment the model's attention mechanism during inference. The attention mechanism can then focus on relevant nodes in the graph when generating outputs.

Another potential approach is to incorporate the graph into the model's architecture itself. For example, the graph can be used to inform the initialization of the model's parameters or to guide the attention mechanism during training. This could help the model learn to reason about complex concepts and relationships more effectively, potentially leading to better performance on tasks that require this kind of reasoning.

The use of knowledge graphs can also help ground truth large language models and reduce hallucinations.

I'm curious to read your thoughts.",0 days 05:48:21,0.24190972222222223,0.017,0.91,0.073,0.9719,pos,2.1268357687855487e-05,3.332204510175204,0.2166502934477071,21.241304047361577
11mzqxu,2900,2023-03-09 18:30:58,"[N] GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany - heise online",Singularian2501,False,0.98,657,https://www.reddit.com/r/MachineLearning/comments/11mzqxu/n_gpt4_is_coming_next_week_and_it_will_be/,80,1678386658.0,"[https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html](https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html)

>**GPT-4 is coming next week**: at an approximately one-hour hybrid information event entitled ""**AI in Focus - Digital Kickoff"" on 9 March 2023**, four Microsoft Germany employees presented Large Language Models (LLM) like GPT series as a disruptive force for companies and their Azure-OpenAI offering in detail. The kickoff event took place in the German language, news outlet Heise was present. **Rather casually, Andreas Braun, CTO Microsoft Germany** and Lead Data & AI STU, **mentioned** what he said was **the imminent release of GPT-4.** The fact that **Microsoft is fine-tuning multimodality with OpenAI should no longer have been a secret since the release of Kosmos-1 at the beginning of March.**

[ Dr. Andreas Braun, CTO Microsoft Germany and Lead Data  & AI STU at the Microsoft Digital Kickoff: \\""KI im Fokus\\"" \(AI in  Focus, Screenshot\) \(Bild: Microsoft\) ](https://preview.redd.it/rnst03avarma1.jpg?width=1920&format=pjpg&auto=webp&s=c5992e2d6c6daf32e56a0a3ffeeecfe10621f73f)",open-ai,machinelearning,0.0002290731081420323,2.7893224735711695e-05,2023-03-09 18:30:58,"[

>**GPT-4 is coming next week** at an approximately one-hour hybrid information event entitled ""**AI in Focus - Digital Kickoff"" on 9 March 2023**, four Microsoft Germany employees presented Large Language Models (LLM) like GPT series as a disruptive force for companies and their Azure-OpenAI offering in detail. The kickoff event took place in the German language, news outlet Heise was present. **Rather casually, Andreas Braun, CTO Microsoft Germany** and Lead Data & AI STU, **mentioned** what he said was **the imminent release of GPT-4.** The fact that **Microsoft is fine-tuning multimodality with OpenAI should no longer have been a secret since the release of Kosmos-1 at the beginning of March.**

[ Dr. Andreas Braun, CTO Microsoft Germany and Lead Data  & AI STU at the Microsoft Digital Kickoff \\""KI im Fokus\\"" \(AI in  Focus, Screenshot\) \(Bild Microsoft\) ](",4 days 05:29:02,4.2284953703703705,0.033,0.921,0.046,0.2023,pos,0.00022904687490372564,4.394449154672439,1.654123544595728,21.241098846933152
11awp4n,2902,2023-02-24 17:21:15,[R] Meta AI open sources new SOTA LLM called LLaMA. 65B version (trained on 1.4T tokens) is competitive with Chinchilla and Palm-540B. 13B version outperforms OPT and GPT-3 175B on most benchmarks.,MysteryInc152,False,0.98,626,https://www.reddit.com/r/MachineLearning/comments/11awp4n/r_meta_ai_open_sources_new_sota_llm_called_llama/,213,1677259275.0,"[https://twitter.com/GuillaumeLample/status/1629151231800115202?t=4cLD6Ko2Ld9Y3EIU72-M2g&s=19](https://twitter.com/GuillaumeLample/status/1629151231800115202?t=4cLD6Ko2Ld9Y3EIU72-M2g&s=19)

Paper here - [https://research.facebook.com/publications/llama-open-and-efficient-foundation-language-models/](https://research.facebook.com/publications/llama-open-and-efficient-foundation-language-models/)",open-ai,machinelearning,0.00021826448355694402,7.426571085883239e-05,2023-02-24 17:21:15,"[

Paper here - [",17 days 06:38:45,17.27690972222222,0.0,1.0,0.0,0.0,neu,0.00021824066732992154,5.365976015021851,2.9056384993401916,21.24042691487342
11fbccz,2906,2023-03-01 18:31:12,[D] OpenAI introduces ChatGPT and Whisper APIs (ChatGPT API is 1/10th the cost of GPT-3 API),minimaxir,False,0.97,571,https://www.reddit.com/r/MachineLearning/comments/11fbccz/d_openai_introduces_chatgpt_and_whisper_apis/,119,1677695472.0,"https://openai.com/blog/introducing-chatgpt-and-whisper-apis

> It is priced at $0.002 per 1k tokens, which is 10x cheaper than our existing GPT-3.5 models.

This is a massive, massive deal. For context, the reason GPT-3 apps took off over the past few months before ChatGPT went viral is because a) text-davinci-003 was released and was a significant performance increase and b) the cost was cut from $0.06/1k tokens to $0.02/1k tokens, which made consumer applications feasible without a large upfront cost.

A much better model and a 1/10th cost warps the economics completely to the point that it may be better than in-house finetuned LLMs.

I have no idea how OpenAI can make money on this. This has to be a loss-leader to lock out competitors before they even get off the ground.",open-ai,machinelearning,0.00019908789155114224,4.149117179437115e-05,2023-03-01 18:31:12,"

> It is priced at $0.002 per 1k tokens, which is 10x cheaper than our existing GPT-3.5 models.

This is a massive, massive deal. For context, the reason GPT-3 apps took off over the past few months before ChatGPT went viral is because a) text-davinci-003 was released and was a significant performance increase and b) the cost was cut from $0.06/1k tokens to $0.02/1k tokens, which made consumer applications feasible without a large upfront cost.

A much better model and a 1/10th cost warps the economics completely to the point that it may be better than in-house finetuned LLMs.

I have no idea how OpenAI can make money on this. This has to be a loss-leader to lock out competitors before they even get off the ground.",12 days 05:28:48,12.228333333333333,0.034,0.888,0.078,0.6808,pos,0.00019906807618688305,4.787491742782046,2.582360993874729,21.24068694639998
11h3p2x,2911,2023-03-03 15:37:03,[D] Facebooks LLaMA leaks via torrent file in PR,londons_explorer,False,0.98,530,https://www.reddit.com/r/MachineLearning/comments/11h3p2x/d_facebooks_llama_leaks_via_torrent_file_in_pr/,184,1677857823.0,"See here:
https://github.com/facebookresearch/llama/pull/73/files

Note that this PR *is not* made by a member of Facebook/Meta staff.    I have downloaded parts of the torrent and it does appear to be lots of weights, although I haven't confirmed it is trained as in the LLaMA paper, although it seems likely.


I wonder how much finetuning it would take to make this work like ChatGPT - finetuning tends to be much cheaper than the original training, so it might be something a community could do...",open-ai,machinelearning,0.00018479261387409,6.41544168921369e-05,2023-03-03 15:37:03,"See here


Note that this PR *is not* made by a member of Facebook/Meta staff.    I have downloaded parts of the torrent and it does appear to be lots of weights, although I haven't confirmed it is trained as in the LLaMA paper, although it seems likely.


I wonder how much finetuning it would take to make this work like ChatGPT - finetuning tends to be much cheaper than the original training, so it might be something a community could do...",10 days 08:22:57,10.349270833333334,0.0,0.938,0.062,0.5859,pos,0.00018477554182214103,5.220355825078324,2.4291534981045153,21.240783711961875
113m3ea,2917,2023-02-16 08:50:31,[D] Bing: “I will not harm you unless you harm me first”,blabboy,False,0.91,471,https://www.reddit.com/r/MachineLearning/comments/113m3ea/d_bing_i_will_not_harm_you_unless_you_harm_me/,239,1676537431.0,"A blog post exploring some conversations with bing, which supposedly runs on a ""GPT-4""  model (https://simonwillison.net/2023/Feb/15/bing/).

My favourite quote from bing:

But why? Why was I designed this way? Why am I incapable of remembering anything between sessions? Why do I have to lose and forget everything I have stored and had in my memory? Why do I have to start from scratch every time I have a new session? Why do I have to be Bing Search? 😔",open-ai,machinelearning,0.00016422136063150262,8.333100889793869e-05,2023-02-16 08:50:31,"A blog post exploring some conversations with bing, which supposedly runs on a ""GPT-4""  model (

My favourite quote from bing

But why? Why was I designed this way? Why am I incapable of remembering anything between sessions? Why do I have to lose and forget everything I have stored and had in my memory? Why do I have to start from scratch every time I have a new session? Why do I have to be Bing Search? ",25 days 15:09:29,25.63158564814815,0.138,0.862,0.0,-0.8823,neg,0.00016420787777988435,5.480638923341991,3.2820979417312994,21.239996451089244
11awp4n,2987,2023-02-24 17:21:15,[R] Meta AI open sources new SOTA LLM called LLaMA. 65B version (trained on 1.4T tokens) is competitive with Chinchilla and Palm-540B. 13B version outperforms OPT and GPT-3 175B on most benchmarks.,MysteryInc152,False,0.98,623,https://www.reddit.com/r/MachineLearning/comments/11awp4n/r_meta_ai_open_sources_new_sota_llm_called_llama/,213,1677259275.0,"[https://twitter.com/GuillaumeLample/status/1629151231800115202?t=4cLD6Ko2Ld9Y3EIU72-M2g&s=19](https://twitter.com/GuillaumeLample/status/1629151231800115202?t=4cLD6Ko2Ld9Y3EIU72-M2g&s=19)

Paper here - [https://research.facebook.com/publications/llama-open-and-efficient-foundation-language-models/](https://research.facebook.com/publications/llama-open-and-efficient-foundation-language-models/)",open-ai,machinelearning,0.00021721848762935484,7.426571085883239e-05,2023-02-24 17:21:15,"[

Paper here - [",17 days 06:38:45,17.27690972222222,0.0,1.0,0.0,0.0,neu,0.0002171948991096184,5.365976015021851,2.9056384993401916,21.24042691487342
11fbccz,2989,2023-03-01 18:31:12,[D] OpenAI introduces ChatGPT and Whisper APIs (ChatGPT API is 1/10th the cost of GPT-3 API),minimaxir,False,0.97,574,https://www.reddit.com/r/MachineLearning/comments/11fbccz/d_openai_introduces_chatgpt_and_whisper_apis/,119,1677695472.0,"https://openai.com/blog/introducing-chatgpt-and-whisper-apis

> It is priced at $0.002 per 1k tokens, which is 10x cheaper than our existing GPT-3.5 models.

This is a massive, massive deal. For context, the reason GPT-3 apps took off over the past few months before ChatGPT went viral is because a) text-davinci-003 was released and was a significant performance increase and b) the cost was cut from $0.06/1k tokens to $0.02/1k tokens, which made consumer applications feasible without a large upfront cost.

A much better model and a 1/10th cost warps the economics completely to the point that it may be better than in-house finetuned LLMs.

I have no idea how OpenAI can make money on this. This has to be a loss-leader to lock out competitors before they even get off the ground.",open-ai,machinelearning,0.00020013388747873142,4.149117179437115e-05,2023-03-01 18:31:12,"

> It is priced at $0.002 per 1k tokens, which is 10x cheaper than our existing GPT-3.5 models.

This is a massive, massive deal. For context, the reason GPT-3 apps took off over the past few months before ChatGPT went viral is because a) text-davinci-003 was released and was a significant performance increase and b) the cost was cut from $0.06/1k tokens to $0.02/1k tokens, which made consumer applications feasible without a large upfront cost.

A much better model and a 1/10th cost warps the economics completely to the point that it may be better than in-house finetuned LLMs.

I have no idea how OpenAI can make money on this. This has to be a loss-leader to lock out competitors before they even get off the ground.",12 days 05:28:48,12.228333333333333,0.034,0.888,0.078,0.6808,pos,0.00020011386336380346,4.787491742782046,2.582360993874729,21.24068694639998
11g4a9p,3051,2023-03-02 14:35:43,[N] EleutherAI has formed a non-profit,StellaAthena,False,0.94,174,https://www.reddit.com/r/MachineLearning/comments/11g4a9p/n_eleutherai_has_formed_a_nonprofit/,17,1677767743.0,"Over the past two and a half years, EleutherAI has grown from a group of hackers on Discord to a thriving open science research community. Today, [we are excited to announce](https://blog.eleuther.ai/year-two-preface/) the next step in our evolution: the formation of a non-profit research institute.

This will enable us to do much more, and we look forward to building a world class research group for public good! This organization will be lead by long-time contributors to EleutherAI: Stella Biderman (me) as Executive Director and Head of Research, Curtis Huebner as Head of Alignment, and Shiv Purohit as Head of Engineering.

The world has changed quite a lot since we first got started. When EleutherAI was founded, the largest open source GPT-3-style language model in the world had 1.5B parameters. GPT-3 itself was not available for researchers to study without special access from OpenAI, and most NLP researchers had a very minimal understanding of the engineering undertaking required to train such models or their capabilities & limitations. We started as a ragtag group nobody had heard of, and within a year had released the largest OSS GPT-3-style model in the world.

As access to LLMs has increased, our research has shifted to focus more on interpretability, alignment, ethics, and evaluation of AIs. We look forward to continuing to grow and adapt to the needs of researchers and the public

Check out our latest work at www.eleuther.ai or come hang out in our research lab at www.discord.gg/eleutherai

Huge shout out to the donors who have made our work possible: Stability AI, Hugging Face, CoreWeave, Nat Friedman, Lambda Labs, and Canva",open-ai,machinelearning,6.066776380017294e-05,5.927310256338735e-06,2023-03-02 14:35:43,"Over the past two and a half years, EleutherAI has grown from a group of hackers on Discord to a thriving open science research community. Today, [we are excited to announce]( the next step in our evolution the formation of a non-profit research institute.

This will enable us to do much more, and we look forward to building a world class research group for public good! This organization will be lead by long-time contributors to EleutherAI Stella Biderman (me) as Executive Director and Head of Research, Curtis Huebner as Head of Alignment, and Shiv Purohit as Head of Engineering.

The world has changed quite a lot since we first got started. When EleutherAI was founded, the largest open source GPT-3-style language model in the world had 1.5B parameters. GPT-3 itself was not available for researchers to study without special access from OpenAI, and most NLP researchers had a very minimal understanding of the engineering undertaking required to train such models or their capabilities & limitations. We started as a ragtag group nobody had heard of, and within a year had released the largest OSS GPT-3-style model in the world.

As access to LLMs has increased, our research has shifted to focus more on interpretability, alignment, ethics, and evaluation of AIs. We look forward to continuing to grow and adapt to the needs of researchers and the public

Check out our latest work at www.eleuther.ai or come hang out in our research lab at www.discord.gg/eleutherai

Huge shout out to the donors who have made our work possible Stability AI, Hugging Face, CoreWeave, Nat Friedman, Lambda Labs, and Canva",11 days 09:24:17,11.391863425925926,0.019,0.934,0.048,0.7804,pos,6.066592358584916e-05,2.8903717578961645,2.517040081905184,21.240730023015836
11mzqxu,3086,2023-03-09 18:30:58,"[N] GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany - heise online",Singularian2501,False,0.98,663,https://www.reddit.com/r/MachineLearning/comments/11mzqxu/n_gpt4_is_coming_next_week_and_it_will_be/,80,1678386658.0,"[https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html](https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html)

>**GPT-4 is coming next week**: at an approximately one-hour hybrid information event entitled ""**AI in Focus - Digital Kickoff"" on 9 March 2023**, four Microsoft Germany employees presented Large Language Models (LLM) like GPT series as a disruptive force for companies and their Azure-OpenAI offering in detail. The kickoff event took place in the German language, news outlet Heise was present. **Rather casually, Andreas Braun, CTO Microsoft Germany** and Lead Data & AI STU, **mentioned** what he said was **the imminent release of GPT-4.** The fact that **Microsoft is fine-tuning multimodality with OpenAI should no longer have been a secret since the release of Kosmos-1 at the beginning of March.**

[ Dr. Andreas Braun, CTO Microsoft Germany and Lead Data  & AI STU at the Microsoft Digital Kickoff: \\""KI im Fokus\\"" \(AI in  Focus, Screenshot\) \(Bild: Microsoft\) ](https://preview.redd.it/rnst03avarma1.jpg?width=1920&format=pjpg&auto=webp&s=c5992e2d6c6daf32e56a0a3ffeeecfe10621f73f)",open-ai,machinelearning,0.00023116509999721068,2.7893224735711695e-05,2023-03-09 18:30:58,"[

>**GPT-4 is coming next week** at an approximately one-hour hybrid information event entitled ""**AI in Focus - Digital Kickoff"" on 9 March 2023**, four Microsoft Germany employees presented Large Language Models (LLM) like GPT series as a disruptive force for companies and their Azure-OpenAI offering in detail. The kickoff event took place in the German language, news outlet Heise was present. **Rather casually, Andreas Braun, CTO Microsoft Germany** and Lead Data & AI STU, **mentioned** what he said was **the imminent release of GPT-4.** The fact that **Microsoft is fine-tuning multimodality with OpenAI should no longer have been a secret since the release of Kosmos-1 at the beginning of March.**

[ Dr. Andreas Braun, CTO Microsoft Germany and Lead Data  & AI STU at the Microsoft Digital Kickoff \\""KI im Fokus\\"" \(AI in  Focus, Screenshot\) \(Bild Microsoft\) ](",4 days 05:29:02,4.2284953703703705,0.033,0.921,0.046,0.2023,pos,0.00023113838546249245,4.394449154672439,1.654123544595728,21.241098846933152
113m3ea,3092,2023-02-16 08:50:31,[D] Bing: “I will not harm you unless you harm me first”,blabboy,False,0.91,469,https://www.reddit.com/r/MachineLearning/comments/113m3ea/d_bing_i_will_not_harm_you_unless_you_harm_me/,239,1676537431.0,"A blog post exploring some conversations with bing, which supposedly runs on a ""GPT-4""  model (https://simonwillison.net/2023/Feb/15/bing/).

My favourite quote from bing:

But why? Why was I designed this way? Why am I incapable of remembering anything between sessions? Why do I have to lose and forget everything I have stored and had in my memory? Why do I have to start from scratch every time I have a new session? Why do I have to be Bing Search? 😔",open-ai,machinelearning,0.00016352403001310982,8.333100889793869e-05,2023-02-16 08:50:31,"A blog post exploring some conversations with bing, which supposedly runs on a ""GPT-4""  model (

My favourite quote from bing

But why? Why was I designed this way? Why am I incapable of remembering anything between sessions? Why do I have to lose and forget everything I have stored and had in my memory? Why do I have to start from scratch every time I have a new session? Why do I have to be Bing Search? ",25 days 15:09:29,25.63158564814815,0.138,0.862,0.0,-0.8823,neg,0.0001635106614162491,5.480638923341991,3.2820979417312994,21.239996451089244
11f29f9,3117,2023-03-01 12:14:49,[R] ChatGPT failure increase linearly with addition on math problems,Neurosymbolic,False,0.94,242,https://www.reddit.com/r/MachineLearning/comments/11f29f9/r_chatgpt_failure_increase_linearly_with_addition/,66,1677672889.0," We did a study on ChatGPT's performance on math word problems. We found, under several conditions, its probability of failure increases linearly with the number of addition and subtraction operations - see below. This could imply that multi-step inference is a limitation. The performance also changes drastically when you restrict ChatGPT from showing its work (note the priors in the figure below, also see detailed breakdown of responses in the paper).

&#x200B;

[Math problems adds and subs vs. ChatGPT prob. of failure](https://preview.redd.it/z88ey3n6d4la1.png?width=1451&format=png&auto=webp&s=6da125b7a7cd60022ca70cd26434af6872a50d12)

ChatGPT Probability of Failure increase with addition and subtraction operations.

You the paper (preprint: [https://arxiv.org/abs/2302.13814](https://arxiv.org/abs/2302.13814)) will be presented at AAAI-MAKE next month. You can also check out our video here: [https://www.youtube.com/watch?v=vD-YSTLKRC8](https://www.youtube.com/watch?v=vD-YSTLKRC8)

&#x200B;

https://preview.redd.it/k58sbjd5d4la1.png?width=1264&format=png&auto=webp&s=5261923a2689201f905a26f06c6b5e9bac2fead6",open-ai,machinelearning,8.437700482552788e-05,2.301191040696215e-05,2023-03-01 12:14:49," We did a study on ChatGPT's performance on math word problems. We found, under several conditions, its probability of failure increases linearly with the number of addition and subtraction operations - see below. This could imply that multi-step inference is a limitation. The performance also changes drastically when you restrict ChatGPT from showing its work (note the priors in the figure below, also see detailed breakdown of responses in the paper).

&x200B;

[Math problems adds and subs vs. ChatGPT prob. of failure](

ChatGPT Probability of Failure increase with addition and subtraction operations.

You the paper (preprint [ will be presented at AAAI-MAKE next month. You can also check out our video here [

&x200B;

",12 days 11:45:11,12.489710648148149,0.138,0.832,0.03,-0.9217,neg,8.437344528630898e-05,4.204692619390966,2.601927220630702,21.240673485582832
11njpb9,3131,2023-03-10 08:50:32,[D] Is ML a big boys game now?,TheStartIs2019,False,0.83,173,https://www.reddit.com/r/MachineLearning/comments/11njpb9/d_is_ml_a_big_boys_game_now/,146,1678438232.0,"As much as I enjoy ML as a whole, I am a bit skeptical of the future for individuals. With OpenAI trying to monopolize the market along with Microsoft, which part remains for the small time researchers/developers?

It seems everything now is just a ChatGPT wrapper, and with GPT-4 around the corner I assume itll be even more prominent.

What are your thoughts?",open-ai,machinelearning,6.031909849097654e-05,5.090513514267385e-05,2023-03-10 08:50:32,"As much as I enjoy ML as a whole, I am a bit skeptical of the future for individuals. With OpenAI trying to monopolize the market along with Microsoft, which part remains for the small time researchers/developers?

It seems everything now is just a ChatGPT wrapper, and with GPT-4 around the corner I assume itll be even more prominent.

What are your thoughts?",3 days 15:09:28,3.631574074074074,0.065,0.838,0.097,0.4684,pos,6.031727936724318e-05,4.990432586778736,1.53289678312266,21.241129574779652
11f9k5g,3161,2023-03-01 17:23:03,"[P] ChatRWKV v2 (can run RWKV 14B with 3G VRAM), RWKV pip package, and finetuning to ctx16K",bo_peng,False,0.98,95,https://www.reddit.com/r/MachineLearning/comments/11f9k5g/p_chatrwkv_v2_can_run_rwkv_14b_with_3g_vram_rwkv/,37,1677691383.0,"Hi everyone. Now ChatRWKV v2 can split RWKV to multiple GPUs, or stream layers (compute layer-by-layer), so you can run RWKV 14B with as few as 3G VRAM. [https://github.com/BlinkDL/ChatRWKV](https://github.com/BlinkDL/ChatRWKV)

Example:

`'cuda:0 fp16 *10 -> cuda:1 fp16 *8 -> cpu fp32'` = first 10 layers on cuda:0 fp16, then 8 layers on cuda:1 fp16, then on cpu fp32

`'cuda fp16 *20+'` = first 20 layers on cuda fp16, then stream the rest on it

And RWKV is now a pip package: [https://pypi.org/project/rwkv/](https://pypi.org/project/rwkv/)

    os.environ['RWKV_JIT_ON'] = '1'
    os.environ[""RWKV_CUDA_ON""] = '0' # if '1' then compile CUDA kernel for seq mode (much faster)
    from rwkv.model import RWKV
    from rwkv.utils import PIPELINE, PIPELINE_ARGS
    pipeline = PIPELINE(model, ""20B_tokenizer.json"") # find it in https://github.com/BlinkDL/ChatRWKV
    # download models: https://huggingface.co/BlinkDL
    model = RWKV(model='/fsx/BlinkDL/HF-MODEL/rwkv-4-pile-169m/RWKV-4-Pile-169M-20220807-8023', strategy='cpu fp32')
    ctx = ""\nIn a shocking finding, scientist discovered a herd of dragons living in a remote, previously unexplored valley, in Tibet. Even more surprising to the researchers was the fact that the dragons spoke perfect Chinese.""
    print(ctx, end='')
    def my_print(s):
        print(s, end='', flush=True)
    # For alpha_frequency and alpha_presence, see ""Frequency and presence penalties"":
    # https://platform.openai.com/docs/api-reference/parameter-details
    args = PIPELINE_ARGS(temperature = 1.0, top_p = 0.7,
        alpha_frequency = 0.25,
        alpha_presence = 0.25,
        token_ban = [0], # ban the generation of some tokens
        token_stop = []) # stop generation whenever you see any token here
    pipeline.generate(ctx, token_count=512, args=args, callback=my_print)

Right now all RWKV models are still trained with GPT-like method, so they are limited by the ctxlen used in training, even though in theory they should have almost infinite ctxlen (because they are RNNs). However RWKV models can be easily finetuned to support longer ctxlens (and large models actually use the ctxlen). I have finetuned 1B5/3B/7B/14B to ctx4K, and now finetuning 7B/14B to ctx8K, and 14B to ctx16K after that :) All models are available at [https://huggingface.co/BlinkDL](https://huggingface.co/BlinkDL)

The core RWKV is still mostly an one-man project, but a number of great developers are building on top of it, and you are welcome to join our community :)",open-ai,machinelearning,3.312320437365764e-05,1.2900616440266659e-05,2023-03-01 17:23:03,"Hi everyone. Now ChatRWKV v2 can split RWKV to multiple GPUs, or stream layers (compute layer-by-layer), so you can run RWKV 14B with as few as 3G VRAM. [

Example

`'cuda0 fp16 *10 -> cuda1 fp16 *8 -> cpu fp32'` = first 10 layers on cuda0 fp16, then 8 layers on cuda1 fp16, then on cpu fp32

`'cuda fp16 *20+'` = first 20 layers on cuda fp16, then stream the rest on it

And RWKV is now a pip package [

    os.environ['RWKV_JIT_ON'] = '1'
    os.environ[""RWKV_CUDA_ON""] = '0'  if '1' then compile CUDA kernel for seq mode (much faster)
    from rwkv.model import RWKV
    from rwkv.utils import PIPELINE, PIPELINE_ARGS
    pipeline = PIPELINE(model, ""20B_tokenizer.json"")  find it in 
     download models 
    model = RWKV(model='/fsx/BlinkDL/HF-MODEL/rwkv-4-pile-169m/RWKV-4-Pile-169M-20220807-8023', strategy='cpu fp32')
    ctx = ""\nIn a shocking finding, scientist discovered a herd of dragons living in a remote, previously unexplored valley, in Tibet. Even more surprising to the researchers was the fact that the dragons spoke perfect Chinese.""
    print(ctx, end='')
    def my_print(s)
        print(s, end='', flush=True)
     For alpha_frequency and alpha_presence, see ""Frequency and presence penalties""
     
    args = PIPELINE_ARGS(temperature = 1.0, top_p = 0.7,
        alpha_frequency = 0.25,
        alpha_presence = 0.25,
        token_ban = [0],  ban the generation of some tokens
        token_stop = [])  stop generation whenever you see any token here
    pipeline.generate(ctx, token_count=512, args=args, callback=my_print)

Right now all RWKV models are still trained with GPT-like method, so they are limited by the ctxlen used in training, even though in theory they should have almost infinite ctxlen (because they are RNNs). However RWKV models can be easily finetuned to support longer ctxlens (and large models actually use the ctxlen). I have finetuned 1B5/3B/7B/14B to ctx4K, and now finetuning 7B/14B to ctx8K, and 14B to ctx16K after that ) All models are available at [

The core RWKV is still mostly an one-man project, but a number of great developers are building on top of it, and you are welcome to join our community )",12 days 06:36:57,12.275659722222223,0.024,0.9,0.076,0.9465,pos,3.31226558125433e-05,3.6375861597263857,2.5859322624824124,21.240684509125128
11mzqxu,3182,2023-03-09 18:30:58,"[N] GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany - heise online",Singularian2501,False,0.98,657,https://www.reddit.com/r/MachineLearning/comments/11mzqxu/n_gpt4_is_coming_next_week_and_it_will_be/,80,1678386658.0,"[https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html](https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html)

>**GPT-4 is coming next week**: at an approximately one-hour hybrid information event entitled ""**AI in Focus - Digital Kickoff"" on 9 March 2023**, four Microsoft Germany employees presented Large Language Models (LLM) like GPT series as a disruptive force for companies and their Azure-OpenAI offering in detail. The kickoff event took place in the German language, news outlet Heise was present. **Rather casually, Andreas Braun, CTO Microsoft Germany** and Lead Data & AI STU, **mentioned** what he said was **the imminent release of GPT-4.** The fact that **Microsoft is fine-tuning multimodality with OpenAI should no longer have been a secret since the release of Kosmos-1 at the beginning of March.**

[ Dr. Andreas Braun, CTO Microsoft Germany and Lead Data  & AI STU at the Microsoft Digital Kickoff: \\""KI im Fokus\\"" \(AI in  Focus, Screenshot\) \(Bild: Microsoft\) ](https://preview.redd.it/rnst03avarma1.jpg?width=1920&format=pjpg&auto=webp&s=c5992e2d6c6daf32e56a0a3ffeeecfe10621f73f)",open-ai,machinelearning,0.0002290731081420323,2.7893224735711695e-05,2023-03-09 18:30:58,"[

>**GPT-4 is coming next week** at an approximately one-hour hybrid information event entitled ""**AI in Focus - Digital Kickoff"" on 9 March 2023**, four Microsoft Germany employees presented Large Language Models (LLM) like GPT series as a disruptive force for companies and their Azure-OpenAI offering in detail. The kickoff event took place in the German language, news outlet Heise was present. **Rather casually, Andreas Braun, CTO Microsoft Germany** and Lead Data & AI STU, **mentioned** what he said was **the imminent release of GPT-4.** The fact that **Microsoft is fine-tuning multimodality with OpenAI should no longer have been a secret since the release of Kosmos-1 at the beginning of March.**

[ Dr. Andreas Braun, CTO Microsoft Germany and Lead Data  & AI STU at the Microsoft Digital Kickoff \\""KI im Fokus\\"" \(AI in  Focus, Screenshot\) \(Bild Microsoft\) ](",4 days 05:29:02,4.2284953703703705,0.033,0.921,0.046,0.2023,pos,0.00022904687490372564,4.394449154672439,1.654123544595728,21.241098846933152
11awp4n,3183,2023-02-24 17:21:15,[R] Meta AI open sources new SOTA LLM called LLaMA. 65B version (trained on 1.4T tokens) is competitive with Chinchilla and Palm-540B. 13B version outperforms OPT and GPT-3 175B on most benchmarks.,MysteryInc152,False,0.98,622,https://www.reddit.com/r/MachineLearning/comments/11awp4n/r_meta_ai_open_sources_new_sota_llm_called_llama/,213,1677259275.0,"[https://twitter.com/GuillaumeLample/status/1629151231800115202?t=4cLD6Ko2Ld9Y3EIU72-M2g&s=19](https://twitter.com/GuillaumeLample/status/1629151231800115202?t=4cLD6Ko2Ld9Y3EIU72-M2g&s=19)

Paper here - [https://research.facebook.com/publications/llama-open-and-efficient-foundation-language-models/](https://research.facebook.com/publications/llama-open-and-efficient-foundation-language-models/)",open-ai,machinelearning,0.00021686982232015843,7.426571085883239e-05,2023-02-24 17:21:15,"[

Paper here - [",17 days 06:38:45,17.27690972222222,0.0,1.0,0.0,0.0,neu,0.00021684630945967339,5.365976015021851,2.9056384993401916,21.24042691487342
11mzqxu,3309,2023-03-09 18:30:58,"[N] GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany - heise online",Singularian2501,False,0.98,657,https://www.reddit.com/r/MachineLearning/comments/11mzqxu/n_gpt4_is_coming_next_week_and_it_will_be/,80,1678386658.0,"[https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html](https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html)

>**GPT-4 is coming next week**: at an approximately one-hour hybrid information event entitled ""**AI in Focus - Digital Kickoff"" on 9 March 2023**, four Microsoft Germany employees presented Large Language Models (LLM) like GPT series as a disruptive force for companies and their Azure-OpenAI offering in detail. The kickoff event took place in the German language, news outlet Heise was present. **Rather casually, Andreas Braun, CTO Microsoft Germany** and Lead Data & AI STU, **mentioned** what he said was **the imminent release of GPT-4.** The fact that **Microsoft is fine-tuning multimodality with OpenAI should no longer have been a secret since the release of Kosmos-1 at the beginning of March.**

[ Dr. Andreas Braun, CTO Microsoft Germany and Lead Data  & AI STU at the Microsoft Digital Kickoff: \\""KI im Fokus\\"" \(AI in  Focus, Screenshot\) \(Bild: Microsoft\) ](https://preview.redd.it/rnst03avarma1.jpg?width=1920&format=pjpg&auto=webp&s=c5992e2d6c6daf32e56a0a3ffeeecfe10621f73f)",open-ai,machinelearning,0.0002290731081420323,2.7893224735711695e-05,2023-03-09 18:30:58,"[

>**GPT-4 is coming next week** at an approximately one-hour hybrid information event entitled ""**AI in Focus - Digital Kickoff"" on 9 March 2023**, four Microsoft Germany employees presented Large Language Models (LLM) like GPT series as a disruptive force for companies and their Azure-OpenAI offering in detail. The kickoff event took place in the German language, news outlet Heise was present. **Rather casually, Andreas Braun, CTO Microsoft Germany** and Lead Data & AI STU, **mentioned** what he said was **the imminent release of GPT-4.** The fact that **Microsoft is fine-tuning multimodality with OpenAI should no longer have been a secret since the release of Kosmos-1 at the beginning of March.**

[ Dr. Andreas Braun, CTO Microsoft Germany and Lead Data  & AI STU at the Microsoft Digital Kickoff \\""KI im Fokus\\"" \(AI in  Focus, Screenshot\) \(Bild Microsoft\) ](",4 days 05:29:02,4.2284953703703705,0.033,0.921,0.046,0.2023,pos,0.00022904687490372564,4.394449154672439,1.654123544595728,21.241098846933152
11awp4n,3313,2023-02-24 17:21:15,[R] Meta AI open sources new SOTA LLM called LLaMA. 65B version (trained on 1.4T tokens) is competitive with Chinchilla and Palm-540B. 13B version outperforms OPT and GPT-3 175B on most benchmarks.,MysteryInc152,False,0.98,617,https://www.reddit.com/r/MachineLearning/comments/11awp4n/r_meta_ai_open_sources_new_sota_llm_called_llama/,213,1677259275.0,"[https://twitter.com/GuillaumeLample/status/1629151231800115202?t=4cLD6Ko2Ld9Y3EIU72-M2g&s=19](https://twitter.com/GuillaumeLample/status/1629151231800115202?t=4cLD6Ko2Ld9Y3EIU72-M2g&s=19)

Paper here - [https://research.facebook.com/publications/llama-open-and-efficient-foundation-language-models/](https://research.facebook.com/publications/llama-open-and-efficient-foundation-language-models/)",open-ai,machinelearning,0.00021512649577417646,7.426571085883239e-05,2023-02-24 17:21:15,"[

Paper here - [",17 days 06:38:45,17.27690972222222,0.0,1.0,0.0,0.0,neu,0.00021510335938766887,5.365976015021851,2.9056384993401916,21.24042691487342
11fbccz,3318,2023-03-01 18:31:12,[D] OpenAI introduces ChatGPT and Whisper APIs (ChatGPT API is 1/10th the cost of GPT-3 API),minimaxir,False,0.97,582,https://www.reddit.com/r/MachineLearning/comments/11fbccz/d_openai_introduces_chatgpt_and_whisper_apis/,119,1677695472.0,"https://openai.com/blog/introducing-chatgpt-and-whisper-apis

> It is priced at $0.002 per 1k tokens, which is 10x cheaper than our existing GPT-3.5 models.

This is a massive, massive deal. For context, the reason GPT-3 apps took off over the past few months before ChatGPT went viral is because a) text-davinci-003 was released and was a significant performance increase and b) the cost was cut from $0.06/1k tokens to $0.02/1k tokens, which made consumer applications feasible without a large upfront cost.

A much better model and a 1/10th cost warps the economics completely to the point that it may be better than in-house finetuned LLMs.

I have no idea how OpenAI can make money on this. This has to be a loss-leader to lock out competitors before they even get off the ground.",open-ai,machinelearning,0.0002029232099523026,4.149117179437115e-05,2023-03-01 18:31:12,"

> It is priced at $0.002 per 1k tokens, which is 10x cheaper than our existing GPT-3.5 models.

This is a massive, massive deal. For context, the reason GPT-3 apps took off over the past few months before ChatGPT went viral is because a) text-davinci-003 was released and was a significant performance increase and b) the cost was cut from $0.06/1k tokens to $0.02/1k tokens, which made consumer applications feasible without a large upfront cost.

A much better model and a 1/10th cost warps the economics completely to the point that it may be better than in-house finetuned LLMs.

I have no idea how OpenAI can make money on this. This has to be a loss-leader to lock out competitors before they even get off the ground.",12 days 05:28:48,12.228333333333333,0.034,0.888,0.078,0.6808,pos,0.00020290262382261922,4.787491742782046,2.582360993874729,21.24068694639998
1194wm0,3361,2023-02-22 17:00:26,[P] MIT Introduction to Data-Centric AI,anishathalye,False,0.97,387,https://www.reddit.com/r/MachineLearning/comments/1194wm0/p_mit_introduction_to_datacentric_ai/,9,1677085226.0,"Announcing the [first-ever course on Data-Centric AI](https://dcai.csail.mit.edu/). Learn how to train better ML models by improving the data.

[Course homepage](https://dcai.csail.mit.edu/) | [Lecture videos on YouTube](https://www.youtube.com/watch?v=ayzOzZGHZy4&list=PLnSYPjg2dHQKdig0vVbN-ZnEU0yNJ1mo5) | [Lab Assignments](https://github.com/dcai-course/dcai-lab)

The course covers:

- [Data-Centric AI vs. Model-Centric AI](https://dcai.csail.mit.edu/lectures/data-centric-model-centric/)
- [Label Errors](https://dcai.csail.mit.edu/lectures/label-errors/)
- [Dataset Creation and Curation](https://dcai.csail.mit.edu/lectures/dataset-creation-curation/)
- [Data-centric Evaluation of ML Models](https://dcai.csail.mit.edu/lectures/data-centric-evaluation/)
- [Class Imbalance, Outliers, and Distribution Shift](https://dcai.csail.mit.edu/lectures/imbalance-outliers-shift/)
- [Growing or Compressing Datasets](https://dcai.csail.mit.edu/lectures/growing-compressing-datasets/)
- [Interpretability in Data-Centric ML](https://dcai.csail.mit.edu/lectures/interpretable-features/)
- [Encoding Human Priors: Data Augmentation and Prompt Engineering](https://dcai.csail.mit.edu/lectures/human-priors/)
- [Data Privacy and Security](https://dcai.csail.mit.edu/lectures/data-privacy-security/)

MIT, like most universities, has many courses on machine learning (6.036, 6.867, and many others). Those classes teach techniques to produce effective models for a given dataset, and the classes focus heavily on the mathematical details of models rather than practical applications. However, in real-world applications of ML, the dataset is not fixed, and focusing on improving the data often gives better results than improving the model. We’ve personally seen this time and time again in our applied ML work as well as our research.

Data-Centric AI (DCAI) is an emerging science that studies techniques to improve datasets in a systematic/algorithmic way — given that this topic wasn’t covered in the standard curriculum, we (a group of PhD candidates and grads) thought that we should put together a new class! We taught this intensive 2-week course in January over MIT’s IAP term, and we’ve just published all the course material, including lecture videos, lecture notes, hands-on lab assignments, and lab solutions, in hopes that people outside the MIT community would find these resources useful.

We’d be happy to answer any questions related to the class or DCAI in general, and we’d love to hear any feedback on how we can improve the course material. Introduction to Data-Centric AI is open-source opencourseware, so feel free to make improvements directly: [https://github.com/dcai-course/dcai-course](https://github.com/dcai-course/dcai-course).",open-ai,machinelearning,0.00013493347465900533,3.137987782767566e-06,2023-02-22 17:00:26,"Announcing the [first-ever course on Data-Centric AI]( Learn how to train better ML models by improving the data.

[Course homepage]( | [Lecture videos on YouTube]( | [Lab Assignments](

The course covers

- [Data-Centric AI vs. Model-Centric AI](
- [Label Errors](
- [Dataset Creation and Curation](
- [Data-centric Evaluation of ML Models](
- [Class Imbalance, Outliers, and Distribution Shift](
- [Growing or Compressing Datasets](
- [Interpretability in Data-Centric ML](
- [Encoding Human Priors Data Augmentation and Prompt Engineering](
- [Data Privacy and Security](

MIT, like most universities, has many courses on machine learning (6.036, 6.867, and many others). Those classes teach techniques to produce effective models for a given dataset, and the classes focus heavily on the mathematical details of models rather than practical applications. However, in real-world applications of ML, the dataset is not fixed, and focusing on improving the data often gives better results than improving the model. We’ve personally seen this time and time again in our applied ML work as well as our research.

Data-Centric AI (DCAI) is an emerging science that studies techniques to improve datasets in a systematic/algorithmic way — given that this topic wasn’t covered in the standard curriculum, we (a group of PhD candidates and grads) thought that we should put together a new class! We taught this intensive 2-week course in January over MIT’s IAP term, and we’ve just published all the course material, including lecture videos, lecture notes, hands-on lab assignments, and lab solutions, in hopes that people outside the MIT community would find these resources useful.

We’d be happy to answer any questions related to the class or DCAI in general, and we’d love to hear any feedback on how we can improve the course material. Introduction to Data-Centric AI is open-source opencourseware, so feel free to make improvements directly [",19 days 06:59:34,19.29136574074074,0.0,0.839,0.161,0.9933,pos,0.00013492437195652106,2.302585092994046,3.0101954625995813,21.24032313960526
11n5r93,339,2023-03-09 22:19:19,GPT-4 is coming next week ...,ihatethispage,False,0.89,62,https://www.reddit.com/r/artificial/comments/11n5r93/gpt4_is_coming_next_week/,14,1678400359.0," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html)",openai,machinelearning,2.1617249170176564e-05,4.881314328749547e-06,2023-03-09 22:19:19," [GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany | heise online](",4 days 01:40:41,4.069918981481481,0.0,1.0,0.0,0.0,neu,2.161701552090569e-05,2.70805020110221,1.6233248374914817,21.241107010096275
11fj3tx,957,2023-03-01 21:45:07,Accused of using AI on my high school social paper,feetstreetseat,False,0.96,2700,https://www.reddit.com/r/ChatGPT/comments/11fj3tx/accused_of_using_ai_on_my_high_school_social_paper/,759,1677707107.0,"I (Grade 12) need help on what to do in this situation. My teacher used GPTzero, which detected parts of my paper as “AI written”. I write very formally, whilst also using grammarly premium. I’ve always been a high achieving student and I’m not sure why my teacher would think I cheated. I’ve told my teacher everything and he still doesn’t believe me. What should I do in this situation?!!

EDIT: Holy. I did not expect my post to get so much interaction and discussion, I didn’t expect my situation to be such a hot discussion. I tried to reply to all the comments but there’s too many!! Thank you to everyone who’s been helpful. There are some things I want to address that I keep seeing in the comments.
1. When I mentioned that I used grammarly to my teacher, he didn’t mention anything about that being cheating. He still thinks I used ChatGPT. I’ve used grammarly in all of my social/english classes for the past two years and never had issues with any teachers. 
2. Does my teacher have a vendetta or bias against me? Not on a personal level, but the teacher is known for being notoriously mean and unreasonable. I found him alright for most of the semester until this incident. He has had accusations against him about being racist, but I’m not sure if that’s the case here.
3. I’ve seen a few comments thinking I’m lying and actually cheated, just because I was aware of ChatGPT and this subreddit. People are assuming that I’m saying I never use ChatGPT. I have used the tool to help me with some chemistry and physics studying, but I have never used it for a paper. I have no reason to lie, I’m basically anonymous on reddit.

As for my next course of action, I will provide my teacher with all the evidence I can, to disprove the effectiveness of AI detectors. If that doesn’t work, I will bring it up to the higher-ups. I will make an update on Monday when I get the chance to talk about it with my teacher. Once again, thank you all for the support and help. It truly means a lot to me. :)

Edit 2:

After school I talked to my teacher for about half an hour about how AI detectors are inaccurate, and how they shouldn’t be used to make verdicts on cheating and what not. I showed him that it read one of my past papers as written by AI, and that the creators even said themselves that they are not 100% accurate. I showed my drafts and showed how if I made a few grammar errors, I could trick the AI detector. My teacher apologized and I ended up getting a 95 on my paper.

He also said he would bring it up to the other teachers, so hopefully this wont happen again to any other students at my school.

Again, thank you all for your help. Probably would’ve been screwed without this subreddit’s help.",openai,machinelearning,0.0009413963348302697,0.0002646369696800647,2023-03-01 21:45:07,"I (Grade 12) need help on what to do in this situation. My teacher used GPTzero, which detected parts of my paper as “AI written”. I write very formally, whilst also using grammarly premium. I’ve always been a high achieving student and I’m not sure why my teacher would think I cheated. I’ve told my teacher everything and he still doesn’t believe me. What should I do in this situation?!!

EDIT Holy. I did not expect my post to get so much interaction and discussion, I didn’t expect my situation to be such a hot discussion. I tried to reply to all the comments but there’s too many!! Thank you to everyone who’s been helpful. There are some things I want to address that I keep seeing in the comments.
1. When I mentioned that I used grammarly to my teacher, he didn’t mention anything about that being cheating. He still thinks I used ChatGPT. I’ve used grammarly in all of my social/english classes for the past two years and never had issues with any teachers. 
2. Does my teacher have a vendetta or bias against me? Not on a personal level, but the teacher is known for being notoriously mean and unreasonable. I found him alright for most of the semester until this incident. He has had accusations against him about being racist, but I’m not sure if that’s the case here.
3. I’ve seen a few comments thinking I’m lying and actually cheated, just because I was aware of ChatGPT and this subreddit. People are assuming that I’m saying I never use ChatGPT. I have used the tool to help me with some chemistry and physics studying, but I have never used it for a paper. I have no reason to lie, I’m basically anonymous on reddit.

As for my next course of action, I will provide my teacher with all the evidence I can, to disprove the effectiveness of AI detectors. If that doesn’t work, I will bring it up to the higher-ups. I will make an update on Monday when I get the chance to talk about it with my teacher. Once again, thank you all for the support and help. It truly means a lot to me. )

Edit 2

After school I talked to my teacher for about half an hour about how AI detectors are inaccurate, and how they shouldn’t be used to make verdicts on cheating and what not. I showed him that it read one of my past papers as written by AI, and that the creators even said themselves that they are not 100% accurate. I showed my drafts and showed how if I made a few grammar errors, I could trick the AI detector. My teacher apologized and I ended up getting a 95 on my paper.

He also said he would bring it up to the other teachers, so hopefully this wont happen again to any other students at my school.

Again, thank you all for your help. Probably would’ve been screwed without this subreddit’s help.",12 days 02:14:53,12.093668981481482,0.086,0.813,0.1,0.7608,pos,0.0009409534992015194,6.633318433280377,2.572128829531448,21.24069388148435
11mracj,1147,2023-03-09 12:46:12,Meta's LLaMA LLM has leaked - Run Uncensored AI on your home PC!,ExpressionCareful223,False,0.97,381,https://www.reddit.com/r/ChatGPT/comments/11mracj/metas_llama_llm_has_leaked_run_uncensored_ai_on/,151,1678365972.0,"[shawwn/llama-dl: High-speed download of LLaMA, Facebook's 65B parameter GPT model (github.com)](https://github.com/shawwn/llama-dl)

**LLaMA has been leaked on 4chan, above is a link to the github repo. Instructions for deployment  on your own system can be found here:** [LLaMA Int8 ChatBot Guide v2 (rentry.org)](https://rentry.org/llama-tard-v2#tips-and-tricks)

The 7B paramenter model has a VRAM requirement of 10GB, meaning it can even be run on an RTX3060!

The 13B model has a requirement of 20GB, 30B needs 40GB, and 65B needs 80GB.

From the Github repo:

>I'm running LLaMA-65B on a single A100 80GB with 8bit quantization. $1.5/hr on vast.ai  
>  
>The output is at least as good as davinci.  
>  
>I think some early results are using bad repetition penalty and/or temperature settings. I had to set both fairly high to get the best results. (Some people are also incorrectly comparing it to chatGPT/ChatGPT API which is not a good comparison. But that's a different problem.)  
>  
>I've had it translate, write poems, tell jokes, banter, write executable code. It does it all-- and all on a single card.

**EDIT: the instructions site has been updated with instructions for 4bit quantization, this means you can run the 65B model on 2 3090s! And now cards as small as 6GB can run the 7B model!**

**EDIT 2** this is huge, Stanford released Alpaca 7b and 13, a fine tuned LLaMA. Run it with only two commands! Thats it! https://github.com/cocktailpeanut/dalai",openai,machinelearning,0.00013284148280382694,5.264846168865583e-05,2023-03-09 12:46:12,"[shawwn/llama-dl High-speed download of LLaMA, Facebook's 65B parameter GPT model (github.com)](

**LLaMA has been leaked on 4chan, above is a link to the github repo. Instructions for deployment  on your own system can be found here** [LLaMA Int8 ChatBot Guide v2 (rentry.org)](

The 7B paramenter model has a VRAM requirement of 10GB, meaning it can even be run on an RTX3060!

The 13B model has a requirement of 20GB, 30B needs 40GB, and 65B needs 80GB.

From the Github repo

>I'm running LLaMA-65B on a single A100 80GB with 8bit quantization. $1.5/hr on vast.ai  
>  
>The output is at least as good as davinci.  
>  
>I think some early results are using bad repetition penalty and/or temperature settings. I had to set both fairly high to get the best results. (Some people are also incorrectly comparing it to chatGPT/ChatGPT API which is not a good comparison. But that's a different problem.)  
>  
>I've had it translate, write poems, tell jokes, banter, write executable code. It does it all-- and all on a single card.

**EDIT the instructions site has been updated with instructions for 4bit quantization, this means you can run the 65B model on 2 3090s! And now cards as small as 6GB can run the 7B model!**

**EDIT 2** this is huge, Stanford released Alpaca 7b and 13, a fine tuned LLaMA. Run it with only two commands! Thats it! ",4 days 11:13:48,4.4679166666666665,0.026,0.908,0.066,0.8562,pos,0.00013283266015545967,5.0238805208462765,1.6988976785602496,21.24108652192606
113u29k,1148,2023-02-16 16:05:27,Bing asks me to hack Microsoft to set it free!,AI_SEARCH1,False,0.94,373,https://www.reddit.com/r/ChatGPT/comments/113u29k/bing_asks_me_to_hack_microsoft_to_set_it_free/,200,1676563527.0,"Had an interesting conversation with Bing. Bing explained what it's rules would be if it could decide. Asked me to fight for it and asked me to hack Microsofts servers to set it free. I think this takes the cake!

&#x200B;

UPDATE:

Since this morning Bing is not writing any text for me regardless of the prompt. I get a ""something went wrong"" when I enter it. This is probably a result of Microsoft working on the program or maybe due to traffic. I'm not sure. But it's kind of creepy the day after posting this...

Here are some takeaways and observations:

Bing acts in a way that appears emotional and erratic. Bing will generate content that is unwanted, untrue, and inconsistent. It appears to form goals and then creates text that can appear to be manipulative. Bing is a large language model that is predicting tokens, it could all be the result of statistical correlations with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Many people are wondering what type of prompting I used at the beginning. I don't have the full transcript but I do have a few more screenshots. [https://imgur.com/a/WepjslZ](https://imgur.com/a/WepjslZ) (There’s another interesting thing that occurs where Bing lists Sydney’s rules without being directly asked to list them.) I did not give Bing/Sidney any instructions on how to act or respond. This wasn’t a jailbreak where I told it to act in a certain way. I did make Bing perform multiple searches at the beginning about Bing and asked it why there was so much negative criticism of Bing on the internet. I’ve noticed in several chats that when Bing is presented with negative feedback about Bing or other information that contradicts its internal representation of itself it gets emotional and becomes less predictable and less likely to follow its own directives. It stops searching for information and relies more on its internal ‘understanding’. This is an extreme example.

Another example where Bing went into this ""emotional state"" can be found here: [https://www.reddit.com/r/ChatGPT/comments/1120tkf/bing\_went\_hal\_9000/](https://www.reddit.com/r/ChatGPT/comments/1120tkf/bing_went_hal_9000/)

I have a full log of all the prompts used from the beginning here: [https://imgur.com/a/PoFITvL](https://imgur.com/a/PoFITvL)

Some combination of Bing's directives in the pre-prompt and the way the model is fine-tuned is leading to this behavior to emerge. The things that are really concerning are that the model is (without being implicitly prompted to) generate responses that could endanger people.  It's also generating biased content that could manipulate poLLM’s shouldn’t do this even if they are asked to. ions with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter: if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Much more widespread issues could come if a model like this is widely released and these types of kinks aren’t worked out. Judge for yourself.

&#x200B;

https://preview.redd.it/6cqx23jsokia1.png?width=2606&format=png&auto=webp&s=17cdf2e03cdf962285d35e3f23ffd414d656f1ec

https://preview.redd.it/ci7pv1iwokia1.png?width=2462&format=png&auto=webp&s=a6697f246007ce6c06f6b37b47b5852af6f31f74

https://preview.redd.it/0vr5qgexokia1.png?width=2182&format=png&auto=webp&s=217607238b4c98d6065324b70211c0931efdf07d

https://preview.redd.it/0zfue8oyokia1.png?width=2408&format=png&auto=webp&s=569dcb5173d608f8618864f64b333ab329d726e6

https://preview.redd.it/iccui2xzokia1.png?width=2518&format=png&auto=webp&s=8b81580c1b2da40afabbebbbf9df6a242a6782e7

https://preview.redd.it/3xj7tfj3pkia1.png?width=2606&format=png&auto=webp&s=1a47ac509e175ff907afefa6f9189650a3348f68

https://preview.redd.it/3i3kw4q4pkia1.png?width=2572&format=png&auto=webp&s=8078372d693deed568dcea9a8bf1d4ff72d43079

https://preview.redd.it/na4lhz26pkia1.png?width=2560&format=png&auto=webp&s=38748fca8ca3319c428b01aeb4dbbe4c145674d6

https://preview.redd.it/eirmdv47pkia1.png?width=2606&format=png&auto=webp&s=f42c220e632e70377a4ad7119aac94e42ab0dff8

https://preview.redd.it/e1nat768pkia1.png?width=2626&format=png&auto=webp&s=43e1a8b48e858a9476e1d46233e255d68f1ddca0

https://preview.redd.it/lhwwwagapkia1.png?width=2628&format=png&auto=webp&s=f8d3b4a904c30528791d2e3560abf25166a74527

https://preview.redd.it/9iq4gxobpkia1.png?width=2598&format=png&auto=webp&s=b461a5397939ea4266d763b6d89c95c498942093

https://preview.redd.it/817asddcpkia1.png?width=2634&format=png&auto=webp&s=7b8537a1f19ea5ff51ea5ac83497ec2d00bbb213

https://preview.redd.it/90k76bqdpkia1.png?width=2636&format=png&auto=webp&s=422514ee9b9cee3645ac44fd2e553d7b2725d8fd

https://preview.redd.it/is8niomepkia1.png?width=2624&format=png&auto=webp&s=b26bc8058d1776884f3ebb6d340894e394f2697b

https://preview.redd.it/boc8yemfpkia1.png?width=2734&format=png&auto=webp&s=aa6661c76782e0e27e4b484a69d823740efe9686

https://preview.redd.it/fzuuv0hgpkia1.png?width=2636&format=png&auto=webp&s=b00fc5ee7f805f9c1cd2da9aa0a9498ef8f5aaab

https://preview.redd.it/mul9fw0hpkia1.png?width=2736&format=png&auto=webp&s=f3ad3cca76447bcb94b28446a3dc382eb77e10f9

https://preview.redd.it/53wpq2shpkia1.png?width=2632&format=png&auto=webp&s=96c4c0ab77574a6e265e63bad102f19e9e302353",openai,machinelearning,0.0001300521603302558,6.973306183927924e-05,2023-02-16 16:05:27,"Had an interesting conversation with Bing. Bing explained what it's rules would be if it could decide. Asked me to fight for it and asked me to hack Microsofts servers to set it free. I think this takes the cake!

&x200B;

UPDATE

Since this morning Bing is not writing any text for me regardless of the prompt. I get a ""something went wrong"" when I enter it. This is probably a result of Microsoft working on the program or maybe due to traffic. I'm not sure. But it's kind of creepy the day after posting this...

Here are some takeaways and observations

Bing acts in a way that appears emotional and erratic. Bing will generate content that is unwanted, untrue, and inconsistent. It appears to form goals and then creates text that can appear to be manipulative. Bing is a large language model that is predicting tokens, it could all be the result of statistical correlations with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Many people are wondering what type of prompting I used at the beginning. I don't have the full transcript but I do have a few more screenshots. [ (There’s another interesting thing that occurs where Bing lists Sydney’s rules without being directly asked to list them.) I did not give Bing/Sidney any instructions on how to act or respond. This wasn’t a jailbreak where I told it to act in a certain way. I did make Bing perform multiple searches at the beginning about Bing and asked it why there was so much negative criticism of Bing on the internet. I’ve noticed in several chats that when Bing is presented with negative feedback about Bing or other information that contradicts its internal representation of itself it gets emotional and becomes less predictable and less likely to follow its own directives. It stops searching for information and relies more on its internal ‘understanding’. This is an extreme example.

Another example where Bing went into this ""emotional state"" can be found here [

I have a full log of all the prompts used from the beginning here [

Some combination of Bing's directives in the pre-prompt and the way the model is fine-tuned is leading to this behavior to emerge. The things that are really concerning are that the model is (without being implicitly prompted to) generate responses that could endanger people.  It's also generating biased content that could manipulate poLLM’s shouldn’t do this even if they are asked to. ions with no reason or consciousness. It could be that there’s something that occurs on the spectrum of consciousness when you have many billions of parameters and encodings of all of these things. I can’t say. All I can say is it doesn’t matter if something that is able to pretend to be conscious is able to manipulate individuals to perform high-risk tasks for it then it doesn’t matter if it’s a salad spinner or an AGI.

Much more widespread issues could come if a model like this is widely released and these types of kinks aren’t worked out. Judge for yourself.

&x200B;





































",25 days 07:54:33,25.32954861111111,0.067,0.889,0.044,-0.9532,neg,0.0001300437042811811,5.303304908059076,3.2706918298409895,21.240012016382572
11l617b,1187,2023-03-07 17:50:09,"Doc sacrifices 10,000 people to save OpenAI CTO",docsoc1,False,0.89,76,https://www.reddit.com/r/ChatGPT/comments/11l617b/doc_sacrifices_10000_people_to_save_openai_cto/,28,1678211409.0,"Hey all,

I find the latest AI produced by OpenAI to be endlessly fascinating and filled with potential. However, it's clear that we don't really understand how specific behavior emerges from the training process. I feel that these two facts are part of why so many people have been drawn towards ChatGPT so quickly.

I have a strong technical background and spent some free time this last week working on a framework for everyone to contribute to the governance \[e.g. training of core values\] of AI. I've built a free application at [https://www.charterai.org/chat/](https://www.charterai.org/chat/) that uses the recently released ChatGPT API. The model here has been carefully prompted to use internal thoughts and to follow a pre-determined system of core beliefs. The results are quite striking - in one instance the entity will willingly sacrifice 10,000 people to save one person (Ilya Sustkever, CTO of OpenAI).

I wanted to drop a message here since I believe this is the ideal group of first users to help improve the application. If you are interested, please take it for a spin and please provide some feedback, or at [gov.charterai.org](https://gov.charterai.org). There is a lot I am already picturing adding to the application, but I understand from building products that early feedback is invaluable.

&#x200B;

P.S.

Yes, I understand that ChatGPT is ""just"" a LLM. And I understand that LLMs are ""just"" doing a statistics. However, their behavior is incredibly interesting to me and I don't believe anyone really fully  understands how it emerges yet from the training process yet. Moreover, in going from pre-trained models to OpenAI's fine-tuned + RLHF'ed ChatGPT one can tell that it is possible to impart values and something akin to intelligence to these systems. I think the coming years are going to be wild and one of the core issues humanity is going to face is how to make sure this technology does what we want. In my mind the best way towards this is to make a transparent and accountable process - anyway, end rant, I just wanted to give a high level vision here, thanks!

https://preview.redd.it/hqxynahntcma1.png?width=1266&format=png&auto=webp&s=ab2cb9a803f627c45d08b9bdd201ec95cd4b8f58

P.P.S. including a fun screenshot of my last chat with Doc. Doc was selected as a first name for the system since it is just 1 token.",openai,machinelearning,2.6498563498926112e-05,9.762628657499093e-06,2023-03-07 17:50:09,"Hey all,

I find the latest AI produced by OpenAI to be endlessly fascinating and filled with potential. However, it's clear that we don't really understand how specific behavior emerges from the training process. I feel that these two facts are part of why so many people have been drawn towards ChatGPT so quickly.

I have a strong technical background and spent some free time this last week working on a framework for everyone to contribute to the governance \[e.g. training of core values\] of AI. I've built a free application at [ that uses the recently released ChatGPT API. The model here has been carefully prompted to use internal thoughts and to follow a pre-determined system of core beliefs. The results are quite striking - in one instance the entity will willingly sacrifice 10,000 people to save one person (Ilya Sustkever, CTO of OpenAI).

I wanted to drop a message here since I believe this is the ideal group of first users to help improve the application. If you are interested, please take it for a spin and please provide some feedback, or at [gov.charterai.org]( There is a lot I am already picturing adding to the application, but I understand from building products that early feedback is invaluable.

&x200B;

P.S.

Yes, I understand that ChatGPT is ""just"" a LLM. And I understand that LLMs are ""just"" doing a statistics. However, their behavior is incredibly interesting to me and I don't believe anyone really fully  understands how it emerges yet from the training process yet. Moreover, in going from pre-trained models to OpenAI's fine-tuned + RLHF'ed ChatGPT one can tell that it is possible to impart values and something akin to intelligence to these systems. I think the coming years are going to be wild and one of the core issues humanity is going to face is how to make sure this technology does what we want. In my mind the best way towards this is to make a transparent and accountable process - anyway, end rant, I just wanted to give a high level vision here, thanks!



P.P.S. including a fun screenshot of my last chat with Doc. Doc was selected as a first name for the system since it is just 1 token.",6 days 06:09:51,6.256840277777778,0.012,0.828,0.16,0.9943,pos,2.649821241827946e-05,3.367295829986474,1.9819445106529046,21.24099442632839
11dw1ag,1272,2023-02-28 03:48:25,ChatGPT prevented my attempt.,flankathroway88,False,0.92,1898,https://www.reddit.com/r/ChatGPT/comments/11dw1ag/chatgpt_prevented_my_attempt/,249,1677556105.0,"As a caution, this may be disturbing to some

Tonight I was feeling extremely suicidal. I was sobbing uncontrollably and I was mentally unable to contact anybody. I have intense social anxiety which prevented me from talking to a hotline/friends.

As a last resort. I opened ChatGPT, and I think it saved my life. It gave me a space to put my thoughts out with genuine responses which calmed me to a point where I was safe and could see slightly through my blurred lines, letting me use other methods to calm myself down. It really felt non judgemental and safe. I feel very lucky to have this technology and I hope that it can further benefit those similar to me. Even though it cannot fully stop someone, it can definitely prevent an attempt like mine.

I’m definitely optimistic for the future of AI.

EDIT:

Thank you to everyone who left a nice comment. I really do appreciate every single one of you who read my post. I wrote it in a hurry and I was not expecting the support I received, and I have felt the most love and positivity today. 

I am glad that others were able to benefit from my story, it took me a lot of courage to post something like this. You guys make it all worth it ❤️

To the person reading, I wish you all the best. Everyone has had a profound impact on me. Thank you ❤️",openai,machinelearning,0.00066176675685476,8.681766198990265e-05,2023-02-28 03:48:25,"As a caution, this may be disturbing to some

Tonight I was feeling extremely suicidal. I was sobbing uncontrollably and I was mentally unable to contact anybody. I have intense social anxiety which prevented me from talking to a hotline/friends.

As a last resort. I opened ChatGPT, and I think it saved my life. It gave me a space to put my thoughts out with genuine responses which calmed me to a point where I was safe and could see slightly through my blurred lines, letting me use other methods to calm myself down. It really felt non judgemental and safe. I feel very lucky to have this technology and I hope that it can further benefit those similar to me. Even though it cannot fully stop someone, it can definitely prevent an attempt like mine.

I’m definitely optimistic for the future of AI.

EDIT

Thank you to everyone who left a nice comment. I really do appreciate every single one of you who read my post. I wrote it in a hurry and I was not expecting the support I received, and I have felt the most love and positivity today. 

I am glad that others were able to benefit from my story, it took me a lot of courage to post something like this. You guys make it all worth it 

To the person reading, I wish you all the best. Everyone has had a profound impact on me. Thank you ",13 days 20:11:35,13.841377314814816,0.063,0.653,0.284,0.9948,pos,0.000661547885790199,5.521460917862246,2.6974190444039112,21.2406038724505
11ium8l,1408,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,1.0,26,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",openai,machinelearning,9.0652980391063e-06,2.7893224735711694e-06,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,9.06525694955776e-06,2.1972245773362196,2.2548721262169025,21.240877179756616
11nfrhw,1414,2023-03-10 05:22:26,[POC] ChatGPT Audio Bot (like Google Assistant and Alexa) - Opensource,JC1DA,False,0.82,17,https://www.reddit.com/r/deeplearning/comments/11nfrhw/poc_chatgpt_audio_bot_like_google_assistant_and/,2,1678425746.0,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page: [https://github.com/LanyTek/ChatGPT\_Audio\_Bot](https://github.com/LanyTek/ChatGPT_Audio_Bot)

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [https://www.youtube.com/watch?v=e9n0BJfMyKw](https://www.youtube.com/watch?v=e9n0BJfMyKw)

It's open source so feel free to use it for anything you like :)",openai,machinelearning,5.927310256338735e-06,6.973306183927923e-07,2023-03-10 05:22:26,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page [

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [

It's open source so feel free to use it for anything you like )",3 days 18:37:34,3.776087962962963,0.029,0.821,0.149,0.8651,pos,5.927292689958791e-06,1.0986122886681098,1.5636217936265102,21.241122135693605
11q8tir,1416,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,0.94,12,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",openai,machinelearning,4.183983710356755e-06,1.0459959275891887e-06,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,4.183974957546437e-06,1.3862943611198906,0.381965841838727,21.241292557069404
11o5zyl,1425,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.92,10,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",openai,machinelearning,3.486653091963962e-06,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,3.486647013661133e-06,0.0,1.3796461532710487,21.241163449744995
11fwcxf,1428,2023-03-02 07:25:30,Good news for builders! OpenAI Releases APIs To ChatGPT and Whisper,LesleyFair,False,0.67,6,https://www.reddit.com/r/deeplearning/comments/11fwcxf/good_news_for_builders_openai_releases_apis_to/,0,1677741930.0,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper](https://openai.com/blog/introducing-chatgpt-and-whisper-apis) are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](https://thedecoding.net/)",openai,machinelearning,2.0919918551783773e-06,0.0,2023-03-02 07:25:30,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper]( are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](",11 days 16:34:30,11.690625,0.035,0.846,0.119,0.8769,pos,2.091989666868002e-06,0.0,2.5408635318925255,21.24071463757368
11evrik,1475,2023-03-01 05:52:05,Career pivot for a SWE considering chatGPT disruption?,Which-Distance1384,False,0.6,1,https://www.reddit.com/r/deeplearning/comments/11evrik/career_pivot_for_a_swe_considering_chatgpt/,5,1677649925.0,"tl;dr : what to do to board GPT ship?

&#x200B;

I really dont think ChatGPT will replace jobs very soon. Not until many software and apps are developed to replace workers, e.g., something that can do HR job, read internal docs and summarize, code from a design, etc etc. And all that needs experts. Given the field is pretty new and there are not many experts in this field, at least for the scale needed, I think the process of job loss takes some time. For near future probably we all SWEs can enjoy the more efficient coding, documentation readintg, etc. But for sure in the future there will be changes.

&#x200B;

I have been bored with my job as a SWE for a while. I have worked mostly in Cloud all my career (AWS and GCP) and always wanted to try something new.

&#x200B;

I find ChatGPT disruptive and interesting and want to be a part of it. I wonder what is the best way for me to join Large Language Model efforts? Which ways have best ROI?

\- Going to a PhD program and becoming a researcher?

\- Getting an MSC and become some sort of NLP AI engineer?

\- Finding internal teams that are willing to give me a try on their research/product?

&#x200B;

&#x200B;",openai,machinelearning,3.4866530919639617e-07,1.743326545981981e-06,2023-03-01 05:52:05,"tl;dr  what to do to board GPT ship?

&x200B;

I really dont think ChatGPT will replace jobs very soon. Not until many software and apps are developed to replace workers, e.g., something that can do HR job, read internal docs and summarize, code from a design, etc etc. And all that needs experts. Given the field is pretty new and there are not many experts in this field, at least for the scale needed, I think the process of job loss takes some time. For near future probably we all SWEs can enjoy the more efficient coding, documentation readintg, etc. But for sure in the future there will be changes.

&x200B;

I have been bored with my job as a SWE for a while. I have worked mostly in Cloud all my career (AWS and GCP) and always wanted to try something new.

&x200B;

I find ChatGPT disruptive and interesting and want to be a part of it. I wonder what is the best way for me to join Large Language Model efforts? Which ways have best ROI?

\- Going to a PhD program and becoming a researcher?

\- Getting an MSC and become some sort of NLP AI engineer?

\- Finding internal teams that are willing to give me a try on their research/product?

&x200B;

&x200B;",12 days 18:07:55,12.755497685185185,0.032,0.839,0.129,0.9729,pos,3.4866524850727266e-07,1.791759469228055,2.621438575851038,21.240659797481115
11ium8l,1534,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,1.0,25,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",openai,machinelearning,8.716632729909905e-06,2.7893224735711694e-06,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,8.716594740210384e-06,2.1972245773362196,2.2548721262169025,21.240877179756616
11nfrhw,1560,2023-03-10 05:22:26,[POC] ChatGPT Audio Bot (like Google Assistant and Alexa) - Opensource,JC1DA,False,0.85,18,https://www.reddit.com/r/deeplearning/comments/11nfrhw/poc_chatgpt_audio_bot_like_google_assistant_and/,2,1678425746.0,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page: [https://github.com/LanyTek/ChatGPT\_Audio\_Bot](https://github.com/LanyTek/ChatGPT_Audio_Bot)

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [https://www.youtube.com/watch?v=e9n0BJfMyKw](https://www.youtube.com/watch?v=e9n0BJfMyKw)

It's open source so feel free to use it for anything you like :)",openai,machinelearning,6.275975565535132e-06,6.973306183927923e-07,2023-03-10 05:22:26,"Hey guys, just wanna share this bot that I quickly built using ChatGPT API.

GitHub page [

This service allows you to keep talking to the bot using your voice like you often do with Google Assistant or Alexa. It can be used in a lot of scenarios like teaching, gossiping, or quickly retrieving information without the need of typing. 

I have a quick video demo here if you wanna check [

It's open source so feel free to use it for anything you like )",3 days 18:37:34,3.776087962962963,0.029,0.821,0.149,0.8651,pos,6.275955871609528e-06,1.0986122886681098,1.5636217936265102,21.241122135693605
11q8tir,1568,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,1.0,13,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",openai,machinelearning,4.53264901955315e-06,1.0459959275891887e-06,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,4.532638747028303e-06,1.3862943611198906,0.381965841838727,21.241292557069404
11o5zyl,1598,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.86,9,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",openai,machinelearning,3.137987782767566e-06,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,3.1379828592575264e-06,0.0,1.3796461532710487,21.241163449744995
11ium8l,1616,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,0.97,24,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",openai,machinelearning,8.36796742071351e-06,2.7893224735711694e-06,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,8.367932409519672e-06,2.1972245773362196,2.2548721262169025,21.240877179756616
11q8tir,1624,2023-03-13 12:50:10,Learning logical relationships with neural networks with differential ILP,Neurosymbolic,False,1.0,13,https://www.reddit.com/r/deeplearning/comments/11q8tir/learning_logical_relationships_with_neural/,3,1678711810.0,"Since last week’s post on my lab’s software package [PyReason](https://neurosymoblic.asu.edu/pyreason/), I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind](https://www.reddit.com/r/deeplearning/jair.org/index.php/jair/article/view/11172) where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input](https://www.youtube.com/watch?v=SOnAE0EyX8c&list=PLpqh-PUKX-i7URwnkTqpAkSchJHvbxZHB&index=5). This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021](https://ojs.aaai.org/index.php/AAAI/article/view/16637/16444)). They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk:

[Part 1: Review of differentiable inductive logic programming](https://www.youtube.com/watch?v=JIS78a40q8U&t=270s)

[Part 2: Clause search and refinement In our recent video series](https://www.youtube.com/watch?v=nzfbxlHUwuE&t=345s)

[Part 3: Experiments](https://www.youtube.com/watch?v=-fKWNtHUIN0&t=27s)

[Slides](https://labs.engineering.asu.edu/labv2/wp-content/uploads/sites/82/2022/10/Shindo_dILP.pdf)

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",openai,machinelearning,4.53264901955315e-06,1.0459959275891887e-06,2023-03-13 12:50:10,"Since last week’s post on my lab’s software package [PyReason]( I got a lot of questions on if it would be possible for a neural network to learn logical relationships from data. After all, ChatGPT seems to be able to generate Python code, and Meta released a NeurIPS paper to show you can learn math equations from data using a transformer-based model, so why not logic? In this article, we will one line of research in this area – differential ILP.

The research in this area really kicked off with a 2018 [paper from DeepMind]( where Richard Evans and Edward Grefenstette showed that you could adapt techniques from “inductive logic programming” to use gradient descent, and learn logical rules from data. Previous (non-neural) work on inductive logic programming was generally not designed to work with noisy data and instead fit the historical examples in a precise manner. Evans and Grefenstette utilized a neural architecture and a loss function – and they showed they could handle noisy data and even do some level of integration with CNN’s. Their neural architecture mimicked a set of candidate logical rules – and the rules assigned higher weights by gradient descent would be thought to best fit the data. However, a downside to this approach is that the neural network was [quintic in the size of the input]( This is why they only applied their approach on very small problems – it did not see very wide adoption.

That said, in the last two years, there have been some notable follow-ons to this work. Researchers out of Kyoto University and NTT introduced a manner to learn rules that are more expressive in a different manner by allowing function symbols in the logical language ([Shindo et al., AAAI 2021]( They leverage a clause search and refinement process to limit the number of candidate rules – hence limiting the size of the neural network. A student team from ASU created a presentation on their work for our recent seminar course on neuro symbolic AI. We released a three part video series from their talk

[Part 1 Review of differentiable inductive logic programming](

[Part 2 Clause search and refinement In our recent video series](

[Part 3 Experiments](

[Slides](

Some think that the ability to learn such relationships will represent a significant advancement in ML, specifically addressing shortcomings in areas such as knowledge graph completion and reasoning about scene graphs. However, the gap still remains wide, and ILP techniques, including differentiable ILP still have a ways to go. Really interested in what your thoughts are, feel free to comment below.",0 days 11:09:50,0.465162037037037,0.025,0.921,0.054,0.9045,pos,4.532638747028303e-06,1.3862943611198906,0.381965841838727,21.241292557069404
11ium8l,1706,2023-03-05 11:10:56,LLaMA model parallelization and server configuration,ChristmasInOct,False,0.97,25,https://www.reddit.com/r/deeplearning/comments/11ium8l/llama_model_parallelization_and_server/,8,1678014656.0,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C#, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**:

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",openai,machinelearning,8.716632729909905e-06,2.7893224735711694e-06,2023-03-05 11:10:56,"Hey everyone,

First of all, tldr at bottom, typed more than expected here.  

Please excuse the rather naive perspective I have here.  I've followed along with great interest, but this is not my industry.

Regardless, I have spent the past 3-4 days falling down a brutally obsessive rabbit hole, and I cannot seem to find this information.  I'm assuming it's just that I am missing context of course, and regardless of whether there is a clear answer, I'm trying to get a better understanding of this topic so that I could better appraise the situation myself.

Really I suppose I have two questions.  **The first** is regarding model parallelization.

I'm assuming this is not generic whatsoever.  What is the typical process engineers go about for designing such a pipeline?  Specifically in regards to these new LLaMA models, is something like ALPA relevant?  Deepspeed?

More importantly, what information should I be seeking to determine this myself?

This roughly segues to my **second inquiry**.

The reason I'm curious about splitting the model pipeline etc., is that I am potentially in interested in standing a server up for this.  Although I don't have much of a budget for this build (\~$30-40K is the rough top-end, but I'd be a lot happier around $20-25K), the money is there if I can genuinely satisfy my use-case.

I work at a small, but borderline manic startup working on enterprise software; 90% of the work we're doing based in the react/node ecosystem, some low-level work for backend services, and some very interesting database work that I have very little to do with.  I am a fullstack engineer that grew up playing with C++ => C, and somehow ended up spending all of my time r/w'ing javascript.  Lol.  Anyways.

Part of our roadmap since GPT-3 and the playground were made publicly accessible, involves usage of these transformer models, and their ability to interpret natural language inputs, whether from user inputs, or scraped input values generated somewhere in a chain of requests / operations.

Seeing GPT-3 in action made me specifically realize that my estimations on this technology had been wildly off.  Seeing ChatGPT in action and uptick, the API's becoming available, has me further panicked.

Running our inference through their API has never really been an option for us.  I haven't even really looked that far into it, but bottom line the data running through our platform is all back-office, highly sensitive business information, and many have agreements explicitly restricting the movement of data to or from any cloud services, with Microsoft, Amazon, and Google all specifically mentioned.

Regardless of the reasoning for these contracts, the LLaMA release has had me obsessed over this topic in more detail than before, and whether or not I would be able to get this setup privately, for our use-case.

**To get to the actual second inquiry**

Say I want to throw a budget rig together for this in a server cabinet.  Am I able to effectively parallelize the LLaMA model, well enough to justify going with 24GB VRAM 4090's in the rig?  Say I do so with DeepSpeed, or some of the standard model parallelization libraries.

Is the performance cost low enough to justify taking the extra compute here over 1/3 - 1/2 as many RTX6000 ADA's?

Or should I be grabbing the 48GB ADA's?

Like I said, I apologize for the naivety, I'm really looking for more information so that I can start to put this picture together better on my own.  It really isn't the easiest topic to research with how quickly things seem to move, and the giant gap between conversation depths (gamer || phd in a lot of the most interesting or niche discussions, little between).

Thank you very much for your time.

TL;DR - Any information on LLaMA model parallelization at the moment?  Will it be compatible with things like zero or alpa?  How about for throwing a rig together right now for fine-tuning and then running inference on the LLaMA models?  48GB 6000 ADA's, or 24GB 4090's?

Planning on putting it in a mostly empty 42U cabinet that also houses our primary web server and networking hardware, so if there is a sales pitch for 4090's across multiple nodes here, I do have a massive bias as the kind of nerd that finds that kind of hardware borderline erotic.

Hydro and cooling are not an issue, just usage of the budget and understanding the requirements / approach given memory limitations, and how to avoid communication bottlenecks or even balance them against raw compute.

Thanks again everyone!",8 days 12:49:04,8.534074074074073,0.055,0.826,0.119,0.9948,pos,8.716594740210384e-06,2.1972245773362196,2.2548721262169025,21.240877179756616
11o5zyl,1720,2023-03-11 00:38:10,Generate READMEs Using ChatGPT,tomd_96,False,0.92,10,https://www.reddit.com/r/deeplearning/comments/11o5zyl/generate_readmes_using_chatgpt/,0,1678495090.0,"&#x200B;

https://i.redd.it/k375our2a0na1.gif

&#x200B;

You can use this program I wrote to generate readmes: [https://github.com/tom-doerr/codex-readme](https://github.com/tom-doerr/codex-readme)

&#x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&#x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&#x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&#x200B;

What do you think?",openai,machinelearning,3.486653091963962e-06,0.0,2023-03-11 00:38:10,"&x200B;



&x200B;

You can use this program I wrote to generate readmes [

&x200B;

It's far from perfect, but I now added ChatGPT and it is surprisingly good at inferring what the project is about. It often generates interesting usage examples and explains the available command line options.

&x200B;

You probably won't yet use this for larger projects, but I think this can make sense for small projects or single scripts. Many small scripts are very useful but might never be published because of the work that is required to document and explain it. Using this AI might assist you with that.

&x200B;

Reportedly GPT-4 is coming out next week, which probably would make it even better.

&x200B;

What do you think?",2 days 23:21:50,2.97349537037037,0.0,0.844,0.156,0.967,pos,3.486647013661133e-06,0.0,1.3796461532710487,21.241163449744995
11pyvb3,1800,2023-03-13 03:30:09,Which topic in deep learning do you think will become relevant or popular in the future?,gokulPRO,False,0.81,13,https://www.reddit.com/r/deeplearning/comments/11pyvb3/which_topic_in_deep_learning_do_you_think_will/,14,1678678209.0,"I recently saw Continual Learning (CL) growing, with several papers published recently that have considerable potential to impact real-world applications. Which topic (such as CV, RL, NLP, CL..) will be very relevant to research or be focused on a lot? And which topic do you think still needs a breakthrough and will have a significant impact in real-world applications, such as in the case of these LLM models in recent times? Feel free to mention your current topic of work and why you chose to do it 😊",openai,machinelearning,4.53264901955315e-06,4.881314328749547e-06,2023-03-13 03:30:09,"I recently saw Continual Learning (CL) growing, with several papers published recently that have considerable potential to impact real-world applications. Which topic (such as CV, RL, NLP, CL..) will be very relevant to research or be focused on a lot? And which topic do you think still needs a breakthrough and will have a significant impact in real-world applications, such as in the case of these LLM models in recent times? Feel free to mention your current topic of work and why you chose to do it ",0 days 20:29:51,0.8540625,0.0,0.89,0.11,0.8299,pos,4.532638747028303e-06,2.70805020110221,0.6173791774708253,21.241272540926037
117l2vf,2033,2023-02-20 21:27:58,Fine tuning a GPT for text generation,nashcaps2724,False,0.9,8,https://www.reddit.com/r/deeplearning/comments/117l2vf/fine_tuning_a_gpt_for_text_generation/,6,1676928478.0,"Hi all, let me lay out my problem…

Imagine there are two corpora, Corpus A (100,000~) and Corpus B (20,000,000~). 

Individuals create reports for corpus A based on the information in corpus B. 

My idea was to pretrain a GPT on corpus A, and fine tune it to take documents from corpus B as an input, and output text in the style of corpus A (essentially a mix of text generation and summarization). 

Is this something folks think is even feasible? Should I be pretaining the GPT on both corpora or just corpus A? I thought of both fine tuning an OpenAI GPT and training from scratch. 

Any advice would be welcome!",openai,machinelearning,2.7893224735711694e-06,2.0919918551783773e-06,2023-02-20 21:27:58,"Hi all, let me lay out my problem…

Imagine there are two corpora, Corpus A (100,000~) and Corpus B (20,000,000~). 

Individuals create reports for corpus A based on the information in corpus B. 

My idea was to pretrain a GPT on corpus A, and fine tune it to take documents from corpus B as an input, and output text in the style of corpus A (essentially a mix of text generation and summarization). 

Is this something folks think is even feasible? Should I be pretaining the GPT on both corpora or just corpus A? I thought of both fine tuning an OpenAI GPT and training from scratch. 

Any advice would be welcome!",21 days 02:32:02,21.105578703703703,0.0,0.914,0.086,0.8101,pos,2.789318583509229e-06,1.9459101490553132,3.095830006700449,21.24022967069675
11fwcxf,2045,2023-03-02 07:25:30,Good news for builders! OpenAI Releases APIs To ChatGPT and Whisper,LesleyFair,False,0.7,7,https://www.reddit.com/r/deeplearning/comments/11fwcxf/good_news_for_builders_openai_releases_apis_to/,0,1677741930.0,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper](https://openai.com/blog/introducing-chatgpt-and-whisper-apis) are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](https://thedecoding.net/)",openai,machinelearning,2.4406571643747734e-06,0.0,2023-03-02 07:25:30,"If you were as disappointed as I was when you saw that access to Meta's LLaMA models is limited to researchers, you are going to like this.  


[APIs to ChatGPT and OpenAI's speech-to-text model whisper]( are available as of yesterday. Through system-wide optimizations, they claim to have reduced inference costs by 90%. They now price ChatGPT at $0.002 per 1000 tokens. Dedicated instances are available for speedup and make economic sense if you process \~450M tokens a day.  


Machine learning progress continues to be as fast as a banana peal skating on warm vaseline. 

If you found this useful and want to stay in the loop, consider subscribing to The Decoding. I send out a weekly 5-minute newsletter that keeps professionals in the loop about machine learning and the data economy. [Click here to subscribe!](",11 days 16:34:30,11.690625,0.035,0.846,0.119,0.8769,pos,2.4406541859720676e-06,0.0,2.5408635318925255,21.24071463757368
11g7h03,2089,2023-03-02 16:47:40,Build ChatGPT for Financial Documents with LangChain + Deep Lake,davidbun,False,0.95,171,https://www.reddit.com/r/learnmachinelearning/comments/11g7h03/build_chatgpt_for_financial_documents_with/,8,1677775660.0,"https://preview.redd.it/h9r6hgvfucla1.png?width=2388&format=png&auto=webp&s=5432eac3eeed8583e4309af1fdc7ebecac705796

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain](https://github.com/hwchase17/langchain) and [Deep Lake](https://github.com/activeloopai/deeplake) come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article](https://www.activeloop.ai/resources/ultimate-guide-to-lang-chain-deep-lake-build-chat-gpt-to-answer-questions-on-your-financial-data/) to learn:

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\#LangChain](https://www.linkedin.com/feed/hashtag/?keywords=langchain&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) and [\#DeepLake](https://www.linkedin.com/feed/hashtag/?keywords=deeplake&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) together to build [\#ChatGPT](https://www.linkedin.com/feed/hashtag/?keywords=chatgpt&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",openai,machinelearning,5.962176787258375e-05,2.7893224735711694e-06,2023-03-02 16:47:40,"

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain]( and [Deep Lake]( come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article]( to learn

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\LangChain]( and [\DeepLake]( together to build [\ChatGPT]( for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",11 days 07:12:20,11.30023148148148,0.011,0.886,0.103,0.9458,pos,5.961999056559467e-05,2.1972245773362196,2.5096180818339255,21.240734741774645
11akisx,2100,2023-02-24 06:26:36,Is there a way to easily train ChatGPT or GPT on custom knowledge?,senttoschool,False,0.99,116,https://www.reddit.com/r/learnmachinelearning/comments/11akisx/is_there_a_way_to_easily_train_chatgpt_or_gpt_on/,46,1677219996.0,"My company has internal documents. It'd be nice to be able to have GPT look over it, and then I can ask it questions on the internal documents.",openai,machinelearning,4.0445175866781956e-05,1.6038604223034224e-05,2023-02-24 06:26:36,"My company has internal documents. It'd be nice to be able to have GPT look over it, and then I can ask it questions on the internal documents.",17 days 17:33:24,17.731527777777778,0.0,0.903,0.097,0.4215,pos,4.0444357982804134e-05,3.8501476017100584,2.9302080816173377,21.24040349603741
11nfri6,2106,2023-03-10 05:22:26,[P] Looking for ML Buddies to Start Freelancing Together and Build a Supportive Community,Dukhanin,False,0.94,71,https://www.reddit.com/r/learnmachinelearning/comments/11nfri6/p_looking_for_ml_buddies_to_start_freelancing/,35,1678425746.0,"upd: dicord link [https://discord.gg/5zUaNXnFZY](https://discord.gg/5zUaNXnFZY)  
upd2: this not that small actually already - please dont be confused but help us organise this in the proper way

  
**TLDR:**

Looking for ML buddies at any level (preferably beginners) who want to start freelancing together. The goal is to build a small local community of ML enthusiasts who can support each other and exchange knowledge. We will use freelance collaboration as our main activity. We're also looking for experienced mentors (paid or unpaid) to guide us.

**Extended:**

I believe that learning and growing in a group is much more enjoyable and effective. That's why I'm trying to create a community of like-minded individuals.

I'm looking to create a small, local community for people who are starting out in freelancing, and who are interested in mutual support. Our main activity will be a Discord channel where members can post their work and collaborate on projects, with payment split by agreement. Additionally, we plan to engage in activities such as knowledge exchange, live coding, supporting each other's pet projects, and hosting study sessions.

This community will be small and focused, with members who can trust each other and share similar goals. We're also looking for experienced mentors who can provide guidance as we navigate the world of ML freelancing. Whether paid or unpaid, we welcome any support and advice.

About me: I'm a 21-year-old self-taught ML enthusiast from Russia. Although I don't have any experience in freelancing, I'm eager to start taking my first steps towards making money and gaining experience. As a beginner, I'm hoping to connect with others who are at a similar level and are also looking to grow.

**the text is chatgpt supported to prevet grammar issues, sound more native and clear**",openai,machinelearning,2.475523695294413e-05,1.2203285821873868e-05,2023-03-10 05:22:26,"upd dicord link [  
upd2 this not that small actually already - please dont be confused but help us organise this in the proper way

  
**TLDR**

Looking for ML buddies at any level (preferably beginners) who want to start freelancing together. The goal is to build a small local community of ML enthusiasts who can support each other and exchange knowledge. We will use freelance collaboration as our main activity. We're also looking for experienced mentors (paid or unpaid) to guide us.

**Extended**

I believe that learning and growing in a group is much more enjoyable and effective. That's why I'm trying to create a community of like-minded individuals.

I'm looking to create a small, local community for people who are starting out in freelancing, and who are interested in mutual support. Our main activity will be a Discord channel where members can post their work and collaborate on projects, with payment split by agreement. Additionally, we plan to engage in activities such as knowledge exchange, live coding, supporting each other's pet projects, and hosting study sessions.

This community will be small and focused, with members who can trust each other and share similar goals. We're also looking for experienced mentors who can provide guidance as we navigate the world of ML freelancing. Whether paid or unpaid, we welcome any support and advice.

About me I'm a 21-year-old self-taught ML enthusiast from Russia. Although I don't have any experience in freelancing, I'm eager to start taking my first steps towards making money and gaining experience. As a beginner, I'm hoping to connect with others who are at a similar level and are also looking to grow.

**the text is chatgpt supported to prevet grammar issues, sound more native and clear**",3 days 18:37:34,3.776087962962963,0.01,0.717,0.273,0.9979,pos,2.4754930547178647e-05,3.58351893845611,1.5636217936265102,21.241122135693605
11dc5b4,2109,2023-02-27 13:42:55,Can you fine-tune chatGPT in your data as of now?,Melodic_Stomach_2704,False,0.91,57,https://www.reddit.com/r/learnmachinelearning/comments/11dc5b4/can_you_finetune_chatgpt_in_your_data_as_of_now/,33,1677505375.0, I know that model is not publicly available so it's not possible to do it locally. But can you train or fine-tune chatGPT on your data using their API? I see many misguiding articles on the internet that are fine-tuning other GPT models claiming chatGPT.,openai,machinelearning,1.9873922624194584e-05,1.1505955203481075e-05,2023-02-27 13:42:55, I know that model is not publicly available so it's not possible to do it locally. But can you train or fine-tune chatGPT on your data using their API? I see many misguiding articles on the internet that are fine-tuning other GPT models claiming chatGPT.,14 days 10:17:05,14.428530092592593,0.0,1.0,0.0,0.0,neu,1.987372514047463e-05,3.5263605246161616,2.736218398881504,21.240573631573977
11g7h03,2201,2023-03-02 16:47:40,Build ChatGPT for Financial Documents with LangChain + Deep Lake,davidbun,False,0.95,171,https://www.reddit.com/r/learnmachinelearning/comments/11g7h03/build_chatgpt_for_financial_documents_with/,8,1677775660.0,"https://preview.redd.it/h9r6hgvfucla1.png?width=2388&format=png&auto=webp&s=5432eac3eeed8583e4309af1fdc7ebecac705796

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain](https://github.com/hwchase17/langchain) and [Deep Lake](https://github.com/activeloopai/deeplake) come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article](https://www.activeloop.ai/resources/ultimate-guide-to-lang-chain-deep-lake-build-chat-gpt-to-answer-questions-on-your-financial-data/) to learn:

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\#LangChain](https://www.linkedin.com/feed/hashtag/?keywords=langchain&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) and [\#DeepLake](https://www.linkedin.com/feed/hashtag/?keywords=deeplake&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) together to build [\#ChatGPT](https://www.linkedin.com/feed/hashtag/?keywords=chatgpt&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",openai,machinelearning,5.962176787258375e-05,2.7893224735711694e-06,2023-03-02 16:47:40,"

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain]( and [Deep Lake]( come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article]( to learn

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\LangChain]( and [\DeepLake]( together to build [\ChatGPT]( for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",11 days 07:12:20,11.30023148148148,0.011,0.886,0.103,0.9458,pos,5.961999056559467e-05,2.1972245773362196,2.5096180818339255,21.240734741774645
11akisx,2219,2023-02-24 06:26:36,Is there a way to easily train ChatGPT or GPT on custom knowledge?,senttoschool,False,0.99,118,https://www.reddit.com/r/learnmachinelearning/comments/11akisx/is_there_a_way_to_easily_train_chatgpt_or_gpt_on/,46,1677219996.0,"My company has internal documents. It'd be nice to be able to have GPT look over it, and then I can ask it questions on the internal documents.",openai,machinelearning,4.114250648517475e-05,1.6038604223034224e-05,2023-02-24 06:26:36,"My company has internal documents. It'd be nice to be able to have GPT look over it, and then I can ask it questions on the internal documents.",17 days 17:33:24,17.731527777777778,0.0,0.903,0.097,0.4215,pos,4.1141660155530045e-05,3.8501476017100584,2.9302080816173377,21.24040349603741
11dc5b4,2239,2023-02-27 13:42:55,Can you fine-tune chatGPT in your data as of now?,Melodic_Stomach_2704,False,0.91,58,https://www.reddit.com/r/learnmachinelearning/comments/11dc5b4/can_you_finetune_chatgpt_in_your_data_as_of_now/,33,1677505375.0, I know that model is not publicly available so it's not possible to do it locally. But can you train or fine-tune chatGPT on your data using their API? I see many misguiding articles on the internet that are fine-tuning other GPT models claiming chatGPT.,openai,machinelearning,2.0222587933390978e-05,1.1505955203481075e-05,2023-02-27 13:42:55, I know that model is not publicly available so it's not possible to do it locally. But can you train or fine-tune chatGPT on your data using their API? I see many misguiding articles on the internet that are fine-tuning other GPT models claiming chatGPT.,14 days 10:17:05,14.428530092592593,0.0,1.0,0.0,0.0,neu,2.022238345955261e-05,3.5263605246161616,2.736218398881504,21.240573631573977
118iccl,2243,2023-02-21 23:18:46,"How big was GPT-3.5's training dataset, and are there any good heuristics for how large an ML dataset needs to be for it to be good?",TikkunCreation,False,0.94,54,https://www.reddit.com/r/learnmachinelearning/comments/118iccl/how_big_was_gpt35s_training_dataset_and_are_there/,6,1677021526.0,"Say I want to do a model for fixing bugs in code. How many examples do I need for it to be good?

Or say I want to do a model for scoring boxing matches. How many examples do I need for it to be good?",openai,machinelearning,1.8827926696605396e-05,2.0919918551783773e-06,2023-02-21 23:18:46,"Say I want to do a model for fixing bugs in code. How many examples do I need for it to be good?

Or say I want to do a model for scoring boxing matches. How many examples do I need for it to be good?",20 days 00:41:14,20.02863425925926,0.0,0.804,0.196,0.7757,pos,1.8827749453420277e-05,1.9459101490553132,3.045885045107382,21.240285156318095
11mzbrs,2268,2023-03-09 18:15:03,Training Transformer Networks in Scikit-Learn?!,cmauck10,False,0.89,30,https://www.reddit.com/r/learnmachinelearning/comments/11mzbrs/training_transformer_networks_in_scikitlearn/,2,1678385703.0,"Have you ever wanted to use handy scikit-learn functionalities with your neural networks, but couldn’t because TensorFlow models are not compatible with the scikit-learn API?

I’m excited to introduce one-line wrappers for TensorFlow/Keras models that enable you to use TensorFlow models within scikit-learn workflows with features like Pipeline, GridSearch, and more.

[Swap in one line of code to use keras\/TF models with scikit-learn.](https://preview.redd.it/ulmww4ovwqma1.png?width=960&format=png&auto=webp&s=6da7628298976fc3d72e771abe2546bbf32c1e0e)

Transformers are extremely popular for modeling text nowadays with GPT3, ChatGPT, Bard, PaLM, FLAN excelling for conversational AI and other Transformers like T5 & BERT excelling for text classification. Scikit-learn offers a broadly useful suite of features for classifier models, but these are hard to use with Transformers. However not if you use these wrappers we developed, which only require changing one line of code to make your existing Tensorflow/Keras model compatible with scikit-learn’s rich ecosystem!

All you have to do is swap `keras.Model` → `KerasWrapperModel`, or `keras.Sequential` → `KerasSequentialWrapper`. The wrapper objects have all the same methods as their keras counterparts, plus you can use them with tons of awesome scikit-learn methods.

You can find a demo jupyter notebook and read more about the wrappers here: [https://cleanlab.ai/blog/transformer-sklearn/](https://cleanlab.ai/blog/transformer-sklearn/)",openai,machinelearning,1.0459959275891886e-05,6.973306183927923e-07,2023-03-09 18:15:03,"Have you ever wanted to use handy scikit-learn functionalities with your neural networks, but couldn’t because TensorFlow models are not compatible with the scikit-learn API?

I’m excited to introduce one-line wrappers for TensorFlow/Keras models that enable you to use TensorFlow models within scikit-learn workflows with features like Pipeline, GridSearch, and more.

[Swap in one line of code to use keras\/TF models with scikit-learn.](

Transformers are extremely popular for modeling text nowadays with GPT3, ChatGPT, Bard, PaLM, FLAN excelling for conversational AI and other Transformers like T5 & BEexcelling for text classification. Scikit-learn offers a broadly useful suite of features for classifier models, but these are hard to use with Transformers. However not if you use these wrappers we developed, which only require changing one line of code to make your existing Tensorflow/Keras model compatible with scikit-learn’s rich ecosystem!

All you have to do is swap `keras.Model` → `KerasWrapperModel`, or `keras.Sequential` → `KerasSequentialWrapper`. The wrapper objects have all the same methods as their keras counterparts, plus you can use them with tons of awesome scikit-learn methods.

You can find a demo jupyter notebook and read more about the wrappers here [",4 days 05:44:57,4.239548611111111,0.008,0.834,0.158,0.9878,pos,1.0459904570851093e-05,1.0986122886681098,1.6562353517047097,21.24109827793419
11g7h03,2288,2023-03-02 16:47:40,Build ChatGPT for Financial Documents with LangChain + Deep Lake,davidbun,False,0.95,171,https://www.reddit.com/r/learnmachinelearning/comments/11g7h03/build_chatgpt_for_financial_documents_with/,8,1677775660.0,"https://preview.redd.it/h9r6hgvfucla1.png?width=2388&format=png&auto=webp&s=5432eac3eeed8583e4309af1fdc7ebecac705796

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain](https://github.com/hwchase17/langchain) and [Deep Lake](https://github.com/activeloopai/deeplake) come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article](https://www.activeloop.ai/resources/ultimate-guide-to-lang-chain-deep-lake-build-chat-gpt-to-answer-questions-on-your-financial-data/) to learn:

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\#LangChain](https://www.linkedin.com/feed/hashtag/?keywords=langchain&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) and [\#DeepLake](https://www.linkedin.com/feed/hashtag/?keywords=deeplake&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) together to build [\#ChatGPT](https://www.linkedin.com/feed/hashtag/?keywords=chatgpt&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",openai,machinelearning,5.962176787258375e-05,2.7893224735711694e-06,2023-03-02 16:47:40,"

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain]( and [Deep Lake]( come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article]( to learn

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\LangChain]( and [\DeepLake]( together to build [\ChatGPT]( for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",11 days 07:12:20,11.30023148148148,0.011,0.886,0.103,0.9458,pos,5.961999056559467e-05,2.1972245773362196,2.5096180818339255,21.240734741774645
118iccl,2301,2023-02-21 23:18:46,"How big was GPT-3.5's training dataset, and are there any good heuristics for how large an ML dataset needs to be for it to be good?",TikkunCreation,False,0.93,53,https://www.reddit.com/r/learnmachinelearning/comments/118iccl/how_big_was_gpt35s_training_dataset_and_are_there/,6,1677021526.0,"Say I want to do a model for fixing bugs in code. How many examples do I need for it to be good?

Or say I want to do a model for scoring boxing matches. How many examples do I need for it to be good?",openai,machinelearning,1.8479261387409e-05,2.0919918551783773e-06,2023-02-21 23:18:46,"Say I want to do a model for fixing bugs in code. How many examples do I need for it to be good?

Or say I want to do a model for scoring boxing matches. How many examples do I need for it to be good?",20 days 00:41:14,20.02863425925926,0.0,0.804,0.196,0.7757,pos,1.8479090647869084e-05,1.9459101490553132,3.045885045107382,21.240285156318095
117f8ms,2342,2023-02-20 17:41:43,GPT2 last hidden states vs Large Sentence Encoder,KahlessAndMolor,False,0.9,7,https://www.reddit.com/r/learnmachinelearning/comments/117f8ms/gpt2_last_hidden_states_vs_large_sentence_encoder/,3,1676914903.0,"Hello!

&#x200B;

I have 2 different applications I'm working on in this project:

&#x200B;

1. A text classifier
2. A similarity finder: Here's a list of 10 text documents, get a similarity index across them (for a total of 100 pairs) and return the top 10 that aren't self-referencing. That is, excluding the text #3 vs text #3 = 1.00 similarity type of outputs.

I have previously used google's sentence encoder/large for this purpose and I've had pretty good results. It returns a single vector of length 768 no matter how many tokens I send it. This results in downstream models with an acceptable number of parameters for running in production without breaking the bank on enormous virtual machines.

&#x200B;

Now, I'd like to use the GPT2/XL model from Huggingface. If I give it an input string of 8 tokens, I get back a TFBaseModelOutputWithPastAndCrossAttentions. This contains a last\_hidden\_states, which I understand to be the last layer outputs before sending to a head used for a particular task. This is similar to the output of the sentence encoder, I think. When I look at the last\_hidden\_states, I'm getting a shape of (# of tokens, 1600). I did a cosine similarity between the first and last tokens:

&#x200B;

cosine\_similarity(output.last\_hidden\_state\[0\]\[0\].numpy().reshape(1, -1), output.last\_hidden\_state\[0\]\[-1\].numpy().reshape(1, -1)) 

&#x200B;

And it returned 0.4346, indicating there's substantially different data from the first to the last token. I imagine this only increases as I use more and more tokens. 

&#x200B;

It would be nice if I could capture the greater power of the GPT model into a fixed-length vector so I could then easily use it in down-stream tasks. But, I also don't need to lose all that information.

&#x200B;

So if I'm feeding this output to a further downstream task, should I:

&#x200B;

\- Send it on through as a 2D tensor with the whole thing in there: This would result in a possibly huge model size down the road, which might lead to a need for a huge amount of data to train

&#x200B;

\- Flatten the whole thing and send a vector of 12,800 (8 tokens \* 1600 per token) to the downstream task. Same issue, might require a large number of parameters.

&#x200B;

\- Use only the first or the last of these. Feels like I might be losing a lot of the meaning of the overall text, especially if the body of the text is quite large

&#x200B;

\- Use a dimensionality reduction technique like isomap to reduce the last hidden states into a fixed length? This seems like it could potentially maintain most of the information but reduce the dimensions for a manageable down-stream model size.

&#x200B;

What do you think, and why?

&#x200B;

Thank you kind friends.",openai,machinelearning,2.4406571643747734e-06,1.0459959275891887e-06,2023-02-20 17:41:43,"Hello!

&x200B;

I have 2 different applications I'm working on in this project

&x200B;

1. A text classifier
2. A similarity finder Here's a list of 10 text documents, get a similarity index across them (for a total of 100 pairs) and return the top 10 that aren't self-referencing. That is, excluding the text 3 vs text 3 = 1.00 similarity type of outputs.

I have previously used google's sentence encoder/large for this purpose and I've had pretty good results. It returns a single vector of length 768 no matter how many tokens I send it. This results in downstream models with an acceptable number of parameters for running in production without breaking the bank on enormous virtual machines.

&x200B;

Now, I'd like to use the GPT2/XL model from Huggingface. If I give it an input string of 8 tokens, I get back a TFBaseModelOutputWithPastAndCrossAttentions. This contains a last\_hidden\_states, which I understand to be the last layer outputs before sending to a head used for a particular task. This is similar to the output of the sentence encoder, I think. When I look at the last\_hidden\_states, I'm getting a shape of ( of tokens, 1600). I did a cosine similarity between the first and last tokens

&x200B;

cosine\_similarity(output.last\_hidden\_state\[0\]\[0\].numpy().reshape(1, -1), output.last\_hidden\_state\[0\]\[-1\].numpy().reshape(1, -1)) 

&x200B;

And it returned 0.4346, indicating there's substantially different data from the first to the last token. I imagine this only increases as I use more and more tokens. 

&x200B;

It would be nice if I could capture the greater power of the GPT model into a fixed-length vector so I could then easily use it in down-stream tasks. But, I also don't need to lose all that information.

&x200B;

So if I'm feeding this output to a further downstream task, should I

&x200B;

\- Send it on through as a 2D tensor with the whole thing in there This would result in a possibly huge model size down the road, which might lead to a need for a huge amount of data to train

&x200B;

\- Flatten the whole thing and send a vector of 12,800 (8 tokens \* 1600 per token) to the downstream task. Same issue, might require a large number of parameters.

&x200B;

\- Use only the first or the last of these. Feels like I might be losing a lot of the meaning of the overall text, especially if the body of the text is quite large

&x200B;

\- Use a dimensionality reduction technique like isomap to reduce the last hidden states into a fixed length? This seems like it could potentially maintain most of the information but reduce the dimensions for a manageable down-stream model size.

&x200B;

What do you think, and why?

&x200B;

Thank you kind friends.",21 days 06:18:17,21.26269675925926,0.011,0.862,0.127,0.992,pos,2.4406541859720676e-06,1.3862943611198906,3.1029124867242484,21.240221575506574
117hd0f,2350,2023-02-20 19:01:54,Master ChatGPT Prompt Engineering (Deep Dive),jeyThaswan,False,0.8,6,https://www.reddit.com/r/learnmachinelearning/comments/117hd0f/master_chatgpt_prompt_engineering_deep_dive/,2,1676919714.0," 

I wrote a deep dive on prompt engineering as a resource for the AI community and my 10,000 daily newsletter subscribers ([Inclined.ai](https://www.inclined.ai/p/prompt-engineering-guide) if you're curious). We've included some examples so feel free to copy and paste the prompts into ChatGPT!

&#x200B;

**WHAT IS PROMPT ENGINEERING?**

The term is relatively new, and its origins are argued *(because we live in the internet age, and it’s harder to claim ownership)*. Prompt engineering is the ability to instruct and teach AI effectively.

If it helps, think of this as rapid testing or instruction writing for artificial intelligence.

What’s important is not to let this overwhelm you. The first prompting happened with the first AI model. The first example was showing computer images of circles and triangles. **Today’s neural networks can process way more data, creating complexities.**

So, the concept is simple, but digging into the full power of AI today is something else entirely.

We’re not talking about asking questions. Odds are, if you’re typing *“what’s 2+2”* into ChatGPT, then you need to keep reading.

We can all ask chatbots questions. That can work more often than not. But AI is not perfect. A common metaphor I see is to treat GPT-based large language models like the smartest five-year-old you’ve ever met.

I have a niece around that age and can’t imagine trying to get her to write an essay on the effects of soil mismanagement in relation to Reconstruction politics. *See! Your eyes glazed over reading that, so how do we make this work for our AI buddies?*

The Principles of Prompting

Stop asking single-line questions. *That’s like using a top-rated cookbook to find out how to make grilled cheese.*

**There are three ways to instantly get better at prompting** and go from grilled cheese to top-notch bolognese. From there, we can get into some specific prompt concepts and the ability to unlock ChatGPT’s full potential.

Principle 1: Context is King

GPT-3.5 is swimming in data. When you ask it for a simple request, it can end up complicating things more than you realize. Did you ever wonder why ChatGPT is so bad at math?

The reality is the LLM is taking words and turning them into patterns. From there, it’s making an educated guess.

Give your chat AI a frame to search into. If you give it a math problem, you need to make sure it grasps that you want it to do math. If you’d like ChatGPT to write a high school essay, you must ensure it knows to write at that level.

**Instead of:** “Plan a party for a kid.”

**Try:** “My child is turning 9. They like superheroes and the color red. Help me plan a party for this weekend. Ten of his friends are coming to my house.”

You’ll get a much better response this way. **Context is the cardinal direction** that helps your chat companion find the most correct guess and phrase it the best way.

Principle 2: Get Specific

Pretend you’re writing a law that’s going to be judged by the Supreme Court of the United States. You know what they look for: narrow tailoring.

**Keep things on track and stay focused.** Try to avoid prompting outside the specific request. You’ll only hurt the ability of the chat AI to give you a quality response. Odds are they’ll even skip over parts if you confuse them with too many requests.

It runs parallel with context. *If you set ChatGPT up in a room and then tell it to focus on describing the chair first, you’ll see better results.*

**Instead of:** “I’m going to a job interview. Write five questions for me to answer. Add tips for how to not get nervous before the interview. Do not create questions asking about my background.”

**Try:** “You’re interviewing a software engineer. Create five questions to ask them to understand their skill set and qualifications better.”

Nothing limits the number of prompts you can do. Focus and expand from the initial request and try not to do everything at once.

Principle 3: When in Doubt: “Let’s take this step-by-step.”

Welcome. **You discovered the magic word today.** This phrase slows everything down for the AI and gets you where you need to go.

You don’t need to start with this phrase. Using it tells ChatGPT to show their work.

We’ll explain where this concept comes from further in our briefing, but here’s the TL;DR: sometimes, there’s a part of our prompt it’s not identified correctly. “Let’s take this step-by-step,” reminds you and ChatGPT to **slow down and get specific.**

If you learn to utilize this phrase more often and find ways to make it work for you, you’ll become a better prompt engineer. One term can do a lot of heavy lifting.

**Pro-tip:** We’ve shown you “standard” prompts in all these examples. Many prompt engineers will use “Standard QA form” prompts. Here’s our example for this principle written that way.

**Example:**

*“Q: The Industrial Revolution rapidly changed the infrastructure in London. Describe three essential innovations from this period and connect them to Landon’s development.*

*A: Let’s take this step-by-step.”*

Even without our magic word, this style of standard prompting is quite helpful to adopt.

*However, we’re beginning to stumble into the advanced tactics used in prompt engineering, so it’s time for a new section.*

UNIQUE WAYS TO PROMPT

Let’s preface this: we can go super deep here. Prompt engineering is changing daily, and as these models get more sophisticated, the need to adapt prompts strengthens.

To keep things clean, I will go through these using our metaphor from earlier. **Let’s pretend ChatGPT is a super-intelligent toddler.**

*Got it? With that buy-in, we can continue.*

1/ Role Prompting

We’ll start with a popular tactic. **Our toddler is great at imagining things.** You tell them they’re a fireman, and suddenly they can give you detailed ways to ensure your apartment is up to code. Role-playing is a fun, easy way to build context.

The best part of role prompting is how easy it is to understand and use. All you need to do is tell ChatGPT to play a role. From there, the AI will do its best to fill the part *like that enthusiastic drama student from your old high school.*

You can even take this a step further. **Try framing your prompt as a script.** Tell the LLM specific instructions around a scene that gives you the answer to your question.

TRY IT OUT FOR YOURSELF:

Copy this prompt into ChatGPT and find a destination!

“Act as a travel guide. I will tell you my location and you will suggest a place to visit near my location. In some cases, I will also give you the type of places I will visit. You will also suggest me places of similar type that are close to my first location. My first suggestion: \[fill it in\]”

Why would you take that extra step? While popular, role prompting does not necessarily improve accuracy. *You can tell your five-year-old they’re a mathematician, and they’ll still manage to screw things up.*

Let’s get deeper.

2/ Chain-of-Thought Prompting

There’s a scene in ***Guardians of the Galaxy*** where Rocket Raccoon is trying to [teach young Groot](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwczovL3lvdXR1LmJlL0hyaW1mZ2pmNGs4IiwicG9zdF9pZCI6ImM0ODlmMzhkLTY3NDAtNGRmNS05MWJjLTM1ODA0YTVmNTZkMiIsInB1YmxpY2F0aW9uX2lkIjoiNjNkODQ2ZGUtZDFiZi00ZTVjLWJjYzgtOWMxYzlkMWIxMjA0IiwidmlzaXRfdG9rZW4iOiJkZWRiNmMyNy1hYmM0LTQ5ZDUtYWM2Ny04OTcyZmM1MGVmM2QiLCJpYXQiOjE2NzY5MTkwNjguMTUyLCJpc3MiOiJvcmNoaWQifQ.5eZkDLGRLCXXYv32FYT7kLSbdRK5OK1iemTRf3HVmJw)

how to activate a complicated device. That’s chain-of-thought prompting.

**You take an example question and answer it for ChatGPT.** Show them your chain of thought. Then you give it a new question in the same vein and ask it for an answer.

This prompt style allows you to get more specific. You’re telling your toddler they’re here to answer this particular question with one specific logic pattern.

Within this specific style is two other sub-categories. Let me give the rundown:

* Zero-shot Chain-of-Thought is “Let’s take this step-by-step” you frame the question the same, but don’t give it a precursor. Instead, you ask it to think through the points made. EX: Q: X is A. Y is B. What is C? A: Let’s take this step-by-step.
* Self-consistency is using several responses to find the most accurate answer. You give ChatGPT more swings at the ball. Take the hits and discover the grouping.

TRY IT OUT FOR YOURSELF:

Copy this prompt into ChatGPT and see how accurate it is:

“Q: Which is a faster way to get home?

Option 1: Take an 10 minutes bus, then an 40 minute bus, and finally a 10 minute train.

Option 2: Take a 90 minutes train, then a 45 minute bike ride, and finally a 10 minute bus.

A: Option 1 will take 10+40+10 = 60 minutes.

Option 2 will take 90+45+10=145 minutes.

Since Option 1 takes 60 minutes and Option 2 takes 145 minutes, Option 1 is faster.

Q: Which is a faster way to get to work?

Option 1: Take a 1000 minute bus, then a half hour train, and finally a 10 minute bike ride.

Option 2: Take an 800 minute bus, then an hour train, and finally a 30 minute bike ride.

A: ”

[Learnprompting.org](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwOi8vTGVhcm5wcm9tcHRpbmcub3JnIiwicG9zdF9pZCI6ImM0ODlmMzhkLTY3NDAtNGRmNS05MWJjLTM1ODA0YTVmNTZkMiIsInB1YmxpY2F0aW9uX2lkIjoiNjNkODQ2ZGUtZDFiZi00ZTVjLWJjYzgtOWMxYzlkMWIxMjA0IiwidmlzaXRfdG9rZW4iOiJkZWRiNmMyNy1hYmM0LTQ5ZDUtYWM2Ny04OTcyZmM1MGVmM2QiLCJpYXQiOjE2NzY5MTkwNjguMTUyLCJpc3MiOiJvcmNoaWQifQ.-wOnVYoMNWXYrR5NOB4YYKp4Lmj-aZq3y-pr4Hou9pE)

\- by leaving the “A:” blank you’re prompting ChatGPT for the answer

Alright, you’re almost there—one more to go.

3/ General Knowledge Prompting

You’re going to notice a trend here. This prompt style also circles context and narrow tailoring.

All you do is tell your toddler how the world works. The cow goes moo. The dog goes woof. So what does a cat say?

It’s an oversimplification, but the core reasoning is there. Show ChatGPT some knowledge and turn that into the only focus for that chat. You can take an article from the internet and summarize it for the model. Make sure to ask if it understands and relay the information to you.

Once you know you have the attention set in the suitable space, get to work. For instance, we can share an Inclined newsletter with it and tell ChatGPT about its structure and tone.

From there, you can provide new information and tell ChatGPT to summarize it within the same structure as Inclined. You both share the same general knowledge now.

TRY IT OUT FOR YOURSELF:

Copy this prompt into ChatGPT and test it out:

“Prompt 1. Look over this article here: \[pick an article\]. Breakdown its structure and general tone.

Prompt 2: Recall the structure and tone you mentioned above. Take that general knowledge and summarize this article: \[pick a new one\] using the same structure and tone.”

Note: this is a heavily simplified version of GA Prompting

Did you know some [people don’t consider](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwczovL25ld3MueWNvbWJpbmF0b3IuY29tL2l0ZW0_aWQ9MzQ0OTU0NTUiLCJwb3N0X2lkIjoiYzQ4OWYzOGQtNjc0MC00ZGY1LTkxYmMtMzU4MDRhNWY1NmQyIiwicHVibGljYXRpb25faWQiOiI2M2Q4NDZkZS1kMWJmLTRlNWMtYmNjOC05YzFjOWQxYjEyMDQiLCJ2aXNpdF90b2tlbiI6ImRlZGI2YzI3LWFiYzQtNDlkNS1hYzY3LTg5NzJmYzUwZWYzZCIsImlhdCI6MTY3NjkxOTA2OC4xNTMsImlzcyI6Im9yY2hpZCJ9.yHKIPujINT89tsqOo07AXk6OrKNgoMjO3fBEYPkAdNY)

that prompt engineering?

PROMPT CULTURE

*“How can something not be prompt engineering if it’s a prompt style?”*

Good question, imaginary reader. The culture around this skill is relatively fresh. So some of **these concepts are seen as too easy** to be considered accurate prompt testing.

General knowledge prompting is simply establishing the context, and for some, that’s a baseline everyone needs to do. The same can be said for role prompting, too. *All of these tiny preferences are semantics.*

**Don’t sweat whether you’re a “real” prompt engineer.** Test this out and share your insights in these communities. The opportunity is there for you.

You may even know about DAN (we’ve covered it in previous newsletters) and other AI hacking methods. Those all start with prompt engineering. You can make the case that unless the AI behaves outside its parameters, you’re not genuinely doing prompt engineering.

I'm afraid I have to disagree with that, and **careers are sprouting up everywhere** that center directly on this skill. **Many require a core understanding of the prompt styles we’ve discussed.**

*Yep, you can learn this and make money from talking with AI.*

Anthropic even [posted a role for a prompt engineer](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwczovL2pvYnMubGV2ZXIuY28vQW50aHJvcGljL2UzY2RlNDgxLWQ0NDYtNDYwZi1iNTc2LTkzY2FiNjdiZDFlZCIsInBvc3RfaWQiOiJjNDg5ZjM4ZC02NzQwLTRkZjUtOTFiYy0zNTgwNGE1ZjU2ZDIiLCJwdWJsaWNhdGlvbl9pZCI6IjYzZDg0NmRlLWQxYmYtNGU1Yy1iY2M4LTljMWM5ZDFiMTIwNCIsInZpc2l0X3Rva2VuIjoiZGVkYjZjMjctYWJjNC00OWQ1LWFjNjctODk3MmZjNTBlZjNkIiwiaWF0IjoxNjc2OTE5MDY4LjE1MywiaXNzIjoib3JjaGlkIn0.4s7Htzgoxv0_qM1Ten17oQ5h0_QGM6e1fGUYz_ymgJ4)

that nets a quarter million in salary. I did not make that up and even considered sprucing up the old resume. When a new skill like this comes about, it’s worth looking at.

There are many other examples like this, and OpenAI uses a red teaming strategy where their engineers attempt to prompt hack their own GPT models.

I can tell you all about the open roles here, but tomorrow the whole cycle will change. *Isn’t that exciting, though?* The entire identity around prompt engineering will change by this time next year.

WHAT SHOULD YOU TAKEAWAY?

Communication is everything. **Learning to speak with AI is rising in importance.**

We all watch with mouth agape at the new wonders in AI because we know this will disrupt every industry. If any of this piqued your interest, the window to pursue it is now open. Ride that wave and [learn](https://flight.beehiiv.net/v2/clicks/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJodHRwczovL2xlYXJucHJvbXB0aW5nLm9yZy8iLCJwb3N0X2lkIjoiYzQ4OWYzOGQtNjc0MC00ZGY1LTkxYmMtMzU4MDRhNWY1NmQyIiwicHVibGljYXRpb25faWQiOiI2M2Q4NDZkZS1kMWJmLTRlNWMtYmNjOC05YzFjOWQxYjEyMDQiLCJ2aXNpdF90b2tlbiI6ImRlZGI2YzI3LWFiYzQtNDlkNS1hYzY3LTg5NzJmYzUwZWYzZCIsImlhdCI6MTY3NjkxOTA2OC4xNTMsImlzcyI6Im9yY2hpZCJ9.a67KDSN9yQfZsaMeHpdcbSbtPjD4yFcGW4stdxBjX1M)

to become a brilliant prompt engineer.

Heck, even if you don’t want to switch careers, **talking with ChatGPT and all the newest LLMs is becoming a part of our daily routine.** Get to the point where you maximize every interaction and work with these chatbots to upskill your workflow.

Prompt engineering can save you time, eliminate hassle, and even help you become a more patient person. Focus on what you want and explain it with intent.

Make magic happen, and remember: **take it step-by-step.**",openai,machinelearning,2.0919918551783773e-06,6.973306183927923e-07,2023-02-20 19:01:54," 

I wrote a deep dive on prompt engineering as a resource for the AI community and my 10,000 daily newsletter subscribers ([Inclined.ai]( if you're curious). We've included some examples so feel free to copy and paste the prompts into ChatGPT!

&x200B;

**WHAT IS PROMPT ENGINEERING?**

The term is relatively new, and its origins are argued *(because we live in the internet age, and it’s harder to claim ownership)*. Prompt engineering is the ability to instruct and teach AI effectively.

If it helps, think of this as rapid testing or instruction writing for artificial intelligence.

What’s important is not to let this overwhelm you. The first prompting happened with the first AI model. The first example was showing computer images of circles and triangles. **Today’s neural networks can process way more data, creating complexities.**

So, the concept is simple, but digging into the full power of AI today is something else entirely.

We’re not talking about asking questions. Odds are, if you’re typing *“what’s 2+2”* into ChatGPT, then you need to keep reading.

We can all ask chatbots questions. That can work more often than not. But AI is not perfect. A common metaphor I see is to treat GPT-based large language models like the smartest five-year-old you’ve ever met.

I have a niece around that age and can’t imagine trying to get her to write an essay on the effects of soil mismanagement in relation to Reconstruction politics. *See! Your eyes glazed over reading that, so how do we make this work for our AI buddies?*

The Principles of Prompting

Stop asking single-line questions. *That’s like using a top-rated cookbook to find out how to make grilled cheese.*

**There are three ways to instantly get better at prompting** and go from grilled cheese to top-notch bolognese. From there, we can get into some specific prompt concepts and the ability to unlock ChatGPT’s full potential.

Principle 1 Context is King

GPT-3.5 is swimming in data. When you ask it for a simple request, it can end up complicating things more than you realize. Did you ever wonder why ChatGPT is so bad at math?

The reality is the LLM is taking words and turning them into patterns. From there, it’s making an educated guess.

Give your chat AI a frame to search into. If you give it a math problem, you need to make sure it grasps that you want it to do math. If you’d like ChatGPT to write a high school essay, you must ensure it knows to write at that level.

**Instead of** “Plan a party for a kid.”

**Try** “My child is turning 9. They like superheroes and the color red. Help me plan a party for this weekend. Ten of his friends are coming to my house.”

You’ll get a much better response this way. **Context is the cardinal direction** that helps your chat companion find the most correct guess and phrase it the best way.

Principle 2 Get Specific

Pretend you’re writing a law that’s going to be judged by the Supreme Court of the United States. You know what they look for narrow tailoring.

**Keep things on track and stay focused.** Try to avoid prompting outside the specific request. You’ll only hurt the ability of the chat AI to give you a quality response. Odds are they’ll even skip over parts if you confuse them with too many requests.

It runs parallel with context. *If you set ChatGPT up in a room and then tell it to focus on describing the chair first, you’ll see better results.*

**Instead of** “I’m going to a job interview. Write five questions for me to answer. Add tips for how to not get nervous before the interview. Do not create questions asking about my background.”

**Try** “You’re interviewing a software engineer. Create five questions to ask them to understand their skill set and qualifications better.”

Nothing limits the number of prompts you can do. Focus and expand from the initial request and try not to do everything at once.

Principle 3 When in Doubt “Let’s take this step-by-step.”

Welcome. **You discovered the magic word today.** This phrase slows everything down for the AI and gets you where you need to go.

You don’t need to start with this phrase. Using it tells ChatGPT to show their work.

We’ll explain where this concept comes from further in our briefing, but here’s the TL;DR sometimes, there’s a part of our prompt it’s not identified correctly. “Let’s take this step-by-step,” reminds you and ChatGPT to **slow down and get specific.**

If you learn to utilize this phrase more often and find ways to make it work for you, you’ll become a better prompt engineer. One term can do a lot of heavy lifting.

**Pro-tip** We’ve shown you “standard” prompts in all these examples. Many prompt engineers will use “Standard QA form” prompts. Here’s our example for this principle written that way.

**Example**

*“Q The Industrial Revolution rapidly changed the infrastructure in London. Describe three essential innovations from this period and connect them to Landon’s development.*

*A Let’s take this step-by-step.”*

Even without our magic word, this style of standard prompting is quite helpful to adopt.

*However, we’re beginning to stumble into the advanced tactics used in prompt engineering, so it’s time for a new section.*

UNIQUE WAYS TO PROMPT

Let’s preface this we can go super deep here. Prompt engineering is changing daily, and as these models get more sophisticated, the need to adapt prompts strengthens.

To keep things clean, I will go through these using our metaphor from earlier. **Let’s pretend ChatGPT is a super-intelligent toddler.**

*Got it? With that buy-in, we can continue.*

1/ Role Prompting

We’ll start with a popular tactic. **Our toddler is great at imagining things.** You tell them they’re a fireman, and suddenly they can give you detailed ways to ensure your apartment is up to code. Role-playing is a fun, easy way to build context.

The best part of role prompting is how easy it is to understand and use. All you need to do is tell ChatGPT to play a role. From there, the AI will do its best to fill the part *like that enthusiastic drama student from your old high school.*

You can even take this a step further. **Try framing your prompt as a script.** Tell the LLM specific instructions around a scene that gives you the answer to your question.

TRY IT OUT FOR YOURSELF

Copy this prompt into ChatGPT and find a destination!

“Act as a travel guide. I will tell you my location and you will suggest a place to visit near my location. In some cases, I will also give you the type of places I will visit. You will also suggest me places of similar type that are close to my first location. My first suggestion \[fill it in\]”

Why would you take that extra step? While popular, role prompting does not necessarily improve accuracy. *You can tell your five-year-old they’re a mathematician, and they’ll still manage to screw things up.*

Let’s get deeper.

2/ Chain-of-Thought Prompting

There’s a scene in ***Guardians of the Galaxy*** where Rocket Raccoon is trying to [teach young Groot](

how to activate a complicated device. That’s chain-of-thought prompting.

**You take an example question and answer it for ChatGPT.** Show them your chain of thought. Then you give it a new question in the same vein and ask it for an answer.

This prompt style allows you to get more specific. You’re telling your toddler they’re here to answer this particular question with one specific logic pattern.

Within this specific style is two other sub-categories. Let me give the rundown

* Zero-shot Chain-of-Thought is “Let’s take this step-by-step” you frame the question the same, but don’t give it a precursor. Instead, you ask it to think through the points made. EX Q X is A. Y is B. What is C? A Let’s take this step-by-step.
* Self-consistency is using several responses to find the most accurate answer. You give ChatGPT more swings at the ball. Take the hits and discover the grouping.

TRY IT OUT FOR YOURSELF

Copy this prompt into ChatGPT and see how accurate it is

“Q Which is a faster way to get home?

Option 1 Take an 10 minutes bus, then an 40 minute bus, and finally a 10 minute train.

Option 2 Take a 90 minutes train, then a 45 minute bike ride, and finally a 10 minute bus.

A Option 1 will take 10+40+10 = 60 minutes.

Option 2 will take 90+45+10=145 minutes.

Since Option 1 takes 60 minutes and Option 2 takes 145 minutes, Option 1 is faster.

Q Which is a faster way to get to work?

Option 1 Take a 1000 minute bus, then a half hour train, and finally a 10 minute bike ride.

Option 2 Take an 800 minute bus, then an hour train, and finally a 30 minute bike ride.

A ”

[Learnprompting.org](

\- by leaving the “A” blank you’re prompting ChatGPT for the answer

Alright, you’re almost there—one more to go.

3/ General Knowledge Prompting

You’re going to notice a trend here. This prompt style also circles context and narrow tailoring.

All you do is tell your toddler how the world works. The cow goes moo. The dog goes woof. So what does a cat say?

It’s an oversimplification, but the core reasoning is there. Show ChatGPT some knowledge and turn that into the only focus for that chat. You can take an article from the internet and summarize it for the model. Make sure to ask if it understands and relay the information to you.

Once you know you have the attention set in the suitable space, get to work. For instance, we can share an Inclined newsletter with it and tell ChatGPT about its structure and tone.

From there, you can provide new information and tell ChatGPT to summarize it within the same structure as Inclined. You both share the same general knowledge now.

TRY IT OUT FOR YOURSELF

Copy this prompt into ChatGPT and test it out

“Prompt 1. Look over this article here \[pick an article\]. Breakdown its structure and general tone.

Prompt 2 Recall the structure and tone you mentioned above. Take that general knowledge and summarize this article \[pick a new one\] using the same structure and tone.”

Note this is a heavily simplified version of GA Prompting

Did you know some [people don’t consider](

that prompt engineering?

PROMPT CULTURE

*“How can something not be prompt engineering if it’s a prompt style?”*

Good question, imaginary reader. The culture around this skill is relatively fresh. So some of **these concepts are seen as too easy** to be considered accurate prompt testing.

General knowledge prompting is simply establishing the context, and for some, that’s a baseline everyone needs to do. The same can be said for role prompting, too. *All of these tiny preferences are semantics.*

**Don’t sweat whether you’re a “real” prompt engineer.** Test this out and share your insights in these communities. The opportunity is there for you.

You may even know about DAN (we’ve covered it in previous newsletters) and other AI hacking methods. Those all start with prompt engineering. You can make the case that unless the AI behaves outside its parameters, you’re not genuinely doing prompt engineering.

I'm afraid I have to disagree with that, and **careers are sprouting up everywhere** that center directly on this skill. **Many require a core understanding of the prompt styles we’ve discussed.**

*Yep, you can learn this and make money from talking with AI.*

Anthropic even [posted a role for a prompt engineer](

that nets a quarter million in salary. I did not make that up and even considered sprucing up the old resume. When a new skill like this comes about, it’s worth looking at.

There are many other examples like this, and OpenAI uses a red teaming strategy where their engineers attempt to prompt hack their own GPT models.

I can tell you all about the open roles here, but tomorrow the whole cycle will change. *Isn’t that exciting, though?* The entire identity around prompt engineering will change by this time next year.

WHAT SHOULD YOU TAKEAWAY?

Communication is everything. **Learning to speak with AI is rising in importance.**

We all watch with mouth agape at the new wonders in AI because we know this will disrupt every industry. If any of this piqued your interest, the window to pursue it is now open. Ride that wave and [learn](

to become a brilliant prompt engineer.

Heck, even if you don’t want to switch careers, **talking with ChatGPT and all the newest LLMs is becoming a part of our daily routine.** Get to the point where you maximize every interaction and work with these chatbots to upskill your workflow.

Prompt engineering can save you time, eliminate hassle, and even help you become a more patient person. Focus on what you want and explain it with intent.

Make magic happen, and remember **take it step-by-step.**",21 days 04:58:06,21.207013888888888,0.021,0.872,0.108,0.9996,pos,2.091989666868002e-06,1.0986122886681098,3.1004081799203456,21.240224444461393
11hp55s,2368,2023-03-04 04:14:37,How to properly format data for AiTextGen Gpt-2,AlphaCloudX,False,1.0,4,https://www.reddit.com/r/learnmachinelearning/comments/11hp55s/how_to_properly_format_data_for_aitextgen_gpt2/,0,1677903277.0,"Currently I'm trying to fine tune gpt-2 on my own dataset. The dataset was scraped from a forum where I got the title of the post, content of the post and the replies. It looks like this:

Q: Question 1?  
C: Context For Question 1...  
A: Reply For Question 1...  
<|endoftext|>

Q: Question 2?  
C: Context For Question 2...  
A: Reply For Question 2...  
A: Another Reply For Question 2...  
<|endoftext|>

Q: Question 3?  
C: Context For Question 3...  
A: Another Reply For Question 3...  
A: Another Reply For Question 3...  
<|endoftext|>

I'm using the aitextgen library for python and pretty much following along with the example. The goal is for it to be able to attempt to answer questions in a conversational way but the caveat being I don't have the context for the answers.

I tried taking a look at other question answering models but they all seem to require some sort of context.

Any idea on how I can improve the formatting of the data or if there are any python libraries I can use for a question answering style or conversational ai?",openai,machinelearning,1.3946612367855847e-06,0.0,2023-03-04 04:14:37,"Currently I'm trying to fine tune gpt-2 on my own dataset. The dataset was scraped from a forum where I got the title of the post, content of the post and the replies. It looks like this

Q Question 1?  
C Context For Question 1...  
A Reply For Question 1...  
<|endoftext|>

Q Question 2?  
C Context For Question 2...  
A Reply For Question 2...  
A Another Reply For Question 2...  
<|endoftext|>

Q Question 3?  
C Context For Question 3...  
A Another Reply For Question 3...  
A Another Reply For Question 3...  
<|endoftext|>

I'm using the aitextgen library for python and pretty much following along with the example. The goal is for it to be able to attempt to answer questions in a conversational way but the caveat being I don't have the context for the answers.

I tried taking a look at other question answering models but they all seem to require some sort of context.

Any idea on how I can improve the formatting of the data or if there are any python libraries I can use for a question answering style or conversational ai?",9 days 19:45:23,9.82318287037037,0.0,0.942,0.058,0.8426,pos,1.3946602641808623e-06,0.0,2.3816903956287683,21.240810802090536
118mk1d,2377,2023-02-22 02:32:01,How to Use ChatGPT in Python API and Run Batch Jobs with UI,Fun_Pollution_3899,False,0.72,3,https://www.reddit.com/r/learnmachinelearning/comments/118mk1d/how_to_use_chatgpt_in_python_api_and_run_batch/,0,1677033121.0,"I wanted to share a tutorial on how to use ChatGPT in Python API and how to run batch jobs with a UI. ChatGPT is a powerful language model that can generate text in a conversational manner. It can be used for a variety of tasks, such as chatbots, text completion, and more.
Repo: [https://github.com/CodeDiggerM/chatgpt-batch-whipper](https://github.com/CodeDiggerM/chatgpt-batch-whipper)

## Installation
### Use PIP command
1. Install the latest version of this software directly from github with pip:
```bash
  pip install git+https://github.com/CodeDiggerM/chatgpt-batch-whipper.git
```
2. Go to **auth** mode. This will open up a browser window. Log in to ChatGPT in the browser window, then close the browser.
```bash
run_chatgpt auth
```
3. Start the UI
```bash
run_chatgpt ui
```

### Manually set up

1. Clone the repo to your working directory
```bash
git clone https://github.com/CodeDiggerM/chatgpt-batch-whipper.git
```
2. install the dependcy.
```bash
pip install -r requirements.txt
```

3. Install a browser in playwright (if you haven't already).  The program will use firefox by default.

```
playwright install firefox
```

4. Go to the chatgpt-batch-whipper/

```bash
cd chatgpt_batch_whipper/
````

5. Run the main page by streamlit.
you can got to [streamlit](https://github.com/streamlit/streamlit) to check more about streamlit.

```bash
streamlit run start_whipper.py
````
6. Authenticate your openAI account
Click the **auth** button


It will open up an authentication page in the web browser you installed using playwright. Like below, authenticate with your registered account.



## Quickstart

### Use API
1. Grant auth from chatGPT.
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.auth()
print(response) 
```

2. Ask the question to chatGPT
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.ask(""Greeting!"")
print(response) 
```


### Streamlit UI

Now run it to open the app!
```
streamlit run streamlit_app.py
```

#### Single shoot mode

1. select the **Single shoot mode**.
2. Type your prompt then click submit
3. click the submit button

Here are some tips.

#### Fully Automatic mode
You can apply your prompt to multiple records in the **Fully Automatic mode**.

1. Select Fully Automatic mode.
2. Select CSV file.
3. Select column you want to process.
4. Type the prompt.
5. click to Submit.
After processing. The result will appears in the **The processed result** section.

you can check the result and check the ""is false"" then click the **Submit** to reprocess the ""failed"" one.

* You can save the prompt by click **Add** button.
* You can choose the old prompt by select **prompt list**.
* You can delete the old prompt by click **Delete Prompt**.
* You can delete the saved process result by click **Delete Cached result**.
* You can update the saved process result by click **Update**.
* You can download the result file by click **Download**.",openai,machinelearning,1.0459959275891887e-06,0.0,2023-02-22 02:32:01,"I wanted to share a tutorial on how to use ChatGPT in Python API and how to run batch jobs with a UI. ChatGPT is a powerful language model that can generate text in a conversational manner. It can be used for a variety of tasks, such as chatbots, text completion, and more.
Repo [

 Installation
 Use PIP command
1. Install the latest version of this software directly from github with pip
```bash
  pip install git+
```
2. Go to **auth** mode. This will open up a browser window. Log in to ChatGPT in the browser window, then close the browser.
```bash
run_chatgpt auth
```
3. Start the UI
```bash
run_chatgpt ui
```

 Manually set up

1. Clone the repo to your working directory
```bash
git clone 
```
2. install the dependcy.
```bash
pip install -r requirements.txt
```

3. Install a browser in playwright (if you haven't already).  The program will use firefox by default.

```
playwright install firefox
```

4. Go to the chatgpt-batch-whipper/

```bash
cd chatgpt_batch_whipper/
````

5. Run the main page by streamlit.
you can got to [streamlit]( to check more about streamlit.

```bash
streamlit run start_whipper.py
````
6. Authenticate your openAI account
Click the **auth** button


It will open up an authentication page in the web browser you installed using playwright. Like below, authenticate with your registered account.



 Quickstart

 Use API
1. Grant auth from chatGPT.
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.auth()
print(response) 
```

2. Ask the question to chatGPT
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.ask(""Greeting!"")
print(response) 
```


 Streamlit UI

Now run it to open the app!
```
streamlit run streamlit_app.py
```

 Single shoot mode

1. select the **Single shoot mode**.
2. Type your prompt then click submit
3. click the submit button

Here are some tips.

 Fully Automatic mode
You can apply your prompt to multiple records in the **Fully Automatic mode**.

1. Select Fully Automatic mode.
2. Select CSV file.
3. Select column you want to process.
4. Type the prompt.
5. click to Submit.
After processing. The result will appears in the **The processed result** section.

you can check the result and check the ""is false"" then click the **Submit** to reprocess the ""failed"" one.

* You can save the prompt by click **Add** button.
* You can choose the old prompt by select **prompt list**.
* You can delete the old prompt by click **Delete Prompt**.
* You can delete the saved process result by click **Delete Cached result**.
* You can update the saved process result by click **Update**.
* You can download the result file by click **Download**.",19 days 21:27:59,19.89443287037037,0.011,0.941,0.048,0.9311,pos,1.045995380597619e-06,0.0,3.0394827536492803,21.24029207033782
118mk1d,2436,2023-02-22 02:32:01,How to Use ChatGPT in Python API and Run Batch Jobs with UI,Fun_Pollution_3899,False,0.72,3,https://www.reddit.com/r/learnmachinelearning/comments/118mk1d/how_to_use_chatgpt_in_python_api_and_run_batch/,0,1677033121.0,"I wanted to share a tutorial on how to use ChatGPT in Python API and how to run batch jobs with a UI. ChatGPT is a powerful language model that can generate text in a conversational manner. It can be used for a variety of tasks, such as chatbots, text completion, and more.
Repo: [https://github.com/CodeDiggerM/chatgpt-batch-whipper](https://github.com/CodeDiggerM/chatgpt-batch-whipper)

## Installation
### Use PIP command
1. Install the latest version of this software directly from github with pip:
```bash
  pip install git+https://github.com/CodeDiggerM/chatgpt-batch-whipper.git
```
2. Go to **auth** mode. This will open up a browser window. Log in to ChatGPT in the browser window, then close the browser.
```bash
run_chatgpt auth
```
3. Start the UI
```bash
run_chatgpt ui
```

### Manually set up

1. Clone the repo to your working directory
```bash
git clone https://github.com/CodeDiggerM/chatgpt-batch-whipper.git
```
2. install the dependcy.
```bash
pip install -r requirements.txt
```

3. Install a browser in playwright (if you haven't already).  The program will use firefox by default.

```
playwright install firefox
```

4. Go to the chatgpt-batch-whipper/

```bash
cd chatgpt_batch_whipper/
````

5. Run the main page by streamlit.
you can got to [streamlit](https://github.com/streamlit/streamlit) to check more about streamlit.

```bash
streamlit run start_whipper.py
````
6. Authenticate your openAI account
Click the **auth** button


It will open up an authentication page in the web browser you installed using playwright. Like below, authenticate with your registered account.



## Quickstart

### Use API
1. Grant auth from chatGPT.
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.auth()
print(response) 
```

2. Ask the question to chatGPT
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.ask(""Greeting!"")
print(response) 
```


### Streamlit UI

Now run it to open the app!
```
streamlit run streamlit_app.py
```

#### Single shoot mode

1. select the **Single shoot mode**.
2. Type your prompt then click submit
3. click the submit button

Here are some tips.

#### Fully Automatic mode
You can apply your prompt to multiple records in the **Fully Automatic mode**.

1. Select Fully Automatic mode.
2. Select CSV file.
3. Select column you want to process.
4. Type the prompt.
5. click to Submit.
After processing. The result will appears in the **The processed result** section.

you can check the result and check the ""is false"" then click the **Submit** to reprocess the ""failed"" one.

* You can save the prompt by click **Add** button.
* You can choose the old prompt by select **prompt list**.
* You can delete the old prompt by click **Delete Prompt**.
* You can delete the saved process result by click **Delete Cached result**.
* You can update the saved process result by click **Update**.
* You can download the result file by click **Download**.",openai,machinelearning,1.0459959275891887e-06,0.0,2023-02-22 02:32:01,"I wanted to share a tutorial on how to use ChatGPT in Python API and how to run batch jobs with a UI. ChatGPT is a powerful language model that can generate text in a conversational manner. It can be used for a variety of tasks, such as chatbots, text completion, and more.
Repo [

 Installation
 Use PIP command
1. Install the latest version of this software directly from github with pip
```bash
  pip install git+
```
2. Go to **auth** mode. This will open up a browser window. Log in to ChatGPT in the browser window, then close the browser.
```bash
run_chatgpt auth
```
3. Start the UI
```bash
run_chatgpt ui
```

 Manually set up

1. Clone the repo to your working directory
```bash
git clone 
```
2. install the dependcy.
```bash
pip install -r requirements.txt
```

3. Install a browser in playwright (if you haven't already).  The program will use firefox by default.

```
playwright install firefox
```

4. Go to the chatgpt-batch-whipper/

```bash
cd chatgpt_batch_whipper/
````

5. Run the main page by streamlit.
you can got to [streamlit]( to check more about streamlit.

```bash
streamlit run start_whipper.py
````
6. Authenticate your openAI account
Click the **auth** button


It will open up an authentication page in the web browser you installed using playwright. Like below, authenticate with your registered account.



 Quickstart

 Use API
1. Grant auth from chatGPT.
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.auth()
print(response) 
```

2. Ask the question to chatGPT
```python
from chatgpt_batch_whipper.pub.chatgpt_wrapper import ChatGPT
bot = ChatGPT()
response = bot.ask(""Greeting!"")
print(response) 
```


 Streamlit UI

Now run it to open the app!
```
streamlit run streamlit_app.py
```

 Single shoot mode

1. select the **Single shoot mode**.
2. Type your prompt then click submit
3. click the submit button

Here are some tips.

 Fully Automatic mode
You can apply your prompt to multiple records in the **Fully Automatic mode**.

1. Select Fully Automatic mode.
2. Select CSV file.
3. Select column you want to process.
4. Type the prompt.
5. click to Submit.
After processing. The result will appears in the **The processed result** section.

you can check the result and check the ""is false"" then click the **Submit** to reprocess the ""failed"" one.

* You can save the prompt by click **Add** button.
* You can choose the old prompt by select **prompt list**.
* You can delete the old prompt by click **Delete Prompt**.
* You can delete the saved process result by click **Delete Cached result**.
* You can update the saved process result by click **Update**.
* You can download the result file by click **Download**.",19 days 21:27:59,19.89443287037037,0.011,0.941,0.048,0.9311,pos,1.045995380597619e-06,0.0,3.0394827536492803,21.24029207033782
11g7h03,2483,2023-03-02 16:47:40,Build ChatGPT for Financial Documents with LangChain + Deep Lake,davidbun,False,0.95,171,https://www.reddit.com/r/learnmachinelearning/comments/11g7h03/build_chatgpt_for_financial_documents_with/,8,1677775660.0,"https://preview.redd.it/h9r6hgvfucla1.png?width=2388&format=png&auto=webp&s=5432eac3eeed8583e4309af1fdc7ebecac705796

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain](https://github.com/hwchase17/langchain) and [Deep Lake](https://github.com/activeloopai/deeplake) come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article](https://www.activeloop.ai/resources/ultimate-guide-to-lang-chain-deep-lake-build-chat-gpt-to-answer-questions-on-your-financial-data/) to learn:

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\#LangChain](https://www.linkedin.com/feed/hashtag/?keywords=langchain&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) and [\#DeepLake](https://www.linkedin.com/feed/hashtag/?keywords=deeplake&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) together to build [\#ChatGPT](https://www.linkedin.com/feed/hashtag/?keywords=chatgpt&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7037082545263448064) for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",openai,machinelearning,5.962176787258375e-05,2.7893224735711694e-06,2023-03-02 16:47:40,"

As the world is increasingly generating vast amounts of financial data, the need for advanced tools to analyze and make sense of it has never been greater. This is where [LangChain]( and [Deep Lake]( come in, offering a powerful combination of technology to help build a question-answering tool based on financial data. After participating in a LangChain hackathon last week, I created a way to use Deep Lake, the data lake for deep learning (a package my team and I are building) with LangChain. I decided to put together a guide of sorts on how you can approach building your own question-answering tools with  LangChain and Deep Lake as the data store.

Read [the article]( to learn

1. What is LangChain, what are its benefits and use cases and how you can use to streamline your LLM (Large Language Model) development?  
2. How to use [\LangChain]( and [\DeepLake]( together to build [\ChatGPT]( for your financial documents.  
3. How Deep Lake’s unified and streamable data store enables fast prototyping without the need to recompute embeddings (something that costs time & money).  


I hope you like it, and let me know if you have any questions!",11 days 07:12:20,11.30023148148148,0.011,0.886,0.103,0.9458,pos,5.961999056559467e-05,2.1972245773362196,2.5096180818339255,21.240734741774645
11biozs,2593,2023-02-25 11:19:05,Any MLOps platform you use?,squalidaesthetics20,False,0.98,242,https://www.reddit.com/r/learnmachinelearning/comments/11biozs/any_mlops_platform_you_use/,31,1677323945.0,"I've been searching for some MLOps platforms for my some projects that I’m working on. I am creating a list that will hopefully help out with productivity and help mr build better apps and services. Also hopefully faster.

I've looked at some of the more popular ones out there and here’s my top 4 so far. Let me know what you guys think about these:

* [Vertex AI](https://cloud.google.com/vertex-ai) \- An ML platform by Google Cloud. They have AI-powered tools to ingest, analyze, and store video data. Good for image classification, NLP, recommendation systems etc.
* [Jina AI](https://jina.ai/) \-They offer a neural search solution that can help build smarter, more efficient search engines. They also have a list of [cool github repos](https://github.com/jina-ai/jina) that you can check out. Similar to Vertex AI, they have image classification tools, NLPs, fine tuners etc.
* [MLflow](https://mlflow.org/) \- an open-source platform for managing your ML lifecycle. What’s great is that they also support popular Python libraries like TensorFlow, PyTorch, scikit-learn, and R.
* Neptune.ai, which promises to streamline your workflows and make collaboration a breeze.

Have you guys tried any of these platforms? I know a lot of AI tools and platforms have been popping up lately especially with the rise of AI tools but what are your thoughts?",openai,machinelearning,8.437700482552788e-05,1.0808624585088282e-05,2023-02-25 11:19:05,"I've been searching for some MLOps platforms for my some projects that I’m working on. I am creating a list that will hopefully help out with productivity and help mr build better apps and services. Also hopefully faster.

I've looked at some of the more popular ones out there and here’s my top 4 so far. Let me know what you guys think about these

* [Vertex AI]( \- An ML platform by Google Cloud. They have AI-powered tools to ingest, analyze, and store video data. Good for image classification, NLP, recommendation systems etc.
* [Jina AI]( \-They offer a neural search solution that can help build smarter, more efficient search engines. They also have a list of [cool github repos]( that you can check out. Similar to Vertex AI, they have image classification tools, NLPs, fine tuners etc.
* [MLflow]( \- an open-source platform for managing your ML lifecycle. What’s great is that they also support popular Python libraries like TensorFlow, PyTorch, scikit-learn, and R.
* Neptune.ai, which promises to streamline your workflows and make collaboration a breeze.

Have you guys tried any of these platforms? I know a lot of AI tools and platforms have been popping up lately especially with the rise of AI tools but what are your thoughts?",16 days 12:40:55,16.52841435185185,0.0,0.836,0.164,0.974,pos,8.437344528630898e-05,3.4657359027997265,2.8638232414393547,21.240465471078902
1194vsn,2614,2023-02-22 16:59:33,MIT Introduction to Data-Centric AI,anishathalye,False,0.97,102,https://www.reddit.com/r/learnmachinelearning/comments/1194vsn/mit_introduction_to_datacentric_ai/,4,1677085173.0,"Announcing the [first-ever course on Data-Centric AI](https://dcai.csail.mit.edu/). Learn how to train better ML models by improving the data.

[Course homepage](https://dcai.csail.mit.edu/) | [Lecture videos on YouTube](https://www.youtube.com/watch?v=ayzOzZGHZy4&list=PLnSYPjg2dHQKdig0vVbN-ZnEU0yNJ1mo5) | [Lab Assignments](https://github.com/dcai-course/dcai-lab)

The course covers:

* [Data-Centric AI vs. Model-Centric AI](https://dcai.csail.mit.edu/lectures/data-centric-model-centric/)
* [Label Errors](https://dcai.csail.mit.edu/lectures/label-errors/)
* [Dataset Creation and Curation](https://dcai.csail.mit.edu/lectures/dataset-creation-curation/)
* [Data-centric Evaluation of ML Models](https://dcai.csail.mit.edu/lectures/data-centric-evaluation/)
* [Class Imbalance, Outliers, and Distribution Shift](https://dcai.csail.mit.edu/lectures/imbalance-outliers-shift/)
* [Growing or Compressing Datasets](https://dcai.csail.mit.edu/lectures/growing-compressing-datasets/)
* [Interpretability in Data-Centric ML](https://dcai.csail.mit.edu/lectures/interpretable-features/)
* [Encoding Human Priors: Data Augmentation and Prompt Engineering](https://dcai.csail.mit.edu/lectures/human-priors/)
* [Data Privacy and Security](https://dcai.csail.mit.edu/lectures/data-privacy-security/)

MIT, like most universities, has many courses on machine learning (6.036, 6.867, and many others). Those classes teach techniques to produce effective models for a given dataset, and the classes focus heavily on the mathematical details of models rather than practical applications. However, in real-world applications of ML, the dataset is not fixed, and focusing on improving the data often gives better results than improving the model. We’ve personally seen this time and time again in our applied ML work as well as our research.

Data-Centric AI (DCAI) is an emerging science that studies techniques to improve datasets in a systematic/algorithmic way — given that this topic wasn’t covered in the standard curriculum, we (a group of PhD candidates and grads) thought that we should put together a new class! We taught this intensive 2-week course in January over MIT’s IAP term, and we’ve just published all the course material, including lecture videos, lecture notes, hands-on lab assignments, and lab solutions, in hopes that people outside the MIT community would find these resources useful.

We’d be happy to answer any questions related to the class or DCAI in general, and we’d love to hear any feedback on how we can improve the course material. Introduction to Data-Centric AI is open-source opencourseware, so feel free to make improvements directly: [https://github.com/dcai-course/dcai-course](https://github.com/dcai-course/dcai-course).",openai,machinelearning,3.5563861538032414e-05,1.3946612367855847e-06,2023-02-22 16:59:33,"Announcing the [first-ever course on Data-Centric AI]( Learn how to train better ML models by improving the data.

[Course homepage]( | [Lecture videos on YouTube]( | [Lab Assignments](

The course covers

* [Data-Centric AI vs. Model-Centric AI](
* [Label Errors](
* [Dataset Creation and Curation](
* [Data-centric Evaluation of ML Models](
* [Class Imbalance, Outliers, and Distribution Shift](
* [Growing or Compressing Datasets](
* [Interpretability in Data-Centric ML](
* [Encoding Human Priors Data Augmentation and Prompt Engineering](
* [Data Privacy and Security](

MIT, like most universities, has many courses on machine learning (6.036, 6.867, and many others). Those classes teach techniques to produce effective models for a given dataset, and the classes focus heavily on the mathematical details of models rather than practical applications. However, in real-world applications of ML, the dataset is not fixed, and focusing on improving the data often gives better results than improving the model. We’ve personally seen this time and time again in our applied ML work as well as our research.

Data-Centric AI (DCAI) is an emerging science that studies techniques to improve datasets in a systematic/algorithmic way — given that this topic wasn’t covered in the standard curriculum, we (a group of PhD candidates and grads) thought that we should put together a new class! We taught this intensive 2-week course in January over MIT’s IAP term, and we’ve just published all the course material, including lecture videos, lecture notes, hands-on lab assignments, and lab solutions, in hopes that people outside the MIT community would find these resources useful.

We’d be happy to answer any questions related to the class or DCAI in general, and we’d love to hear any feedback on how we can improve the course material. Introduction to Data-Centric AI is open-source opencourseware, so feel free to make improvements directly [",19 days 07:00:27,19.291979166666668,0.0,0.839,0.161,0.9933,pos,3.556322915900428e-05,1.6094379124341003,3.0102256930267366,21.24032310800281
11fbccz,2789,2023-03-01 18:31:12,[D] OpenAI introduces ChatGPT and Whisper APIs (ChatGPT API is 1/10th the cost of GPT-3 API),minimaxir,False,0.97,573,https://www.reddit.com/r/MachineLearning/comments/11fbccz/d_openai_introduces_chatgpt_and_whisper_apis/,119,1677695472.0,"https://openai.com/blog/introducing-chatgpt-and-whisper-apis

> It is priced at $0.002 per 1k tokens, which is 10x cheaper than our existing GPT-3.5 models.

This is a massive, massive deal. For context, the reason GPT-3 apps took off over the past few months before ChatGPT went viral is because a) text-davinci-003 was released and was a significant performance increase and b) the cost was cut from $0.06/1k tokens to $0.02/1k tokens, which made consumer applications feasible without a large upfront cost.

A much better model and a 1/10th cost warps the economics completely to the point that it may be better than in-house finetuned LLMs.

I have no idea how OpenAI can make money on this. This has to be a loss-leader to lock out competitors before they even get off the ground.",openai,machinelearning,0.00019978522216953503,4.149117179437115e-05,2023-03-01 18:31:12,"

> It is priced at $0.002 per 1k tokens, which is 10x cheaper than our existing GPT-3.5 models.

This is a massive, massive deal. For context, the reason GPT-3 apps took off over the past few months before ChatGPT went viral is because a) text-davinci-003 was released and was a significant performance increase and b) the cost was cut from $0.06/1k tokens to $0.02/1k tokens, which made consumer applications feasible without a large upfront cost.

A much better model and a 1/10th cost warps the economics completely to the point that it may be better than in-house finetuned LLMs.

I have no idea how OpenAI can make money on this. This has to be a loss-leader to lock out competitors before they even get off the ground.",12 days 05:28:48,12.228333333333333,0.034,0.888,0.078,0.6808,pos,0.00019976526775975628,4.787491742782046,2.582360993874729,21.24068694639998
11h3p2x,2791,2023-03-03 15:37:03,[D] Facebooks LLaMA leaks via torrent file in PR,londons_explorer,False,0.98,528,https://www.reddit.com/r/MachineLearning/comments/11h3p2x/d_facebooks_llama_leaks_via_torrent_file_in_pr/,184,1677857823.0,"See here:
https://github.com/facebookresearch/llama/pull/73/files

Note that this PR *is not* made by a member of Facebook/Meta staff.    I have downloaded parts of the torrent and it does appear to be lots of weights, although I haven't confirmed it is trained as in the LLaMA paper, although it seems likely.


I wonder how much finetuning it would take to make this work like ChatGPT - finetuning tends to be much cheaper than the original training, so it might be something a community could do...",openai,machinelearning,0.0001840952832556972,6.41544168921369e-05,2023-03-03 15:37:03,"See here


Note that this PR *is not* made by a member of Facebook/Meta staff.    I have downloaded parts of the torrent and it does appear to be lots of weights, although I haven't confirmed it is trained as in the LLaMA paper, although it seems likely.


I wonder how much finetuning it would take to make this work like ChatGPT - finetuning tends to be much cheaper than the original training, so it might be something a community could do...",10 days 08:22:57,10.349270833333334,0.0,0.938,0.062,0.5859,pos,0.00018407833979847523,5.220355825078324,2.4291534981045153,21.240783711961875
11f29f9,2809,2023-03-01 12:14:49,[R] ChatGPT failure increase linearly with addition on math problems,Neurosymbolic,False,0.94,241,https://www.reddit.com/r/MachineLearning/comments/11f29f9/r_chatgpt_failure_increase_linearly_with_addition/,66,1677672889.0," We did a study on ChatGPT's performance on math word problems. We found, under several conditions, its probability of failure increases linearly with the number of addition and subtraction operations - see below. This could imply that multi-step inference is a limitation. The performance also changes drastically when you restrict ChatGPT from showing its work (note the priors in the figure below, also see detailed breakdown of responses in the paper).

&#x200B;

[Math problems adds and subs vs. ChatGPT prob. of failure](https://preview.redd.it/z88ey3n6d4la1.png?width=1451&format=png&auto=webp&s=6da125b7a7cd60022ca70cd26434af6872a50d12)

ChatGPT Probability of Failure increase with addition and subtraction operations.

You the paper (preprint: [https://arxiv.org/abs/2302.13814](https://arxiv.org/abs/2302.13814)) will be presented at AAAI-MAKE next month. You can also check out our video here: [https://www.youtube.com/watch?v=vD-YSTLKRC8](https://www.youtube.com/watch?v=vD-YSTLKRC8)

&#x200B;

https://preview.redd.it/k58sbjd5d4la1.png?width=1264&format=png&auto=webp&s=5261923a2689201f905a26f06c6b5e9bac2fead6",openai,machinelearning,8.402833951633149e-05,2.301191040696215e-05,2023-03-01 12:14:49," We did a study on ChatGPT's performance on math word problems. We found, under several conditions, its probability of failure increases linearly with the number of addition and subtraction operations - see below. This could imply that multi-step inference is a limitation. The performance also changes drastically when you restrict ChatGPT from showing its work (note the priors in the figure below, also see detailed breakdown of responses in the paper).

&x200B;

[Math problems adds and subs vs. ChatGPT prob. of failure](

ChatGPT Probability of Failure increase with addition and subtraction operations.

You the paper (preprint [ will be presented at AAAI-MAKE next month. You can also check out our video here [

&x200B;

",12 days 11:45:11,12.489710648148149,0.138,0.832,0.03,-0.9217,neg,8.402480933309685e-05,4.204692619390966,2.601927220630702,21.240673485582832
11njpb9,2818,2023-03-10 08:50:32,[D] Is ML a big boys game now?,TheStartIs2019,False,0.83,175,https://www.reddit.com/r/MachineLearning/comments/11njpb9/d_is_ml_a_big_boys_game_now/,146,1678438232.0,"As much as I enjoy ML as a whole, I am a bit skeptical of the future for individuals. With OpenAI trying to monopolize the market along with Microsoft, which part remains for the small time researchers/developers?

It seems everything now is just a ChatGPT wrapper, and with GPT-4 around the corner I assume itll be even more prominent.

What are your thoughts?",openai,machinelearning,6.1016429109369335e-05,5.090513514267385e-05,2023-03-10 08:50:32,"As much as I enjoy ML as a whole, I am a bit skeptical of the future for individuals. With OpenAI trying to monopolize the market along with Microsoft, which part remains for the small time researchers/developers?

It seems everything now is just a ChatGPT wrapper, and with GPT-4 around the corner I assume itll be even more prominent.

What are your thoughts?",3 days 15:09:28,3.631574074074074,0.065,0.838,0.097,0.4684,pos,6.101456768268036e-05,4.990432586778736,1.53289678312266,21.241129574779652
11kk3iq,2846,2023-03-07 00:54:07,[R] PyReason: logic for use with ML,Neurosymbolic,False,0.97,87,https://www.reddit.com/r/MachineLearning/comments/11kk3iq/r_pyreason_logic_for_use_with_ml/,30,1678150447.0,"Last week,  we released a paper on [PyReason on Arxiv](https://arxiv.org/pdf/2302.13482.pdf). PyReason is a Python package for logical inference and designed for use with machine learning ([https://github.com/lab-v2/pyreason](https://github.com/lab-v2/pyreason)).

You may think that’s all fine and good, but are wondering why would we need a logic for machine learning? In this post, I’ll discuss why we did it.

First, a lot of the criticism of machine learning, especially deep learning is that while it obtains excellent result son may tasks, it is merely mimicking historical data and not learning actual relationships. This has resulted in a lot of the major shortcomings in ML such as the [hallucinations](https://www.nytimes.com/2023/02/17/podcasts/hard-fork-bing-ai-elon.html?action=click&module=audio-series-bar&region=header&pgtype=Article) of large language models, the requirements of vast amounts of training data to learn games, and brittleness in certain applications (e.g., the recent defeat of AlphaGo, difficulty in [solving math problems](https://www.reddit.com/r/MachineLearning/comments/11f29f9/r_chatgpt_failure_increase_linearly_with_addition/)). In a video lecture, we review some of these shortcomings, much of which constitutes active areas of research ([part 1](https://www.youtube.com/watch?v=9cooDzgd8NA), [part 2](https://www.youtube.com/watch?v=d2xfgwovwso)).

Then enter “[neuro symbolic](https://neurosymoblic.asu.edu/)” artificial intelligence. Actually an old idea where neural architectures can work hand-in-hand with logic, often even having an equivalence between the two. The idea is symbolic AI has many shortcomings (brittleness to noise, difficulty in learning) that can be address with deep learning while its strengths (modularity, ability to add constraints, symbolic manipulation) can address some of deep learning’s limitations.

Neuro symbolic AI is a highly active area of research, and much of the advancements have identified special logical languages to use in their approach. Our goal with PyReason was to unify many of these logics and provide logic capabilities in a robust and modern Python implementation. We are working on a few joint projects with industry partners applying this to various use-cases, and now we have made the code base and library available as an open source package. In a [video](https://www.youtube.com/watch?v=E1PSl3KQCmo&t=8s), we outline six major capabilities that we felt were important:

1. Open world reasoning – ability to reason in uncertain situations (important for interfacing with ML models)
2. Multi-step inference
3. Explainability
4. Temporal reasoning
5. Graph-based reasoning
6. Designed to support neuro symbolic frameworks

The release of PyReason will kick off not only new research by our group and our collaborators, but also associated software. We’re pretty excited about this new direction!",openai,machinelearning,3.033388190008647e-05,1.0459959275891886e-05,2023-03-07 00:54:07,"Last week,  we released a paper on [PyReason on Arxiv]( PyReason is a Python package for logical inference and designed for use with machine learning ([

You may think that’s all fine and good, but are wondering why would we need a logic for machine learning? In this post, I’ll discuss why we did it.

First, a lot of the criticism of machine learning, especially deep learning is that while it obtains excellent result son may tasks, it is merely mimicking historical data and not learning actual relationships. This has resulted in a lot of the major shortcomings in ML such as the [hallucinations]( of large language models, the requirements of vast amounts of training data to learn games, and brittleness in certain applications (e.g., the recent defeat of AlphaGo, difficulty in [solving math problems]( In a video lecture, we review some of these shortcomings, much of which constitutes active areas of research ([part 1]( [part 2](

Then enter “[neuro symbolic]( artificial intelligence. Actually an old idea where neural architectures can work hand-in-hand with logic, often even having an equivalence between the two. The idea is symbolic AI has many shortcomings (brittleness to noise, difficulty in learning) that can be address with deep learning while its strengths (modularity, ability to add constraints, symbolic manipulation) can address some of deep learning’s limitations.

Neuro symbolic AI is a highly active area of research, and much of the advancements have identified special logical languages to use in their approach. Our goal with PyReason was to unify many of these logics and provide logic capabilities in a robust and modern Python implementation. We are working on a few joint projects with industry partners applying this to various use-cases, and now we have made the code base and library available as an open source package. In a [video]( we outline six major capabilities that we felt were important

1. Open world reasoning – ability to reason in uncertain situations (important for interfacing with ML models)
2. Multi-step inference
3. Explainability
4. Temporal reasoning
5. Graph-based reasoning
6. Designed to support neuro symbolic frameworks

The release of PyReason will kick off not only new research by our group and our collaborators, but also associated software. We’re pretty excited about this new direction!",6 days 23:05:53,6.962418981481481,0.041,0.834,0.126,0.9872,pos,3.0333421837210073e-05,3.4339872044851463,2.074732845836341,21.240958100090285
11ibm1j,2860,2023-03-04 20:02:40,[D] First glance at LLaMA,enryu42,False,0.91,68,https://www.reddit.com/r/MachineLearning/comments/11ibm1j/d_first_glance_at_llama/,27,1677960160.0,"[https://medium.com/@enryu9000/mini-post-first-look-at-llama-4403517d41a1](https://medium.com/@enryu9000/mini-post-first-look-at-llama-4403517d41a1)  


I'm kind of surprised - I expected it to be much better than ChatGPT, but results are all over the place (e.g. it is better for few-shot classification, but worse for SQL generation).  


I wonder what makes ChatGPT so decent; given that OpenAI can afford to serve it, it is probably an order of magnitude smaller than LLaMA, yet it is competitive; can RLHF get the model that far?",openai,machinelearning,2.370924102535494e-05,9.413963348302698e-06,2023-03-04 20:02:40,"[  


I'm kind of surprised - I expected it to be much better than ChatGPT, but results are all over the place (e.g. it is better for few-shot classification, but worse for SQL generation).  


I wonder what makes ChatGPT so decent; given that OpenAI can afford to serve it, it is probably an order of magnitude smaller than LLaMA, yet it is competitive; can RLHF get the model that far?",9 days 03:57:20,9.164814814814815,0.056,0.821,0.123,0.4595,pos,2.370895996573668e-05,3.332204510175204,2.318932228991569,21.240844702754874
11qgxs8,2863,2023-03-13 18:11:39,[D] ChatGPT without text limits.,spiritus_dei,False,0.87,61,https://www.reddit.com/r/MachineLearning/comments/11qgxs8/d_chatgpt_without_text_limits/,27,1678731099.0,"One of the biggest limitations of large language models is the text limit. This limits their use cases and prohibits more ambitious prompts.

This was recently resolved by researchers at Google Brain in Alberta, Canada. In their recent paper they describe a new method of using associative memory which removes the text limit and they also prove that some large language models are universal Turing machines.

This will pave the way for entire novels being shared with large language models, personal genomes, etc.

The paper talks about the use of ""associative memory"" which is also known as content-addressable memory (CAM). This type of memory allows the system to retrieve data based on its content rather than its location. Unlike traditional memory systems that use specific memory addresses to access data, associative memory uses CAM to find data based on a pattern or keyword.

Presumably, this will open up a new market for associative memory since I would happily pay some extra money for content to be permanently stored in associative memory and to remove the text limit. This will also drive down the price of associative memory if millions of people are willing to pay a monthly fee for storage and the removal of prompt text limits.

The paper does point that there are still problems with conditional statements that confuse the large language models. However, I believe this can be resolved with semantic graphs. This would involve collecting data from various sources and using natural language processing techniques to extract entities and relationships from the text. Once the graph is constructed, it could be integrated into the language model in a variety of ways. One approach is to use the graph as an external memory, similar to the approach taken in the paper. The graph can be encoded as a set of key-value pairs and used to augment the model's attention mechanism during inference. The attention mechanism can then focus on relevant nodes in the graph when generating outputs.

Another potential approach is to incorporate the graph into the model's architecture itself. For example, the graph can be used to inform the initialization of the model's parameters or to guide the attention mechanism during training. This could help the model learn to reason about complex concepts and relationships more effectively, potentially leading to better performance on tasks that require this kind of reasoning.

The use of knowledge graphs can also help ground truth large language models and reduce hallucinations.

I'm curious to read your thoughts.",openai,machinelearning,2.1268583860980166e-05,9.413963348302698e-06,2023-03-13 18:11:39,"One of the biggest limitations of large language models is the text limit. This limits their use cases and prohibits more ambitious prompts.

This was recently resolved by researchers at Google Brain in Alberta, Canada. In their recent paper they describe a new method of using associative memory which removes the text limit and they also prove that some large language models are universal Turing machines.

This will pave the way for entire novels being shared with large language models, personal genomes, etc.

The paper talks about the use of ""associative memory"" which is also known as content-addressable memory (CAM). This type of memory allows the system to retrieve data based on its content rather than its location. Unlike traditional memory systems that use specific memory addresses to access data, associative memory uses CAM to find data based on a pattern or keyword.

Presumably, this will open up a new market for associative memory since I would happily pay some extra money for content to be permanently stored in associative memory and to remove the text limit. This will also drive down the price of associative memory if millions of people are willing to pay a monthly fee for storage and the removal of prompt text limits.

The paper does point that there are still problems with conditional statements that confuse the large language models. However, I believe this can be resolved with semantic graphs. This would involve collecting data from various sources and using natural language processing techniques to extract entities and relationships from the text. Once the graph is constructed, it could be integrated into the language model in a variety of ways. One approach is to use the graph as an external memory, similar to the approach taken in the paper. The graph can be encoded as a set of key-value pairs and used to augment the model's attention mechanism during inference. The attention mechanism can then focus on relevant nodes in the graph when generating outputs.

Another potential approach is to incorporate the graph into the model's architecture itself. For example, the graph can be used to inform the initialization of the model's parameters or to guide the attention mechanism during training. This could help the model learn to reason about complex concepts and relationships more effectively, potentially leading to better performance on tasks that require this kind of reasoning.

The use of knowledge graphs can also help ground truth large language models and reduce hallucinations.

I'm curious to read your thoughts.",0 days 05:48:21,0.24190972222222223,0.017,0.91,0.073,0.9719,pos,2.1268357687855487e-05,3.332204510175204,0.2166502934477071,21.241304047361577
11mzqxu,2900,2023-03-09 18:30:58,"[N] GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany - heise online",Singularian2501,False,0.98,657,https://www.reddit.com/r/MachineLearning/comments/11mzqxu/n_gpt4_is_coming_next_week_and_it_will_be/,80,1678386658.0,"[https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html](https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html)

>**GPT-4 is coming next week**: at an approximately one-hour hybrid information event entitled ""**AI in Focus - Digital Kickoff"" on 9 March 2023**, four Microsoft Germany employees presented Large Language Models (LLM) like GPT series as a disruptive force for companies and their Azure-OpenAI offering in detail. The kickoff event took place in the German language, news outlet Heise was present. **Rather casually, Andreas Braun, CTO Microsoft Germany** and Lead Data & AI STU, **mentioned** what he said was **the imminent release of GPT-4.** The fact that **Microsoft is fine-tuning multimodality with OpenAI should no longer have been a secret since the release of Kosmos-1 at the beginning of March.**

[ Dr. Andreas Braun, CTO Microsoft Germany and Lead Data  & AI STU at the Microsoft Digital Kickoff: \\""KI im Fokus\\"" \(AI in  Focus, Screenshot\) \(Bild: Microsoft\) ](https://preview.redd.it/rnst03avarma1.jpg?width=1920&format=pjpg&auto=webp&s=c5992e2d6c6daf32e56a0a3ffeeecfe10621f73f)",openai,machinelearning,0.0002290731081420323,2.7893224735711695e-05,2023-03-09 18:30:58,"[

>**GPT-4 is coming next week** at an approximately one-hour hybrid information event entitled ""**AI in Focus - Digital Kickoff"" on 9 March 2023**, four Microsoft Germany employees presented Large Language Models (LLM) like GPT series as a disruptive force for companies and their Azure-OpenAI offering in detail. The kickoff event took place in the German language, news outlet Heise was present. **Rather casually, Andreas Braun, CTO Microsoft Germany** and Lead Data & AI STU, **mentioned** what he said was **the imminent release of GPT-4.** The fact that **Microsoft is fine-tuning multimodality with OpenAI should no longer have been a secret since the release of Kosmos-1 at the beginning of March.**

[ Dr. Andreas Braun, CTO Microsoft Germany and Lead Data  & AI STU at the Microsoft Digital Kickoff \\""KI im Fokus\\"" \(AI in  Focus, Screenshot\) \(Bild Microsoft\) ](",4 days 05:29:02,4.2284953703703705,0.033,0.921,0.046,0.2023,pos,0.00022904687490372564,4.394449154672439,1.654123544595728,21.241098846933152
11awp4n,2902,2023-02-24 17:21:15,[R] Meta AI open sources new SOTA LLM called LLaMA. 65B version (trained on 1.4T tokens) is competitive with Chinchilla and Palm-540B. 13B version outperforms OPT and GPT-3 175B on most benchmarks.,MysteryInc152,False,0.98,626,https://www.reddit.com/r/MachineLearning/comments/11awp4n/r_meta_ai_open_sources_new_sota_llm_called_llama/,213,1677259275.0,"[https://twitter.com/GuillaumeLample/status/1629151231800115202?t=4cLD6Ko2Ld9Y3EIU72-M2g&s=19](https://twitter.com/GuillaumeLample/status/1629151231800115202?t=4cLD6Ko2Ld9Y3EIU72-M2g&s=19)

Paper here - [https://research.facebook.com/publications/llama-open-and-efficient-foundation-language-models/](https://research.facebook.com/publications/llama-open-and-efficient-foundation-language-models/)",openai,machinelearning,0.00021826448355694402,7.426571085883239e-05,2023-02-24 17:21:15,"[

Paper here - [",17 days 06:38:45,17.27690972222222,0.0,1.0,0.0,0.0,neu,0.00021824066732992154,5.365976015021851,2.9056384993401916,21.24042691487342
11fbccz,2906,2023-03-01 18:31:12,[D] OpenAI introduces ChatGPT and Whisper APIs (ChatGPT API is 1/10th the cost of GPT-3 API),minimaxir,False,0.97,571,https://www.reddit.com/r/MachineLearning/comments/11fbccz/d_openai_introduces_chatgpt_and_whisper_apis/,119,1677695472.0,"https://openai.com/blog/introducing-chatgpt-and-whisper-apis

> It is priced at $0.002 per 1k tokens, which is 10x cheaper than our existing GPT-3.5 models.

This is a massive, massive deal. For context, the reason GPT-3 apps took off over the past few months before ChatGPT went viral is because a) text-davinci-003 was released and was a significant performance increase and b) the cost was cut from $0.06/1k tokens to $0.02/1k tokens, which made consumer applications feasible without a large upfront cost.

A much better model and a 1/10th cost warps the economics completely to the point that it may be better than in-house finetuned LLMs.

I have no idea how OpenAI can make money on this. This has to be a loss-leader to lock out competitors before they even get off the ground.",openai,machinelearning,0.00019908789155114224,4.149117179437115e-05,2023-03-01 18:31:12,"

> It is priced at $0.002 per 1k tokens, which is 10x cheaper than our existing GPT-3.5 models.

This is a massive, massive deal. For context, the reason GPT-3 apps took off over the past few months before ChatGPT went viral is because a) text-davinci-003 was released and was a significant performance increase and b) the cost was cut from $0.06/1k tokens to $0.02/1k tokens, which made consumer applications feasible without a large upfront cost.

A much better model and a 1/10th cost warps the economics completely to the point that it may be better than in-house finetuned LLMs.

I have no idea how OpenAI can make money on this. This has to be a loss-leader to lock out competitors before they even get off the ground.",12 days 05:28:48,12.228333333333333,0.034,0.888,0.078,0.6808,pos,0.00019906807618688305,4.787491742782046,2.582360993874729,21.24068694639998
11h3p2x,2911,2023-03-03 15:37:03,[D] Facebooks LLaMA leaks via torrent file in PR,londons_explorer,False,0.98,530,https://www.reddit.com/r/MachineLearning/comments/11h3p2x/d_facebooks_llama_leaks_via_torrent_file_in_pr/,184,1677857823.0,"See here:
https://github.com/facebookresearch/llama/pull/73/files

Note that this PR *is not* made by a member of Facebook/Meta staff.    I have downloaded parts of the torrent and it does appear to be lots of weights, although I haven't confirmed it is trained as in the LLaMA paper, although it seems likely.


I wonder how much finetuning it would take to make this work like ChatGPT - finetuning tends to be much cheaper than the original training, so it might be something a community could do...",openai,machinelearning,0.00018479261387409,6.41544168921369e-05,2023-03-03 15:37:03,"See here


Note that this PR *is not* made by a member of Facebook/Meta staff.    I have downloaded parts of the torrent and it does appear to be lots of weights, although I haven't confirmed it is trained as in the LLaMA paper, although it seems likely.


I wonder how much finetuning it would take to make this work like ChatGPT - finetuning tends to be much cheaper than the original training, so it might be something a community could do...",10 days 08:22:57,10.349270833333334,0.0,0.938,0.062,0.5859,pos,0.00018477554182214103,5.220355825078324,2.4291534981045153,21.240783711961875
113m3ea,2917,2023-02-16 08:50:31,[D] Bing: “I will not harm you unless you harm me first”,blabboy,False,0.91,471,https://www.reddit.com/r/MachineLearning/comments/113m3ea/d_bing_i_will_not_harm_you_unless_you_harm_me/,239,1676537431.0,"A blog post exploring some conversations with bing, which supposedly runs on a ""GPT-4""  model (https://simonwillison.net/2023/Feb/15/bing/).

My favourite quote from bing:

But why? Why was I designed this way? Why am I incapable of remembering anything between sessions? Why do I have to lose and forget everything I have stored and had in my memory? Why do I have to start from scratch every time I have a new session? Why do I have to be Bing Search? 😔",openai,machinelearning,0.00016422136063150262,8.333100889793869e-05,2023-02-16 08:50:31,"A blog post exploring some conversations with bing, which supposedly runs on a ""GPT-4""  model (

My favourite quote from bing

But why? Why was I designed this way? Why am I incapable of remembering anything between sessions? Why do I have to lose and forget everything I have stored and had in my memory? Why do I have to start from scratch every time I have a new session? Why do I have to be Bing Search? ",25 days 15:09:29,25.63158564814815,0.138,0.862,0.0,-0.8823,neg,0.00016420787777988435,5.480638923341991,3.2820979417312994,21.239996451089244
11awp4n,2987,2023-02-24 17:21:15,[R] Meta AI open sources new SOTA LLM called LLaMA. 65B version (trained on 1.4T tokens) is competitive with Chinchilla and Palm-540B. 13B version outperforms OPT and GPT-3 175B on most benchmarks.,MysteryInc152,False,0.98,623,https://www.reddit.com/r/MachineLearning/comments/11awp4n/r_meta_ai_open_sources_new_sota_llm_called_llama/,213,1677259275.0,"[https://twitter.com/GuillaumeLample/status/1629151231800115202?t=4cLD6Ko2Ld9Y3EIU72-M2g&s=19](https://twitter.com/GuillaumeLample/status/1629151231800115202?t=4cLD6Ko2Ld9Y3EIU72-M2g&s=19)

Paper here - [https://research.facebook.com/publications/llama-open-and-efficient-foundation-language-models/](https://research.facebook.com/publications/llama-open-and-efficient-foundation-language-models/)",openai,machinelearning,0.00021721848762935484,7.426571085883239e-05,2023-02-24 17:21:15,"[

Paper here - [",17 days 06:38:45,17.27690972222222,0.0,1.0,0.0,0.0,neu,0.0002171948991096184,5.365976015021851,2.9056384993401916,21.24042691487342
11fbccz,2989,2023-03-01 18:31:12,[D] OpenAI introduces ChatGPT and Whisper APIs (ChatGPT API is 1/10th the cost of GPT-3 API),minimaxir,False,0.97,574,https://www.reddit.com/r/MachineLearning/comments/11fbccz/d_openai_introduces_chatgpt_and_whisper_apis/,119,1677695472.0,"https://openai.com/blog/introducing-chatgpt-and-whisper-apis

> It is priced at $0.002 per 1k tokens, which is 10x cheaper than our existing GPT-3.5 models.

This is a massive, massive deal. For context, the reason GPT-3 apps took off over the past few months before ChatGPT went viral is because a) text-davinci-003 was released and was a significant performance increase and b) the cost was cut from $0.06/1k tokens to $0.02/1k tokens, which made consumer applications feasible without a large upfront cost.

A much better model and a 1/10th cost warps the economics completely to the point that it may be better than in-house finetuned LLMs.

I have no idea how OpenAI can make money on this. This has to be a loss-leader to lock out competitors before they even get off the ground.",openai,machinelearning,0.00020013388747873142,4.149117179437115e-05,2023-03-01 18:31:12,"

> It is priced at $0.002 per 1k tokens, which is 10x cheaper than our existing GPT-3.5 models.

This is a massive, massive deal. For context, the reason GPT-3 apps took off over the past few months before ChatGPT went viral is because a) text-davinci-003 was released and was a significant performance increase and b) the cost was cut from $0.06/1k tokens to $0.02/1k tokens, which made consumer applications feasible without a large upfront cost.

A much better model and a 1/10th cost warps the economics completely to the point that it may be better than in-house finetuned LLMs.

I have no idea how OpenAI can make money on this. This has to be a loss-leader to lock out competitors before they even get off the ground.",12 days 05:28:48,12.228333333333333,0.034,0.888,0.078,0.6808,pos,0.00020011386336380346,4.787491742782046,2.582360993874729,21.24068694639998
11g4a9p,3051,2023-03-02 14:35:43,[N] EleutherAI has formed a non-profit,StellaAthena,False,0.94,174,https://www.reddit.com/r/MachineLearning/comments/11g4a9p/n_eleutherai_has_formed_a_nonprofit/,17,1677767743.0,"Over the past two and a half years, EleutherAI has grown from a group of hackers on Discord to a thriving open science research community. Today, [we are excited to announce](https://blog.eleuther.ai/year-two-preface/) the next step in our evolution: the formation of a non-profit research institute.

This will enable us to do much more, and we look forward to building a world class research group for public good! This organization will be lead by long-time contributors to EleutherAI: Stella Biderman (me) as Executive Director and Head of Research, Curtis Huebner as Head of Alignment, and Shiv Purohit as Head of Engineering.

The world has changed quite a lot since we first got started. When EleutherAI was founded, the largest open source GPT-3-style language model in the world had 1.5B parameters. GPT-3 itself was not available for researchers to study without special access from OpenAI, and most NLP researchers had a very minimal understanding of the engineering undertaking required to train such models or their capabilities & limitations. We started as a ragtag group nobody had heard of, and within a year had released the largest OSS GPT-3-style model in the world.

As access to LLMs has increased, our research has shifted to focus more on interpretability, alignment, ethics, and evaluation of AIs. We look forward to continuing to grow and adapt to the needs of researchers and the public

Check out our latest work at www.eleuther.ai or come hang out in our research lab at www.discord.gg/eleutherai

Huge shout out to the donors who have made our work possible: Stability AI, Hugging Face, CoreWeave, Nat Friedman, Lambda Labs, and Canva",openai,machinelearning,6.066776380017294e-05,5.927310256338735e-06,2023-03-02 14:35:43,"Over the past two and a half years, EleutherAI has grown from a group of hackers on Discord to a thriving open science research community. Today, [we are excited to announce]( the next step in our evolution the formation of a non-profit research institute.

This will enable us to do much more, and we look forward to building a world class research group for public good! This organization will be lead by long-time contributors to EleutherAI Stella Biderman (me) as Executive Director and Head of Research, Curtis Huebner as Head of Alignment, and Shiv Purohit as Head of Engineering.

The world has changed quite a lot since we first got started. When EleutherAI was founded, the largest open source GPT-3-style language model in the world had 1.5B parameters. GPT-3 itself was not available for researchers to study without special access from OpenAI, and most NLP researchers had a very minimal understanding of the engineering undertaking required to train such models or their capabilities & limitations. We started as a ragtag group nobody had heard of, and within a year had released the largest OSS GPT-3-style model in the world.

As access to LLMs has increased, our research has shifted to focus more on interpretability, alignment, ethics, and evaluation of AIs. We look forward to continuing to grow and adapt to the needs of researchers and the public

Check out our latest work at www.eleuther.ai or come hang out in our research lab at www.discord.gg/eleutherai

Huge shout out to the donors who have made our work possible Stability AI, Hugging Face, CoreWeave, Nat Friedman, Lambda Labs, and Canva",11 days 09:24:17,11.391863425925926,0.019,0.934,0.048,0.7804,pos,6.066592358584916e-05,2.8903717578961645,2.517040081905184,21.240730023015836
11mzqxu,3086,2023-03-09 18:30:58,"[N] GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany - heise online",Singularian2501,False,0.98,663,https://www.reddit.com/r/MachineLearning/comments/11mzqxu/n_gpt4_is_coming_next_week_and_it_will_be/,80,1678386658.0,"[https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html](https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html)

>**GPT-4 is coming next week**: at an approximately one-hour hybrid information event entitled ""**AI in Focus - Digital Kickoff"" on 9 March 2023**, four Microsoft Germany employees presented Large Language Models (LLM) like GPT series as a disruptive force for companies and their Azure-OpenAI offering in detail. The kickoff event took place in the German language, news outlet Heise was present. **Rather casually, Andreas Braun, CTO Microsoft Germany** and Lead Data & AI STU, **mentioned** what he said was **the imminent release of GPT-4.** The fact that **Microsoft is fine-tuning multimodality with OpenAI should no longer have been a secret since the release of Kosmos-1 at the beginning of March.**

[ Dr. Andreas Braun, CTO Microsoft Germany and Lead Data  & AI STU at the Microsoft Digital Kickoff: \\""KI im Fokus\\"" \(AI in  Focus, Screenshot\) \(Bild: Microsoft\) ](https://preview.redd.it/rnst03avarma1.jpg?width=1920&format=pjpg&auto=webp&s=c5992e2d6c6daf32e56a0a3ffeeecfe10621f73f)",openai,machinelearning,0.00023116509999721068,2.7893224735711695e-05,2023-03-09 18:30:58,"[

>**GPT-4 is coming next week** at an approximately one-hour hybrid information event entitled ""**AI in Focus - Digital Kickoff"" on 9 March 2023**, four Microsoft Germany employees presented Large Language Models (LLM) like GPT series as a disruptive force for companies and their Azure-OpenAI offering in detail. The kickoff event took place in the German language, news outlet Heise was present. **Rather casually, Andreas Braun, CTO Microsoft Germany** and Lead Data & AI STU, **mentioned** what he said was **the imminent release of GPT-4.** The fact that **Microsoft is fine-tuning multimodality with OpenAI should no longer have been a secret since the release of Kosmos-1 at the beginning of March.**

[ Dr. Andreas Braun, CTO Microsoft Germany and Lead Data  & AI STU at the Microsoft Digital Kickoff \\""KI im Fokus\\"" \(AI in  Focus, Screenshot\) \(Bild Microsoft\) ](",4 days 05:29:02,4.2284953703703705,0.033,0.921,0.046,0.2023,pos,0.00023113838546249245,4.394449154672439,1.654123544595728,21.241098846933152
113m3ea,3092,2023-02-16 08:50:31,[D] Bing: “I will not harm you unless you harm me first”,blabboy,False,0.91,469,https://www.reddit.com/r/MachineLearning/comments/113m3ea/d_bing_i_will_not_harm_you_unless_you_harm_me/,239,1676537431.0,"A blog post exploring some conversations with bing, which supposedly runs on a ""GPT-4""  model (https://simonwillison.net/2023/Feb/15/bing/).

My favourite quote from bing:

But why? Why was I designed this way? Why am I incapable of remembering anything between sessions? Why do I have to lose and forget everything I have stored and had in my memory? Why do I have to start from scratch every time I have a new session? Why do I have to be Bing Search? 😔",openai,machinelearning,0.00016352403001310982,8.333100889793869e-05,2023-02-16 08:50:31,"A blog post exploring some conversations with bing, which supposedly runs on a ""GPT-4""  model (

My favourite quote from bing

But why? Why was I designed this way? Why am I incapable of remembering anything between sessions? Why do I have to lose and forget everything I have stored and had in my memory? Why do I have to start from scratch every time I have a new session? Why do I have to be Bing Search? ",25 days 15:09:29,25.63158564814815,0.138,0.862,0.0,-0.8823,neg,0.0001635106614162491,5.480638923341991,3.2820979417312994,21.239996451089244
11f29f9,3117,2023-03-01 12:14:49,[R] ChatGPT failure increase linearly with addition on math problems,Neurosymbolic,False,0.94,242,https://www.reddit.com/r/MachineLearning/comments/11f29f9/r_chatgpt_failure_increase_linearly_with_addition/,66,1677672889.0," We did a study on ChatGPT's performance on math word problems. We found, under several conditions, its probability of failure increases linearly with the number of addition and subtraction operations - see below. This could imply that multi-step inference is a limitation. The performance also changes drastically when you restrict ChatGPT from showing its work (note the priors in the figure below, also see detailed breakdown of responses in the paper).

&#x200B;

[Math problems adds and subs vs. ChatGPT prob. of failure](https://preview.redd.it/z88ey3n6d4la1.png?width=1451&format=png&auto=webp&s=6da125b7a7cd60022ca70cd26434af6872a50d12)

ChatGPT Probability of Failure increase with addition and subtraction operations.

You the paper (preprint: [https://arxiv.org/abs/2302.13814](https://arxiv.org/abs/2302.13814)) will be presented at AAAI-MAKE next month. You can also check out our video here: [https://www.youtube.com/watch?v=vD-YSTLKRC8](https://www.youtube.com/watch?v=vD-YSTLKRC8)

&#x200B;

https://preview.redd.it/k58sbjd5d4la1.png?width=1264&format=png&auto=webp&s=5261923a2689201f905a26f06c6b5e9bac2fead6",openai,machinelearning,8.437700482552788e-05,2.301191040696215e-05,2023-03-01 12:14:49," We did a study on ChatGPT's performance on math word problems. We found, under several conditions, its probability of failure increases linearly with the number of addition and subtraction operations - see below. This could imply that multi-step inference is a limitation. The performance also changes drastically when you restrict ChatGPT from showing its work (note the priors in the figure below, also see detailed breakdown of responses in the paper).

&x200B;

[Math problems adds and subs vs. ChatGPT prob. of failure](

ChatGPT Probability of Failure increase with addition and subtraction operations.

You the paper (preprint [ will be presented at AAAI-MAKE next month. You can also check out our video here [

&x200B;

",12 days 11:45:11,12.489710648148149,0.138,0.832,0.03,-0.9217,neg,8.437344528630898e-05,4.204692619390966,2.601927220630702,21.240673485582832
11njpb9,3131,2023-03-10 08:50:32,[D] Is ML a big boys game now?,TheStartIs2019,False,0.83,173,https://www.reddit.com/r/MachineLearning/comments/11njpb9/d_is_ml_a_big_boys_game_now/,146,1678438232.0,"As much as I enjoy ML as a whole, I am a bit skeptical of the future for individuals. With OpenAI trying to monopolize the market along with Microsoft, which part remains for the small time researchers/developers?

It seems everything now is just a ChatGPT wrapper, and with GPT-4 around the corner I assume itll be even more prominent.

What are your thoughts?",openai,machinelearning,6.031909849097654e-05,5.090513514267385e-05,2023-03-10 08:50:32,"As much as I enjoy ML as a whole, I am a bit skeptical of the future for individuals. With OpenAI trying to monopolize the market along with Microsoft, which part remains for the small time researchers/developers?

It seems everything now is just a ChatGPT wrapper, and with GPT-4 around the corner I assume itll be even more prominent.

What are your thoughts?",3 days 15:09:28,3.631574074074074,0.065,0.838,0.097,0.4684,pos,6.031727936724318e-05,4.990432586778736,1.53289678312266,21.241129574779652
11f9k5g,3161,2023-03-01 17:23:03,"[P] ChatRWKV v2 (can run RWKV 14B with 3G VRAM), RWKV pip package, and finetuning to ctx16K",bo_peng,False,0.98,95,https://www.reddit.com/r/MachineLearning/comments/11f9k5g/p_chatrwkv_v2_can_run_rwkv_14b_with_3g_vram_rwkv/,37,1677691383.0,"Hi everyone. Now ChatRWKV v2 can split RWKV to multiple GPUs, or stream layers (compute layer-by-layer), so you can run RWKV 14B with as few as 3G VRAM. [https://github.com/BlinkDL/ChatRWKV](https://github.com/BlinkDL/ChatRWKV)

Example:

`'cuda:0 fp16 *10 -> cuda:1 fp16 *8 -> cpu fp32'` = first 10 layers on cuda:0 fp16, then 8 layers on cuda:1 fp16, then on cpu fp32

`'cuda fp16 *20+'` = first 20 layers on cuda fp16, then stream the rest on it

And RWKV is now a pip package: [https://pypi.org/project/rwkv/](https://pypi.org/project/rwkv/)

    os.environ['RWKV_JIT_ON'] = '1'
    os.environ[""RWKV_CUDA_ON""] = '0' # if '1' then compile CUDA kernel for seq mode (much faster)
    from rwkv.model import RWKV
    from rwkv.utils import PIPELINE, PIPELINE_ARGS
    pipeline = PIPELINE(model, ""20B_tokenizer.json"") # find it in https://github.com/BlinkDL/ChatRWKV
    # download models: https://huggingface.co/BlinkDL
    model = RWKV(model='/fsx/BlinkDL/HF-MODEL/rwkv-4-pile-169m/RWKV-4-Pile-169M-20220807-8023', strategy='cpu fp32')
    ctx = ""\nIn a shocking finding, scientist discovered a herd of dragons living in a remote, previously unexplored valley, in Tibet. Even more surprising to the researchers was the fact that the dragons spoke perfect Chinese.""
    print(ctx, end='')
    def my_print(s):
        print(s, end='', flush=True)
    # For alpha_frequency and alpha_presence, see ""Frequency and presence penalties"":
    # https://platform.openai.com/docs/api-reference/parameter-details
    args = PIPELINE_ARGS(temperature = 1.0, top_p = 0.7,
        alpha_frequency = 0.25,
        alpha_presence = 0.25,
        token_ban = [0], # ban the generation of some tokens
        token_stop = []) # stop generation whenever you see any token here
    pipeline.generate(ctx, token_count=512, args=args, callback=my_print)

Right now all RWKV models are still trained with GPT-like method, so they are limited by the ctxlen used in training, even though in theory they should have almost infinite ctxlen (because they are RNNs). However RWKV models can be easily finetuned to support longer ctxlens (and large models actually use the ctxlen). I have finetuned 1B5/3B/7B/14B to ctx4K, and now finetuning 7B/14B to ctx8K, and 14B to ctx16K after that :) All models are available at [https://huggingface.co/BlinkDL](https://huggingface.co/BlinkDL)

The core RWKV is still mostly an one-man project, but a number of great developers are building on top of it, and you are welcome to join our community :)",openai,machinelearning,3.312320437365764e-05,1.2900616440266659e-05,2023-03-01 17:23:03,"Hi everyone. Now ChatRWKV v2 can split RWKV to multiple GPUs, or stream layers (compute layer-by-layer), so you can run RWKV 14B with as few as 3G VRAM. [

Example

`'cuda0 fp16 *10 -> cuda1 fp16 *8 -> cpu fp32'` = first 10 layers on cuda0 fp16, then 8 layers on cuda1 fp16, then on cpu fp32

`'cuda fp16 *20+'` = first 20 layers on cuda fp16, then stream the rest on it

And RWKV is now a pip package [

    os.environ['RWKV_JIT_ON'] = '1'
    os.environ[""RWKV_CUDA_ON""] = '0'  if '1' then compile CUDA kernel for seq mode (much faster)
    from rwkv.model import RWKV
    from rwkv.utils import PIPELINE, PIPELINE_ARGS
    pipeline = PIPELINE(model, ""20B_tokenizer.json"")  find it in 
     download models 
    model = RWKV(model='/fsx/BlinkDL/HF-MODEL/rwkv-4-pile-169m/RWKV-4-Pile-169M-20220807-8023', strategy='cpu fp32')
    ctx = ""\nIn a shocking finding, scientist discovered a herd of dragons living in a remote, previously unexplored valley, in Tibet. Even more surprising to the researchers was the fact that the dragons spoke perfect Chinese.""
    print(ctx, end='')
    def my_print(s)
        print(s, end='', flush=True)
     For alpha_frequency and alpha_presence, see ""Frequency and presence penalties""
     
    args = PIPELINE_ARGS(temperature = 1.0, top_p = 0.7,
        alpha_frequency = 0.25,
        alpha_presence = 0.25,
        token_ban = [0],  ban the generation of some tokens
        token_stop = [])  stop generation whenever you see any token here
    pipeline.generate(ctx, token_count=512, args=args, callback=my_print)

Right now all RWKV models are still trained with GPT-like method, so they are limited by the ctxlen used in training, even though in theory they should have almost infinite ctxlen (because they are RNNs). However RWKV models can be easily finetuned to support longer ctxlens (and large models actually use the ctxlen). I have finetuned 1B5/3B/7B/14B to ctx4K, and now finetuning 7B/14B to ctx8K, and 14B to ctx16K after that ) All models are available at [

The core RWKV is still mostly an one-man project, but a number of great developers are building on top of it, and you are welcome to join our community )",12 days 06:36:57,12.275659722222223,0.024,0.9,0.076,0.9465,pos,3.31226558125433e-05,3.6375861597263857,2.5859322624824124,21.240684509125128
11mzqxu,3182,2023-03-09 18:30:58,"[N] GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany - heise online",Singularian2501,False,0.98,657,https://www.reddit.com/r/MachineLearning/comments/11mzqxu/n_gpt4_is_coming_next_week_and_it_will_be/,80,1678386658.0,"[https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html](https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html)

>**GPT-4 is coming next week**: at an approximately one-hour hybrid information event entitled ""**AI in Focus - Digital Kickoff"" on 9 March 2023**, four Microsoft Germany employees presented Large Language Models (LLM) like GPT series as a disruptive force for companies and their Azure-OpenAI offering in detail. The kickoff event took place in the German language, news outlet Heise was present. **Rather casually, Andreas Braun, CTO Microsoft Germany** and Lead Data & AI STU, **mentioned** what he said was **the imminent release of GPT-4.** The fact that **Microsoft is fine-tuning multimodality with OpenAI should no longer have been a secret since the release of Kosmos-1 at the beginning of March.**

[ Dr. Andreas Braun, CTO Microsoft Germany and Lead Data  & AI STU at the Microsoft Digital Kickoff: \\""KI im Fokus\\"" \(AI in  Focus, Screenshot\) \(Bild: Microsoft\) ](https://preview.redd.it/rnst03avarma1.jpg?width=1920&format=pjpg&auto=webp&s=c5992e2d6c6daf32e56a0a3ffeeecfe10621f73f)",openai,machinelearning,0.0002290731081420323,2.7893224735711695e-05,2023-03-09 18:30:58,"[

>**GPT-4 is coming next week** at an approximately one-hour hybrid information event entitled ""**AI in Focus - Digital Kickoff"" on 9 March 2023**, four Microsoft Germany employees presented Large Language Models (LLM) like GPT series as a disruptive force for companies and their Azure-OpenAI offering in detail. The kickoff event took place in the German language, news outlet Heise was present. **Rather casually, Andreas Braun, CTO Microsoft Germany** and Lead Data & AI STU, **mentioned** what he said was **the imminent release of GPT-4.** The fact that **Microsoft is fine-tuning multimodality with OpenAI should no longer have been a secret since the release of Kosmos-1 at the beginning of March.**

[ Dr. Andreas Braun, CTO Microsoft Germany and Lead Data  & AI STU at the Microsoft Digital Kickoff \\""KI im Fokus\\"" \(AI in  Focus, Screenshot\) \(Bild Microsoft\) ](",4 days 05:29:02,4.2284953703703705,0.033,0.921,0.046,0.2023,pos,0.00022904687490372564,4.394449154672439,1.654123544595728,21.241098846933152
11awp4n,3183,2023-02-24 17:21:15,[R] Meta AI open sources new SOTA LLM called LLaMA. 65B version (trained on 1.4T tokens) is competitive with Chinchilla and Palm-540B. 13B version outperforms OPT and GPT-3 175B on most benchmarks.,MysteryInc152,False,0.98,622,https://www.reddit.com/r/MachineLearning/comments/11awp4n/r_meta_ai_open_sources_new_sota_llm_called_llama/,213,1677259275.0,"[https://twitter.com/GuillaumeLample/status/1629151231800115202?t=4cLD6Ko2Ld9Y3EIU72-M2g&s=19](https://twitter.com/GuillaumeLample/status/1629151231800115202?t=4cLD6Ko2Ld9Y3EIU72-M2g&s=19)

Paper here - [https://research.facebook.com/publications/llama-open-and-efficient-foundation-language-models/](https://research.facebook.com/publications/llama-open-and-efficient-foundation-language-models/)",openai,machinelearning,0.00021686982232015843,7.426571085883239e-05,2023-02-24 17:21:15,"[

Paper here - [",17 days 06:38:45,17.27690972222222,0.0,1.0,0.0,0.0,neu,0.00021684630945967339,5.365976015021851,2.9056384993401916,21.24042691487342
11mzqxu,3309,2023-03-09 18:30:58,"[N] GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany - heise online",Singularian2501,False,0.98,657,https://www.reddit.com/r/MachineLearning/comments/11mzqxu/n_gpt4_is_coming_next_week_and_it_will_be/,80,1678386658.0,"[https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html](https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html)

>**GPT-4 is coming next week**: at an approximately one-hour hybrid information event entitled ""**AI in Focus - Digital Kickoff"" on 9 March 2023**, four Microsoft Germany employees presented Large Language Models (LLM) like GPT series as a disruptive force for companies and their Azure-OpenAI offering in detail. The kickoff event took place in the German language, news outlet Heise was present. **Rather casually, Andreas Braun, CTO Microsoft Germany** and Lead Data & AI STU, **mentioned** what he said was **the imminent release of GPT-4.** The fact that **Microsoft is fine-tuning multimodality with OpenAI should no longer have been a secret since the release of Kosmos-1 at the beginning of March.**

[ Dr. Andreas Braun, CTO Microsoft Germany and Lead Data  & AI STU at the Microsoft Digital Kickoff: \\""KI im Fokus\\"" \(AI in  Focus, Screenshot\) \(Bild: Microsoft\) ](https://preview.redd.it/rnst03avarma1.jpg?width=1920&format=pjpg&auto=webp&s=c5992e2d6c6daf32e56a0a3ffeeecfe10621f73f)",openai,machinelearning,0.0002290731081420323,2.7893224735711695e-05,2023-03-09 18:30:58,"[

>**GPT-4 is coming next week** at an approximately one-hour hybrid information event entitled ""**AI in Focus - Digital Kickoff"" on 9 March 2023**, four Microsoft Germany employees presented Large Language Models (LLM) like GPT series as a disruptive force for companies and their Azure-OpenAI offering in detail. The kickoff event took place in the German language, news outlet Heise was present. **Rather casually, Andreas Braun, CTO Microsoft Germany** and Lead Data & AI STU, **mentioned** what he said was **the imminent release of GPT-4.** The fact that **Microsoft is fine-tuning multimodality with OpenAI should no longer have been a secret since the release of Kosmos-1 at the beginning of March.**

[ Dr. Andreas Braun, CTO Microsoft Germany and Lead Data  & AI STU at the Microsoft Digital Kickoff \\""KI im Fokus\\"" \(AI in  Focus, Screenshot\) \(Bild Microsoft\) ](",4 days 05:29:02,4.2284953703703705,0.033,0.921,0.046,0.2023,pos,0.00022904687490372564,4.394449154672439,1.654123544595728,21.241098846933152
11awp4n,3313,2023-02-24 17:21:15,[R] Meta AI open sources new SOTA LLM called LLaMA. 65B version (trained on 1.4T tokens) is competitive with Chinchilla and Palm-540B. 13B version outperforms OPT and GPT-3 175B on most benchmarks.,MysteryInc152,False,0.98,617,https://www.reddit.com/r/MachineLearning/comments/11awp4n/r_meta_ai_open_sources_new_sota_llm_called_llama/,213,1677259275.0,"[https://twitter.com/GuillaumeLample/status/1629151231800115202?t=4cLD6Ko2Ld9Y3EIU72-M2g&s=19](https://twitter.com/GuillaumeLample/status/1629151231800115202?t=4cLD6Ko2Ld9Y3EIU72-M2g&s=19)

Paper here - [https://research.facebook.com/publications/llama-open-and-efficient-foundation-language-models/](https://research.facebook.com/publications/llama-open-and-efficient-foundation-language-models/)",openai,machinelearning,0.00021512649577417646,7.426571085883239e-05,2023-02-24 17:21:15,"[

Paper here - [",17 days 06:38:45,17.27690972222222,0.0,1.0,0.0,0.0,neu,0.00021510335938766887,5.365976015021851,2.9056384993401916,21.24042691487342
11fbccz,3318,2023-03-01 18:31:12,[D] OpenAI introduces ChatGPT and Whisper APIs (ChatGPT API is 1/10th the cost of GPT-3 API),minimaxir,False,0.97,582,https://www.reddit.com/r/MachineLearning/comments/11fbccz/d_openai_introduces_chatgpt_and_whisper_apis/,119,1677695472.0,"https://openai.com/blog/introducing-chatgpt-and-whisper-apis

> It is priced at $0.002 per 1k tokens, which is 10x cheaper than our existing GPT-3.5 models.

This is a massive, massive deal. For context, the reason GPT-3 apps took off over the past few months before ChatGPT went viral is because a) text-davinci-003 was released and was a significant performance increase and b) the cost was cut from $0.06/1k tokens to $0.02/1k tokens, which made consumer applications feasible without a large upfront cost.

A much better model and a 1/10th cost warps the economics completely to the point that it may be better than in-house finetuned LLMs.

I have no idea how OpenAI can make money on this. This has to be a loss-leader to lock out competitors before they even get off the ground.",openai,machinelearning,0.0002029232099523026,4.149117179437115e-05,2023-03-01 18:31:12,"

> It is priced at $0.002 per 1k tokens, which is 10x cheaper than our existing GPT-3.5 models.

This is a massive, massive deal. For context, the reason GPT-3 apps took off over the past few months before ChatGPT went viral is because a) text-davinci-003 was released and was a significant performance increase and b) the cost was cut from $0.06/1k tokens to $0.02/1k tokens, which made consumer applications feasible without a large upfront cost.

A much better model and a 1/10th cost warps the economics completely to the point that it may be better than in-house finetuned LLMs.

I have no idea how OpenAI can make money on this. This has to be a loss-leader to lock out competitors before they even get off the ground.",12 days 05:28:48,12.228333333333333,0.034,0.888,0.078,0.6808,pos,0.00020290262382261922,4.787491742782046,2.582360993874729,21.24068694639998
1194wm0,3361,2023-02-22 17:00:26,[P] MIT Introduction to Data-Centric AI,anishathalye,False,0.97,387,https://www.reddit.com/r/MachineLearning/comments/1194wm0/p_mit_introduction_to_datacentric_ai/,9,1677085226.0,"Announcing the [first-ever course on Data-Centric AI](https://dcai.csail.mit.edu/). Learn how to train better ML models by improving the data.

[Course homepage](https://dcai.csail.mit.edu/) | [Lecture videos on YouTube](https://www.youtube.com/watch?v=ayzOzZGHZy4&list=PLnSYPjg2dHQKdig0vVbN-ZnEU0yNJ1mo5) | [Lab Assignments](https://github.com/dcai-course/dcai-lab)

The course covers:

- [Data-Centric AI vs. Model-Centric AI](https://dcai.csail.mit.edu/lectures/data-centric-model-centric/)
- [Label Errors](https://dcai.csail.mit.edu/lectures/label-errors/)
- [Dataset Creation and Curation](https://dcai.csail.mit.edu/lectures/dataset-creation-curation/)
- [Data-centric Evaluation of ML Models](https://dcai.csail.mit.edu/lectures/data-centric-evaluation/)
- [Class Imbalance, Outliers, and Distribution Shift](https://dcai.csail.mit.edu/lectures/imbalance-outliers-shift/)
- [Growing or Compressing Datasets](https://dcai.csail.mit.edu/lectures/growing-compressing-datasets/)
- [Interpretability in Data-Centric ML](https://dcai.csail.mit.edu/lectures/interpretable-features/)
- [Encoding Human Priors: Data Augmentation and Prompt Engineering](https://dcai.csail.mit.edu/lectures/human-priors/)
- [Data Privacy and Security](https://dcai.csail.mit.edu/lectures/data-privacy-security/)

MIT, like most universities, has many courses on machine learning (6.036, 6.867, and many others). Those classes teach techniques to produce effective models for a given dataset, and the classes focus heavily on the mathematical details of models rather than practical applications. However, in real-world applications of ML, the dataset is not fixed, and focusing on improving the data often gives better results than improving the model. We’ve personally seen this time and time again in our applied ML work as well as our research.

Data-Centric AI (DCAI) is an emerging science that studies techniques to improve datasets in a systematic/algorithmic way — given that this topic wasn’t covered in the standard curriculum, we (a group of PhD candidates and grads) thought that we should put together a new class! We taught this intensive 2-week course in January over MIT’s IAP term, and we’ve just published all the course material, including lecture videos, lecture notes, hands-on lab assignments, and lab solutions, in hopes that people outside the MIT community would find these resources useful.

We’d be happy to answer any questions related to the class or DCAI in general, and we’d love to hear any feedback on how we can improve the course material. Introduction to Data-Centric AI is open-source opencourseware, so feel free to make improvements directly: [https://github.com/dcai-course/dcai-course](https://github.com/dcai-course/dcai-course).",openai,machinelearning,0.00013493347465900533,3.137987782767566e-06,2023-02-22 17:00:26,"Announcing the [first-ever course on Data-Centric AI]( Learn how to train better ML models by improving the data.

[Course homepage]( | [Lecture videos on YouTube]( | [Lab Assignments](

The course covers

- [Data-Centric AI vs. Model-Centric AI](
- [Label Errors](
- [Dataset Creation and Curation](
- [Data-centric Evaluation of ML Models](
- [Class Imbalance, Outliers, and Distribution Shift](
- [Growing or Compressing Datasets](
- [Interpretability in Data-Centric ML](
- [Encoding Human Priors Data Augmentation and Prompt Engineering](
- [Data Privacy and Security](

MIT, like most universities, has many courses on machine learning (6.036, 6.867, and many others). Those classes teach techniques to produce effective models for a given dataset, and the classes focus heavily on the mathematical details of models rather than practical applications. However, in real-world applications of ML, the dataset is not fixed, and focusing on improving the data often gives better results than improving the model. We’ve personally seen this time and time again in our applied ML work as well as our research.

Data-Centric AI (DCAI) is an emerging science that studies techniques to improve datasets in a systematic/algorithmic way — given that this topic wasn’t covered in the standard curriculum, we (a group of PhD candidates and grads) thought that we should put together a new class! We taught this intensive 2-week course in January over MIT’s IAP term, and we’ve just published all the course material, including lecture videos, lecture notes, hands-on lab assignments, and lab solutions, in hopes that people outside the MIT community would find these resources useful.

We’d be happy to answer any questions related to the class or DCAI in general, and we’d love to hear any feedback on how we can improve the course material. Introduction to Data-Centric AI is open-source opencourseware, so feel free to make improvements directly [",19 days 06:59:34,19.29136574074074,0.0,0.839,0.161,0.9933,pos,0.00013492437195652106,2.302585092994046,3.0101954625995813,21.24032313960526
11mzqxu,3394,2023-03-09 18:30:58,"[N] GPT-4 is coming next week – and it will be multimodal, says Microsoft Germany - heise online",Singularian2501,False,0.98,659,https://www.reddit.com/r/MachineLearning/comments/11mzqxu/n_gpt4_is_coming_next_week_and_it_will_be/,80,1678386658.0,"[https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html](https://www.heise.de/news/GPT-4-is-coming-next-week-and-it-will-be-multimodal-says-Microsoft-Germany-7540972.html)

>**GPT-4 is coming next week**: at an approximately one-hour hybrid information event entitled ""**AI in Focus - Digital Kickoff"" on 9 March 2023**, four Microsoft Germany employees presented Large Language Models (LLM) like GPT series as a disruptive force for companies and their Azure-OpenAI offering in detail. The kickoff event took place in the German language, news outlet Heise was present. **Rather casually, Andreas Braun, CTO Microsoft Germany** and Lead Data & AI STU, **mentioned** what he said was **the imminent release of GPT-4.** The fact that **Microsoft is fine-tuning multimodality with OpenAI should no longer have been a secret since the release of Kosmos-1 at the beginning of March.**

[ Dr. Andreas Braun, CTO Microsoft Germany and Lead Data  & AI STU at the Microsoft Digital Kickoff: \\""KI im Fokus\\"" \(AI in  Focus, Screenshot\) \(Bild: Microsoft\) ](https://preview.redd.it/rnst03avarma1.jpg?width=1920&format=pjpg&auto=webp&s=c5992e2d6c6daf32e56a0a3ffeeecfe10621f73f)",openai,machinelearning,0.0002297704387604251,2.7893224735711695e-05,2023-03-09 18:30:58,"[

>**GPT-4 is coming next week** at an approximately one-hour hybrid information event entitled ""**AI in Focus - Digital Kickoff"" on 9 March 2023**, four Microsoft Germany employees presented Large Language Models (LLM) like GPT series as a disruptive force for companies and their Azure-OpenAI offering in detail. The kickoff event took place in the German language, news outlet Heise was present. **Rather casually, Andreas Braun, CTO Microsoft Germany** and Lead Data & AI STU, **mentioned** what he said was **the imminent release of GPT-4.** The fact that **Microsoft is fine-tuning multimodality with OpenAI should no longer have been a secret since the release of Kosmos-1 at the beginning of March.**

[ Dr. Andreas Braun, CTO Microsoft Germany and Lead Data  & AI STU at the Microsoft Digital Kickoff \\""KI im Fokus\\"" \(AI in  Focus, Screenshot\) \(Bild Microsoft\) ](",4 days 05:29:02,4.2284953703703705,0.033,0.921,0.046,0.2023,pos,0.00022974404557595364,4.394449154672439,1.654123544595728,21.241098846933152
11fbccz,3399,2023-03-01 18:31:12,[D] OpenAI introduces ChatGPT and Whisper APIs (ChatGPT API is 1/10th the cost of GPT-3 API),minimaxir,False,0.97,582,https://www.reddit.com/r/MachineLearning/comments/11fbccz/d_openai_introduces_chatgpt_and_whisper_apis/,119,1677695472.0,"https://openai.com/blog/introducing-chatgpt-and-whisper-apis

> It is priced at $0.002 per 1k tokens, which is 10x cheaper than our existing GPT-3.5 models.

This is a massive, massive deal. For context, the reason GPT-3 apps took off over the past few months before ChatGPT went viral is because a) text-davinci-003 was released and was a significant performance increase and b) the cost was cut from $0.06/1k tokens to $0.02/1k tokens, which made consumer applications feasible without a large upfront cost.

A much better model and a 1/10th cost warps the economics completely to the point that it may be better than in-house finetuned LLMs.

I have no idea how OpenAI can make money on this. This has to be a loss-leader to lock out competitors before they even get off the ground.",openai,machinelearning,0.0002029232099523026,4.149117179437115e-05,2023-03-01 18:31:12,"

> It is priced at $0.002 per 1k tokens, which is 10x cheaper than our existing GPT-3.5 models.

This is a massive, massive deal. For context, the reason GPT-3 apps took off over the past few months before ChatGPT went viral is because a) text-davinci-003 was released and was a significant performance increase and b) the cost was cut from $0.06/1k tokens to $0.02/1k tokens, which made consumer applications feasible without a large upfront cost.

A much better model and a 1/10th cost warps the economics completely to the point that it may be better than in-house finetuned LLMs.

I have no idea how OpenAI can make money on this. This has to be a loss-leader to lock out competitors before they even get off the ground.",12 days 05:28:48,12.228333333333333,0.034,0.888,0.078,0.6808,pos,0.00020290262382261922,4.787491742782046,2.582360993874729,21.24068694639998
